
Klappe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00003652  000036e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000031f  00800168  00800168  0000374e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000374e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  000037c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001277a  00000000  00000000  00003fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d07  00000000  00000000  00016722  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c93  00000000  00000000  0001a429  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014ec  00000000  00000000  0001f0bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004329  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000063b5  00000000  00000000  000248d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  0002ac86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_1>
       8:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__vector_2>
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__vector_6>
      1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      24:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__vector_9>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      40:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_16>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      60:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__vector_24>
      64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	d2 01       	movw	r26, r4
      ba:	9f 04       	cpc	r9, r15
      bc:	c8 10       	cpse	r12, r8
      be:	fe 12       	cpse	r15, r30
      c0:	e3 15       	cp	r30, r3

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	11 e0       	ldi	r17, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e2 e5       	ldi	r30, 0x52	; 82
      d6:	f6 e3       	ldi	r31, 0x36	; 54
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a8 36       	cpi	r26, 0x68	; 104
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	24 e0       	ldi	r18, 0x04	; 4
      e6:	a8 e6       	ldi	r26, 0x68	; 104
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a7 38       	cpi	r26, 0x87	; 135
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>

000000f4 <__do_global_ctors>:
      f4:	10 e0       	ldi	r17, 0x00	; 0
      f6:	c1 e6       	ldi	r28, 0x61	; 97
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	04 c0       	rjmp	.+8      	; 0x104 <__do_global_ctors+0x10>
      fc:	21 97       	sbiw	r28, 0x01	; 1
      fe:	fe 01       	movw	r30, r28
     100:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__tablejump2__>
     104:	cc 35       	cpi	r28, 0x5C	; 92
     106:	d1 07       	cpc	r29, r17
     108:	c9 f7       	brne	.-14     	; 0xfc <__do_global_ctors+0x8>
     10a:	0e 94 8f 08 	call	0x111e	; 0x111e <main>
     10e:	0c 94 27 1b 	jmp	0x364e	; 0x364e <_exit>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>:
     *
     * Enter system state
     *
     * @param state New system state
     */
    void __inline__ enterSystemState(SYSTATE state)
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	1f 92       	push	r1
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	89 83       	std	Y+1, r24	; 0x01
    {
      // System state register -> id = 3
      regTable[3]->setData((uint8_t *) &state);
     122:	be 01       	movw	r22, r28
     124:	6f 5f       	subi	r22, 0xFF	; 255
     126:	7f 4f       	sbci	r23, 0xFF	; 255
     128:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <regTable+0x6>
     12c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <regTable+0x7>
     130:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN8REGISTER7setDataEPh>
    }
     134:	0f 90       	pop	r0
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <_ZN4SWAP11getRegisterEh.isra.1>:
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     13c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <regTableSize>
     140:	89 17       	cp	r24, r25
     142:	48 f4       	brcc	.+18     	; 0x156 <_ZN4SWAP11getRegisterEh.isra.1+0x1a>
        return regTable[regId];
     144:	e8 2f       	mov	r30, r24
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	ee 0f       	add	r30, r30
     14a:	ff 1f       	adc	r31, r31
     14c:	e8 5f       	subi	r30, 0xF8	; 248
     14e:	fe 4f       	sbci	r31, 0xFE	; 254
     150:	80 81       	ld	r24, Z
     152:	91 81       	ldd	r25, Z+1	; 0x01
     154:	08 95       	ret

      return NULL;
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
    }
     15a:	08 95       	ret

0000015c <setup>:
 * setup
 *
 * Arduino setup function
 */
void setup()
{
     15c:	cf 93       	push	r28
  uint8_t i;
  uint8_t rgc;

  //stateCode = STATE_INIT;	
  INIT_ONBOARD_LED();
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	84 e0       	ldi	r24, 0x04	; 4
     162:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <pinMode>
  digitalWrite(LED, HIGH);
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	84 e0       	ldi	r24, 0x04	; 4
     16a:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>
  while(!Serial);
  Serial.println(F("Modul Start!"));
#endif

  // Init SWAP stack
  swap.init();
     16e:	89 e7       	ldi	r24, 0x79	; 121
     170:	93 e0       	ldi	r25, 0x03	; 3
     172:	0e 94 af 12 	call	0x255e	; 0x255e <_ZN4SWAP4initEv>
 
  // Enter SYNC state
  swap.enterSystemState(SYSTATE_SYNC);
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
     17c:	c6 e0       	ldi	r28, 0x06	; 6
// During 3 seconds, listen the network for possible commands whilst the LED blinks
  for(i=0 ; i<6 ; i++)
  {
	digitalWrite(LED, HIGH);
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	84 e0       	ldi	r24, 0x04	; 4
     182:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>
	delay(50);
     186:	62 e3       	ldi	r22, 0x32	; 50
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
	digitalWrite(LED, LOW);
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	84 e0       	ldi	r24, 0x04	; 4
     196:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>
	delay(450);
     19a:	62 ec       	ldi	r22, 0xC2	; 194
     19c:	71 e0       	ldi	r23, 0x01	; 1
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
     1a6:	c1 50       	subi	r28, 0x01	; 1
  swap.init();
 
  // Enter SYNC state
  swap.enterSystemState(SYSTATE_SYNC);
// During 3 seconds, listen the network for possible commands whilst the LED blinks
  for(i=0 ; i<6 ; i++)
     1a8:	51 f7       	brne	.-44     	; 0x17e <setup+0x22>
  //swap.getRegister(REGI_PROCVOLTSUPPLY)->getData();
  //swap.getRegister(REGI_BATTVOLTSUPPLY)->getData();
  //swap.getRegister(REGI_SLEEP_MS)->getData(); 
  //swap.getRegister(REGI_LED1)->getData();    
  // attach Hall position sensor	  
  stateCode = STATE_DETECT_SENSOR_I2C;
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <stateCode>
  swap.getRegister(REGI_STATECODE)->getData();
     1b0:	8b e1       	ldi	r24, 0x1B	; 27
     1b2:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     1b6:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
  Wire.begin();  
     1ba:	82 ec       	ldi	r24, 0xC2	; 194
     1bc:	93 e0       	ldi	r25, 0x03	; 3
     1be:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7TwoWire5beginEv>
	else 
	{
#ifdef  USE_SERIAL_DEBUG			  
			  Serial.println(F("Can not detect magnet"));
#endif
	  stateCode = STATE_MAGNET_DETECT;
     1c2:	c2 e0       	ldi	r28, 0x02	; 2
  stateCode = STATE_DETECT_SENSOR_I2C;
  swap.getRegister(REGI_STATECODE)->getData();
  Wire.begin();  
  while(1)
  {
	if(ams5600.detectMagnet() == 1 ) 
     1c4:	88 e6       	ldi	r24, 0x68	; 104
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN8AMS_560012detectMagnetEv>
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	89 f4       	brne	.+34     	; 0x1f2 <setup+0x96>
	{
	  stateCode = STATE_MAIN_LOOP;
     1d0:	83 e0       	ldi	r24, 0x03	; 3
     1d2:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <stateCode>
	  swap.getRegister(REGI_STATECODE)->getData();
     1d6:	8b e1       	ldi	r24, 0x1B	; 27
     1d8:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     1dc:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
	 panstamp.sleepSec(300); //sleep 5 minutes and try again
	 swap.systemState = SYSTATE_RXON;
   } // end while
  //swap.getRegister(REGI_AS5600_ANGLEDEG)->getData();
  //swap.getRegister(REGI_AS5600_MAGNETSTRENGTH)->getData();
  res = ams5600.setPowerMode(ams5600.POWER_MODE_LPM3);
     1e0:	63 e0       	ldi	r22, 0x03	; 3
     1e2:	88 e6       	ldi	r24, 0x68	; 104
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN8AMS_560012setPowerModeEh>
     1ea:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <res>
  if (res == true)
	Serial.println(F("Set Powermode to LPM3 = 100ms"));
  Serial.println(F("Modul ready!"));
#endif
  // Transmit all register
  for (rgc=REGI_PRODUCTCODE; rgc<=REGI_SLEEP_MS; rgc++)
     1ee:	c0 e0       	ldi	r28, 0x00	; 0
     1f0:	14 c0       	rjmp	.+40     	; 0x21a <setup+0xbe>
	else 
	{
#ifdef  USE_SERIAL_DEBUG			  
			  Serial.println(F("Can not detect magnet"));
#endif
	  stateCode = STATE_MAGNET_DETECT;
     1f2:	c0 93 98 01 	sts	0x0198, r28	; 0x800198 <stateCode>
	  swap.getRegister(REGI_STATECODE)->getData();
     1f6:	8b e1       	ldi	r24, 0x1B	; 27
     1f8:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     1fc:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
	}
	 swap.systemState = SYSTATE_RXOFF;
     200:	c0 93 7e 03 	sts	0x037E, r28	; 0x80037e <swap+0x5>
	 panstamp.sleepSec(300); //sleep 5 minutes and try again
     204:	41 e0       	ldi	r20, 0x01	; 1
     206:	6c e2       	ldi	r22, 0x2C	; 44
     208:	71 e0       	ldi	r23, 0x01	; 1
     20a:	8b e6       	ldi	r24, 0x6B	; 107
     20c:	93 e0       	ldi	r25, 0x03	; 3
     20e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZN8PANSTAMP8sleepSecEj6RTCSRC>
	 swap.systemState = SYSTATE_RXON;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <swap+0x5>
  //swap.getRegister(REGI_LED1)->getData();    
  // attach Hall position sensor	  
  stateCode = STATE_DETECT_SENSOR_I2C;
  swap.getRegister(REGI_STATECODE)->getData();
  Wire.begin();  
  while(1)
     218:	d5 cf       	rjmp	.-86     	; 0x1c4 <setup+0x68>
  Serial.println(F("Modul ready!"));
#endif
  // Transmit all register
  for (rgc=REGI_PRODUCTCODE; rgc<=REGI_SLEEP_MS; rgc++)
  {
	  swap.getRegister(rgc)->getData();
     21a:	8c 2f       	mov	r24, r28
     21c:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     220:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
	  delay(100);
     224:	64 e6       	ldi	r22, 0x64	; 100
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
  if (res == true)
	Serial.println(F("Set Powermode to LPM3 = 100ms"));
  Serial.println(F("Modul ready!"));
#endif
  // Transmit all register
  for (rgc=REGI_PRODUCTCODE; rgc<=REGI_SLEEP_MS; rgc++)
     230:	cf 5f       	subi	r28, 0xFF	; 255
     232:	cb 31       	cpi	r28, 0x1B	; 27
     234:	91 f7       	brne	.-28     	; 0x21a <setup+0xbe>
  {
	  swap.getRegister(rgc)->getData();
	  delay(100);
  }
}
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <loop>:
 *
 * Arduino main loop
 */

void loop()
{
     23a:	cf 93       	push	r28
	int16_t agcDiff;
	uint8_t pass;
	
		// receive possible set commands
		pass = false;
		if (msgcnt == 0) 
     23c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     240:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     244:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     248:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     24c:	89 2b       	or	r24, r25
     24e:	8a 2b       	or	r24, r26
     250:	8b 2b       	or	r24, r27
     252:	09 f0       	breq	.+2      	; 0x256 <loop+0x1c>
     254:	45 c0       	rjmp	.+138    	; 0x2e0 <loop+0xa6>
		{
			pass = true;
			msgcnt = SEND_STATE_MSG;
     256:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <sleepIntervall>
     25a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <sleepIntervall+0x1>
     25e:	88 ee       	ldi	r24, 0xE8	; 232
     260:	93 e0       	ldi	r25, 0x03	; 3
     262:	0e 94 88 1a 	call	0x3510	; 0x3510 <__udivmodhi4>
     266:	20 91 7f 03 	lds	r18, 0x037F	; 0x80037f <swap+0x6>
     26a:	30 91 80 03 	lds	r19, 0x0380	; 0x800380 <swap+0x7>
     26e:	62 9f       	mul	r22, r18
     270:	c0 01       	movw	r24, r0
     272:	63 9f       	mul	r22, r19
     274:	90 0d       	add	r25, r0
     276:	72 9f       	mul	r23, r18
     278:	90 0d       	add	r25, r0
     27a:	11 24       	eor	r1, r1
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     284:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     288:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     28c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		 radio.setPowerDownState();
	}
	
	inline bool setRadioON()
	{
		 radio.wakeUp();
     290:	8c e6       	ldi	r24, 0x6C	; 108
     292:	93 e0       	ldi	r25, 0x03	; 3
     294:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN6CC11016wakeUpEv>
		 // set system state to RF Rx ON
		 state = RXON;
     298:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <panstamp>
			panstamp.setRadioON();
			swap.enterSystemState(SYSTATE_RXON);  
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
			swap.getRegister(REGI_PROCVOLTSUPPLY)->getData(); 
     2a2:	8b e0       	ldi	r24, 0x0B	; 11
     2a4:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     2a8:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
			swap.getRegister(REGI_BATTVOLTSUPPLY)->getData();
     2ac:	8c e0       	ldi	r24, 0x0C	; 12
     2ae:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     2b2:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
			swap.getRegister(REGI_AS5600_ANGLEDEG)->getData();
     2b6:	81 e1       	ldi	r24, 0x11	; 17
     2b8:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     2bc:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
			swap.getRegister(REGI_AS5600_MAGNETSTRENGTH)->getData();
     2c0:	83 e1       	ldi	r24, 0x13	; 19
     2c2:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     2c6:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
			Serial.print(F("Magnet Strength: "));
			Serial.print(as5600_MagnetStrengthValue);
			Serial.print(F("  Grad: "));
			Serial.println(String(as5600_AngleValueDegActual,DEC));
#endif
			swap.enterSystemState(SYSTATE_SYNC); 
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
 			delay(2000); // wait for receive mesg
     2d0:	60 ed       	ldi	r22, 0xD0	; 208
     2d2:	77 e0       	ldi	r23, 0x07	; 7
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
	
		// receive possible set commands
		pass = false;
		if (msgcnt == 0) 
		{
			pass = true;
     2dc:	c1 e0       	ldi	r28, 0x01	; 1
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <loop+0xa8>
{
	int16_t agcDiff;
	uint8_t pass;
	
		// receive possible set commands
		pass = false;
     2e0:	c0 e0       	ldi	r28, 0x00	; 0
			Serial.println(String(as5600_AngleValueDegActual,DEC));
#endif
			swap.enterSystemState(SYSTATE_SYNC); 
 			delay(2000); // wait for receive mesg
		}
		msgcnt--;	
     2e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2ea:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2ee:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	a1 09       	sbc	r26, r1
     2f6:	b1 09       	sbc	r27, r1
     2f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     300:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     304:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		updAS5600_AngleValueDeg(0);
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	0e 94 98 02 	call	0x530	; 0x530 <_Z23updAS5600_AngleValueDegh>
		agcDiff = as5600_AngleValueDegActual - oldAngleValue;
     30e:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <as5600_AngleValueDegActual>
     312:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <as5600_AngleValueDegActual+0x1>
     316:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <oldAngleValue>
     31a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <oldAngleValue+0x1>
     31e:	28 1b       	sub	r18, r24
     320:	39 0b       	sbc	r19, r25
		if ((agcDiff < (led1[0] * -1)) || (agcDiff > led1[0]))  // there is really a change and not only a noise
     322:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <led1>
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	44 27       	eor	r20, r20
     32a:	55 27       	eor	r21, r21
     32c:	48 1b       	sub	r20, r24
     32e:	59 0b       	sbc	r21, r25
     330:	24 17       	cp	r18, r20
     332:	35 07       	cpc	r19, r21
     334:	1c f0       	brlt	.+6      	; 0x33c <loop+0x102>
     336:	82 17       	cp	r24, r18
     338:	93 07       	cpc	r25, r19
     33a:	cc f4       	brge	.+50     	; 0x36e <loop+0x134>
		{
		  if (pass == false) 
     33c:	c1 11       	cpse	r28, r1
     33e:	09 c0       	rjmp	.+18     	; 0x352 <loop+0x118>
		 radio.setPowerDownState();
	}
	
	inline bool setRadioON()
	{
		 radio.wakeUp();
     340:	8c e6       	ldi	r24, 0x6C	; 108
     342:	93 e0       	ldi	r25, 0x03	; 3
     344:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN6CC11016wakeUpEv>
		 // set system state to RF Rx ON
		 state = RXON;
     348:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <panstamp>
		  {
			  panstamp.setRadioON();
			  pass = true;
			  swap.enterSystemState(SYSTATE_RXON); 
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
		  } 
		  swap.getRegister(REGI_AS5600_ANGLEDEG)->getData();
     352:	81 e1       	ldi	r24, 0x11	; 17
     354:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     358:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
		  oldAngleValue = as5600_AngleValueDegActual;
     35c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <as5600_AngleValueDegActual>
     360:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <as5600_AngleValueDegActual+0x1>
     364:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <oldAngleValue+0x1>
     368:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <oldAngleValue>
     36c:	02 c0       	rjmp	.+4      	; 0x372 <loop+0x138>
		  Serial.print(F("Send Grad: "));
		  Serial.println(String(as5600_AngleValueDegActual,DEC));
#endif
		}
		// Sleep
		if (pass == true)
     36e:	c1 30       	cpi	r28, 0x01	; 1
     370:	81 f4       	brne	.+32     	; 0x392 <loop+0x158>
		{
		  swap.enterSystemState(SYSTATE_RXOFF); 
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
		  delay(100);
     378:	64 e6       	ldi	r22, 0x64	; 100
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
      return radio.sendData(packet);
    }
	
	inline bool setRadioOFF()
	{
		 state = RXOFF;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <panstamp>
		 // Power-down CC1101
		 radio.setPowerDownState();
     38a:	8c e6       	ldi	r24, 0x6C	; 108
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN6CC110117setPowerDownStateEv>
		  panstamp.setRadioOFF();
		}
		swap.goToSleepMS(sleepIntervall);		
     392:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <sleepIntervall>
     396:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <sleepIntervall+0x1>
     39a:	89 e7       	ldi	r24, 0x79	; 121
     39c:	93 e0       	ldi	r25, 0x03	; 3
}
     39e:	cf 91       	pop	r28
		{
		  swap.enterSystemState(SYSTATE_RXOFF); 
		  delay(100);
		  panstamp.setRadioOFF();
		}
		swap.goToSleepMS(sleepIntervall);		
     3a0:	0c 94 43 12 	jmp	0x2486	; 0x2486 <_ZN4SWAP11goToSleepMSEj>

000003a4 <_GLOBAL__sub_I_led0>:
#define STATE_MAGNET_DETECT			STATE_DETECT_SENSOR_I2C + 1
#define STATE_MAIN_LOOP   			STATE_MAGNET_DETECT + 1

uint8_t stateCode = STATE_INIT;	

AMS_5600 ams5600;  // position sensor
     3a4:	88 e6       	ldi	r24, 0x68	; 104
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <_ZN8AMS_5600C1Ev>

000003ac <_Z7setled1hPh>:

uint16_t convertRawAngleToDegrees(uint16_t newAngle)
{
/* Raw data reports 0 - 4095 segments, which is 0.087 of a degree */
  return ((newAngle * 0.087) + 0.5); // round to a full degree
}
     3ac:	fb 01       	movw	r30, r22
     3ae:	80 81       	ld	r24, Z
     3b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <led1>
     3b4:	08 95       	ret

000003b6 <_Z13setTxIntervalhPh>:
     3b6:	81 e9       	ldi	r24, 0x91	; 145
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <_ZN8REGISTER20setValueFromBeBufferEPh>

000003be <_Z20setSleepIntervall_mshPh>:
     3be:	8e ea       	ldi	r24, 0xAE	; 174
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <_ZN8REGISTER20setValueFromBeBufferEPh>

000003c6 <_Z13setDevAddresshPh>:
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	c0 55       	subi	r28, 0x50	; 80
     3da:	d1 09       	sbc	r29, r1
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	7b 01       	movw	r14, r22
     3e8:	8e e9       	ldi	r24, 0x9E	; 158
     3ea:	c8 2e       	mov	r12, r24
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	d8 2e       	mov	r13, r24
     3f0:	01 e0       	ldi	r16, 0x01	; 1
     3f2:	f6 01       	movw	r30, r12
     3f4:	27 81       	ldd	r18, Z+7	; 0x07
     3f6:	ab 01       	movw	r20, r22
     3f8:	64 81       	ldd	r22, Z+4	; 0x04
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN8SWPACKET4sendEv>
     40a:	b7 01       	movw	r22, r14
     40c:	c6 01       	movw	r24, r12
     40e:	0e 94 66 11 	call	0x22cc	; 0x22cc <_ZN8REGISTER20setValueFromBeBufferEPh>
     412:	f6 01       	movw	r30, r12
     414:	87 81       	ldd	r24, Z+7	; 0x07
     416:	e8 0e       	add	r14, r24
     418:	f1 1c       	adc	r15, r1
     41a:	f7 01       	movw	r30, r14
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	60 81       	ld	r22, Z
     420:	8c e6       	ldi	r24, 0x6C	; 108
     422:	93 e0       	ldi	r25, 0x03	; 3
     424:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN6CC110113setDevAddressEh>
     428:	c0 5b       	subi	r28, 0xB0	; 176
     42a:	df 4f       	sbci	r29, 0xFF	; 255
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	08 95       	ret

00000446 <_Z12setNetworkIdhPh>:
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	c0 55       	subi	r28, 0x50	; 80
     456:	d1 09       	sbc	r29, r1
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <regNetworkId+0x5>
     466:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <regNetworkId+0x6>
     46a:	db 01       	movw	r26, r22
     46c:	9c 91       	ld	r25, X
     46e:	80 81       	ld	r24, Z
     470:	98 13       	cpse	r25, r24
     472:	05 c0       	rjmp	.+10     	; 0x47e <_Z12setNetworkIdhPh+0x38>
     474:	11 96       	adiw	r26, 0x01	; 1
     476:	9c 91       	ld	r25, X
     478:	81 81       	ldd	r24, Z+1	; 0x01
     47a:	98 17       	cp	r25, r24
     47c:	a1 f0       	breq	.+40     	; 0x4a6 <_Z12setNetworkIdhPh+0x60>
     47e:	7b 01       	movw	r14, r22
     480:	01 e0       	ldi	r16, 0x01	; 1
     482:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <regNetworkId+0x7>
     486:	ab 01       	movw	r20, r22
     488:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <regNetworkId+0x4>
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     494:	ce 01       	movw	r24, r28
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN8SWPACKET4sendEv>
     49c:	b7 01       	movw	r22, r14
     49e:	8c e6       	ldi	r24, 0x6C	; 108
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_ZN6CC110111setSyncWordEPh>
     4a6:	c0 5b       	subi	r28, 0xB0	; 176
     4a8:	df 4f       	sbci	r29, 0xFF	; 255
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	08 95       	ret

000004c0 <_Z18updtProcVoltSupplyh>:
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
     4c4:	8b e6       	ldi	r24, 0x6B	; 107
     4c6:	93 e0       	ldi	r25, 0x03	; 3
     4c8:	0e 94 a6 10 	call	0x214c	; 0x214c <_ZN8PANSTAMP6getVccEv>
     4cc:	ec 2f       	mov	r30, r28
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	e8 5f       	subi	r30, 0xF8	; 248
     4d6:	fe 4f       	sbci	r31, 0xFE	; 254
     4d8:	a0 81       	ld	r26, Z
     4da:	b1 81       	ldd	r27, Z+1	; 0x01
     4dc:	15 96       	adiw	r26, 0x05	; 5
     4de:	0d 90       	ld	r0, X+
     4e0:	bc 91       	ld	r27, X
     4e2:	a0 2d       	mov	r26, r0
     4e4:	9c 93       	st	X, r25
     4e6:	01 90       	ld	r0, Z+
     4e8:	f0 81       	ld	r31, Z
     4ea:	e0 2d       	mov	r30, r0
     4ec:	05 80       	ldd	r0, Z+5	; 0x05
     4ee:	f6 81       	ldd	r31, Z+6	; 0x06
     4f0:	e0 2d       	mov	r30, r0
     4f2:	81 83       	std	Z+1, r24	; 0x01
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <_Z23updAS5600_AngleValueRawh>:
     4f8:	cf 93       	push	r28
     4fa:	c8 2f       	mov	r28, r24
     4fc:	88 e6       	ldi	r24, 0x68	; 104
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN8AMS_560011getRawAngleEv>
     504:	ec 2f       	mov	r30, r28
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	ee 0f       	add	r30, r30
     50a:	ff 1f       	adc	r31, r31
     50c:	e8 5f       	subi	r30, 0xF8	; 248
     50e:	fe 4f       	sbci	r31, 0xFE	; 254
     510:	a0 81       	ld	r26, Z
     512:	b1 81       	ldd	r27, Z+1	; 0x01
     514:	15 96       	adiw	r26, 0x05	; 5
     516:	0d 90       	ld	r0, X+
     518:	bc 91       	ld	r27, X
     51a:	a0 2d       	mov	r26, r0
     51c:	9c 93       	st	X, r25
     51e:	01 90       	ld	r0, Z+
     520:	f0 81       	ld	r31, Z
     522:	e0 2d       	mov	r30, r0
     524:	05 80       	ldd	r0, Z+5	; 0x05
     526:	f6 81       	ldd	r31, Z+6	; 0x06
     528:	e0 2d       	mov	r30, r0
     52a:	81 83       	std	Z+1, r24	; 0x01
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <_Z23updAS5600_AngleValueDegh>:
     530:	cf 93       	push	r28
     532:	c8 2f       	mov	r28, r24
     534:	88 e6       	ldi	r24, 0x68	; 104
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN8AMS_560011getRawAngleEv>
     53c:	bc 01       	movw	r22, r24
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 93 07 	call	0xf26	; 0xf26 <__floatunsisf>
     546:	2e e0       	ldi	r18, 0x0E	; 14
     548:	3d e2       	ldi	r19, 0x2D	; 45
     54a:	42 eb       	ldi	r20, 0xB2	; 178
     54c:	5d e3       	ldi	r21, 0x3D	; 61
     54e:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	5f e3       	ldi	r21, 0x3F	; 63
     55a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__addsf3>
     55e:	0e 94 64 07 	call	0xec8	; 0xec8 <__fixunssfsi>
     562:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <as5600_AngleValueDegActual>
     566:	70 93 9e 01 	sts	0x019E, r23	; 0x80019e <as5600_AngleValueDegActual+0x1>
     56a:	ec 2f       	mov	r30, r28
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	e8 5f       	subi	r30, 0xF8	; 248
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	a0 81       	ld	r26, Z
     578:	b1 81       	ldd	r27, Z+1	; 0x01
     57a:	15 96       	adiw	r26, 0x05	; 5
     57c:	0d 90       	ld	r0, X+
     57e:	bc 91       	ld	r27, X
     580:	a0 2d       	mov	r26, r0
     582:	7c 93       	st	X, r23
     584:	01 90       	ld	r0, Z+
     586:	f0 81       	ld	r31, Z
     588:	e0 2d       	mov	r30, r0
     58a:	05 80       	ldd	r0, Z+5	; 0x05
     58c:	f6 81       	ldd	r31, Z+6	; 0x06
     58e:	e0 2d       	mov	r30, r0
     590:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <as5600_AngleValueDegActual>
     594:	81 83       	std	Z+1, r24	; 0x01
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <_Z24updAS5600_MagnitudeValueh>:
     59a:	cf 93       	push	r28
     59c:	c8 2f       	mov	r28, r24
     59e:	88 e6       	ldi	r24, 0x68	; 104
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN8AMS_560012getMagnitudeEv>
     5a6:	ec 2f       	mov	r30, r28
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	e8 5f       	subi	r30, 0xF8	; 248
     5b0:	fe 4f       	sbci	r31, 0xFE	; 254
     5b2:	a0 81       	ld	r26, Z
     5b4:	b1 81       	ldd	r27, Z+1	; 0x01
     5b6:	15 96       	adiw	r26, 0x05	; 5
     5b8:	0d 90       	ld	r0, X+
     5ba:	bc 91       	ld	r27, X
     5bc:	a0 2d       	mov	r26, r0
     5be:	9c 93       	st	X, r25
     5c0:	01 90       	ld	r0, Z+
     5c2:	f0 81       	ld	r31, Z
     5c4:	e0 2d       	mov	r30, r0
     5c6:	05 80       	ldd	r0, Z+5	; 0x05
     5c8:	f6 81       	ldd	r31, Z+6	; 0x06
     5ca:	e0 2d       	mov	r30, r0
     5cc:	81 83       	std	Z+1, r24	; 0x01
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <_Z29updAS5600_MagnetStrengthValueh>:
     5d2:	88 e6       	ldi	r24, 0x68	; 104
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_ZN8AMS_560017getMagnetStrengthEv>
     5da:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <as5600_MagnetStrengthValue>
     5de:	08 95       	ret

000005e0 <_Z21updAS5600_ScaledAngleh>:
     5e0:	cf 93       	push	r28
     5e2:	c8 2f       	mov	r28, r24
     5e4:	88 e6       	ldi	r24, 0x68	; 104
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN8AMS_560014getScaledAngleEv>
     5ec:	ec 2f       	mov	r30, r28
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	e8 5f       	subi	r30, 0xF8	; 248
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	a0 81       	ld	r26, Z
     5fa:	b1 81       	ldd	r27, Z+1	; 0x01
     5fc:	15 96       	adiw	r26, 0x05	; 5
     5fe:	0d 90       	ld	r0, X+
     600:	bc 91       	ld	r27, X
     602:	a0 2d       	mov	r26, r0
     604:	9c 93       	st	X, r25
     606:	01 90       	ld	r0, Z+
     608:	f0 81       	ld	r31, Z
     60a:	e0 2d       	mov	r30, r0
     60c:	05 80       	ldd	r0, Z+5	; 0x05
     60e:	f6 81       	ldd	r31, Z+6	; 0x06
     610:	e0 2d       	mov	r30, r0
     612:	81 83       	std	Z+1, r24	; 0x01
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <_Z18updAS5600_MaxAngleh>:
     618:	cf 93       	push	r28
     61a:	c8 2f       	mov	r28, r24
     61c:	88 e6       	ldi	r24, 0x68	; 104
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	0e 94 98 0b 	call	0x1730	; 0x1730 <_ZN8AMS_560011getMaxAngleEv>
     624:	ec 2f       	mov	r30, r28
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	e8 5f       	subi	r30, 0xF8	; 248
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	a0 81       	ld	r26, Z
     632:	b1 81       	ldd	r27, Z+1	; 0x01
     634:	15 96       	adiw	r26, 0x05	; 5
     636:	0d 90       	ld	r0, X+
     638:	bc 91       	ld	r27, X
     63a:	a0 2d       	mov	r26, r0
     63c:	9c 93       	st	X, r25
     63e:	01 90       	ld	r0, Z+
     640:	f0 81       	ld	r31, Z
     642:	e0 2d       	mov	r30, r0
     644:	05 80       	ldd	r0, Z+5	; 0x05
     646:	f6 81       	ldd	r31, Z+6	; 0x06
     648:	e0 2d       	mov	r30, r0
     64a:	81 83       	std	Z+1, r24	; 0x01
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <_Z18setAS5600_MaxAnglehPh>:
     650:	fb 01       	movw	r30, r22
     652:	81 81       	ldd	r24, Z+1	; 0x01
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	98 2f       	mov	r25, r24
     658:	88 27       	eor	r24, r24
     65a:	20 81       	ld	r18, Z
     65c:	bc 01       	movw	r22, r24
     65e:	62 0f       	add	r22, r18
     660:	71 1d       	adc	r23, r1
     662:	88 e6       	ldi	r24, 0x68	; 104
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <_ZN8AMS_560011setMaxAngleEj>

0000066a <_Z23updAS5600_StartPositionh>:
     66a:	cf 93       	push	r28
     66c:	c8 2f       	mov	r28, r24
     66e:	88 e6       	ldi	r24, 0x68	; 104
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN8AMS_560016getStartPositionEv>
     676:	ec 2f       	mov	r30, r28
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	e8 5f       	subi	r30, 0xF8	; 248
     680:	fe 4f       	sbci	r31, 0xFE	; 254
     682:	a0 81       	ld	r26, Z
     684:	b1 81       	ldd	r27, Z+1	; 0x01
     686:	15 96       	adiw	r26, 0x05	; 5
     688:	0d 90       	ld	r0, X+
     68a:	bc 91       	ld	r27, X
     68c:	a0 2d       	mov	r26, r0
     68e:	9c 93       	st	X, r25
     690:	01 90       	ld	r0, Z+
     692:	f0 81       	ld	r31, Z
     694:	e0 2d       	mov	r30, r0
     696:	05 80       	ldd	r0, Z+5	; 0x05
     698:	f6 81       	ldd	r31, Z+6	; 0x06
     69a:	e0 2d       	mov	r30, r0
     69c:	81 83       	std	Z+1, r24	; 0x01
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <_Z23setAS5600_StartPositionhPh>:
     6a2:	fb 01       	movw	r30, r22
     6a4:	81 81       	ldd	r24, Z+1	; 0x01
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	98 2f       	mov	r25, r24
     6aa:	88 27       	eor	r24, r24
     6ac:	20 81       	ld	r18, Z
     6ae:	bc 01       	movw	r22, r24
     6b0:	62 0f       	add	r22, r18
     6b2:	71 1d       	adc	r23, r1
     6b4:	88 e6       	ldi	r24, 0x68	; 104
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <_ZN8AMS_560016setStartPositionEj>

000006bc <_Z21updAS5600_EndPositionh>:
     6bc:	cf 93       	push	r28
     6be:	c8 2f       	mov	r28, r24
     6c0:	88 e6       	ldi	r24, 0x68	; 104
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN8AMS_560014getEndPositionEv>
     6c8:	ec 2f       	mov	r30, r28
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	e8 5f       	subi	r30, 0xF8	; 248
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	a0 81       	ld	r26, Z
     6d6:	b1 81       	ldd	r27, Z+1	; 0x01
     6d8:	15 96       	adiw	r26, 0x05	; 5
     6da:	0d 90       	ld	r0, X+
     6dc:	bc 91       	ld	r27, X
     6de:	a0 2d       	mov	r26, r0
     6e0:	9c 93       	st	X, r25
     6e2:	01 90       	ld	r0, Z+
     6e4:	f0 81       	ld	r31, Z
     6e6:	e0 2d       	mov	r30, r0
     6e8:	05 80       	ldd	r0, Z+5	; 0x05
     6ea:	f6 81       	ldd	r31, Z+6	; 0x06
     6ec:	e0 2d       	mov	r30, r0
     6ee:	81 83       	std	Z+1, r24	; 0x01
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <_Z21setAS5600_EndPositionhPh>:
     6f4:	fb 01       	movw	r30, r22
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	98 2f       	mov	r25, r24
     6fc:	88 27       	eor	r24, r24
     6fe:	20 81       	ld	r18, Z
     700:	bc 01       	movw	r22, r24
     702:	62 0f       	add	r22, r18
     704:	71 1d       	adc	r23, r1
     706:	88 e6       	ldi	r24, 0x68	; 104
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <_ZN8AMS_560014setEndPositionEj>

0000070e <_Z20updAS5600_i2cAddressh>:
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	e8 2f       	mov	r30, r24
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e8 5f       	subi	r30, 0xF8	; 248
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	01 90       	ld	r0, Z+
     720:	f0 81       	ld	r31, Z
     722:	e0 2d       	mov	r30, r0
     724:	c5 81       	ldd	r28, Z+5	; 0x05
     726:	d6 81       	ldd	r29, Z+6	; 0x06
     728:	88 e6       	ldi	r24, 0x68	; 104
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_ZN8AMS_560010getAddressEv>
     730:	88 83       	st	Y, r24
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <_Z13updAS5600_AGCh>:
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	e8 2f       	mov	r30, r24
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	e8 5f       	subi	r30, 0xF8	; 248
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	01 90       	ld	r0, Z+
     74a:	f0 81       	ld	r31, Z
     74c:	e0 2d       	mov	r30, r0
     74e:	c5 81       	ldd	r28, Z+5	; 0x05
     750:	d6 81       	ldd	r29, Z+6	; 0x06
     752:	88 e6       	ldi	r24, 0x68	; 104
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN8AMS_56006getAgcEv>
     75a:	88 83       	st	Y, r24
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <_Z14setFreqChannelhPh>:
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	c0 55       	subi	r28, 0x50	; 80
     772:	d1 09       	sbc	r29, r1
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <regFreqChannel+0x5>
     782:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <regFreqChannel+0x6>
     786:	db 01       	movw	r26, r22
     788:	9c 91       	ld	r25, X
     78a:	80 81       	ld	r24, Z
     78c:	98 17       	cp	r25, r24
     78e:	a9 f0       	breq	.+42     	; 0x7ba <_Z14setFreqChannelhPh+0x58>
     790:	7b 01       	movw	r14, r22
     792:	01 e0       	ldi	r16, 0x01	; 1
     794:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <regFreqChannel+0x7>
     798:	ab 01       	movw	r20, r22
     79a:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <regFreqChannel+0x4>
     79e:	ce 01       	movw	r24, r28
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     7a6:	ce 01       	movw	r24, r28
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN8SWPACKET4sendEv>
     7ae:	f7 01       	movw	r30, r14
     7b0:	60 81       	ld	r22, Z
     7b2:	8c e6       	ldi	r24, 0x6C	; 108
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN6CC110110setChannelEh>
     7ba:	c0 5b       	subi	r28, 0xB0	; 176
     7bc:	df 4f       	sbci	r29, 0xFF	; 255
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	08 95       	ret

000007d4 <_Z7setled0hPh>:
     7d4:	fb 01       	movw	r30, r22
     7d6:	80 81       	ld	r24, Z
     7d8:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <led0>
     7dc:	81 11       	cpse	r24, r1
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <_Z7setled0hPh+0x10>
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <_Z7setled0hPh+0x12>
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	84 e0       	ldi	r24, 0x04	; 4
     7e8:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <digitalWrite>

000007ec <_Z10modulresethPh>:
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	1f 92       	push	r1
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	fb 01       	movw	r30, r22
     7fc:	80 81       	ld	r24, Z
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	a1 f4       	brne	.+40     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     802:	8b 01       	movw	r16, r22
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <regTable+0x6>
     812:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <regTable+0x7>
     816:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN8REGISTER7setDataEPh>
     81a:	f8 01       	movw	r30, r16
     81c:	80 81       	ld	r24, Z
     81e:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <rst>
     822:	8b e6       	ldi	r24, 0x6B	; 107
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN8PANSTAMP5resetEv>
     82a:	0f 90       	pop	r0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <_Z11setSysStatehPh>:
     836:	fb 01       	movw	r30, r22
     838:	80 81       	ld	r24, Z
     83a:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <swap+0x5>
     83e:	80 81       	ld	r24, Z
     840:	81 11       	cpse	r24, r1
     842:	11 c0       	rjmp	.+34     	; 0x866 <_Z11setSysStatehPh+0x30>
     844:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <regTableSize>
     848:	84 30       	cpi	r24, 0x04	; 4
     84a:	28 f0       	brcs	.+10     	; 0x856 <_Z11setSysStatehPh+0x20>
     84c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <regTable+0x6>
     850:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <regTable+0x7>
     854:	02 c0       	rjmp	.+4      	; 0x85a <_Z11setSysStatehPh+0x24>
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 09 11 	call	0x2212	; 0x2212 <_ZN8REGISTER14sendSwapStatusEv>
     85e:	8b e6       	ldi	r24, 0x6B	; 107
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <_ZN8PANSTAMP5resetEv>
     866:	08 95       	ret

00000868 <_Z17getBatteryVoltagev>:
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	81 e1       	ldi	r24, 0x11	; 17
     878:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <pinMode>
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	87 e0       	ldi	r24, 0x07	; 7
     880:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <pinMode>
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	87 e0       	ldi	r24, 0x07	; 7
     888:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	0e 94 99 09 	call	0x1332	; 0x1332 <analogReference>
     892:	ca e0       	ldi	r28, 0x0A	; 10
     894:	d0 e0       	ldi	r29, 0x00	; 0
     896:	c1 2c       	mov	r12, r1
     898:	d1 2c       	mov	r13, r1
     89a:	76 01       	movw	r14, r12
     89c:	81 e1       	ldi	r24, 0x11	; 17
     89e:	0e 94 9c 09 	call	0x1338	; 0x1338 <analogRead>
     8a2:	09 2e       	mov	r0, r25
     8a4:	00 0c       	add	r0, r0
     8a6:	aa 0b       	sbc	r26, r26
     8a8:	bb 0b       	sbc	r27, r27
     8aa:	c8 0e       	add	r12, r24
     8ac:	d9 1e       	adc	r13, r25
     8ae:	ea 1e       	adc	r14, r26
     8b0:	fb 1e       	adc	r15, r27
     8b2:	62 e0       	ldi	r22, 0x02	; 2
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
     8be:	21 97       	sbiw	r28, 0x01	; 1
     8c0:	69 f7       	brne	.-38     	; 0x89c <_Z17getBatteryVoltagev+0x34>
     8c2:	62 e0       	ldi	r22, 0x02	; 2
     8c4:	87 e0       	ldi	r24, 0x07	; 7
     8c6:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <pinMode>
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	81 e1       	ldi	r24, 0x11	; 17
     8ce:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	2a e0       	ldi	r18, 0x0A	; 10
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	0e 94 b0 1a 	call	0x3560	; 0x3560 <__udivmodsi4>
     8e2:	68 ec       	ldi	r22, 0xC8	; 200
     8e4:	7d ea       	ldi	r23, 0xAD	; 173
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsi3>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	38 e2       	ldi	r19, 0x28	; 40
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	0e 94 b0 1a 	call	0x3560	; 0x3560 <__udivmodsi4>
     8fa:	c9 01       	movw	r24, r18
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	08 95       	ret

0000090a <_Z18updtBattVoltSupplyh>:
     90a:	cf 93       	push	r28
     90c:	c8 2f       	mov	r28, r24
     90e:	0e 94 34 04 	call	0x868	; 0x868 <_Z17getBatteryVoltagev>
     912:	ec 2f       	mov	r30, r28
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	e8 5f       	subi	r30, 0xF8	; 248
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	a0 81       	ld	r26, Z
     920:	b1 81       	ldd	r27, Z+1	; 0x01
     922:	15 96       	adiw	r26, 0x05	; 5
     924:	0d 90       	ld	r0, X+
     926:	bc 91       	ld	r27, X
     928:	a0 2d       	mov	r26, r0
     92a:	9c 93       	st	X, r25
     92c:	01 90       	ld	r0, Z+
     92e:	f0 81       	ld	r31, Z
     930:	e0 2d       	mov	r30, r0
     932:	05 80       	ldd	r0, Z+5	; 0x05
     934:	f6 81       	ldd	r31, Z+6	; 0x06
     936:	e0 2d       	mov	r30, r0
     938:	81 83       	std	Z+1, r24	; 0x01
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <_GLOBAL__sub_I_regProductCode>:
     * @param typ      Type of SWAP data (SWDTYPE)
     * @param eepromAddr address in EEPROM. Set to -1 if the register value has not to
     * be saved in EEPROM
     * @param bank sector in eeprom or flash
     */
    REGISTER(uint8_t *val, const uint8_t len, const void (*updateValH)(uint8_t rId), const void (*setValH)(uint8_t rId, uint8_t *v), const SWDTYPE typ=SWDTYPE_OTHER, const int eepromAddr=-1, const uint16_t bank=DEFAULT_NVOLAT_SECTION): id(regIndex++), value(val), length(len), updateValue(updateValH), setValue(setValH), type(typ), eepromAddress(eepromAddr), eepromBank(bank) {};
     93e:	e4 e1       	ldi	r30, 0x14	; 20
     940:	f3 e0       	ldi	r31, 0x03	; 3
     942:	11 82       	std	Z+1, r1	; 0x01
     944:	10 82       	st	Z, r1
     946:	13 82       	std	Z+3, r1	; 0x03
     948:	12 82       	std	Z+2, r1	; 0x02
     94a:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <regIndex>
     94e:	94 83       	std	Z+4, r25	; 0x04
     950:	28 e4       	ldi	r18, 0x48	; 72
     952:	31 e0       	ldi	r19, 0x01	; 1
     954:	36 83       	std	Z+6, r19	; 0x06
     956:	25 83       	std	Z+5, r18	; 0x05
     958:	88 e0       	ldi	r24, 0x08	; 8
     95a:	87 83       	std	Z+7, r24	; 0x07
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	80 87       	std	Z+8, r24	; 0x08
     960:	2f ef       	ldi	r18, 0xFF	; 255
     962:	3f ef       	ldi	r19, 0xFF	; 255
     964:	32 87       	std	Z+10, r19	; 0x0a
     966:	21 87       	std	Z+9, r18	; 0x09
     968:	14 86       	std	Z+12, r1	; 0x0c
     96a:	13 86       	std	Z+11, r1	; 0x0b
     96c:	e7 e0       	ldi	r30, 0x07	; 7
     96e:	f3 e0       	ldi	r31, 0x03	; 3
     970:	11 82       	std	Z+1, r1	; 0x01
     972:	10 82       	st	Z, r1
     974:	13 82       	std	Z+3, r1	; 0x03
     976:	12 82       	std	Z+2, r1	; 0x02
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	49 0f       	add	r20, r25
     97c:	44 83       	std	Z+4, r20	; 0x04
     97e:	44 e4       	ldi	r20, 0x44	; 68
     980:	51 e0       	ldi	r21, 0x01	; 1
     982:	56 83       	std	Z+6, r21	; 0x06
     984:	45 83       	std	Z+5, r20	; 0x05
     986:	44 e0       	ldi	r20, 0x04	; 4
     988:	47 83       	std	Z+7, r20	; 0x07
     98a:	80 87       	std	Z+8, r24	; 0x08
     98c:	32 87       	std	Z+10, r19	; 0x0a
     98e:	21 87       	std	Z+9, r18	; 0x09
     990:	14 86       	std	Z+12, r1	; 0x0c
     992:	13 86       	std	Z+11, r1	; 0x0b
     994:	ea ef       	ldi	r30, 0xFA	; 250
     996:	f2 e0       	ldi	r31, 0x02	; 2
     998:	11 82       	std	Z+1, r1	; 0x01
     99a:	10 82       	st	Z, r1
     99c:	13 82       	std	Z+3, r1	; 0x03
     99e:	12 82       	std	Z+2, r1	; 0x02
     9a0:	52 e0       	ldi	r21, 0x02	; 2
     9a2:	59 0f       	add	r21, r25
     9a4:	54 83       	std	Z+4, r21	; 0x04
     9a6:	60 e4       	ldi	r22, 0x40	; 64
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	76 83       	std	Z+6, r23	; 0x06
     9ac:	65 83       	std	Z+5, r22	; 0x05
     9ae:	47 83       	std	Z+7, r20	; 0x07
     9b0:	80 87       	std	Z+8, r24	; 0x08
     9b2:	32 87       	std	Z+10, r19	; 0x0a
     9b4:	21 87       	std	Z+9, r18	; 0x09
     9b6:	14 86       	std	Z+12, r1	; 0x0c
     9b8:	13 86       	std	Z+11, r1	; 0x0b
     9ba:	ed ee       	ldi	r30, 0xED	; 237
     9bc:	f2 e0       	ldi	r31, 0x02	; 2
     9be:	11 82       	std	Z+1, r1	; 0x01
     9c0:	10 82       	st	Z, r1
     9c2:	4b e1       	ldi	r20, 0x1B	; 27
     9c4:	54 e0       	ldi	r21, 0x04	; 4
     9c6:	53 83       	std	Z+3, r21	; 0x03
     9c8:	42 83       	std	Z+2, r20	; 0x02
     9ca:	43 e0       	ldi	r20, 0x03	; 3
     9cc:	49 0f       	add	r20, r25
     9ce:	44 83       	std	Z+4, r20	; 0x04
     9d0:	4e e7       	ldi	r20, 0x7E	; 126
     9d2:	53 e0       	ldi	r21, 0x03	; 3
     9d4:	56 83       	std	Z+6, r21	; 0x06
     9d6:	45 83       	std	Z+5, r20	; 0x05
     9d8:	87 83       	std	Z+7, r24	; 0x07
     9da:	80 87       	std	Z+8, r24	; 0x08
     9dc:	32 87       	std	Z+10, r19	; 0x0a
     9de:	21 87       	std	Z+9, r18	; 0x09
     9e0:	14 86       	std	Z+12, r1	; 0x0c
     9e2:	13 86       	std	Z+11, r1	; 0x0b
     9e4:	e0 ee       	ldi	r30, 0xE0	; 224
     9e6:	f2 e0       	ldi	r31, 0x02	; 2
     9e8:	11 82       	std	Z+1, r1	; 0x01
     9ea:	10 82       	st	Z, r1
     9ec:	41 eb       	ldi	r20, 0xB1	; 177
     9ee:	53 e0       	ldi	r21, 0x03	; 3
     9f0:	53 83       	std	Z+3, r21	; 0x03
     9f2:	42 83       	std	Z+2, r20	; 0x02
     9f4:	44 e0       	ldi	r20, 0x04	; 4
     9f6:	49 0f       	add	r20, r25
     9f8:	44 83       	std	Z+4, r20	; 0x04
     9fa:	41 e7       	ldi	r20, 0x71	; 113
     9fc:	53 e0       	ldi	r21, 0x03	; 3
     9fe:	56 83       	std	Z+6, r21	; 0x06
     a00:	45 83       	std	Z+5, r20	; 0x05
     a02:	87 83       	std	Z+7, r24	; 0x07
     a04:	10 86       	std	Z+8, r1	; 0x08
     a06:	12 86       	std	Z+10, r1	; 0x0a
     a08:	11 86       	std	Z+9, r1	; 0x09
     a0a:	14 86       	std	Z+12, r1	; 0x0c
     a0c:	13 86       	std	Z+11, r1	; 0x0b
     a0e:	e3 ed       	ldi	r30, 0xD3	; 211
     a10:	f2 e0       	ldi	r31, 0x02	; 2
     a12:	11 82       	std	Z+1, r1	; 0x01
     a14:	10 82       	st	Z, r1
     a16:	13 82       	std	Z+3, r1	; 0x03
     a18:	12 82       	std	Z+2, r1	; 0x02
     a1a:	45 e0       	ldi	r20, 0x05	; 5
     a1c:	49 0f       	add	r20, r25
     a1e:	44 83       	std	Z+4, r20	; 0x04
     a20:	4c e7       	ldi	r20, 0x7C	; 124
     a22:	53 e0       	ldi	r21, 0x03	; 3
     a24:	56 83       	std	Z+6, r21	; 0x06
     a26:	45 83       	std	Z+5, r20	; 0x05
     a28:	87 83       	std	Z+7, r24	; 0x07
     a2a:	80 87       	std	Z+8, r24	; 0x08
     a2c:	32 87       	std	Z+10, r19	; 0x0a
     a2e:	21 87       	std	Z+9, r18	; 0x09
     a30:	14 86       	std	Z+12, r1	; 0x0c
     a32:	13 86       	std	Z+11, r1	; 0x0b
     a34:	e5 ec       	ldi	r30, 0xC5	; 197
     a36:	f2 e0       	ldi	r31, 0x02	; 2
     a38:	11 82       	std	Z+1, r1	; 0x01
     a3a:	10 82       	st	Z, r1
     a3c:	13 82       	std	Z+3, r1	; 0x03
     a3e:	12 82       	std	Z+2, r1	; 0x02
     a40:	46 e0       	ldi	r20, 0x06	; 6
     a42:	49 0f       	add	r20, r25
     a44:	44 83       	std	Z+4, r20	; 0x04
     a46:	42 ed       	ldi	r20, 0xD2	; 210
     a48:	52 e0       	ldi	r21, 0x02	; 2
     a4a:	56 83       	std	Z+6, r21	; 0x06
     a4c:	45 83       	std	Z+5, r20	; 0x05
     a4e:	87 83       	std	Z+7, r24	; 0x07
     a50:	80 87       	std	Z+8, r24	; 0x08
     a52:	32 87       	std	Z+10, r19	; 0x0a
     a54:	21 87       	std	Z+9, r18	; 0x09
     a56:	14 86       	std	Z+12, r1	; 0x0c
     a58:	13 86       	std	Z+11, r1	; 0x0b
     a5a:	e8 eb       	ldi	r30, 0xB8	; 184
     a5c:	f2 e0       	ldi	r31, 0x02	; 2
     a5e:	11 82       	std	Z+1, r1	; 0x01
     a60:	10 82       	st	Z, r1
     a62:	13 82       	std	Z+3, r1	; 0x03
     a64:	12 82       	std	Z+2, r1	; 0x02
     a66:	47 e0       	ldi	r20, 0x07	; 7
     a68:	49 0f       	add	r20, r25
     a6a:	44 83       	std	Z+4, r20	; 0x04
     a6c:	4d e7       	ldi	r20, 0x7D	; 125
     a6e:	53 e0       	ldi	r21, 0x03	; 3
     a70:	56 83       	std	Z+6, r21	; 0x06
     a72:	45 83       	std	Z+5, r20	; 0x05
     a74:	87 83       	std	Z+7, r24	; 0x07
     a76:	80 87       	std	Z+8, r24	; 0x08
     a78:	32 87       	std	Z+10, r19	; 0x0a
     a7a:	21 87       	std	Z+9, r18	; 0x09
     a7c:	14 86       	std	Z+12, r1	; 0x0c
     a7e:	13 86       	std	Z+11, r1	; 0x0b
     a80:	eb ea       	ldi	r30, 0xAB	; 171
     a82:	f2 e0       	ldi	r31, 0x02	; 2
     a84:	11 82       	std	Z+1, r1	; 0x01
     a86:	10 82       	st	Z, r1
     a88:	43 e2       	ldi	r20, 0x23	; 35
     a8a:	52 e0       	ldi	r21, 0x02	; 2
     a8c:	53 83       	std	Z+3, r21	; 0x03
     a8e:	42 83       	std	Z+2, r20	; 0x02
     a90:	48 e0       	ldi	r20, 0x08	; 8
     a92:	49 0f       	add	r20, r25
     a94:	44 83       	std	Z+4, r20	; 0x04
     a96:	42 e7       	ldi	r20, 0x72	; 114
     a98:	53 e0       	ldi	r21, 0x03	; 3
     a9a:	56 83       	std	Z+6, r21	; 0x06
     a9c:	45 83       	std	Z+5, r20	; 0x05
     a9e:	42 e0       	ldi	r20, 0x02	; 2
     aa0:	47 83       	std	Z+7, r20	; 0x07
     aa2:	80 87       	std	Z+8, r24	; 0x08
     aa4:	62 e0       	ldi	r22, 0x02	; 2
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	72 87       	std	Z+10, r23	; 0x0a
     aaa:	61 87       	std	Z+9, r22	; 0x09
     aac:	14 86       	std	Z+12, r1	; 0x0c
     aae:	13 86       	std	Z+11, r1	; 0x0b
     ab0:	ee e9       	ldi	r30, 0x9E	; 158
     ab2:	f2 e0       	ldi	r31, 0x02	; 2
     ab4:	11 82       	std	Z+1, r1	; 0x01
     ab6:	10 82       	st	Z, r1
     ab8:	63 ee       	ldi	r22, 0xE3	; 227
     aba:	71 e0       	ldi	r23, 0x01	; 1
     abc:	73 83       	std	Z+3, r23	; 0x03
     abe:	62 83       	std	Z+2, r22	; 0x02
     ac0:	59 e0       	ldi	r21, 0x09	; 9
     ac2:	59 0f       	add	r21, r25
     ac4:	54 83       	std	Z+4, r21	; 0x04
     ac6:	6b e7       	ldi	r22, 0x7B	; 123
     ac8:	73 e0       	ldi	r23, 0x03	; 3
     aca:	76 83       	std	Z+6, r23	; 0x06
     acc:	65 83       	std	Z+5, r22	; 0x05
     ace:	87 83       	std	Z+7, r24	; 0x07
     ad0:	10 86       	std	Z+8, r1	; 0x08
     ad2:	65 e0       	ldi	r22, 0x05	; 5
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	72 87       	std	Z+10, r23	; 0x0a
     ad8:	61 87       	std	Z+9, r22	; 0x09
     ada:	14 86       	std	Z+12, r1	; 0x0c
     adc:	13 86       	std	Z+11, r1	; 0x0b
     ade:	e1 e9       	ldi	r30, 0x91	; 145
     ae0:	f2 e0       	ldi	r31, 0x02	; 2
     ae2:	11 82       	std	Z+1, r1	; 0x01
     ae4:	10 82       	st	Z, r1
     ae6:	6b ed       	ldi	r22, 0xDB	; 219
     ae8:	71 e0       	ldi	r23, 0x01	; 1
     aea:	73 83       	std	Z+3, r23	; 0x03
     aec:	62 83       	std	Z+2, r22	; 0x02
     aee:	5a e0       	ldi	r21, 0x0A	; 10
     af0:	59 0f       	add	r21, r25
     af2:	54 83       	std	Z+4, r21	; 0x04
     af4:	6f e7       	ldi	r22, 0x7F	; 127
     af6:	73 e0       	ldi	r23, 0x03	; 3
     af8:	76 83       	std	Z+6, r23	; 0x06
     afa:	65 83       	std	Z+5, r22	; 0x05
     afc:	47 83       	std	Z+7, r20	; 0x07
     afe:	10 86       	std	Z+8, r1	; 0x08
     b00:	66 e0       	ldi	r22, 0x06	; 6
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	72 87       	std	Z+10, r23	; 0x0a
     b06:	61 87       	std	Z+9, r22	; 0x09
     b08:	14 86       	std	Z+12, r1	; 0x0c
     b0a:	13 86       	std	Z+11, r1	; 0x0b
     b0c:	e2 e8       	ldi	r30, 0x82	; 130
     b0e:	f2 e0       	ldi	r31, 0x02	; 2
     b10:	60 e6       	ldi	r22, 0x60	; 96
     b12:	72 e0       	ldi	r23, 0x02	; 2
     b14:	71 83       	std	Z+1, r23	; 0x01
     b16:	60 83       	st	Z, r22
     b18:	13 82       	std	Z+3, r1	; 0x03
     b1a:	12 82       	std	Z+2, r1	; 0x02
     b1c:	5c e0       	ldi	r21, 0x0C	; 12
     b1e:	59 0f       	add	r21, r25
     b20:	6b e0       	ldi	r22, 0x0B	; 11
     b22:	69 0f       	add	r22, r25
     b24:	64 83       	std	Z+4, r22	; 0x04
     b26:	6f e8       	ldi	r22, 0x8F	; 143
     b28:	72 e0       	ldi	r23, 0x02	; 2
     b2a:	76 83       	std	Z+6, r23	; 0x06
     b2c:	65 83       	std	Z+5, r22	; 0x05
     b2e:	47 83       	std	Z+7, r20	; 0x07
     b30:	80 87       	std	Z+8, r24	; 0x08
     b32:	32 87       	std	Z+10, r19	; 0x0a
     b34:	21 87       	std	Z+9, r18	; 0x09
     b36:	14 86       	std	Z+12, r1	; 0x0c
     b38:	13 86       	std	Z+11, r1	; 0x0b
     b3a:	e3 e7       	ldi	r30, 0x73	; 115
     b3c:	f2 e0       	ldi	r31, 0x02	; 2
     b3e:	65 e8       	ldi	r22, 0x85	; 133
     b40:	74 e0       	ldi	r23, 0x04	; 4
     b42:	71 83       	std	Z+1, r23	; 0x01
     b44:	60 83       	st	Z, r22
     b46:	13 82       	std	Z+3, r1	; 0x03
     b48:	12 82       	std	Z+2, r1	; 0x02
     b4a:	54 83       	std	Z+4, r21	; 0x04
     b4c:	60 e8       	ldi	r22, 0x80	; 128
     b4e:	72 e0       	ldi	r23, 0x02	; 2
     b50:	76 83       	std	Z+6, r23	; 0x06
     b52:	65 83       	std	Z+5, r22	; 0x05
     b54:	47 83       	std	Z+7, r20	; 0x07
     b56:	80 87       	std	Z+8, r24	; 0x08
     b58:	32 87       	std	Z+10, r19	; 0x0a
     b5a:	21 87       	std	Z+9, r18	; 0x09
     b5c:	14 86       	std	Z+12, r1	; 0x0c
     b5e:	13 86       	std	Z+11, r1	; 0x0b
     b60:	e6 e6       	ldi	r30, 0x66	; 102
     b62:	f2 e0       	ldi	r31, 0x02	; 2
     b64:	11 82       	std	Z+1, r1	; 0x01
     b66:	10 82       	st	Z, r1
     b68:	6a ee       	ldi	r22, 0xEA	; 234
     b6a:	73 e0       	ldi	r23, 0x03	; 3
     b6c:	73 83       	std	Z+3, r23	; 0x03
     b6e:	62 83       	std	Z+2, r22	; 0x02
     b70:	5d e0       	ldi	r21, 0x0D	; 13
     b72:	59 0f       	add	r21, r25
     b74:	54 83       	std	Z+4, r21	; 0x04
     b76:	60 ea       	ldi	r22, 0xA0	; 160
     b78:	71 e0       	ldi	r23, 0x01	; 1
     b7a:	76 83       	std	Z+6, r23	; 0x06
     b7c:	65 83       	std	Z+5, r22	; 0x05
     b7e:	87 83       	std	Z+7, r24	; 0x07
     b80:	80 87       	std	Z+8, r24	; 0x08
     b82:	32 87       	std	Z+10, r19	; 0x0a
     b84:	21 87       	std	Z+9, r18	; 0x09
     b86:	14 86       	std	Z+12, r1	; 0x0c
     b88:	13 86       	std	Z+11, r1	; 0x0b
     b8a:	e9 e5       	ldi	r30, 0x59	; 89
     b8c:	f2 e0       	ldi	r31, 0x02	; 2
     b8e:	11 82       	std	Z+1, r1	; 0x01
     b90:	10 82       	st	Z, r1
     b92:	66 ed       	ldi	r22, 0xD6	; 214
     b94:	71 e0       	ldi	r23, 0x01	; 1
     b96:	73 83       	std	Z+3, r23	; 0x03
     b98:	62 83       	std	Z+2, r22	; 0x02
     b9a:	5e e0       	ldi	r21, 0x0E	; 14
     b9c:	59 0f       	add	r21, r25
     b9e:	54 83       	std	Z+4, r21	; 0x04
     ba0:	66 e0       	ldi	r22, 0x06	; 6
     ba2:	71 e0       	ldi	r23, 0x01	; 1
     ba4:	76 83       	std	Z+6, r23	; 0x06
     ba6:	65 83       	std	Z+5, r22	; 0x05
     ba8:	87 83       	std	Z+7, r24	; 0x07
     baa:	10 86       	std	Z+8, r1	; 0x08
     bac:	62 e2       	ldi	r22, 0x22	; 34
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	72 87       	std	Z+10, r23	; 0x0a
     bb2:	61 87       	std	Z+9, r22	; 0x09
     bb4:	14 86       	std	Z+12, r1	; 0x0c
     bb6:	13 86       	std	Z+11, r1	; 0x0b
     bb8:	ec e4       	ldi	r30, 0x4C	; 76
     bba:	f2 e0       	ldi	r31, 0x02	; 2
     bbc:	11 82       	std	Z+1, r1	; 0x01
     bbe:	10 82       	st	Z, r1
     bc0:	66 ef       	ldi	r22, 0xF6	; 246
     bc2:	73 e0       	ldi	r23, 0x03	; 3
     bc4:	73 83       	std	Z+3, r23	; 0x03
     bc6:	62 83       	std	Z+2, r22	; 0x02
     bc8:	5f e0       	ldi	r21, 0x0F	; 15
     bca:	59 0f       	add	r21, r25
     bcc:	54 83       	std	Z+4, r21	; 0x04
     bce:	6f e9       	ldi	r22, 0x9F	; 159
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	76 83       	std	Z+6, r23	; 0x06
     bd4:	65 83       	std	Z+5, r22	; 0x05
     bd6:	87 83       	std	Z+7, r24	; 0x07
     bd8:	80 87       	std	Z+8, r24	; 0x08
     bda:	32 87       	std	Z+10, r19	; 0x0a
     bdc:	21 87       	std	Z+9, r18	; 0x09
     bde:	14 86       	std	Z+12, r1	; 0x0c
     be0:	13 86       	std	Z+11, r1	; 0x0b
     be2:	ed e3       	ldi	r30, 0x3D	; 61
     be4:	f2 e0       	ldi	r31, 0x02	; 2
     be6:	6c e7       	ldi	r22, 0x7C	; 124
     be8:	72 e0       	ldi	r23, 0x02	; 2
     bea:	71 83       	std	Z+1, r23	; 0x01
     bec:	60 83       	st	Z, r22
     bee:	13 82       	std	Z+3, r1	; 0x03
     bf0:	12 82       	std	Z+2, r1	; 0x02
     bf2:	50 e1       	ldi	r21, 0x10	; 16
     bf4:	59 0f       	add	r21, r25
     bf6:	54 83       	std	Z+4, r21	; 0x04
     bf8:	6a e4       	ldi	r22, 0x4A	; 74
     bfa:	72 e0       	ldi	r23, 0x02	; 2
     bfc:	76 83       	std	Z+6, r23	; 0x06
     bfe:	65 83       	std	Z+5, r22	; 0x05
     c00:	47 83       	std	Z+7, r20	; 0x07
     c02:	80 87       	std	Z+8, r24	; 0x08
     c04:	32 87       	std	Z+10, r19	; 0x0a
     c06:	21 87       	std	Z+9, r18	; 0x09
     c08:	14 86       	std	Z+12, r1	; 0x0c
     c0a:	13 86       	std	Z+11, r1	; 0x0b
     c0c:	ee e2       	ldi	r30, 0x2E	; 46
     c0e:	f2 e0       	ldi	r31, 0x02	; 2
     c10:	68 e9       	ldi	r22, 0x98	; 152
     c12:	72 e0       	ldi	r23, 0x02	; 2
     c14:	71 83       	std	Z+1, r23	; 0x01
     c16:	60 83       	st	Z, r22
     c18:	13 82       	std	Z+3, r1	; 0x03
     c1a:	12 82       	std	Z+2, r1	; 0x02
     c1c:	51 e1       	ldi	r21, 0x11	; 17
     c1e:	59 0f       	add	r21, r25
     c20:	54 83       	std	Z+4, r21	; 0x04
     c22:	6b e3       	ldi	r22, 0x3B	; 59
     c24:	72 e0       	ldi	r23, 0x02	; 2
     c26:	76 83       	std	Z+6, r23	; 0x06
     c28:	65 83       	std	Z+5, r22	; 0x05
     c2a:	47 83       	std	Z+7, r20	; 0x07
     c2c:	80 87       	std	Z+8, r24	; 0x08
     c2e:	32 87       	std	Z+10, r19	; 0x0a
     c30:	21 87       	std	Z+9, r18	; 0x09
     c32:	14 86       	std	Z+12, r1	; 0x0c
     c34:	13 86       	std	Z+11, r1	; 0x0b
     c36:	e0 e2       	ldi	r30, 0x20	; 32
     c38:	f2 e0       	ldi	r31, 0x02	; 2
     c3a:	6d ec       	ldi	r22, 0xCD	; 205
     c3c:	72 e0       	ldi	r23, 0x02	; 2
     c3e:	71 83       	std	Z+1, r23	; 0x01
     c40:	60 83       	st	Z, r22
     c42:	13 82       	std	Z+3, r1	; 0x03
     c44:	12 82       	std	Z+2, r1	; 0x02
     c46:	52 e1       	ldi	r21, 0x12	; 18
     c48:	59 0f       	add	r21, r25
     c4a:	54 83       	std	Z+4, r21	; 0x04
     c4c:	6d e2       	ldi	r22, 0x2D	; 45
     c4e:	72 e0       	ldi	r23, 0x02	; 2
     c50:	76 83       	std	Z+6, r23	; 0x06
     c52:	65 83       	std	Z+5, r22	; 0x05
     c54:	87 83       	std	Z+7, r24	; 0x07
     c56:	80 87       	std	Z+8, r24	; 0x08
     c58:	32 87       	std	Z+10, r19	; 0x0a
     c5a:	21 87       	std	Z+9, r18	; 0x09
     c5c:	14 86       	std	Z+12, r1	; 0x0c
     c5e:	13 86       	std	Z+11, r1	; 0x0b
     c60:	e3 e1       	ldi	r30, 0x13	; 19
     c62:	f2 e0       	ldi	r31, 0x02	; 2
     c64:	69 ee       	ldi	r22, 0xE9	; 233
     c66:	72 e0       	ldi	r23, 0x02	; 2
     c68:	71 83       	std	Z+1, r23	; 0x01
     c6a:	60 83       	st	Z, r22
     c6c:	13 82       	std	Z+3, r1	; 0x03
     c6e:	12 82       	std	Z+2, r1	; 0x02
     c70:	53 e1       	ldi	r21, 0x13	; 19
     c72:	59 0f       	add	r21, r25
     c74:	54 83       	std	Z+4, r21	; 0x04
     c76:	6c e9       	ldi	r22, 0x9C	; 156
     c78:	71 e0       	ldi	r23, 0x01	; 1
     c7a:	76 83       	std	Z+6, r23	; 0x06
     c7c:	65 83       	std	Z+5, r22	; 0x05
     c7e:	87 83       	std	Z+7, r24	; 0x07
     c80:	80 87       	std	Z+8, r24	; 0x08
     c82:	32 87       	std	Z+10, r19	; 0x0a
     c84:	21 87       	std	Z+9, r18	; 0x09
     c86:	14 86       	std	Z+12, r1	; 0x0c
     c88:	13 86       	std	Z+11, r1	; 0x0b
     c8a:	e4 e0       	ldi	r30, 0x04	; 4
     c8c:	f2 e0       	ldi	r31, 0x02	; 2
     c8e:	60 ef       	ldi	r22, 0xF0	; 240
     c90:	72 e0       	ldi	r23, 0x02	; 2
     c92:	71 83       	std	Z+1, r23	; 0x01
     c94:	60 83       	st	Z, r22
     c96:	13 82       	std	Z+3, r1	; 0x03
     c98:	12 82       	std	Z+2, r1	; 0x02
     c9a:	54 e1       	ldi	r21, 0x14	; 20
     c9c:	59 0f       	add	r21, r25
     c9e:	54 83       	std	Z+4, r21	; 0x04
     ca0:	61 e1       	ldi	r22, 0x11	; 17
     ca2:	72 e0       	ldi	r23, 0x02	; 2
     ca4:	76 83       	std	Z+6, r23	; 0x06
     ca6:	65 83       	std	Z+5, r22	; 0x05
     ca8:	47 83       	std	Z+7, r20	; 0x07
     caa:	80 87       	std	Z+8, r24	; 0x08
     cac:	32 87       	std	Z+10, r19	; 0x0a
     cae:	21 87       	std	Z+9, r18	; 0x09
     cb0:	14 86       	std	Z+12, r1	; 0x0c
     cb2:	13 86       	std	Z+11, r1	; 0x0b
     cb4:	e5 ef       	ldi	r30, 0xF5	; 245
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	6c e0       	ldi	r22, 0x0C	; 12
     cba:	73 e0       	ldi	r23, 0x03	; 3
     cbc:	71 83       	std	Z+1, r23	; 0x01
     cbe:	60 83       	st	Z, r22
     cc0:	68 e2       	ldi	r22, 0x28	; 40
     cc2:	73 e0       	ldi	r23, 0x03	; 3
     cc4:	73 83       	std	Z+3, r23	; 0x03
     cc6:	62 83       	std	Z+2, r22	; 0x02
     cc8:	55 e1       	ldi	r21, 0x15	; 21
     cca:	59 0f       	add	r21, r25
     ccc:	54 83       	std	Z+4, r21	; 0x04
     cce:	62 e0       	ldi	r22, 0x02	; 2
     cd0:	72 e0       	ldi	r23, 0x02	; 2
     cd2:	76 83       	std	Z+6, r23	; 0x06
     cd4:	65 83       	std	Z+5, r22	; 0x05
     cd6:	47 83       	std	Z+7, r20	; 0x07
     cd8:	80 87       	std	Z+8, r24	; 0x08
     cda:	32 87       	std	Z+10, r19	; 0x0a
     cdc:	21 87       	std	Z+9, r18	; 0x09
     cde:	14 86       	std	Z+12, r1	; 0x0c
     ce0:	13 86       	std	Z+11, r1	; 0x0b
     ce2:	e6 ee       	ldi	r30, 0xE6	; 230
     ce4:	f1 e0       	ldi	r31, 0x01	; 1
     ce6:	65 e3       	ldi	r22, 0x35	; 53
     ce8:	73 e0       	ldi	r23, 0x03	; 3
     cea:	71 83       	std	Z+1, r23	; 0x01
     cec:	60 83       	st	Z, r22
     cee:	61 e5       	ldi	r22, 0x51	; 81
     cf0:	73 e0       	ldi	r23, 0x03	; 3
     cf2:	73 83       	std	Z+3, r23	; 0x03
     cf4:	62 83       	std	Z+2, r22	; 0x02
     cf6:	56 e1       	ldi	r21, 0x16	; 22
     cf8:	59 0f       	add	r21, r25
     cfa:	54 83       	std	Z+4, r21	; 0x04
     cfc:	63 ef       	ldi	r22, 0xF3	; 243
     cfe:	71 e0       	ldi	r23, 0x01	; 1
     d00:	76 83       	std	Z+6, r23	; 0x06
     d02:	65 83       	std	Z+5, r22	; 0x05
     d04:	47 83       	std	Z+7, r20	; 0x07
     d06:	80 87       	std	Z+8, r24	; 0x08
     d08:	32 87       	std	Z+10, r19	; 0x0a
     d0a:	21 87       	std	Z+9, r18	; 0x09
     d0c:	14 86       	std	Z+12, r1	; 0x0c
     d0e:	13 86       	std	Z+11, r1	; 0x0b
     d10:	e7 ed       	ldi	r30, 0xD7	; 215
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	6e e5       	ldi	r22, 0x5E	; 94
     d16:	73 e0       	ldi	r23, 0x03	; 3
     d18:	71 83       	std	Z+1, r23	; 0x01
     d1a:	60 83       	st	Z, r22
     d1c:	6a e7       	ldi	r22, 0x7A	; 122
     d1e:	73 e0       	ldi	r23, 0x03	; 3
     d20:	73 83       	std	Z+3, r23	; 0x03
     d22:	62 83       	std	Z+2, r22	; 0x02
     d24:	57 e1       	ldi	r21, 0x17	; 23
     d26:	59 0f       	add	r21, r25
     d28:	54 83       	std	Z+4, r21	; 0x04
     d2a:	64 ee       	ldi	r22, 0xE4	; 228
     d2c:	71 e0       	ldi	r23, 0x01	; 1
     d2e:	76 83       	std	Z+6, r23	; 0x06
     d30:	65 83       	std	Z+5, r22	; 0x05
     d32:	47 83       	std	Z+7, r20	; 0x07
     d34:	80 87       	std	Z+8, r24	; 0x08
     d36:	32 87       	std	Z+10, r19	; 0x0a
     d38:	21 87       	std	Z+9, r18	; 0x09
     d3a:	14 86       	std	Z+12, r1	; 0x0c
     d3c:	13 86       	std	Z+11, r1	; 0x0b
     d3e:	e9 ec       	ldi	r30, 0xC9	; 201
     d40:	f1 e0       	ldi	r31, 0x01	; 1
     d42:	67 e8       	ldi	r22, 0x87	; 135
     d44:	73 e0       	ldi	r23, 0x03	; 3
     d46:	71 83       	std	Z+1, r23	; 0x01
     d48:	60 83       	st	Z, r22
     d4a:	13 82       	std	Z+3, r1	; 0x03
     d4c:	12 82       	std	Z+2, r1	; 0x02
     d4e:	58 e1       	ldi	r21, 0x18	; 24
     d50:	59 0f       	add	r21, r25
     d52:	54 83       	std	Z+4, r21	; 0x04
     d54:	66 ed       	ldi	r22, 0xD6	; 214
     d56:	71 e0       	ldi	r23, 0x01	; 1
     d58:	76 83       	std	Z+6, r23	; 0x06
     d5a:	65 83       	std	Z+5, r22	; 0x05
     d5c:	87 83       	std	Z+7, r24	; 0x07
     d5e:	80 87       	std	Z+8, r24	; 0x08
     d60:	32 87       	std	Z+10, r19	; 0x0a
     d62:	21 87       	std	Z+9, r18	; 0x09
     d64:	14 86       	std	Z+12, r1	; 0x0c
     d66:	13 86       	std	Z+11, r1	; 0x0b
     d68:	eb eb       	ldi	r30, 0xBB	; 187
     d6a:	f1 e0       	ldi	r31, 0x01	; 1
     d6c:	6c e9       	ldi	r22, 0x9C	; 156
     d6e:	73 e0       	ldi	r23, 0x03	; 3
     d70:	71 83       	std	Z+1, r23	; 0x01
     d72:	60 83       	st	Z, r22
     d74:	13 82       	std	Z+3, r1	; 0x03
     d76:	12 82       	std	Z+2, r1	; 0x02
     d78:	59 e1       	ldi	r21, 0x19	; 25
     d7a:	59 0f       	add	r21, r25
     d7c:	54 83       	std	Z+4, r21	; 0x04
     d7e:	68 ec       	ldi	r22, 0xC8	; 200
     d80:	71 e0       	ldi	r23, 0x01	; 1
     d82:	76 83       	std	Z+6, r23	; 0x06
     d84:	65 83       	std	Z+5, r22	; 0x05
     d86:	87 83       	std	Z+7, r24	; 0x07
     d88:	80 87       	std	Z+8, r24	; 0x08
     d8a:	32 87       	std	Z+10, r19	; 0x0a
     d8c:	21 87       	std	Z+9, r18	; 0x09
     d8e:	14 86       	std	Z+12, r1	; 0x0c
     d90:	13 86       	std	Z+11, r1	; 0x0b
     d92:	ee ea       	ldi	r30, 0xAE	; 174
     d94:	f1 e0       	ldi	r31, 0x01	; 1
     d96:	11 82       	std	Z+1, r1	; 0x01
     d98:	10 82       	st	Z, r1
     d9a:	6f ed       	ldi	r22, 0xDF	; 223
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	73 83       	std	Z+3, r23	; 0x03
     da0:	62 83       	std	Z+2, r22	; 0x02
     da2:	5a e1       	ldi	r21, 0x1A	; 26
     da4:	59 0f       	add	r21, r25
     da6:	54 83       	std	Z+4, r21	; 0x04
     da8:	64 e0       	ldi	r22, 0x04	; 4
     daa:	71 e0       	ldi	r23, 0x01	; 1
     dac:	76 83       	std	Z+6, r23	; 0x06
     dae:	65 83       	std	Z+5, r22	; 0x05
     db0:	47 83       	std	Z+7, r20	; 0x07
     db2:	10 86       	std	Z+8, r1	; 0x08
     db4:	40 e2       	ldi	r20, 0x20	; 32
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	52 87       	std	Z+10, r21	; 0x0a
     dba:	41 87       	std	Z+9, r20	; 0x09
     dbc:	14 86       	std	Z+12, r1	; 0x0c
     dbe:	13 86       	std	Z+11, r1	; 0x0b
     dc0:	e1 ea       	ldi	r30, 0xA1	; 161
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	11 82       	std	Z+1, r1	; 0x01
     dc6:	10 82       	st	Z, r1
     dc8:	13 82       	std	Z+3, r1	; 0x03
     dca:	12 82       	std	Z+2, r1	; 0x02
     dcc:	4c e1       	ldi	r20, 0x1C	; 28
     dce:	49 0f       	add	r20, r25
     dd0:	40 93 78 03 	sts	0x0378, r20	; 0x800378 <regIndex>
     dd4:	95 5e       	subi	r25, 0xE5	; 229
     dd6:	94 83       	std	Z+4, r25	; 0x04
     dd8:	48 e9       	ldi	r20, 0x98	; 152
     dda:	51 e0       	ldi	r21, 0x01	; 1
     ddc:	56 83       	std	Z+6, r21	; 0x06
     dde:	45 83       	std	Z+5, r20	; 0x05
     de0:	87 83       	std	Z+7, r24	; 0x07
     de2:	80 87       	std	Z+8, r24	; 0x08
     de4:	32 87       	std	Z+10, r19	; 0x0a
     de6:	21 87       	std	Z+9, r18	; 0x09
     de8:	14 86       	std	Z+12, r1	; 0x0c
     dea:	13 86       	std	Z+11, r1	; 0x0b
     dec:	08 95       	ret

00000dee <__subsf3>:
     dee:	50 58       	subi	r21, 0x80	; 128

00000df0 <__addsf3>:
     df0:	bb 27       	eor	r27, r27
     df2:	aa 27       	eor	r26, r26
     df4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__addsf3x>
     df8:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__fp_round>
     dfc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fp_pscA>
     e00:	38 f0       	brcs	.+14     	; 0xe10 <__addsf3+0x20>
     e02:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__fp_pscB>
     e06:	20 f0       	brcs	.+8      	; 0xe10 <__addsf3+0x20>
     e08:	39 f4       	brne	.+14     	; 0xe18 <__addsf3+0x28>
     e0a:	9f 3f       	cpi	r25, 0xFF	; 255
     e0c:	19 f4       	brne	.+6      	; 0xe14 <__addsf3+0x24>
     e0e:	26 f4       	brtc	.+8      	; 0xe18 <__addsf3+0x28>
     e10:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_nan>
     e14:	0e f4       	brtc	.+2      	; 0xe18 <__addsf3+0x28>
     e16:	e0 95       	com	r30
     e18:	e7 fb       	bst	r30, 7
     e1a:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_inf>

00000e1e <__addsf3x>:
     e1e:	e9 2f       	mov	r30, r25
     e20:	0e 94 f8 07 	call	0xff0	; 0xff0 <__fp_split3>
     e24:	58 f3       	brcs	.-42     	; 0xdfc <__addsf3+0xc>
     e26:	ba 17       	cp	r27, r26
     e28:	62 07       	cpc	r22, r18
     e2a:	73 07       	cpc	r23, r19
     e2c:	84 07       	cpc	r24, r20
     e2e:	95 07       	cpc	r25, r21
     e30:	20 f0       	brcs	.+8      	; 0xe3a <__addsf3x+0x1c>
     e32:	79 f4       	brne	.+30     	; 0xe52 <__addsf3x+0x34>
     e34:	a6 f5       	brtc	.+104    	; 0xe9e <__addsf3x+0x80>
     e36:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_zero>
     e3a:	0e f4       	brtc	.+2      	; 0xe3e <__addsf3x+0x20>
     e3c:	e0 95       	com	r30
     e3e:	0b 2e       	mov	r0, r27
     e40:	ba 2f       	mov	r27, r26
     e42:	a0 2d       	mov	r26, r0
     e44:	0b 01       	movw	r0, r22
     e46:	b9 01       	movw	r22, r18
     e48:	90 01       	movw	r18, r0
     e4a:	0c 01       	movw	r0, r24
     e4c:	ca 01       	movw	r24, r20
     e4e:	a0 01       	movw	r20, r0
     e50:	11 24       	eor	r1, r1
     e52:	ff 27       	eor	r31, r31
     e54:	59 1b       	sub	r21, r25
     e56:	99 f0       	breq	.+38     	; 0xe7e <__addsf3x+0x60>
     e58:	59 3f       	cpi	r21, 0xF9	; 249
     e5a:	50 f4       	brcc	.+20     	; 0xe70 <__addsf3x+0x52>
     e5c:	50 3e       	cpi	r21, 0xE0	; 224
     e5e:	68 f1       	brcs	.+90     	; 0xeba <__addsf3x+0x9c>
     e60:	1a 16       	cp	r1, r26
     e62:	f0 40       	sbci	r31, 0x00	; 0
     e64:	a2 2f       	mov	r26, r18
     e66:	23 2f       	mov	r18, r19
     e68:	34 2f       	mov	r19, r20
     e6a:	44 27       	eor	r20, r20
     e6c:	58 5f       	subi	r21, 0xF8	; 248
     e6e:	f3 cf       	rjmp	.-26     	; 0xe56 <__addsf3x+0x38>
     e70:	46 95       	lsr	r20
     e72:	37 95       	ror	r19
     e74:	27 95       	ror	r18
     e76:	a7 95       	ror	r26
     e78:	f0 40       	sbci	r31, 0x00	; 0
     e7a:	53 95       	inc	r21
     e7c:	c9 f7       	brne	.-14     	; 0xe70 <__addsf3x+0x52>
     e7e:	7e f4       	brtc	.+30     	; 0xe9e <__addsf3x+0x80>
     e80:	1f 16       	cp	r1, r31
     e82:	ba 0b       	sbc	r27, r26
     e84:	62 0b       	sbc	r22, r18
     e86:	73 0b       	sbc	r23, r19
     e88:	84 0b       	sbc	r24, r20
     e8a:	ba f0       	brmi	.+46     	; 0xeba <__addsf3x+0x9c>
     e8c:	91 50       	subi	r25, 0x01	; 1
     e8e:	a1 f0       	breq	.+40     	; 0xeb8 <__addsf3x+0x9a>
     e90:	ff 0f       	add	r31, r31
     e92:	bb 1f       	adc	r27, r27
     e94:	66 1f       	adc	r22, r22
     e96:	77 1f       	adc	r23, r23
     e98:	88 1f       	adc	r24, r24
     e9a:	c2 f7       	brpl	.-16     	; 0xe8c <__addsf3x+0x6e>
     e9c:	0e c0       	rjmp	.+28     	; 0xeba <__addsf3x+0x9c>
     e9e:	ba 0f       	add	r27, r26
     ea0:	62 1f       	adc	r22, r18
     ea2:	73 1f       	adc	r23, r19
     ea4:	84 1f       	adc	r24, r20
     ea6:	48 f4       	brcc	.+18     	; 0xeba <__addsf3x+0x9c>
     ea8:	87 95       	ror	r24
     eaa:	77 95       	ror	r23
     eac:	67 95       	ror	r22
     eae:	b7 95       	ror	r27
     eb0:	f7 95       	ror	r31
     eb2:	9e 3f       	cpi	r25, 0xFE	; 254
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <__addsf3x+0x9a>
     eb6:	b0 cf       	rjmp	.-160    	; 0xe18 <__addsf3+0x28>
     eb8:	93 95       	inc	r25
     eba:	88 0f       	add	r24, r24
     ebc:	08 f0       	brcs	.+2      	; 0xec0 <__addsf3x+0xa2>
     ebe:	99 27       	eor	r25, r25
     ec0:	ee 0f       	add	r30, r30
     ec2:	97 95       	ror	r25
     ec4:	87 95       	ror	r24
     ec6:	08 95       	ret

00000ec8 <__fixunssfsi>:
     ec8:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_splitA>
     ecc:	88 f0       	brcs	.+34     	; 0xef0 <__fixunssfsi+0x28>
     ece:	9f 57       	subi	r25, 0x7F	; 127
     ed0:	98 f0       	brcs	.+38     	; 0xef8 <__fixunssfsi+0x30>
     ed2:	b9 2f       	mov	r27, r25
     ed4:	99 27       	eor	r25, r25
     ed6:	b7 51       	subi	r27, 0x17	; 23
     ed8:	b0 f0       	brcs	.+44     	; 0xf06 <__fixunssfsi+0x3e>
     eda:	e1 f0       	breq	.+56     	; 0xf14 <__fixunssfsi+0x4c>
     edc:	66 0f       	add	r22, r22
     ede:	77 1f       	adc	r23, r23
     ee0:	88 1f       	adc	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	1a f0       	brmi	.+6      	; 0xeec <__fixunssfsi+0x24>
     ee6:	ba 95       	dec	r27
     ee8:	c9 f7       	brne	.-14     	; 0xedc <__fixunssfsi+0x14>
     eea:	14 c0       	rjmp	.+40     	; 0xf14 <__fixunssfsi+0x4c>
     eec:	b1 30       	cpi	r27, 0x01	; 1
     eee:	91 f0       	breq	.+36     	; 0xf14 <__fixunssfsi+0x4c>
     ef0:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fp_zero>
     ef4:	b1 e0       	ldi	r27, 0x01	; 1
     ef6:	08 95       	ret
     ef8:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_zero>
     efc:	67 2f       	mov	r22, r23
     efe:	78 2f       	mov	r23, r24
     f00:	88 27       	eor	r24, r24
     f02:	b8 5f       	subi	r27, 0xF8	; 248
     f04:	39 f0       	breq	.+14     	; 0xf14 <__fixunssfsi+0x4c>
     f06:	b9 3f       	cpi	r27, 0xF9	; 249
     f08:	cc f3       	brlt	.-14     	; 0xefc <__fixunssfsi+0x34>
     f0a:	86 95       	lsr	r24
     f0c:	77 95       	ror	r23
     f0e:	67 95       	ror	r22
     f10:	b3 95       	inc	r27
     f12:	d9 f7       	brne	.-10     	; 0xf0a <__fixunssfsi+0x42>
     f14:	3e f4       	brtc	.+14     	; 0xf24 <__fixunssfsi+0x5c>
     f16:	90 95       	com	r25
     f18:	80 95       	com	r24
     f1a:	70 95       	com	r23
     f1c:	61 95       	neg	r22
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	8f 4f       	sbci	r24, 0xFF	; 255
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	08 95       	ret

00000f26 <__floatunsisf>:
     f26:	e8 94       	clt
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <__floatsisf+0x12>

00000f2a <__floatsisf>:
     f2a:	97 fb       	bst	r25, 7
     f2c:	3e f4       	brtc	.+14     	; 0xf3c <__floatsisf+0x12>
     f2e:	90 95       	com	r25
     f30:	80 95       	com	r24
     f32:	70 95       	com	r23
     f34:	61 95       	neg	r22
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	8f 4f       	sbci	r24, 0xFF	; 255
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	99 23       	and	r25, r25
     f3e:	a9 f0       	breq	.+42     	; 0xf6a <__floatsisf+0x40>
     f40:	f9 2f       	mov	r31, r25
     f42:	96 e9       	ldi	r25, 0x96	; 150
     f44:	bb 27       	eor	r27, r27
     f46:	93 95       	inc	r25
     f48:	f6 95       	lsr	r31
     f4a:	87 95       	ror	r24
     f4c:	77 95       	ror	r23
     f4e:	67 95       	ror	r22
     f50:	b7 95       	ror	r27
     f52:	f1 11       	cpse	r31, r1
     f54:	f8 cf       	rjmp	.-16     	; 0xf46 <__floatsisf+0x1c>
     f56:	fa f4       	brpl	.+62     	; 0xf96 <__floatsisf+0x6c>
     f58:	bb 0f       	add	r27, r27
     f5a:	11 f4       	brne	.+4      	; 0xf60 <__floatsisf+0x36>
     f5c:	60 ff       	sbrs	r22, 0
     f5e:	1b c0       	rjmp	.+54     	; 0xf96 <__floatsisf+0x6c>
     f60:	6f 5f       	subi	r22, 0xFF	; 255
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	8f 4f       	sbci	r24, 0xFF	; 255
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	16 c0       	rjmp	.+44     	; 0xf96 <__floatsisf+0x6c>
     f6a:	88 23       	and	r24, r24
     f6c:	11 f0       	breq	.+4      	; 0xf72 <__floatsisf+0x48>
     f6e:	96 e9       	ldi	r25, 0x96	; 150
     f70:	11 c0       	rjmp	.+34     	; 0xf94 <__floatsisf+0x6a>
     f72:	77 23       	and	r23, r23
     f74:	21 f0       	breq	.+8      	; 0xf7e <__floatsisf+0x54>
     f76:	9e e8       	ldi	r25, 0x8E	; 142
     f78:	87 2f       	mov	r24, r23
     f7a:	76 2f       	mov	r23, r22
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <__floatsisf+0x5e>
     f7e:	66 23       	and	r22, r22
     f80:	71 f0       	breq	.+28     	; 0xf9e <__floatsisf+0x74>
     f82:	96 e8       	ldi	r25, 0x86	; 134
     f84:	86 2f       	mov	r24, r22
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	2a f0       	brmi	.+10     	; 0xf96 <__floatsisf+0x6c>
     f8c:	9a 95       	dec	r25
     f8e:	66 0f       	add	r22, r22
     f90:	77 1f       	adc	r23, r23
     f92:	88 1f       	adc	r24, r24
     f94:	da f7       	brpl	.-10     	; 0xf8c <__floatsisf+0x62>
     f96:	88 0f       	add	r24, r24
     f98:	96 95       	lsr	r25
     f9a:	87 95       	ror	r24
     f9c:	97 f9       	bld	r25, 7
     f9e:	08 95       	ret

00000fa0 <__fp_inf>:
     fa0:	97 f9       	bld	r25, 7
     fa2:	9f 67       	ori	r25, 0x7F	; 127
     fa4:	80 e8       	ldi	r24, 0x80	; 128
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	08 95       	ret

00000fac <__fp_nan>:
     fac:	9f ef       	ldi	r25, 0xFF	; 255
     fae:	80 ec       	ldi	r24, 0xC0	; 192
     fb0:	08 95       	ret

00000fb2 <__fp_pscA>:
     fb2:	00 24       	eor	r0, r0
     fb4:	0a 94       	dec	r0
     fb6:	16 16       	cp	r1, r22
     fb8:	17 06       	cpc	r1, r23
     fba:	18 06       	cpc	r1, r24
     fbc:	09 06       	cpc	r0, r25
     fbe:	08 95       	ret

00000fc0 <__fp_pscB>:
     fc0:	00 24       	eor	r0, r0
     fc2:	0a 94       	dec	r0
     fc4:	12 16       	cp	r1, r18
     fc6:	13 06       	cpc	r1, r19
     fc8:	14 06       	cpc	r1, r20
     fca:	05 06       	cpc	r0, r21
     fcc:	08 95       	ret

00000fce <__fp_round>:
     fce:	09 2e       	mov	r0, r25
     fd0:	03 94       	inc	r0
     fd2:	00 0c       	add	r0, r0
     fd4:	11 f4       	brne	.+4      	; 0xfda <__fp_round+0xc>
     fd6:	88 23       	and	r24, r24
     fd8:	52 f0       	brmi	.+20     	; 0xfee <__fp_round+0x20>
     fda:	bb 0f       	add	r27, r27
     fdc:	40 f4       	brcc	.+16     	; 0xfee <__fp_round+0x20>
     fde:	bf 2b       	or	r27, r31
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <__fp_round+0x18>
     fe2:	60 ff       	sbrs	r22, 0
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <__fp_round+0x20>
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8f 4f       	sbci	r24, 0xFF	; 255
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	08 95       	ret

00000ff0 <__fp_split3>:
     ff0:	57 fd       	sbrc	r21, 7
     ff2:	90 58       	subi	r25, 0x80	; 128
     ff4:	44 0f       	add	r20, r20
     ff6:	55 1f       	adc	r21, r21
     ff8:	59 f0       	breq	.+22     	; 0x1010 <__fp_splitA+0x10>
     ffa:	5f 3f       	cpi	r21, 0xFF	; 255
     ffc:	71 f0       	breq	.+28     	; 0x101a <__fp_splitA+0x1a>
     ffe:	47 95       	ror	r20

00001000 <__fp_splitA>:
    1000:	88 0f       	add	r24, r24
    1002:	97 fb       	bst	r25, 7
    1004:	99 1f       	adc	r25, r25
    1006:	61 f0       	breq	.+24     	; 0x1020 <__fp_splitA+0x20>
    1008:	9f 3f       	cpi	r25, 0xFF	; 255
    100a:	79 f0       	breq	.+30     	; 0x102a <__fp_splitA+0x2a>
    100c:	87 95       	ror	r24
    100e:	08 95       	ret
    1010:	12 16       	cp	r1, r18
    1012:	13 06       	cpc	r1, r19
    1014:	14 06       	cpc	r1, r20
    1016:	55 1f       	adc	r21, r21
    1018:	f2 cf       	rjmp	.-28     	; 0xffe <__fp_split3+0xe>
    101a:	46 95       	lsr	r20
    101c:	f1 df       	rcall	.-30     	; 0x1000 <__fp_splitA>
    101e:	08 c0       	rjmp	.+16     	; 0x1030 <__fp_splitA+0x30>
    1020:	16 16       	cp	r1, r22
    1022:	17 06       	cpc	r1, r23
    1024:	18 06       	cpc	r1, r24
    1026:	99 1f       	adc	r25, r25
    1028:	f1 cf       	rjmp	.-30     	; 0x100c <__fp_splitA+0xc>
    102a:	86 95       	lsr	r24
    102c:	71 05       	cpc	r23, r1
    102e:	61 05       	cpc	r22, r1
    1030:	08 94       	sec
    1032:	08 95       	ret

00001034 <__fp_zero>:
    1034:	e8 94       	clt

00001036 <__fp_szero>:
    1036:	bb 27       	eor	r27, r27
    1038:	66 27       	eor	r22, r22
    103a:	77 27       	eor	r23, r23
    103c:	cb 01       	movw	r24, r22
    103e:	97 f9       	bld	r25, 7
    1040:	08 95       	ret

00001042 <__mulsf3>:
    1042:	0e 94 34 08 	call	0x1068	; 0x1068 <__mulsf3x>
    1046:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__fp_round>
    104a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fp_pscA>
    104e:	38 f0       	brcs	.+14     	; 0x105e <__mulsf3+0x1c>
    1050:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__fp_pscB>
    1054:	20 f0       	brcs	.+8      	; 0x105e <__mulsf3+0x1c>
    1056:	95 23       	and	r25, r21
    1058:	11 f0       	breq	.+4      	; 0x105e <__mulsf3+0x1c>
    105a:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_inf>
    105e:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_nan>
    1062:	11 24       	eor	r1, r1
    1064:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_szero>

00001068 <__mulsf3x>:
    1068:	0e 94 f8 07 	call	0xff0	; 0xff0 <__fp_split3>
    106c:	70 f3       	brcs	.-36     	; 0x104a <__mulsf3+0x8>

0000106e <__mulsf3_pse>:
    106e:	95 9f       	mul	r25, r21
    1070:	c1 f3       	breq	.-16     	; 0x1062 <__mulsf3+0x20>
    1072:	95 0f       	add	r25, r21
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	55 1f       	adc	r21, r21
    1078:	62 9f       	mul	r22, r18
    107a:	f0 01       	movw	r30, r0
    107c:	72 9f       	mul	r23, r18
    107e:	bb 27       	eor	r27, r27
    1080:	f0 0d       	add	r31, r0
    1082:	b1 1d       	adc	r27, r1
    1084:	63 9f       	mul	r22, r19
    1086:	aa 27       	eor	r26, r26
    1088:	f0 0d       	add	r31, r0
    108a:	b1 1d       	adc	r27, r1
    108c:	aa 1f       	adc	r26, r26
    108e:	64 9f       	mul	r22, r20
    1090:	66 27       	eor	r22, r22
    1092:	b0 0d       	add	r27, r0
    1094:	a1 1d       	adc	r26, r1
    1096:	66 1f       	adc	r22, r22
    1098:	82 9f       	mul	r24, r18
    109a:	22 27       	eor	r18, r18
    109c:	b0 0d       	add	r27, r0
    109e:	a1 1d       	adc	r26, r1
    10a0:	62 1f       	adc	r22, r18
    10a2:	73 9f       	mul	r23, r19
    10a4:	b0 0d       	add	r27, r0
    10a6:	a1 1d       	adc	r26, r1
    10a8:	62 1f       	adc	r22, r18
    10aa:	83 9f       	mul	r24, r19
    10ac:	a0 0d       	add	r26, r0
    10ae:	61 1d       	adc	r22, r1
    10b0:	22 1f       	adc	r18, r18
    10b2:	74 9f       	mul	r23, r20
    10b4:	33 27       	eor	r19, r19
    10b6:	a0 0d       	add	r26, r0
    10b8:	61 1d       	adc	r22, r1
    10ba:	23 1f       	adc	r18, r19
    10bc:	84 9f       	mul	r24, r20
    10be:	60 0d       	add	r22, r0
    10c0:	21 1d       	adc	r18, r1
    10c2:	82 2f       	mov	r24, r18
    10c4:	76 2f       	mov	r23, r22
    10c6:	6a 2f       	mov	r22, r26
    10c8:	11 24       	eor	r1, r1
    10ca:	9f 57       	subi	r25, 0x7F	; 127
    10cc:	50 40       	sbci	r21, 0x00	; 0
    10ce:	9a f0       	brmi	.+38     	; 0x10f6 <__mulsf3_pse+0x88>
    10d0:	f1 f0       	breq	.+60     	; 0x110e <__mulsf3_pse+0xa0>
    10d2:	88 23       	and	r24, r24
    10d4:	4a f0       	brmi	.+18     	; 0x10e8 <__mulsf3_pse+0x7a>
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	bb 1f       	adc	r27, r27
    10dc:	66 1f       	adc	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	91 50       	subi	r25, 0x01	; 1
    10e4:	50 40       	sbci	r21, 0x00	; 0
    10e6:	a9 f7       	brne	.-22     	; 0x10d2 <__mulsf3_pse+0x64>
    10e8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ea:	51 05       	cpc	r21, r1
    10ec:	80 f0       	brcs	.+32     	; 0x110e <__mulsf3_pse+0xa0>
    10ee:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_inf>
    10f2:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_szero>
    10f6:	5f 3f       	cpi	r21, 0xFF	; 255
    10f8:	e4 f3       	brlt	.-8      	; 0x10f2 <__mulsf3_pse+0x84>
    10fa:	98 3e       	cpi	r25, 0xE8	; 232
    10fc:	d4 f3       	brlt	.-12     	; 0x10f2 <__mulsf3_pse+0x84>
    10fe:	86 95       	lsr	r24
    1100:	77 95       	ror	r23
    1102:	67 95       	ror	r22
    1104:	b7 95       	ror	r27
    1106:	f7 95       	ror	r31
    1108:	e7 95       	ror	r30
    110a:	9f 5f       	subi	r25, 0xFF	; 255
    110c:	c1 f7       	brne	.-16     	; 0x10fe <__mulsf3_pse+0x90>
    110e:	fe 2b       	or	r31, r30
    1110:	88 0f       	add	r24, r24
    1112:	91 1d       	adc	r25, r1
    1114:	96 95       	lsr	r25
    1116:	87 95       	ror	r24
    1118:	97 f9       	bld	r25, 7
    111a:	08 95       	ret

0000111c <initVariant>:
    111c:	08 95       	ret

0000111e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    111e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <init>

	initVariant();
    1122:	0e 94 8e 08 	call	0x111c	; 0x111c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1126:	0e 94 ae 00 	call	0x15c	; 0x15c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    112a:	c0 e0       	ldi	r28, 0x00	; 0
    112c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    112e:	0e 94 1d 01 	call	0x23a	; 0x23a <loop>
		if (serialEventRun) serialEventRun();
    1132:	20 97       	sbiw	r28, 0x00	; 0
    1134:	e1 f3       	breq	.-8      	; 0x112e <main+0x10>
    1136:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    113a:	f9 cf       	rjmp	.-14     	; 0x112e <main+0x10>

0000113c <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	8f 93       	push	r24
    114c:	9f 93       	push	r25
    114e:	af 93       	push	r26
    1150:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1152:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <timer0_millis>
    1156:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <timer0_millis+0x1>
    115a:	a0 91 24 03 	lds	r26, 0x0324	; 0x800324 <timer0_millis+0x2>
    115e:	b0 91 25 03 	lds	r27, 0x0325	; 0x800325 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1162:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1166:	26 e0       	ldi	r18, 0x06	; 6
    1168:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    116a:	2d 37       	cpi	r18, 0x7D	; 125
    116c:	20 f4       	brcc	.+8      	; 0x1176 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    116e:	02 96       	adiw	r24, 0x02	; 2
    1170:	a1 1d       	adc	r26, r1
    1172:	b1 1d       	adc	r27, r1
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1176:	29 e8       	ldi	r18, 0x89	; 137
    1178:	23 0f       	add	r18, r19
		m += 1;
    117a:	03 96       	adiw	r24, 0x03	; 3
    117c:	a1 1d       	adc	r26, r1
    117e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1180:	20 93 21 03 	sts	0x0321, r18	; 0x800321 <timer0_fract>
	timer0_millis = m;
    1184:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <timer0_millis>
    1188:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <timer0_millis+0x1>
    118c:	a0 93 24 03 	sts	0x0324, r26	; 0x800324 <timer0_millis+0x2>
    1190:	b0 93 25 03 	sts	0x0325, r27	; 0x800325 <timer0_millis+0x3>
	timer0_overflow_count++;
    1194:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <timer0_overflow_count>
    1198:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <timer0_overflow_count+0x1>
    119c:	a0 91 28 03 	lds	r26, 0x0328	; 0x800328 <timer0_overflow_count+0x2>
    11a0:	b0 91 29 03 	lds	r27, 0x0329	; 0x800329 <timer0_overflow_count+0x3>
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	a1 1d       	adc	r26, r1
    11a8:	b1 1d       	adc	r27, r1
    11aa:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <timer0_overflow_count>
    11ae:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <timer0_overflow_count+0x1>
    11b2:	a0 93 28 03 	sts	0x0328, r26	; 0x800328 <timer0_overflow_count+0x2>
    11b6:	b0 93 29 03 	sts	0x0329, r27	; 0x800329 <timer0_overflow_count+0x3>
}
    11ba:	bf 91       	pop	r27
    11bc:	af 91       	pop	r26
    11be:	9f 91       	pop	r25
    11c0:	8f 91       	pop	r24
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    11d0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    11d2:	f8 94       	cli
	m = timer0_millis;
    11d4:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <timer0_millis>
    11d8:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <timer0_millis+0x1>
    11dc:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <timer0_millis+0x2>
    11e0:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <timer0_millis+0x3>
	SREG = oldSREG;
    11e4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    11e6:	08 95       	ret

000011e8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    11e8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    11ea:	f8 94       	cli
	m = timer0_overflow_count;
    11ec:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <timer0_overflow_count>
    11f0:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <timer0_overflow_count+0x1>
    11f4:	a0 91 28 03 	lds	r26, 0x0328	; 0x800328 <timer0_overflow_count+0x2>
    11f8:	b0 91 29 03 	lds	r27, 0x0329	; 0x800329 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    11fc:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    11fe:	a8 9b       	sbis	0x15, 0	; 21
    1200:	05 c0       	rjmp	.+10     	; 0x120c <micros+0x24>
    1202:	2f 3f       	cpi	r18, 0xFF	; 255
    1204:	19 f0       	breq	.+6      	; 0x120c <micros+0x24>
		m++;
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	a1 1d       	adc	r26, r1
    120a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    120c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    120e:	ba 2f       	mov	r27, r26
    1210:	a9 2f       	mov	r26, r25
    1212:	98 2f       	mov	r25, r24
    1214:	88 27       	eor	r24, r24
    1216:	82 0f       	add	r24, r18
    1218:	91 1d       	adc	r25, r1
    121a:	a1 1d       	adc	r26, r1
    121c:	b1 1d       	adc	r27, r1
    121e:	bc 01       	movw	r22, r24
    1220:	cd 01       	movw	r24, r26
    1222:	43 e0       	ldi	r20, 0x03	; 3
    1224:	66 0f       	add	r22, r22
    1226:	77 1f       	adc	r23, r23
    1228:	88 1f       	adc	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	4a 95       	dec	r20
    122e:	d1 f7       	brne	.-12     	; 0x1224 <micros+0x3c>
}
    1230:	08 95       	ret

00001232 <delay>:

void delay(unsigned long ms)
{
    1232:	8f 92       	push	r8
    1234:	9f 92       	push	r9
    1236:	af 92       	push	r10
    1238:	bf 92       	push	r11
    123a:	cf 92       	push	r12
    123c:	df 92       	push	r13
    123e:	ef 92       	push	r14
    1240:	ff 92       	push	r15
    1242:	6b 01       	movw	r12, r22
    1244:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1246:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <micros>
    124a:	4b 01       	movw	r8, r22
    124c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    124e:	c1 14       	cp	r12, r1
    1250:	d1 04       	cpc	r13, r1
    1252:	e1 04       	cpc	r14, r1
    1254:	f1 04       	cpc	r15, r1
    1256:	01 f1       	breq	.+64     	; 0x1298 <delay+0x66>
		yield();
    1258:	0e 94 e7 15 	call	0x2bce	; 0x2bce <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    125c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <micros>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	88 19       	sub	r24, r8
    1266:	99 09       	sbc	r25, r9
    1268:	aa 09       	sbc	r26, r10
    126a:	bb 09       	sbc	r27, r11
    126c:	88 3e       	cpi	r24, 0xE8	; 232
    126e:	93 40       	sbci	r25, 0x03	; 3
    1270:	a1 05       	cpc	r26, r1
    1272:	b1 05       	cpc	r27, r1
    1274:	60 f3       	brcs	.-40     	; 0x124e <delay+0x1c>
			ms--;
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	c2 1a       	sub	r12, r18
    127a:	d1 08       	sbc	r13, r1
    127c:	e1 08       	sbc	r14, r1
    127e:	f1 08       	sbc	r15, r1
			start += 1000;
    1280:	88 ee       	ldi	r24, 0xE8	; 232
    1282:	88 0e       	add	r8, r24
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	98 1e       	adc	r9, r24
    1288:	a1 1c       	adc	r10, r1
    128a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    128c:	c1 14       	cp	r12, r1
    128e:	d1 04       	cpc	r13, r1
    1290:	e1 04       	cpc	r14, r1
    1292:	f1 04       	cpc	r15, r1
    1294:	19 f7       	brne	.-58     	; 0x125c <delay+0x2a>
    1296:	db cf       	rjmp	.-74     	; 0x124e <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	bf 90       	pop	r11
    12a2:	af 90       	pop	r10
    12a4:	9f 90       	pop	r9
    12a6:	8f 90       	pop	r8
    12a8:	08 95       	ret

000012aa <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	28 f0       	brcs	.+10     	; 0x12ba <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
    12b4:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <delayMicroseconds+0xc>
    12ba:	08 95       	ret

000012bc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    12bc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    12be:	84 b5       	in	r24, 0x24	; 36
    12c0:	82 60       	ori	r24, 0x02	; 2
    12c2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    12c4:	84 b5       	in	r24, 0x24	; 36
    12c6:	81 60       	ori	r24, 0x01	; 1
    12c8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    12ca:	85 b5       	in	r24, 0x25	; 37
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    12d0:	85 b5       	in	r24, 0x25	; 37
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    12d6:	ee e6       	ldi	r30, 0x6E	; 110
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	81 60       	ori	r24, 0x01	; 1
    12de:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    12e0:	e1 e8       	ldi	r30, 0x81	; 129
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    12e6:	80 81       	ld	r24, Z
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    12ec:	80 81       	ld	r24, Z
    12ee:	81 60       	ori	r24, 0x01	; 1
    12f0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12f2:	e0 e8       	ldi	r30, 0x80	; 128
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	81 60       	ori	r24, 0x01	; 1
    12fa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    12fc:	e1 eb       	ldi	r30, 0xB1	; 177
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	84 60       	ori	r24, 0x04	; 4
    1304:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1306:	e0 eb       	ldi	r30, 0xB0	; 176
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	81 60       	ori	r24, 0x01	; 1
    130e:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1310:	ea e7       	ldi	r30, 0x7A	; 122
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	84 60       	ori	r24, 0x04	; 4
    1318:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    131a:	80 81       	ld	r24, Z
    131c:	82 60       	ori	r24, 0x02	; 2
    131e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1320:	80 81       	ld	r24, Z
    1322:	8e 7f       	andi	r24, 0xFE	; 254
    1324:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1326:	80 81       	ld	r24, Z
    1328:	80 68       	ori	r24, 0x80	; 128
    132a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    132c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1330:	08 95       	ret

00001332 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    1332:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <analog_reference>
    1336:	08 95       	ret

00001338 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1338:	8e 30       	cpi	r24, 0x0E	; 14
    133a:	08 f0       	brcs	.+2      	; 0x133e <analogRead+0x6>
    133c:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    133e:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <analog_reference>
    1342:	90 e4       	ldi	r25, 0x40	; 64
    1344:	29 9f       	mul	r18, r25
    1346:	90 01       	movw	r18, r0
    1348:	11 24       	eor	r1, r1
    134a:	87 70       	andi	r24, 0x07	; 7
    134c:	82 2b       	or	r24, r18
    134e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1352:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1356:	80 64       	ori	r24, 0x40	; 64
    1358:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    135c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1360:	86 fd       	sbrc	r24, 6
    1362:	fc cf       	rjmp	.-8      	; 0x135c <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1364:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    1368:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    136c:	90 e0       	ldi	r25, 0x00	; 0
}
    136e:	92 2b       	or	r25, r18
    1370:	08 95       	ret

00001372 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	81 f0       	breq	.+32     	; 0x1396 <turnOffPWM+0x24>
    1376:	28 f4       	brcc	.+10     	; 0x1382 <turnOffPWM+0x10>
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	99 f0       	breq	.+38     	; 0x13a2 <turnOffPWM+0x30>
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	a1 f0       	breq	.+40     	; 0x13a8 <turnOffPWM+0x36>
    1380:	08 95       	ret
    1382:	87 30       	cpi	r24, 0x07	; 7
    1384:	a9 f0       	breq	.+42     	; 0x13b0 <turnOffPWM+0x3e>
    1386:	88 30       	cpi	r24, 0x08	; 8
    1388:	b9 f0       	breq	.+46     	; 0x13b8 <turnOffPWM+0x46>
    138a:	84 30       	cpi	r24, 0x04	; 4
    138c:	d1 f4       	brne	.+52     	; 0x13c2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    138e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1392:	8f 7d       	andi	r24, 0xDF	; 223
    1394:	03 c0       	rjmp	.+6      	; 0x139c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1396:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    139a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    139c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    13a0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13a2:	84 b5       	in	r24, 0x24	; 36
    13a4:	8f 77       	andi	r24, 0x7F	; 127
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13a8:	84 b5       	in	r24, 0x24	; 36
    13aa:	8f 7d       	andi	r24, 0xDF	; 223
    13ac:	84 bd       	out	0x24, r24	; 36
    13ae:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    13b4:	8f 77       	andi	r24, 0x7F	; 127
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13b8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    13bc:	8f 7d       	andi	r24, 0xDF	; 223
    13be:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    13c2:	08 95       	ret

000013c4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	fc 01       	movw	r30, r24
    13cc:	e4 58       	subi	r30, 0x84	; 132
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    13d2:	fc 01       	movw	r30, r24
    13d4:	e0 57       	subi	r30, 0x70	; 112
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    13da:	88 23       	and	r24, r24
    13dc:	61 f1       	breq	.+88     	; 0x1436 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	fc 01       	movw	r30, r24
    13e6:	e2 55       	subi	r30, 0x52	; 82
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	c5 91       	lpm	r28, Z+
    13ec:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    13ee:	fc 01       	movw	r30, r24
    13f0:	ec 55       	subi	r30, 0x5C	; 92
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	a5 91       	lpm	r26, Z+
    13f6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    13f8:	61 11       	cpse	r22, r1
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    13fc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13fe:	f8 94       	cli
		*reg &= ~bit;
    1400:	88 81       	ld	r24, Y
    1402:	20 95       	com	r18
    1404:	82 23       	and	r24, r18
    1406:	88 83       	st	Y, r24
		*out &= ~bit;
    1408:	ec 91       	ld	r30, X
    140a:	2e 23       	and	r18, r30
    140c:	0b c0       	rjmp	.+22     	; 0x1424 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    140e:	62 30       	cpi	r22, 0x02	; 2
    1410:	61 f4       	brne	.+24     	; 0x142a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1412:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1414:	f8 94       	cli
		*reg &= ~bit;
    1416:	88 81       	ld	r24, Y
    1418:	32 2f       	mov	r19, r18
    141a:	30 95       	com	r19
    141c:	83 23       	and	r24, r19
    141e:	88 83       	st	Y, r24
		*out |= bit;
    1420:	ec 91       	ld	r30, X
    1422:	2e 2b       	or	r18, r30
    1424:	2c 93       	st	X, r18
		SREG = oldSREG;
    1426:	9f bf       	out	0x3f, r25	; 63
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    142a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    142c:	f8 94       	cli
		*reg |= bit;
    142e:	e8 81       	ld	r30, Y
    1430:	2e 2b       	or	r18, r30
    1432:	28 83       	st	Y, r18
		SREG = oldSREG;
    1434:	8f bf       	out	0x3f, r24	; 63
	}
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	f9 01       	movw	r30, r18
    1448:	e8 59       	subi	r30, 0x98	; 152
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    144e:	f9 01       	movw	r30, r18
    1450:	e4 58       	subi	r30, 0x84	; 132
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1456:	f9 01       	movw	r30, r18
    1458:	e0 57       	subi	r30, 0x70	; 112
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    145e:	cc 23       	and	r28, r28
    1460:	c1 f0       	breq	.+48     	; 0x1492 <digitalWrite+0x56>
    1462:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1464:	81 11       	cpse	r24, r1
    1466:	0e 94 b9 09 	call	0x1372	; 0x1372 <turnOffPWM>

	out = portOutputRegister(port);
    146a:	ec 2f       	mov	r30, r28
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	ec 55       	subi	r30, 0x5C	; 92
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	a5 91       	lpm	r26, Z+
    1478:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    147a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    147c:	f8 94       	cli

	if (val == LOW) {
    147e:	11 11       	cpse	r17, r1
    1480:	04 c0       	rjmp	.+8      	; 0x148a <digitalWrite+0x4e>
		*out &= ~bit;
    1482:	8c 91       	ld	r24, X
    1484:	d0 95       	com	r29
    1486:	d8 23       	and	r29, r24
    1488:	02 c0       	rjmp	.+4      	; 0x148e <digitalWrite+0x52>
	} else {
		*out |= bit;
    148a:	ec 91       	ld	r30, X
    148c:	de 2b       	or	r29, r30
    148e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1490:	9f bf       	out	0x3f, r25	; 63
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	08 95       	ret

0000149a <_ZN7TwoWire5writeEi>:
  }
  else
    retVal = -1;

  return retVal;
}
    149a:	dc 01       	movw	r26, r24
    149c:	ed 91       	ld	r30, X+
    149e:	fc 91       	ld	r31, X
    14a0:	01 90       	ld	r0, Z+
    14a2:	f0 81       	ld	r31, Z
    14a4:	e0 2d       	mov	r30, r0
    14a6:	09 94       	ijmp

000014a8 <_ZN8AMS_5600C1Ev>:
    14a8:	fc 01       	movw	r30, r24
    14aa:	86 e3       	ldi	r24, 0x36	; 54
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
    14b2:	15 86       	std	Z+13, r1	; 0x0d
    14b4:	14 86       	std	Z+12, r1	; 0x0c
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	97 87       	std	Z+15, r25	; 0x0f
    14bc:	86 87       	std	Z+14, r24	; 0x0e
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	91 8b       	std	Z+17, r25	; 0x11
    14c4:	80 8b       	std	Z+16, r24	; 0x10
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	93 8b       	std	Z+19, r25	; 0x13
    14cc:	82 8b       	std	Z+18, r24	; 0x12
    14ce:	84 e0       	ldi	r24, 0x04	; 4
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	95 8b       	std	Z+21, r25	; 0x15
    14d4:	84 8b       	std	Z+20, r24	; 0x14
    14d6:	85 e0       	ldi	r24, 0x05	; 5
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	97 8b       	std	Z+23, r25	; 0x17
    14dc:	86 8b       	std	Z+22, r24	; 0x16
    14de:	86 e0       	ldi	r24, 0x06	; 6
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	91 8f       	std	Z+25, r25	; 0x19
    14e4:	80 8f       	std	Z+24, r24	; 0x18
    14e6:	87 e0       	ldi	r24, 0x07	; 7
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	93 8f       	std	Z+27, r25	; 0x1b
    14ec:	82 8f       	std	Z+26, r24	; 0x1a
    14ee:	88 e0       	ldi	r24, 0x08	; 8
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	95 8f       	std	Z+29, r25	; 0x1d
    14f4:	84 8f       	std	Z+28, r24	; 0x1c
    14f6:	8c e0       	ldi	r24, 0x0C	; 12
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	97 8f       	std	Z+31, r25	; 0x1f
    14fc:	86 8f       	std	Z+30, r24	; 0x1e
    14fe:	8d e0       	ldi	r24, 0x0D	; 13
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	91 a3       	std	Z+33, r25	; 0x21
    1504:	80 a3       	std	Z+32, r24	; 0x20
    1506:	8e e0       	ldi	r24, 0x0E	; 14
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	93 a3       	std	Z+35, r25	; 0x23
    150c:	82 a3       	std	Z+34, r24	; 0x22
    150e:	8f e0       	ldi	r24, 0x0F	; 15
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	95 a3       	std	Z+37, r25	; 0x25
    1514:	84 a3       	std	Z+36, r24	; 0x24
    1516:	8b e0       	ldi	r24, 0x0B	; 11
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	97 a3       	std	Z+39, r25	; 0x27
    151c:	86 a3       	std	Z+38, r24	; 0x26
    151e:	8a e1       	ldi	r24, 0x1A	; 26
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	91 a7       	std	Z+41, r25	; 0x29
    1524:	80 a7       	std	Z+40, r24	; 0x28
    1526:	8b e1       	ldi	r24, 0x1B	; 27
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	93 a7       	std	Z+43, r25	; 0x2b
    152c:	82 a7       	std	Z+42, r24	; 0x2a
    152e:	8c e1       	ldi	r24, 0x1C	; 28
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	95 a7       	std	Z+45, r25	; 0x2d
    1534:	84 a7       	std	Z+44, r24	; 0x2c
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	97 a7       	std	Z+47, r25	; 0x2f
    153c:	86 a7       	std	Z+46, r24	; 0x2e
    153e:	08 95       	ret

00001540 <_ZN8AMS_560010getAddressEv>:
    1540:	fc 01       	movw	r30, r24
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	08 95       	ret

00001548 <_ZN8AMS_560012writeOneByteEii>:
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	8b 01       	movw	r16, r22
    1552:	ea 01       	movw	r28, r20
    1554:	fc 01       	movw	r30, r24
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	82 ec       	ldi	r24, 0xC2	; 194
    155c:	93 e0       	ldi	r25, 0x03	; 3
    155e:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN7TwoWire17beginTransmissionEi>
    1562:	b8 01       	movw	r22, r16
    1564:	82 ec       	ldi	r24, 0xC2	; 194
    1566:	93 e0       	ldi	r25, 0x03	; 3
    1568:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN7TwoWire5writeEi>
    156c:	be 01       	movw	r22, r28
    156e:	82 ec       	ldi	r24, 0xC2	; 194
    1570:	93 e0       	ldi	r25, 0x03	; 3
    1572:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN7TwoWire5writeEi>
    1576:	82 ec       	ldi	r24, 0xC2	; 194
    1578:	93 e0       	ldi	r25, 0x03	; 3
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	0c 94 e0 15 	jmp	0x2bc0	; 0x2bc0 <_ZN7TwoWire15endTransmissionEv>

00001586 <_ZN8AMS_560011readOneByteEi>:
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	ec 01       	movw	r28, r24
    1590:	8b 01       	movw	r16, r22
    1592:	68 81       	ld	r22, Y
    1594:	79 81       	ldd	r23, Y+1	; 0x01
    1596:	82 ec       	ldi	r24, 0xC2	; 194
    1598:	93 e0       	ldi	r25, 0x03	; 3
    159a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN7TwoWire17beginTransmissionEi>
    159e:	b8 01       	movw	r22, r16
    15a0:	82 ec       	ldi	r24, 0xC2	; 194
    15a2:	93 e0       	ldi	r25, 0x03	; 3
    15a4:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN7TwoWire5writeEi>
    15a8:	82 ec       	ldi	r24, 0xC2	; 194
    15aa:	93 e0       	ldi	r25, 0x03	; 3
    15ac:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <_ZN7TwoWire15endTransmissionEv>
    15b0:	68 81       	ld	r22, Y
    15b2:	79 81       	ldd	r23, Y+1	; 0x01
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	82 ec       	ldi	r24, 0xC2	; 194
    15ba:	93 e0       	ldi	r25, 0x03	; 3
    15bc:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <_ZN7TwoWire11requestFromEii>
    15c0:	82 ec       	ldi	r24, 0xC2	; 194
    15c2:	93 e0       	ldi	r25, 0x03	; 3
    15c4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <_ZN7TwoWire9availableEv>
    15c8:	89 2b       	or	r24, r25
    15ca:	d1 f3       	breq	.-12     	; 0x15c0 <_ZN8AMS_560011readOneByteEi+0x3a>
    15cc:	82 ec       	ldi	r24, 0xC2	; 194
    15ce:	93 e0       	ldi	r25, 0x03	; 3
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <_ZN7TwoWire4readEv>

000015dc <_ZN8AMS_560012detectMagnetEv>:
    15dc:	fc 01       	movw	r30, r24
    15de:	66 a1       	ldd	r22, Z+38	; 0x26
    15e0:	77 a1       	ldd	r23, Z+39	; 0x27
    15e2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN8AMS_560011readOneByteEi>
    15e6:	85 fb       	bst	r24, 5
    15e8:	88 27       	eor	r24, r24
    15ea:	80 f9       	bld	r24, 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	08 95       	ret

000015f0 <_ZN8AMS_560017getMagnetStrengthEv>:
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	ec 01       	movw	r28, r24
    15f8:	6e a1       	ldd	r22, Y+38	; 0x26
    15fa:	7f a1       	ldd	r23, Y+39	; 0x27
    15fc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN8AMS_560011readOneByteEi>
    1600:	18 2f       	mov	r17, r24
    1602:	ce 01       	movw	r24, r28
    1604:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN8AMS_560012detectMagnetEv>
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	39 f4       	brne	.+14     	; 0x161a <_ZN8AMS_560017getMagnetStrengthEv+0x2a>
    160c:	14 fd       	sbrc	r17, 4
    160e:	08 c0       	rjmp	.+16     	; 0x1620 <_ZN8AMS_560017getMagnetStrengthEv+0x30>
    1610:	13 ff       	sbrs	r17, 3
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <_ZN8AMS_560017getMagnetStrengthEv+0x36>
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	08 c0       	rjmp	.+16     	; 0x162a <_ZN8AMS_560017getMagnetStrengthEv+0x3a>
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	05 c0       	rjmp	.+10     	; 0x162a <_ZN8AMS_560017getMagnetStrengthEv+0x3a>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 c0       	rjmp	.+4      	; 0x162a <_ZN8AMS_560017getMagnetStrengthEv+0x3a>
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	08 95       	ret

00001632 <_ZN8AMS_56006getAgcEv>:
    1632:	fc 01       	movw	r30, r24
    1634:	60 a5       	ldd	r22, Z+40	; 0x28
    1636:	71 a5       	ldd	r23, Z+41	; 0x29
    1638:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <_ZN8AMS_560011readOneByteEi>

0000163c <_ZN8AMS_560012setPowerModeEh>:
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	64 30       	cpi	r22, 0x04	; 4
    1644:	b0 f4       	brcc	.+44     	; 0x1672 <_ZN8AMS_560012setPowerModeEh+0x36>
    1646:	16 2f       	mov	r17, r22
    1648:	ec 01       	movw	r28, r24
    164a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    164c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    164e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN8AMS_560011readOneByteEi>
    1652:	8c 7f       	andi	r24, 0xFC	; 252
    1654:	18 2b       	or	r17, r24
    1656:	41 2f       	mov	r20, r17
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    165c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    165e:	ce 01       	movw	r24, r28
    1660:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN8AMS_560012writeOneByteEii>
    1664:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1666:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1668:	ce 01       	movw	r24, r28
    166a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN8AMS_560011readOneByteEi>
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	18 13       	cpse	r17, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	89 2f       	mov	r24, r25
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	08 95       	ret

0000167e <_ZN8AMS_560012readTwoBytesEii>:
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	ec 01       	movw	r28, r24
    168c:	7b 01       	movw	r14, r22
    168e:	8a 01       	movw	r16, r20
    1690:	68 81       	ld	r22, Y
    1692:	79 81       	ldd	r23, Y+1	; 0x01
    1694:	82 ec       	ldi	r24, 0xC2	; 194
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN7TwoWire17beginTransmissionEi>
    169c:	b8 01       	movw	r22, r16
    169e:	82 ec       	ldi	r24, 0xC2	; 194
    16a0:	93 e0       	ldi	r25, 0x03	; 3
    16a2:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN7TwoWire5writeEi>
    16a6:	82 ec       	ldi	r24, 0xC2	; 194
    16a8:	93 e0       	ldi	r25, 0x03	; 3
    16aa:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <_ZN7TwoWire15endTransmissionEv>
    16ae:	68 81       	ld	r22, Y
    16b0:	79 81       	ldd	r23, Y+1	; 0x01
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	82 ec       	ldi	r24, 0xC2	; 194
    16b8:	93 e0       	ldi	r25, 0x03	; 3
    16ba:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <_ZN7TwoWire11requestFromEii>
    16be:	82 ec       	ldi	r24, 0xC2	; 194
    16c0:	93 e0       	ldi	r25, 0x03	; 3
    16c2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <_ZN7TwoWire9availableEv>
    16c6:	89 2b       	or	r24, r25
    16c8:	d1 f3       	breq	.-12     	; 0x16be <_ZN8AMS_560012readTwoBytesEii+0x40>
    16ca:	82 ec       	ldi	r24, 0xC2	; 194
    16cc:	93 e0       	ldi	r25, 0x03	; 3
    16ce:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN7TwoWire4readEv>
    16d2:	8c 01       	movw	r16, r24
    16d4:	68 81       	ld	r22, Y
    16d6:	79 81       	ldd	r23, Y+1	; 0x01
    16d8:	82 ec       	ldi	r24, 0xC2	; 194
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN7TwoWire17beginTransmissionEi>
    16e0:	b7 01       	movw	r22, r14
    16e2:	82 ec       	ldi	r24, 0xC2	; 194
    16e4:	93 e0       	ldi	r25, 0x03	; 3
    16e6:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN7TwoWire5writeEi>
    16ea:	82 ec       	ldi	r24, 0xC2	; 194
    16ec:	93 e0       	ldi	r25, 0x03	; 3
    16ee:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <_ZN7TwoWire15endTransmissionEv>
    16f2:	68 81       	ld	r22, Y
    16f4:	79 81       	ldd	r23, Y+1	; 0x01
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	82 ec       	ldi	r24, 0xC2	; 194
    16fc:	93 e0       	ldi	r25, 0x03	; 3
    16fe:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <_ZN7TwoWire11requestFromEii>
    1702:	82 ec       	ldi	r24, 0xC2	; 194
    1704:	93 e0       	ldi	r25, 0x03	; 3
    1706:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <_ZN7TwoWire9availableEv>
    170a:	89 2b       	or	r24, r25
    170c:	d1 f3       	breq	.-12     	; 0x1702 <_ZN8AMS_560012readTwoBytesEii+0x84>
    170e:	82 ec       	ldi	r24, 0xC2	; 194
    1710:	93 e0       	ldi	r25, 0x03	; 3
    1712:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN7TwoWire4readEv>
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	38 2f       	mov	r19, r24
    171c:	c9 01       	movw	r24, r18
    171e:	80 2b       	or	r24, r16
    1720:	91 2b       	or	r25, r17
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	08 95       	ret

00001730 <_ZN8AMS_560011getMaxAngleEv>:
    1730:	fc 01       	movw	r30, r24
    1732:	40 8d       	ldd	r20, Z+24	; 0x18
    1734:	51 8d       	ldd	r21, Z+25	; 0x19
    1736:	66 89       	ldd	r22, Z+22	; 0x16
    1738:	77 89       	ldd	r23, Z+23	; 0x17
    173a:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_ZN8AMS_560012readTwoBytesEii>

0000173e <_ZN8AMS_560016getStartPositionEv>:
    173e:	fc 01       	movw	r30, r24
    1740:	40 89       	ldd	r20, Z+16	; 0x10
    1742:	51 89       	ldd	r21, Z+17	; 0x11
    1744:	66 85       	ldd	r22, Z+14	; 0x0e
    1746:	77 85       	ldd	r23, Z+15	; 0x0f
    1748:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_ZN8AMS_560012readTwoBytesEii>

0000174c <_ZN8AMS_560014getEndPositionEv>:
    174c:	fc 01       	movw	r30, r24
    174e:	44 89       	ldd	r20, Z+20	; 0x14
    1750:	55 89       	ldd	r21, Z+21	; 0x15
    1752:	62 89       	ldd	r22, Z+18	; 0x12
    1754:	73 89       	ldd	r23, Z+19	; 0x13
    1756:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_ZN8AMS_560012readTwoBytesEii>

0000175a <_ZN8AMS_560011getRawAngleEv>:
  Description: gets raw value of magnet position.
  start, end, and max angle settings do not apply
*******************************************************/
word AMS_5600::getRawAngle()
{
  return readTwoBytes(_raw_ang_hi, _raw_ang_lo);
    175a:	fc 01       	movw	r30, r24
    175c:	40 a1       	ldd	r20, Z+32	; 0x20
    175e:	51 a1       	ldd	r21, Z+33	; 0x21
    1760:	66 8d       	ldd	r22, Z+30	; 0x1e
    1762:	77 8d       	ldd	r23, Z+31	; 0x1f
    1764:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_ZN8AMS_560012readTwoBytesEii>

00001768 <_ZN8AMS_560011setMaxAngleEj>:
  If no value is provided, method will read position of
  magnet.  Setting this register zeros out max position
  register.
*******************************************************/
word AMS_5600::setMaxAngle(word newMaxAngle)
{
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	ec 01       	movw	r28, r24
  word retVal;
  if (newMaxAngle == -1)
    176e:	6f 3f       	cpi	r22, 0xFF	; 255
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	78 07       	cpc	r23, r24
    1774:	31 f4       	brne	.+12     	; 0x1782 <_ZN8AMS_560011setMaxAngleEj+0x1a>
  {
    _maxAngle = getRawAngle();
    1776:	ce 01       	movw	r24, r28
    1778:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN8AMS_560011getRawAngleEv>
    177c:	9b 87       	std	Y+11, r25	; 0x0b
    177e:	8a 87       	std	Y+10, r24	; 0x0a
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <_ZN8AMS_560011setMaxAngleEj+0x1e>
  }
  else
    _maxAngle = newMaxAngle;
    1782:	7b 87       	std	Y+11, r23	; 0x0b
    1784:	6a 87       	std	Y+10, r22	; 0x0a

  writeOneByte(_mang_hi, highByte(_maxAngle));
    1786:	4b 85       	ldd	r20, Y+11	; 0x0b
    1788:	6e 89       	ldd	r22, Y+22	; 0x16
    178a:	7f 89       	ldd	r23, Y+23	; 0x17
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    1794:	62 e0       	ldi	r22, 0x02	; 2
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
  writeOneByte(_mang_lo, lowByte(_maxAngle));
    17a0:	4a 85       	ldd	r20, Y+10	; 0x0a
    17a2:	5b 85       	ldd	r21, Y+11	; 0x0b
    17a4:	55 27       	eor	r21, r21
    17a6:	68 8d       	ldd	r22, Y+24	; 0x18
    17a8:	79 8d       	ldd	r23, Y+25	; 0x19
    17aa:	ce 01       	movw	r24, r28
    17ac:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    17b0:	62 e0       	ldi	r22, 0x02	; 2
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>

  retVal = readTwoBytes(_mang_hi, _mang_lo);
    17bc:	48 8d       	ldd	r20, Y+24	; 0x18
    17be:	59 8d       	ldd	r21, Y+25	; 0x19
    17c0:	6e 89       	ldd	r22, Y+22	; 0x16
    17c2:	7f 89       	ldd	r23, Y+23	; 0x17
    17c4:	ce 01       	movw	r24, r28
  return retVal;
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
  writeOneByte(_mang_hi, highByte(_maxAngle));
  delay(2);
  writeOneByte(_mang_lo, lowByte(_maxAngle));
  delay(2);

  retVal = readTwoBytes(_mang_hi, _mang_lo);
    17ca:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_ZN8AMS_560012readTwoBytesEii>

000017ce <_ZN8AMS_560016setStartPositionEj>:
  Description: sets a value in start position register.
  If no value is provided, method will read position of
  magnet.  
*******************************************************/
word AMS_5600::setStartPosition(word startAngle)
{
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	ec 01       	movw	r28, r24
  if (startAngle == -1)
    17d4:	6f 3f       	cpi	r22, 0xFF	; 255
    17d6:	8f ef       	ldi	r24, 0xFF	; 255
    17d8:	78 07       	cpc	r23, r24
    17da:	31 f4       	brne	.+12     	; 0x17e8 <_ZN8AMS_560016setStartPositionEj+0x1a>
  {
    _rawStartAngle = getRawAngle();
    17dc:	ce 01       	movw	r24, r28
    17de:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN8AMS_560011getRawAngleEv>
    17e2:	9b 83       	std	Y+3, r25	; 0x03
    17e4:	8a 83       	std	Y+2, r24	; 0x02
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <_ZN8AMS_560016setStartPositionEj+0x1e>
  }
  else
    _rawStartAngle = startAngle;
    17e8:	7b 83       	std	Y+3, r23	; 0x03
    17ea:	6a 83       	std	Y+2, r22	; 0x02

  writeOneByte(_zpos_hi, highByte(_rawStartAngle));
    17ec:	4b 81       	ldd	r20, Y+3	; 0x03
    17ee:	6e 85       	ldd	r22, Y+14	; 0x0e
    17f0:	7f 85       	ldd	r23, Y+15	; 0x0f
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	ce 01       	movw	r24, r28
    17f6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
  writeOneByte(_zpos_lo, lowByte(_rawStartAngle));
    1806:	4a 81       	ldd	r20, Y+2	; 0x02
    1808:	5b 81       	ldd	r21, Y+3	; 0x03
    180a:	55 27       	eor	r21, r21
    180c:	68 89       	ldd	r22, Y+16	; 0x10
    180e:	79 89       	ldd	r23, Y+17	; 0x11
    1810:	ce 01       	movw	r24, r28
    1812:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    1816:	62 e0       	ldi	r22, 0x02	; 2
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
  _zPosition = readTwoBytes(_zpos_hi, _zpos_lo);
    1822:	48 89       	ldd	r20, Y+16	; 0x10
    1824:	59 89       	ldd	r21, Y+17	; 0x11
    1826:	6e 85       	ldd	r22, Y+14	; 0x0e
    1828:	7f 85       	ldd	r23, Y+15	; 0x0f
    182a:	ce 01       	movw	r24, r28
    182c:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN8AMS_560012readTwoBytesEii>
    1830:	9d 83       	std	Y+5, r25	; 0x05
    1832:	8c 83       	std	Y+4, r24	; 0x04

  return (_zPosition);
}
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	08 95       	ret

0000183a <_ZN8AMS_560014setEndPositionEj>:
  Description: sets a value in end position register.
  If no value is provided, method will read position of
  magnet.  
*******************************************************/
word AMS_5600::setEndPosition(word endAngle)
{
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	ec 01       	movw	r28, r24
  if (endAngle == -1)
    1840:	6f 3f       	cpi	r22, 0xFF	; 255
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	78 07       	cpc	r23, r24
    1846:	31 f4       	brne	.+12     	; 0x1854 <_ZN8AMS_560014setEndPositionEj+0x1a>
    _rawEndAngle = getRawAngle();
    1848:	ce 01       	movw	r24, r28
    184a:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN8AMS_560011getRawAngleEv>
    184e:	9f 83       	std	Y+7, r25	; 0x07
    1850:	8e 83       	std	Y+6, r24	; 0x06
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <_ZN8AMS_560014setEndPositionEj+0x1e>
  else
    _rawEndAngle = endAngle;
    1854:	7f 83       	std	Y+7, r23	; 0x07
    1856:	6e 83       	std	Y+6, r22	; 0x06

  writeOneByte(_mpos_hi, highByte(_rawEndAngle));
    1858:	4f 81       	ldd	r20, Y+7	; 0x07
    185a:	6a 89       	ldd	r22, Y+18	; 0x12
    185c:	7b 89       	ldd	r23, Y+19	; 0x13
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    1866:	62 e0       	ldi	r22, 0x02	; 2
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
  writeOneByte(_mpos_lo, lowByte(_rawEndAngle));
    1872:	4e 81       	ldd	r20, Y+6	; 0x06
    1874:	5f 81       	ldd	r21, Y+7	; 0x07
    1876:	55 27       	eor	r21, r21
    1878:	6c 89       	ldd	r22, Y+20	; 0x14
    187a:	7d 89       	ldd	r23, Y+21	; 0x15
    187c:	ce 01       	movw	r24, r28
    187e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    1882:	62 e0       	ldi	r22, 0x02	; 2
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
  _mPosition = readTwoBytes(_mpos_hi, _mpos_lo);
    188e:	4c 89       	ldd	r20, Y+20	; 0x14
    1890:	5d 89       	ldd	r21, Y+21	; 0x15
    1892:	6a 89       	ldd	r22, Y+18	; 0x12
    1894:	7b 89       	ldd	r23, Y+19	; 0x13
    1896:	ce 01       	movw	r24, r28
    1898:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN8AMS_560012readTwoBytesEii>
    189c:	99 87       	std	Y+9, r25	; 0x09
    189e:	88 87       	std	Y+8, r24	; 0x08

  return (_mPosition);
}
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <_ZN8AMS_560014getScaledAngleEv>:
  start, end, or max angle settings are used to 
  determine value
*******************************************************/
word AMS_5600::getScaledAngle()
{
  return readTwoBytes(_ang_hi, _ang_lo);
    18a6:	fc 01       	movw	r30, r24
    18a8:	44 a1       	ldd	r20, Z+36	; 0x24
    18aa:	55 a1       	ldd	r21, Z+37	; 0x25
    18ac:	62 a1       	ldd	r22, Z+34	; 0x22
    18ae:	73 a1       	ldd	r23, Z+35	; 0x23
    18b0:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_ZN8AMS_560012readTwoBytesEii>

000018b4 <_ZN8AMS_560012getMagnitudeEv>:
  Out: value of magnitude register
  Description: gets value of magnitude register.
*******************************************************/
word AMS_5600::getMagnitude()
{
  return readTwoBytes(_mag_hi, _mag_lo);
    18b4:	fc 01       	movw	r30, r24
    18b6:	44 a5       	ldd	r20, Z+44	; 0x2c
    18b8:	55 a5       	ldd	r21, Z+45	; 0x2d
    18ba:	62 a5       	ldd	r22, Z+42	; 0x2a
    18bc:	73 a5       	ldd	r23, Z+43	; 0x2b
    18be:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_ZN8AMS_560012readTwoBytesEii>

000018c2 <_ZN6CC1101C1Ev>:
/**
 * CC1101
 * 
 * Class constructor
 */
CC1101::CC1101(void)
    18c2:	fc 01       	movw	r30, r24
{
  carrierFreq = CFREQ_868;
    18c4:	13 82       	std	Z+3, r1	; 0x03
  channel = CC1101_DEFVAL_CHANNR;
    18c6:	15 82       	std	Z+5, r1	; 0x05
  syncWord[0] = CC1101_DEFVAL_SYNC1;
    18c8:	85 eb       	ldi	r24, 0xB5	; 181
    18ca:	86 83       	std	Z+6, r24	; 0x06
  syncWord[1] = CC1101_DEFVAL_SYNC0;
    18cc:	87 e4       	ldi	r24, 0x47	; 71
    18ce:	87 83       	std	Z+7, r24	; 0x07
  devAddress = CC1101_DEFVAL_ADDR;
    18d0:	8f ef       	ldi	r24, 0xFF	; 255
    18d2:	80 87       	std	Z+8, r24	; 0x08

  hgmEnabled = false;
    18d4:	11 82       	std	Z+1, r1	; 0x01
    18d6:	08 95       	ret

000018d8 <_ZN6CC11016wakeUpEv>:
 * 
 * Wake up CC1101 from Power Down state
 */
void CC1101::wakeUp(void)
{
  cc1101_Select();                      // Select CC1101
    18d8:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    18da:	1c 99       	sbic	0x03, 4	; 3
    18dc:	fe cf       	rjmp	.-4      	; 0x18da <_ZN6CC11016wakeUpEv+0x2>
  cc1101_Deselect();                    // Deselect CC1101
    18de:	2a 9a       	sbi	0x05, 2	; 5
    18e0:	08 95       	ret

000018e2 <_ZN6CC11018writeRegEhh>:
 * 
 * 'regAddr'	Register address
 * 'value'	Value to be writen
 */
void CC1101::writeReg(byte regAddr, byte value) 
{
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	ec 01       	movw	r28, r24
    18ea:	14 2f       	mov	r17, r20
  cc1101_Select();                      // Select CC1101
    18ec:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    18ee:	1c 99       	sbic	0x03, 4	; 3
    18f0:	fe cf       	rjmp	.-4      	; 0x18ee <_ZN6CC11018writeRegEhh+0xc>
  spi.send(regAddr);                    // Send register address
    18f2:	ce 01       	movw	r24, r28
    18f4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
  spi.send(value);                      // Send value
    18f8:	61 2f       	mov	r22, r17
    18fa:	ce 01       	movw	r24, r28
    18fc:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
    1900:	2a 9a       	sbi	0x05, 2	; 5
}
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	08 95       	ret

0000190a <_ZN6CC110113writeBurstRegEhPhh>:
 * 'regAddr'	Register address
 * 'buffer'	Data to be writen
 * 'len'	Data length
 */
void CC1101::writeBurstReg(byte regAddr, byte* buffer, byte len)
{
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	8c 01       	movw	r16, r24
    191a:	d4 2e       	mov	r13, r20
    191c:	e5 2e       	mov	r14, r21
    191e:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
    1920:	60 64       	ori	r22, 0x40	; 64
  cc1101_Select();                      // Select CC1101
    1922:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    1924:	1c 99       	sbic	0x03, 4	; 3
    1926:	fe cf       	rjmp	.-4      	; 0x1924 <_ZN6CC110113writeBurstRegEhPhh+0x1a>
  spi.send(addr);                       // Send register address
    1928:	c8 01       	movw	r24, r16
    192a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
    192e:	cd 2d       	mov	r28, r13
    1930:	de 2d       	mov	r29, r14
    1932:	ce 01       	movw	r24, r28
    1934:	8f 0d       	add	r24, r15
    1936:	91 1d       	adc	r25, r1
    1938:	7c 01       	movw	r14, r24
  
  for(i=0 ; i<len ; i++)
    193a:	ce 15       	cp	r28, r14
    193c:	df 05       	cpc	r29, r15
    193e:	29 f0       	breq	.+10     	; 0x194a <_ZN6CC110113writeBurstRegEhPhh+0x40>
    spi.send(buffer[i]);                // Send value
    1940:	69 91       	ld	r22, Y+
    1942:	c8 01       	movw	r24, r16
    1944:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  
  for(i=0 ; i<len ; i++)
    1948:	f8 cf       	rjmp	.-16     	; 0x193a <_ZN6CC110113writeBurstRegEhPhh+0x30>
    spi.send(buffer[i]);                // Send value

  cc1101_Deselect();                    // Deselect CC1101  
    194a:	2a 9a       	sbi	0x05, 2	; 5
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	df 90       	pop	r13
    195a:	08 95       	ret

0000195c <_ZN6CC11019cmdStrobeEh>:
 * 
 * 'cmd'	Command strobe
 */     
void CC1101::cmdStrobe(byte cmd) 
{
  cc1101_Select();                      // Select CC1101
    195c:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    195e:	1c 99       	sbic	0x03, 4	; 3
    1960:	fe cf       	rjmp	.-4      	; 0x195e <_ZN6CC11019cmdStrobeEh+0x2>
  spi.send(cmd);                        // Send strobe command
    1962:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
    1966:	2a 9a       	sbi	0x05, 2	; 5
    1968:	08 95       	ret

0000196a <_ZN6CC11017readRegEhh>:
 * 
 * Return:
 * 	Data byte returned by the CC1101 IC
 */
byte CC1101::readReg(byte regAddr, byte regType)
{
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	ec 01       	movw	r28, r24
  byte addr, val;

  addr = regAddr | regType;
    1970:	64 2b       	or	r22, r20
  cc1101_Select();                      // Select CC1101
    1972:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    1974:	1c 99       	sbic	0x03, 4	; 3
    1976:	fe cf       	rjmp	.-4      	; 0x1974 <_ZN6CC11017readRegEhh+0xa>
  spi.send(addr);                       // Send register address
    1978:	ce 01       	movw	r24, r28
    197a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
  val = spi.send(0x00);                 // Read result
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	ce 01       	movw	r24, r28
    1982:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
    1986:	2a 9a       	sbi	0x05, 2	; 5

  return val;
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <_ZN6CC110112readBurstRegEPhhh>:
 * 'buffer'	Buffer where to copy the result to
 * 'regAddr'	Register address
 * 'len'	Data length
 */
void CC1101::readBurstReg(byte * buffer, byte regAddr, byte len) 
{
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	8c 01       	movw	r16, r24
    199e:	d6 2e       	mov	r13, r22
    19a0:	e7 2e       	mov	r14, r23
    19a2:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | READ_BURST;
    19a4:	64 2f       	mov	r22, r20
    19a6:	60 6c       	ori	r22, 0xC0	; 192
  cc1101_Select();                      // Select CC1101
    19a8:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    19aa:	1c 99       	sbic	0x03, 4	; 3
    19ac:	fe cf       	rjmp	.-4      	; 0x19aa <_ZN6CC110112readBurstRegEPhhh+0x1c>
  spi.send(addr);                       // Send register address
    19ae:	c8 01       	movw	r24, r16
    19b0:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
    19b4:	cd 2d       	mov	r28, r13
    19b6:	de 2d       	mov	r29, r14
    19b8:	ce 01       	movw	r24, r28
    19ba:	8f 0d       	add	r24, r15
    19bc:	91 1d       	adc	r25, r1
    19be:	7c 01       	movw	r14, r24
  for(i=0 ; i<len ; i++)
    19c0:	ce 15       	cp	r28, r14
    19c2:	df 05       	cpc	r29, r15
    19c4:	31 f0       	breq	.+12     	; 0x19d2 <_ZN6CC110112readBurstRegEPhhh+0x44>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	c8 01       	movw	r24, r16
    19ca:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
    19ce:	89 93       	st	Y+, r24
  
  addr = regAddr | READ_BURST;
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  for(i=0 ; i<len ; i++)
    19d0:	f7 cf       	rjmp	.-18     	; 0x19c0 <_ZN6CC110112readBurstRegEPhhh+0x32>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
  cc1101_Deselect();                    // Deselect CC1101
    19d2:	2a 9a       	sbi	0x05, 2	; 5
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	df 90       	pop	r13
    19e2:	08 95       	ret

000019e4 <_ZN6CC110111setSyncWordEhh>:
 * 
 * 'syncH'	Synchronization word - High byte
 * 'syncL'	Synchronization word - Low byte
 */
void CC1101::setSyncWord(uint8_t syncH, uint8_t syncL) 
{
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	ec 01       	movw	r28, r24
    19ee:	06 2f       	mov	r16, r22
    19f0:	14 2f       	mov	r17, r20
  writeReg(CC1101_SYNC1, syncH);
    19f2:	46 2f       	mov	r20, r22
    19f4:	64 e0       	ldi	r22, 0x04	; 4
    19f6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_SYNC0, syncL);
    19fa:	41 2f       	mov	r20, r17
    19fc:	65 e0       	ldi	r22, 0x05	; 5
    19fe:	ce 01       	movw	r24, r28
    1a00:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  syncWord[0] = syncH;
    1a04:	0e 83       	std	Y+6, r16	; 0x06
  syncWord[1] = syncL;
    1a06:	1f 83       	std	Y+7, r17	; 0x07
}
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	08 95       	ret

00001a12 <_ZN6CC110111setSyncWordEPh>:
 * 
 * 'syncH'	Synchronization word - pointer to 2-byte array
 */
void CC1101::setSyncWord(byte *sync) 
{
  CC1101::setSyncWord(sync[0], sync[1]);
    1a12:	fb 01       	movw	r30, r22
    1a14:	41 81       	ldd	r20, Z+1	; 0x01
    1a16:	60 81       	ld	r22, Z
    1a18:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <_ZN6CC110111setSyncWordEhh>

00001a1c <_ZN6CC110113setDevAddressEh>:
 * Set device address
 * 
 * @param addr	Device address
 */
void CC1101::setDevAddress(byte addr) 
{
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	ec 01       	movw	r28, r24
    1a24:	16 2f       	mov	r17, r22
  writeReg(CC1101_ADDR, addr);
    1a26:	46 2f       	mov	r20, r22
    1a28:	69 e0       	ldi	r22, 0x09	; 9
    1a2a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  devAddress = addr;
    1a2e:	18 87       	std	Y+8, r17	; 0x08
}
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	08 95       	ret

00001a38 <_ZN6CC110110setChannelEh>:
 * Set frequency channel
 * 
 * 'chnl'	Frequency channel
 */
void CC1101::setChannel(byte chnl) 
{
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	ec 01       	movw	r28, r24
    1a40:	16 2f       	mov	r17, r22
  writeReg(CC1101_CHANNR,  chnl);
    1a42:	46 2f       	mov	r20, r22
    1a44:	6a e0       	ldi	r22, 0x0A	; 10
    1a46:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  channel = chnl;
    1a4a:	1d 83       	std	Y+5, r17	; 0x05
}
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	08 95       	ret

00001a54 <_ZN6CC110114setCarrierFreqEh>:
 * Set carrier frequency
 * 
 * 'freq'	New carrier frequency
 */
void CC1101::setCarrierFreq(byte freq)
{
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
    1a5c:	16 2f       	mov	r17, r22
  switch(freq)
    1a5e:	62 30       	cpi	r22, 0x02	; 2
    1a60:	79 f0       	breq	.+30     	; 0x1a80 <_ZN6CC110114setCarrierFreqEh+0x2c>
    1a62:	63 30       	cpi	r22, 0x03	; 3
    1a64:	c1 f0       	breq	.+48     	; 0x1a96 <_ZN6CC110114setCarrierFreqEh+0x42>
    1a66:	61 30       	cpi	r22, 0x01	; 1
    1a68:	09 f5       	brne	.+66     	; 0x1aac <_ZN6CC110114setCarrierFreqEh+0x58>
  {
    case CFREQ_915:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_915);
    1a6a:	42 e2       	ldi	r20, 0x22	; 34
    1a6c:	6d e0       	ldi	r22, 0x0D	; 13
    1a6e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_915);
    1a72:	41 eb       	ldi	r20, 0xB1	; 177
    1a74:	6e e0       	ldi	r22, 0x0E	; 14
    1a76:	ce 01       	movw	r24, r28
    1a78:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_915);
    1a7c:	4b e3       	ldi	r20, 0x3B	; 59
    1a7e:	20 c0       	rjmp	.+64     	; 0x1ac0 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_433:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_433);
    1a80:	40 e1       	ldi	r20, 0x10	; 16
    1a82:	6d e0       	ldi	r22, 0x0D	; 13
    1a84:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_433);
    1a88:	47 ea       	ldi	r20, 0xA7	; 167
    1a8a:	6e e0       	ldi	r22, 0x0E	; 14
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_433);
    1a92:	42 e6       	ldi	r20, 0x62	; 98
    1a94:	15 c0       	rjmp	.+42     	; 0x1ac0 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_918:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_918);
    1a96:	43 e2       	ldi	r20, 0x23	; 35
    1a98:	6d e0       	ldi	r22, 0x0D	; 13
    1a9a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_918);
    1a9e:	4e e4       	ldi	r20, 0x4E	; 78
    1aa0:	6e e0       	ldi	r22, 0x0E	; 14
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_918);
    1aa8:	44 ec       	ldi	r20, 0xC4	; 196
    1aaa:	0a c0       	rjmp	.+20     	; 0x1ac0 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    default:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_868);
    1aac:	41 e2       	ldi	r20, 0x21	; 33
    1aae:	6d e0       	ldi	r22, 0x0D	; 13
    1ab0:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_868);
    1ab4:	42 e6       	ldi	r20, 0x62	; 98
    1ab6:	6e e0       	ldi	r22, 0x0E	; 14
    1ab8:	ce 01       	movw	r24, r28
    1aba:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_868);
    1abe:	46 e7       	ldi	r20, 0x76	; 118
    1ac0:	6f e0       	ldi	r22, 0x0F	; 15
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
      break;
  }
   
  carrierFreq = freq;  
    1ac8:	1b 83       	std	Y+3, r17	; 0x03
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	08 95       	ret

00001ad2 <_ZN6CC110117setPowerDownStateEv>:
 * setPowerDownState
 * 
 * Put CC1101 into power-down state
 */
void CC1101::setPowerDownState() 
{
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	ec 01       	movw	r28, r24
  // Comming from RX state, we need to enter the IDLE state first
  cmdStrobe(CC1101_SIDLE);
    1ad8:	66 e3       	ldi	r22, 0x36	; 54
    1ada:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>
  // Enter Power-down state
  cmdStrobe(CC1101_SPWD);
    1ade:	69 e3       	ldi	r22, 0x39	; 57
    1ae0:	ce 01       	movw	r24, r28
}
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
void CC1101::setPowerDownState() 
{
  // Comming from RX state, we need to enter the IDLE state first
  cmdStrobe(CC1101_SIDLE);
  // Enter Power-down state
  cmdStrobe(CC1101_SPWD);
    1ae6:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>

00001aea <_ZN6CC110110setRxStateEv>:
 * setRxState
 * 
 * Enter Rx state
 */
void CC1101::setRxState(void)
{
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ec 01       	movw	r28, r24
  cmdStrobe(CC1101_SRX);
    1af0:	64 e3       	ldi	r22, 0x34	; 52
    1af2:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_RX;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	8a 83       	std	Y+2, r24	; 0x02
}
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	08 95       	ret

00001b00 <_ZN6CC110111receiveDataEP8CCPACKET>:
 * 
 * Return:
 * 	Amount of bytes received
 */
byte CC1101::receiveData(CCPACKET * packet)
{
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	ec 01       	movw	r28, r24
    1b0a:	8b 01       	movw	r16, r22
  byte val;
  byte rxBytes = readStatusReg(CC1101_RXBYTES);
    1b0c:	40 ec       	ldi	r20, 0xC0	; 192
    1b0e:	6b e3       	ldi	r22, 0x3B	; 59
    1b10:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN6CC11017readRegEhh>

  // Any byte waiting to be read and no overflow?
  if (rxBytes & 0x7F && !(rxBytes & 0x80))
    1b14:	98 2f       	mov	r25, r24
    1b16:	9f 77       	andi	r25, 0x7F	; 127
    1b18:	59 f0       	breq	.+22     	; 0x1b30 <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
    1b1a:	87 fd       	sbrc	r24, 7
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
  {
    // Read data length
    packet->length = readConfigReg(CC1101_RXFIFO);
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	6f e3       	ldi	r22, 0x3F	; 63
    1b22:	ce 01       	movw	r24, r28
    1b24:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN6CC11017readRegEhh>
    1b28:	f8 01       	movw	r30, r16
    1b2a:	80 83       	st	Z, r24
    // If packet is too long
    if (packet->length > CCPACKET_DATA_LEN)
    1b2c:	8e 33       	cpi	r24, 0x3E	; 62
    1b2e:	18 f0       	brcs	.+6      	; 0x1b36 <_ZN6CC110111receiveDataEP8CCPACKET+0x36>
      packet->length = 0;   // Discard packet
    1b30:	f8 01       	movw	r30, r16
    1b32:	10 82       	st	Z, r1
    1b34:	1f c0       	rjmp	.+62     	; 0x1b74 <_ZN6CC110111receiveDataEP8CCPACKET+0x74>
    else
    {
      // Read data packet
      readBurstReg(packet->data, CC1101_RXFIFO, packet->length);
    1b36:	28 2f       	mov	r18, r24
    1b38:	4f e3       	ldi	r20, 0x3F	; 63
    1b3a:	b8 01       	movw	r22, r16
    1b3c:	6f 5f       	subi	r22, 0xFF	; 255
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	ce 01       	movw	r24, r28
    1b42:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN6CC110112readBurstRegEPhhh>
      // Read RSSI
      packet->rssi = readConfigReg(CC1101_RXFIFO);
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	6f e3       	ldi	r22, 0x3F	; 63
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN6CC11017readRegEhh>
    1b50:	f8 01       	movw	r30, r16
    1b52:	87 af       	std	Z+63, r24	; 0x3f
      // Read LQI and CRC_OK
      val = readConfigReg(CC1101_RXFIFO);
    1b54:	40 e8       	ldi	r20, 0x80	; 128
    1b56:	6f e3       	ldi	r22, 0x3F	; 63
    1b58:	ce 01       	movw	r24, r28
    1b5a:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN6CC11017readRegEhh>
      packet->lqi = val & 0x7F;
    1b5e:	f8 01       	movw	r30, r16
    1b60:	e0 5c       	subi	r30, 0xC0	; 192
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	98 2f       	mov	r25, r24
    1b66:	9f 77       	andi	r25, 0x7F	; 127
    1b68:	90 83       	st	Z, r25
      packet->crc_ok = bitRead(val, 7);
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	88 27       	eor	r24, r24
    1b6e:	88 1f       	adc	r24, r24
    1b70:	f8 01       	movw	r30, r16
    1b72:	86 af       	std	Z+62, r24	; 0x3e
    }
  }
  else
    packet->length = 0;

  setIdleState();       // Enter IDLE state
    1b74:	66 e3       	ldi	r22, 0x36	; 54
    1b76:	ce 01       	movw	r24, r28
    1b78:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>
  flushRxFifo();        // Flush Rx FIFO
    1b7c:	6a e3       	ldi	r22, 0x3A	; 58
    1b7e:	ce 01       	movw	r24, r28
    1b80:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>
  //cmdStrobe(CC1101_SCAL);

  // Back to RX state
  setRxState();
    1b84:	ce 01       	movw	r24, r28
    1b86:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN6CC110110setRxStateEv>

  return packet->length;
}
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	80 81       	ld	r24, Z
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	08 95       	ret

00001b98 <_ZN6CC110110setTxStateEv>:
 * setTxState
 * 
 * Enter Tx state
 */
void CC1101::setTxState(void)
{
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	ec 01       	movw	r28, r24
  cmdStrobe(CC1101_STX);
    1b9e:	65 e3       	ldi	r22, 0x35	; 53
    1ba0:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_TX;
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	8a 83       	std	Y+2, r24	; 0x02
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <_ZN6CC11018sendDataE8CCPACKET>:
 *  Return:
 *    True if the transmission succeeds
 *    False otherwise
 */
bool CC1101::sendData(CCPACKET packet)
{
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	8c 01       	movw	r16, r24
  byte marcState;
  bool res = false;
 
  // Declare to be in Tx state. This will avoid receiving packets whilst
  // transmitting
  rfState = RFSTATE_TX;
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	82 83       	std	Z+2, r24	; 0x02

  // Enter RX state
  setRxState();
    1bc4:	c8 01       	movw	r24, r16
    1bc6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN6CC110110setRxStateEv>

  // Check that the RX state has been entered
  while (((marcState = readStatusReg(CC1101_MARCSTATE)) & 0x1F) != 0x0D)
    1bca:	40 ec       	ldi	r20, 0xC0	; 192
    1bcc:	65 e3       	ldi	r22, 0x35	; 53
    1bce:	c8 01       	movw	r24, r16
    1bd0:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN6CC11017readRegEhh>
    1bd4:	98 2f       	mov	r25, r24
    1bd6:	9f 71       	andi	r25, 0x1F	; 31
    1bd8:	9d 30       	cpi	r25, 0x0D	; 13
    1bda:	39 f0       	breq	.+14     	; 0x1bea <_ZN6CC11018sendDataE8CCPACKET+0x3c>
  {
    if (marcState == 0x11)        // RX_OVERFLOW
    1bdc:	81 31       	cpi	r24, 0x11	; 17
    1bde:	a9 f7       	brne	.-22     	; 0x1bca <_ZN6CC11018sendDataE8CCPACKET+0x1c>
      flushRxFifo();              // flush receive queue
    1be0:	6a e3       	ldi	r22, 0x3A	; 58
    1be2:	c8 01       	movw	r24, r16
    1be4:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>
    1be8:	f0 cf       	rjmp	.-32     	; 0x1bca <_ZN6CC11018sendDataE8CCPACKET+0x1c>
  }

  delayMicroseconds(500);
    1bea:	84 ef       	ldi	r24, 0xF4	; 244
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	0e 94 55 09 	call	0x12aa	; 0x12aa <delayMicroseconds>

  if (packet.length > 0)
    1bf2:	48 85       	ldd	r20, Y+8	; 0x08
    1bf4:	44 23       	and	r20, r20
    1bf6:	79 f0       	breq	.+30     	; 0x1c16 <_ZN6CC11018sendDataE8CCPACKET+0x68>
  {
    // Set data length at the first position of the TX FIFO
    writeReg(CC1101_TXFIFO,  packet.length);
    1bf8:	6f e3       	ldi	r22, 0x3F	; 63
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
    // Write data into the TX FIFO
    writeBurstReg(CC1101_TXFIFO, packet.data, packet.length);
    1c00:	28 85       	ldd	r18, Y+8	; 0x08
    1c02:	ae 01       	movw	r20, r28
    1c04:	47 5f       	subi	r20, 0xF7	; 247
    1c06:	5f 4f       	sbci	r21, 0xFF	; 255
    1c08:	6f e3       	ldi	r22, 0x3F	; 63
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	0e 94 85 0c 	call	0x190a	; 0x190a <_ZN6CC110113writeBurstRegEhPhh>

    // CCA enabled: will enter TX state only if the channel is clear
    setTxState();
    1c10:	c8 01       	movw	r24, r16
    1c12:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN6CC110110setTxStateEv>
  }

  // Check that TX state is being entered (state = RXTX_SETTLING)
  marcState = readStatusReg(CC1101_MARCSTATE) & 0x1F;
    1c16:	40 ec       	ldi	r20, 0xC0	; 192
    1c18:	65 e3       	ldi	r22, 0x35	; 53
    1c1a:	c8 01       	movw	r24, r16
    1c1c:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN6CC11017readRegEhh>
  if((marcState != 0x13) && (marcState != 0x14) && (marcState != 0x15))
    1c20:	8f 71       	andi	r24, 0x1F	; 31
    1c22:	83 51       	subi	r24, 0x13	; 19
    1c24:	83 30       	cpi	r24, 0x03	; 3
    1c26:	80 f0       	brcs	.+32     	; 0x1c48 <_ZN6CC11018sendDataE8CCPACKET+0x9a>
  {
    setIdleState();       // Enter IDLE state
    1c28:	66 e3       	ldi	r22, 0x36	; 54
    1c2a:	c8 01       	movw	r24, r16
    1c2c:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>
    flushTxFifo();        // Flush Tx FIFO
    1c30:	6b e3       	ldi	r22, 0x3B	; 59
    1c32:	c8 01       	movw	r24, r16
    1c34:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>
    setRxState();         // Back to RX state
    1c38:	c8 01       	movw	r24, r16
    1c3a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN6CC110110setRxStateEv>

    // Declare to be in Rx state
    rfState = RFSTATE_RX;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	f8 01       	movw	r30, r16
    1c42:	82 83       	std	Z+2, r24	; 0x02
    return false;
    1c44:	f1 2c       	mov	r15, r1
    1c46:	1c c0       	rjmp	.+56     	; 0x1c80 <_ZN6CC11018sendDataE8CCPACKET+0xd2>
  }

  // Wait for the sync word to be transmitted
  wait_GDO0_high();
    1c48:	4a 9b       	sbis	0x09, 2	; 9
    1c4a:	fe cf       	rjmp	.-4      	; 0x1c48 <_ZN6CC11018sendDataE8CCPACKET+0x9a>

  // Wait until the end of the packet transmission
  wait_GDO0_low();
    1c4c:	4a 99       	sbic	0x09, 2	; 9
    1c4e:	fe cf       	rjmp	.-4      	; 0x1c4c <_ZN6CC11018sendDataE8CCPACKET+0x9e>

  // Check that the TX FIFO is empty
  if((readStatusReg(CC1101_TXBYTES) & 0x7F) == 0)
    1c50:	40 ec       	ldi	r20, 0xC0	; 192
    1c52:	6a e3       	ldi	r22, 0x3A	; 58
    1c54:	c8 01       	movw	r24, r16
    1c56:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN6CC11017readRegEhh>
    1c5a:	8f 77       	andi	r24, 0x7F	; 127
    1c5c:	ff 24       	eor	r15, r15
    1c5e:	f3 94       	inc	r15
    1c60:	81 11       	cpse	r24, r1
    1c62:	f1 2c       	mov	r15, r1
    res = true;

  setIdleState();       // Enter IDLE state
    1c64:	66 e3       	ldi	r22, 0x36	; 54
    1c66:	c8 01       	movw	r24, r16
    1c68:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>
  flushTxFifo();        // Flush Tx FIFO
    1c6c:	6b e3       	ldi	r22, 0x3B	; 59
    1c6e:	c8 01       	movw	r24, r16
    1c70:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN6CC11019cmdStrobeEh>

  // Enter back into RX state
  setRxState();
    1c74:	c8 01       	movw	r24, r16
    1c76:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN6CC110110setRxStateEv>

  // Declare to be in Rx state
  rfState = RFSTATE_RX;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	82 83       	std	Z+2, r24	; 0x02

  return res;
}
    1c80:	8f 2d       	mov	r24, r15
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	08 95       	ret

00001c8e <_ZN6CC11019setCCregsEv>:
 * setCCregs
 * 
 * Configure CC1101 registers
 */
void CC1101::setCCregs(void) 
{
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	c1 54       	subi	r28, 0x41	; 65
    1c9c:	d1 09       	sbc	r29, r1
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	8c 01       	movw	r16, r24
  writeReg(CC1101_IOCFG2,  CC1101_DEFVAL_IOCFG2);
    1caa:	4e e2       	ldi	r20, 0x2E	; 46
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG1,  CC1101_DEFVAL_IOCFG1);
    1cb2:	4e e2       	ldi	r20, 0x2E	; 46
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	c8 01       	movw	r24, r16
    1cb8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG0,  CC1101_DEFVAL_IOCFG0);
    1cbc:	46 e0       	ldi	r20, 0x06	; 6
    1cbe:	62 e0       	ldi	r22, 0x02	; 2
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FIFOTHR,  CC1101_DEFVAL_FIFOTHR);
    1cc6:	47 e0       	ldi	r20, 0x07	; 7
    1cc8:	63 e0       	ldi	r22, 0x03	; 3
    1cca:	c8 01       	movw	r24, r16
    1ccc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTLEN,  CC1101_DEFVAL_PKTLEN);
    1cd0:	4d e3       	ldi	r20, 0x3D	; 61
    1cd2:	66 e0       	ldi	r22, 0x06	; 6
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL1,  CC1101_DEFVAL_PKTCTRL1);
    1cda:	46 e0       	ldi	r20, 0x06	; 6
    1cdc:	67 e0       	ldi	r22, 0x07	; 7
    1cde:	c8 01       	movw	r24, r16
    1ce0:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL0,  CC1101_DEFVAL_PKTCTRL0);
    1ce4:	45 e0       	ldi	r20, 0x05	; 5
    1ce6:	68 e0       	ldi	r22, 0x08	; 8
    1ce8:	c8 01       	movw	r24, r16
    1cea:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>

  // Set default synchronization word
  setSyncWord(syncWord);
    1cee:	b8 01       	movw	r22, r16
    1cf0:	6a 5f       	subi	r22, 0xFA	; 250
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	c8 01       	movw	r24, r16
    1cf6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_ZN6CC110111setSyncWordEPh>

  // Set default device address
  setDevAddress(devAddress);
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	60 85       	ldd	r22, Z+8	; 0x08
    1cfe:	c8 01       	movw	r24, r16
    1d00:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN6CC110113setDevAddressEh>

  // Set default frequency channel
  setChannel(channel);
    1d04:	f8 01       	movw	r30, r16
    1d06:	65 81       	ldd	r22, Z+5	; 0x05
    1d08:	c8 01       	movw	r24, r16
    1d0a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN6CC110110setChannelEh>
  
  writeReg(CC1101_FSCTRL1,  CC1101_DEFVAL_FSCTRL1);
    1d0e:	48 e0       	ldi	r20, 0x08	; 8
    1d10:	6b e0       	ldi	r22, 0x0B	; 11
    1d12:	c8 01       	movw	r24, r16
    1d14:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCTRL0,  CC1101_DEFVAL_FSCTRL0);
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	6c e0       	ldi	r22, 0x0C	; 12
    1d1c:	c8 01       	movw	r24, r16
    1d1e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>

  // Set default carrier frequency = 868 MHz
  setCarrierFreq(carrierFreq);
    1d22:	f8 01       	movw	r30, r16
    1d24:	63 81       	ldd	r22, Z+3	; 0x03
    1d26:	c8 01       	movw	r24, r16
    1d28:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN6CC110114setCarrierFreqEh>

  // RF speed
  if (workMode == MODE_LOW_SPEED)
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	84 81       	ldd	r24, Z+4	; 0x04
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <_ZN6CC11019setCCregsEv+0xaa>
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_4800);
    1d34:	47 ec       	ldi	r20, 0xC7	; 199
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <_ZN6CC11019setCCregsEv+0xac>
  else
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_38400);
    1d38:	4a ec       	ldi	r20, 0xCA	; 202
    1d3a:	60 e1       	ldi	r22, 0x10	; 16
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
    
  writeReg(CC1101_MDMCFG3,  CC1101_DEFVAL_MDMCFG3);
    1d42:	43 e8       	ldi	r20, 0x83	; 131
    1d44:	61 e1       	ldi	r22, 0x11	; 17
    1d46:	c8 01       	movw	r24, r16
    1d48:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG2,  CC1101_DEFVAL_MDMCFG2);
    1d4c:	43 e9       	ldi	r20, 0x93	; 147
    1d4e:	62 e1       	ldi	r22, 0x12	; 18
    1d50:	c8 01       	movw	r24, r16
    1d52:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG1,  CC1101_DEFVAL_MDMCFG1);
    1d56:	42 e2       	ldi	r20, 0x22	; 34
    1d58:	63 e1       	ldi	r22, 0x13	; 19
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG0,  CC1101_DEFVAL_MDMCFG0);
    1d60:	48 ef       	ldi	r20, 0xF8	; 248
    1d62:	64 e1       	ldi	r22, 0x14	; 20
    1d64:	c8 01       	movw	r24, r16
    1d66:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_DEVIATN,  CC1101_DEFVAL_DEVIATN);
    1d6a:	45 e3       	ldi	r20, 0x35	; 53
    1d6c:	65 e1       	ldi	r22, 0x15	; 21
    1d6e:	c8 01       	movw	r24, r16
    1d70:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM2,  CC1101_DEFVAL_MCSM2);
    1d74:	47 e0       	ldi	r20, 0x07	; 7
    1d76:	66 e1       	ldi	r22, 0x16	; 22
    1d78:	c8 01       	movw	r24, r16
    1d7a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM1,  CC1101_DEFVAL_MCSM1);
    1d7e:	40 e2       	ldi	r20, 0x20	; 32
    1d80:	67 e1       	ldi	r22, 0x17	; 23
    1d82:	c8 01       	movw	r24, r16
    1d84:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM0,  CC1101_DEFVAL_MCSM0);
    1d88:	48 e1       	ldi	r20, 0x18	; 24
    1d8a:	68 e1       	ldi	r22, 0x18	; 24
    1d8c:	c8 01       	movw	r24, r16
    1d8e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FOCCFG,  CC1101_DEFVAL_FOCCFG);
    1d92:	46 e1       	ldi	r20, 0x16	; 22
    1d94:	69 e1       	ldi	r22, 0x19	; 25
    1d96:	c8 01       	movw	r24, r16
    1d98:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_BSCFG,  CC1101_DEFVAL_BSCFG);
    1d9c:	4c e6       	ldi	r20, 0x6C	; 108
    1d9e:	6a e1       	ldi	r22, 0x1A	; 26
    1da0:	c8 01       	movw	r24, r16
    1da2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL2,  CC1101_DEFVAL_AGCCTRL2);
    1da6:	43 e4       	ldi	r20, 0x43	; 67
    1da8:	6b e1       	ldi	r22, 0x1B	; 27
    1daa:	c8 01       	movw	r24, r16
    1dac:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL1,  CC1101_DEFVAL_AGCCTRL1);
    1db0:	40 e4       	ldi	r20, 0x40	; 64
    1db2:	6c e1       	ldi	r22, 0x1C	; 28
    1db4:	c8 01       	movw	r24, r16
    1db6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL0,  CC1101_DEFVAL_AGCCTRL0);
    1dba:	41 e9       	ldi	r20, 0x91	; 145
    1dbc:	6d e1       	ldi	r22, 0x1D	; 29
    1dbe:	c8 01       	movw	r24, r16
    1dc0:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT1,  CC1101_DEFVAL_WOREVT1);
    1dc4:	47 e8       	ldi	r20, 0x87	; 135
    1dc6:	6e e1       	ldi	r22, 0x1E	; 30
    1dc8:	c8 01       	movw	r24, r16
    1dca:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT0,  CC1101_DEFVAL_WOREVT0);
    1dce:	4b e6       	ldi	r20, 0x6B	; 107
    1dd0:	6f e1       	ldi	r22, 0x1F	; 31
    1dd2:	c8 01       	movw	r24, r16
    1dd4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WORCTRL,  CC1101_DEFVAL_WORCTRL);
    1dd8:	4b ef       	ldi	r20, 0xFB	; 251
    1dda:	60 e2       	ldi	r22, 0x20	; 32
    1ddc:	c8 01       	movw	r24, r16
    1dde:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND1,  CC1101_DEFVAL_FREND1);
    1de2:	46 e5       	ldi	r20, 0x56	; 86
    1de4:	61 e2       	ldi	r22, 0x21	; 33
    1de6:	c8 01       	movw	r24, r16
    1de8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND0,  CC1101_DEFVAL_FREND0);
    1dec:	40 e1       	ldi	r20, 0x10	; 16
    1dee:	62 e2       	ldi	r22, 0x22	; 34
    1df0:	c8 01       	movw	r24, r16
    1df2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL3,  CC1101_DEFVAL_FSCAL3);
    1df6:	49 ee       	ldi	r20, 0xE9	; 233
    1df8:	63 e2       	ldi	r22, 0x23	; 35
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL2,  CC1101_DEFVAL_FSCAL2);
    1e00:	4a e2       	ldi	r20, 0x2A	; 42
    1e02:	64 e2       	ldi	r22, 0x24	; 36
    1e04:	c8 01       	movw	r24, r16
    1e06:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL1,  CC1101_DEFVAL_FSCAL1);
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	65 e2       	ldi	r22, 0x25	; 37
    1e0e:	c8 01       	movw	r24, r16
    1e10:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL0,  CC1101_DEFVAL_FSCAL0);
    1e14:	4f e1       	ldi	r20, 0x1F	; 31
    1e16:	66 e2       	ldi	r22, 0x26	; 38
    1e18:	c8 01       	movw	r24, r16
    1e1a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL1,  CC1101_DEFVAL_RCCTRL1);
    1e1e:	41 e4       	ldi	r20, 0x41	; 65
    1e20:	67 e2       	ldi	r22, 0x27	; 39
    1e22:	c8 01       	movw	r24, r16
    1e24:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL0,  CC1101_DEFVAL_RCCTRL0);
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	68 e2       	ldi	r22, 0x28	; 40
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSTEST,  CC1101_DEFVAL_FSTEST);
    1e32:	49 e5       	ldi	r20, 0x59	; 89
    1e34:	69 e2       	ldi	r22, 0x29	; 41
    1e36:	c8 01       	movw	r24, r16
    1e38:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PTEST,  CC1101_DEFVAL_PTEST);
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	6a e2       	ldi	r22, 0x2A	; 42
    1e40:	c8 01       	movw	r24, r16
    1e42:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCTEST,  CC1101_DEFVAL_AGCTEST);
    1e46:	4f e3       	ldi	r20, 0x3F	; 63
    1e48:	6b e2       	ldi	r22, 0x2B	; 43
    1e4a:	c8 01       	movw	r24, r16
    1e4c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST2,  CC1101_DEFVAL_TEST2);
    1e50:	41 e8       	ldi	r20, 0x81	; 129
    1e52:	6c e2       	ldi	r22, 0x2C	; 44
    1e54:	c8 01       	movw	r24, r16
    1e56:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST1,  CC1101_DEFVAL_TEST1);
    1e5a:	45 e3       	ldi	r20, 0x35	; 53
    1e5c:	6d e2       	ldi	r22, 0x2D	; 45
    1e5e:	c8 01       	movw	r24, r16
    1e60:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST0,  CC1101_DEFVAL_TEST0);
    1e64:	49 e0       	ldi	r20, 0x09	; 9
    1e66:	6e e2       	ldi	r22, 0x2E	; 46
    1e68:	c8 01       	movw	r24, r16
    1e6a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
  
  // Send empty packet
  CCPACKET packet;
  packet.length = 0;
    1e6e:	19 82       	std	Y+1, r1	; 0x01
  sendData(packet);
    1e70:	8d b7       	in	r24, 0x3d	; 61
    1e72:	9e b7       	in	r25, 0x3e	; 62
    1e74:	81 54       	subi	r24, 0x41	; 65
    1e76:	91 09       	sbc	r25, r1
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	9e bf       	out	0x3e, r25	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	8d bf       	out	0x3d, r24	; 61
    1e82:	ad b7       	in	r26, 0x3d	; 61
    1e84:	be b7       	in	r27, 0x3e	; 62
    1e86:	11 96       	adiw	r26, 0x01	; 1
    1e88:	81 e4       	ldi	r24, 0x41	; 65
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	31 96       	adiw	r30, 0x01	; 1
    1e8e:	01 90       	ld	r0, Z+
    1e90:	0d 92       	st	X+, r0
    1e92:	8a 95       	dec	r24
    1e94:	e1 f7       	brne	.-8      	; 0x1e8e <_ZN6CC11019setCCregsEv+0x200>
    1e96:	c8 01       	movw	r24, r16
    1e98:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN6CC11018sendDataE8CCPACKET>
}
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	cf 5b       	subi	r28, 0xBF	; 191
    1ea8:	df 4f       	sbci	r29, 0xFF	; 255
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	08 95       	ret

00001ebe <_ZN6CC11015resetEv>:
 * reset
 * 
 * Reset CC1101
 */
void CC1101::reset(void) 
{
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	ec 01       	movw	r28, r24
  cc1101_Deselect();                    // Deselect CC1101
    1ec4:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(5);
    1ec6:	85 e0       	ldi	r24, 0x05	; 5
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 55 09 	call	0x12aa	; 0x12aa <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    1ece:	2a 98       	cbi	0x05, 2	; 5
  delayMicroseconds(10);
    1ed0:	8a e0       	ldi	r24, 0x0A	; 10
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e 94 55 09 	call	0x12aa	; 0x12aa <delayMicroseconds>
  cc1101_Deselect();                    // Deselect CC1101
    1ed8:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(41);
    1eda:	89 e2       	ldi	r24, 0x29	; 41
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 55 09 	call	0x12aa	; 0x12aa <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    1ee2:	2a 98       	cbi	0x05, 2	; 5

  wait_Miso();                          // Wait until MISO goes low
    1ee4:	1c 99       	sbic	0x03, 4	; 3
    1ee6:	fe cf       	rjmp	.-4      	; 0x1ee4 <_ZN6CC11015resetEv+0x26>
  spi.send(CC1101_SRES);                // Send reset command strobe
    1ee8:	60 e3       	ldi	r22, 0x30	; 48
    1eea:	ce 01       	movw	r24, r28
    1eec:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN9SIMPLESPI4sendEh>
  wait_Miso();                          // Wait until MISO goes low
    1ef0:	1c 99       	sbic	0x03, 4	; 3
    1ef2:	fe cf       	rjmp	.-4      	; 0x1ef0 <_ZN6CC11015resetEv+0x32>

  cc1101_Deselect();                    // Deselect CC1101
    1ef4:	2a 9a       	sbi	0x05, 2	; 5

  setCCregs();                          // Reconfigure CC1101
    1ef6:	ce 01       	movw	r24, r28
}
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
  spi.send(CC1101_SRES);                // Send reset command strobe
  wait_Miso();                          // Wait until MISO goes low

  cc1101_Deselect();                    // Deselect CC1101

  setCCregs();                          // Reconfigure CC1101
    1efc:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <_ZN6CC11019setCCregsEv>

00001f00 <_ZN6CC11014initEhh>:
 *
 * @param freq Carrier frequency
 * @param mode Working mode (speed, ...)
 */
void CC1101::init(uint8_t freq, uint8_t mode)
{
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	ec 01       	movw	r28, r24
  carrierFreq = freq;
    1f06:	6b 83       	std	Y+3, r22	; 0x03
  workMode = mode;
    1f08:	4c 83       	std	Y+4, r20	; 0x04
  
  spi.init();                           // Initialize SPI interface
    1f0a:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN9SIMPLESPI4initEv>
  pinMode(GDO0, INPUT);                 // Config GDO0 as input
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <pinMode>

  reset();                              // Reset CC1101
    1f16:	ce 01       	movw	r24, r28
    1f18:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <_ZN6CC11015resetEv>
     * 
     * @param paLevel amplification value
     */
    inline void setTxPowerAmp(uint8_t paLevel)
    {
      writeReg(CC1101_PATABLE, paLevel);
    1f1c:	40 e6       	ldi	r20, 0x60	; 96
    1f1e:	6e e3       	ldi	r22, 0x3E	; 62
    1f20:	ce 01       	movw	r24, r28

  // Configure PATABLE
  setTxPowerAmp(PA_LowPower);
}
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>

00001f2a <_Z8radioISRv>:
  sleep_mode();

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <detachInterrupt>
    1f30:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <panstamp+0x3>
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	a9 f4       	brne	.+42     	; 0x1f62 <_Z8radioISRv+0x38>
    1f38:	6a e2       	ldi	r22, 0x2A	; 42
    1f3a:	73 e0       	ldi	r23, 0x03	; 3
    1f3c:	8c e6       	ldi	r24, 0x6C	; 108
    1f3e:	93 e0       	ldi	r25, 0x03	; 3
    1f40:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <_ZN6CC110111receiveDataEP8CCPACKET>
    1f44:	88 23       	and	r24, r24
    1f46:	69 f0       	breq	.+26     	; 0x1f62 <_Z8radioISRv+0x38>
    1f48:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <_ZZ8radioISRvE8ccPacket+0x3e>
    1f4c:	88 23       	and	r24, r24
    1f4e:	49 f0       	breq	.+18     	; 0x1f62 <_Z8radioISRv+0x38>
    1f50:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <panstamp+0xb>
    1f54:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <panstamp+0xc>
    1f58:	30 97       	sbiw	r30, 0x00	; 0
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <_Z8radioISRv+0x38>
    1f5c:	8a e2       	ldi	r24, 0x2A	; 42
    1f5e:	93 e0       	ldi	r25, 0x03	; 3
    1f60:	09 95       	icall
    1f62:	42 e0       	ldi	r20, 0x02	; 2
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	65 e9       	ldi	r22, 0x95	; 149
    1f68:	7f e0       	ldi	r23, 0x0F	; 15
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <attachInterrupt>

00001f70 <_ZN8PANSTAMPC1Ev>:
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	ec 01       	movw	r28, r24
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_ZN6CC1101C1Ev>
    1f7c:	1c 86       	std	Y+12, r1	; 0x0c
    1f7e:	1b 86       	std	Y+11, r1	; 0x0b
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <_ZN8PANSTAMP4initEhh>:
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	ec 01       	movw	r28, r24
    1f90:	8c 01       	movw	r16, r24
    1f92:	0f 5f       	subi	r16, 0xFF	; 255
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	c8 01       	movw	r24, r16
    1f98:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <_ZN6CC11014initEhh>
    1f9c:	82 e3       	ldi	r24, 0x32	; 50
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 55 09 	call	0x12aa	; 0x12aa <delayMicroseconds>
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN6CC110110setRxStateEv>
    1faa:	42 e0       	ldi	r20, 0x02	; 2
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	65 e9       	ldi	r22, 0x95	; 149
    1fb0:	7f e0       	ldi	r23, 0x0F	; 15
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <attachInterrupt>
    1fb8:	18 82       	st	Y, r1
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <_ZN8PANSTAMP5resetEv>:
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	a8 95       	wdr
    1fca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1fce:	88 61       	ori	r24, 0x18	; 24
    1fd0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1fd4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	98 e0       	ldi	r25, 0x08	; 8
    1fdc:	88 e1       	ldi	r24, 0x18	; 24
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	a8 95       	wdr
    1fe4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1fee:	ff cf       	rjmp	.-2      	; 0x1fee <_ZN8PANSTAMP5resetEv+0x2a>

00001ff0 <_ZN8PANSTAMP8sleepSecEj6RTCSRC>:
 *
 * @param time Sleep time in seconds
 * @param source Source of interruption (RTCSRC_WDT or RTCSRC_XT2)
 */
void PANSTAMP::sleepSec(uint16_t time, RTCSRC source)
{
    1ff0:	8f 92       	push	r8
    1ff2:	9f 92       	push	r9
    1ff4:	af 92       	push	r10
    1ff6:	bf 92       	push	r11
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
  int i, loops;
  byte minTime;
  
  // No interval? Then return
  if (time == 0)
    2008:	61 15       	cp	r22, r1
    200a:	71 05       	cpc	r23, r1
    200c:	09 f4       	brne	.+2      	; 0x2010 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x20>
    200e:	56 c0       	rjmp	.+172    	; 0x20bc <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xcc>
    return;

  // Search the maximum sleep time passed as argument to sleepWd that best
  // suits our desired interval
  if (time % 8 == 0)
    2010:	9b 01       	movw	r18, r22
    2012:	27 70       	andi	r18, 0x07	; 7
    2014:	33 27       	eor	r19, r19
    2016:	23 2b       	or	r18, r19
    2018:	51 f4       	brne	.+20     	; 0x202e <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x3e>
  {
    loops = time / 8;
    201a:	8b 01       	movw	r16, r22
    201c:	63 e0       	ldi	r22, 0x03	; 3
    201e:	16 95       	lsr	r17
    2020:	07 95       	ror	r16
    2022:	6a 95       	dec	r22
    2024:	e1 f7       	brne	.-8      	; 0x201e <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x2e>
    
    if (source == RTCSRC_XT2)
    2026:	41 30       	cpi	r20, 0x01	; 1
    2028:	e9 f0       	breq	.+58     	; 0x2064 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x74>
      minTime = RTC_8S;
    else
      minTime = WDTO_8S;
    202a:	c9 e0       	ldi	r28, 0x09	; 9
    202c:	20 c0       	rjmp	.+64     	; 0x206e <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
  }
  else if (time % 4 == 0)
    202e:	9b 01       	movw	r18, r22
    2030:	23 70       	andi	r18, 0x03	; 3
    2032:	33 27       	eor	r19, r19
  {
    if (source == RTCSRC_XT2)
    {
      loops = time / 2;
    2034:	8b 01       	movw	r16, r22
    if (source == RTCSRC_XT2)
      minTime = RTC_8S;
    else
      minTime = WDTO_8S;
  }
  else if (time % 4 == 0)
    2036:	23 2b       	or	r18, r19
    2038:	59 f4       	brne	.+22     	; 0x2050 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x60>
  {
    if (source == RTCSRC_XT2)
    203a:	41 30       	cpi	r20, 0x01	; 1
    203c:	19 f4       	brne	.+6      	; 0x2044 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x54>
    {
      loops = time / 2;
    203e:	16 95       	lsr	r17
    2040:	07 95       	ror	r16
    2042:	12 c0       	rjmp	.+36     	; 0x2068 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x78>
      minTime = RTC_2S;
    }
    else
    {
      loops = time / 4;
    2044:	16 95       	lsr	r17
    2046:	07 95       	ror	r16
    2048:	16 95       	lsr	r17
    204a:	07 95       	ror	r16
      minTime = WDTO_4S;
    204c:	c8 e0       	ldi	r28, 0x08	; 8
    204e:	0f c0       	rjmp	.+30     	; 0x206e <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
    }
  }
  else if (time % 2 == 0)
    2050:	60 fd       	sbrc	r22, 0
    2052:	05 c0       	rjmp	.+10     	; 0x205e <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x6e>
  {
    loops = time / 2;
    2054:	16 95       	lsr	r17
    2056:	07 95       	ror	r16
    if (source == RTCSRC_XT2)    
    2058:	41 30       	cpi	r20, 0x01	; 1
    205a:	21 f4       	brne	.+8      	; 0x2064 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x74>
    205c:	05 c0       	rjmp	.+10     	; 0x2068 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x78>
      minTime = WDTO_2S;
  }
  else
  {
    loops = time;
    if (source == RTCSRC_XT2)
    205e:	41 30       	cpi	r20, 0x01	; 1
    2060:	19 f4       	brne	.+6      	; 0x2068 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x78>
    2062:	04 c0       	rjmp	.+8      	; 0x206c <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7c>
  if (time % 8 == 0)
  {
    loops = time / 8;
    
    if (source == RTCSRC_XT2)
      minTime = RTC_8S;
    2064:	c7 e0       	ldi	r28, 0x07	; 7
    2066:	03 c0       	rjmp	.+6      	; 0x206e <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
  }
  else if (time % 2 == 0)
  {
    loops = time / 2;
    if (source == RTCSRC_XT2)    
      minTime = RTC_2S;
    2068:	c6 e0       	ldi	r28, 0x06	; 6
    206a:	01 c0       	rjmp	.+2      	; 0x206e <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
  }
  else
  {
    loops = time;
    if (source == RTCSRC_XT2)
      minTime = RTC_1S;
    206c:	c5 e0       	ldi	r28, 0x05	; 5
    206e:	d4 2f       	mov	r29, r20
    2070:	7c 01       	movw	r14, r24
    else
      minTime = WDTO_1S;
  }

  state = RXOFF;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	f7 01       	movw	r30, r14
    2076:	81 93       	st	Z+, r24
    2078:	6f 01       	movw	r12, r30

  // Power-down CC1101
  radio.setPowerDownState();
    207a:	cf 01       	movw	r24, r30
    207c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN6CC110117setPowerDownStateEv>

  // Sleep
  for (i=0 ; i<loops ; i++)
    2080:	a1 2c       	mov	r10, r1
    2082:	b1 2c       	mov	r11, r1
    2084:	c7 01       	movw	r24, r14
    2086:	0a 96       	adiw	r24, 0x0a	; 10
    2088:	4c 01       	movw	r8, r24
    208a:	a0 16       	cp	r10, r16
    208c:	b1 06       	cpc	r11, r17
    208e:	8c f4       	brge	.+34     	; 0x20b2 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xc2>
  {
    // Exit sleeping loop?
    if (state == RXON)
    2090:	f7 01       	movw	r30, r14
    2092:	80 81       	ld	r24, Z
    2094:	88 23       	and	r24, r24
    2096:	69 f0       	breq	.+26     	; 0x20b2 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xc2>
      break;

    if (source == RTCSRC_XT2)
      rtc.sleepRtc(minTime);
    2098:	6c 2f       	mov	r22, r28
    209a:	c4 01       	movw	r24, r8
  {
    // Exit sleeping loop?
    if (state == RXON)
      break;

    if (source == RTCSRC_XT2)
    209c:	d1 30       	cpi	r29, 0x01	; 1
    209e:	19 f4       	brne	.+6      	; 0x20a6 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xb6>
      rtc.sleepRtc(minTime);
    20a0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN6AVRRTC8sleepRtcEh>
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xba>
    else
      rtc.sleepWd(minTime);
    20a6:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <_ZN6AVRRTC7sleepWdEh>

  // Power-down CC1101
  radio.setPowerDownState();

  // Sleep
  for (i=0 ; i<loops ; i++)
    20aa:	ff ef       	ldi	r31, 0xFF	; 255
    20ac:	af 1a       	sub	r10, r31
    20ae:	bf 0a       	sbc	r11, r31
    20b0:	ec cf       	rjmp	.-40     	; 0x208a <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x9a>
    else
      rtc.sleepWd(minTime);
  }

  // Reset CC1101 IC
  radio.wakeUp();
    20b2:	c6 01       	movw	r24, r12
    20b4:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN6CC11016wakeUpEv>

  // set system state to RF Rx ON
  state = RXON; 
    20b8:	f7 01       	movw	r30, r14
    20ba:	10 82       	st	Z, r1
}
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	1f 91       	pop	r17
    20c2:	0f 91       	pop	r16
    20c4:	ff 90       	pop	r15
    20c6:	ef 90       	pop	r14
    20c8:	df 90       	pop	r13
    20ca:	cf 90       	pop	r12
    20cc:	bf 90       	pop	r11
    20ce:	af 90       	pop	r10
    20d0:	9f 90       	pop	r9
    20d2:	8f 90       	pop	r8
    20d4:	08 95       	ret

000020d6 <_ZN8PANSTAMP9sleepMSecEj6RTCSRC20PANSTAMP_RADIO_POWER>:
 *
 * @param time Sleep time in seconds
 * @param source Source of interruption (RTCSRC_WDT or RTCSRC_XT2)
 */
void PANSTAMP::sleepMSec(uint16_t time, RTCSRC source, PANSTAMP_RADIO_POWER radioSet)
{
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
  // No interval? Then return
  if (time == 0)
    20e2:	61 15       	cp	r22, r1
    20e4:	71 05       	cpc	r23, r1
    20e6:	59 f1       	breq	.+86     	; 0x213e <_ZN8PANSTAMP9sleepMSecEj6RTCSRC20PANSTAMP_RADIO_POWER+0x68>
    20e8:	f2 2e       	mov	r15, r18
    20ea:	e4 2e       	mov	r14, r20
    20ec:	8b 01       	movw	r16, r22
    20ee:	ec 01       	movw	r28, r24
    return;

  // Search the maximum sleep time passed as argument to sleepWd that best
  // suits our desired interval
  if ((radioSet == OFF) || (radioSet == ON_OFF))
    20f0:	8f ef       	ldi	r24, 0xFF	; 255
    20f2:	82 0f       	add	r24, r18
    20f4:	82 30       	cpi	r24, 0x02	; 2
    20f6:	30 f4       	brcc	.+12     	; 0x2104 <_ZN8PANSTAMP9sleepMSecEj6RTCSRC20PANSTAMP_RADIO_POWER+0x2e>
      return radio.sendData(packet);
    }
	
	inline bool setRadioOFF()
	{
		 state = RXOFF;
    20f8:	21 e0       	ldi	r18, 0x01	; 1
    20fa:	fe 01       	movw	r30, r28
    20fc:	21 93       	st	Z+, r18
    20fe:	cf 01       	movw	r24, r30
		 // Power-down CC1101
		 radio.setPowerDownState();
    2100:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN6CC110117setPowerDownStateEv>
  {
	setRadioOFF();
  }
 
 if (source == RTCSRC_XT2)
    2104:	f1 e0       	ldi	r31, 0x01	; 1
    2106:	ef 12       	cpse	r14, r31
    2108:	0a c0       	rjmp	.+20     	; 0x211e <_ZN8PANSTAMP9sleepMSecEj6RTCSRC20PANSTAMP_RADIO_POWER+0x48>
 {
   if ((time == RTC_125MS) ||(time == RTC_250MS) ||(time == RTC_500MS))
    210a:	c8 01       	movw	r24, r16
    210c:	02 97       	sbiw	r24, 0x02	; 2
    210e:	03 97       	sbiw	r24, 0x03	; 3
    2110:	70 f4       	brcc	.+28     	; 0x212e <_ZN8PANSTAMP9sleepMSecEj6RTCSRC20PANSTAMP_RADIO_POWER+0x58>
    rtc.sleepRtc(time);
    2112:	60 2f       	mov	r22, r16
    2114:	ce 01       	movw	r24, r28
    2116:	0a 96       	adiw	r24, 0x0a	; 10
    2118:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN6AVRRTC8sleepRtcEh>
    211c:	08 c0       	rjmp	.+16     	; 0x212e <_ZN8PANSTAMP9sleepMSecEj6RTCSRC20PANSTAMP_RADIO_POWER+0x58>
 }
 else 
 {
   if ((time == WDTO_15MS) || (time == WDTO_30MS) || (time == WDTO_60MS) || (time == WDTO_120MS) || (time == WDTO_250MS) || (time == WDTO_500MS))
    211e:	06 30       	cpi	r16, 0x06	; 6
    2120:	11 05       	cpc	r17, r1
    2122:	28 f4       	brcc	.+10     	; 0x212e <_ZN8PANSTAMP9sleepMSecEj6RTCSRC20PANSTAMP_RADIO_POWER+0x58>
    rtc.sleepWd(time);
    2124:	60 2f       	mov	r22, r16
    2126:	ce 01       	movw	r24, r28
    2128:	0a 96       	adiw	r24, 0x0a	; 10
    212a:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <_ZN6AVRRTC7sleepWdEh>
 }
 
 if ((radioSet == ON) || (radioSet == ON_OFF))
    212e:	2f 2d       	mov	r18, r15
    2130:	2d 7f       	andi	r18, 0xFD	; 253
    2132:	29 f4       	brne	.+10     	; 0x213e <_ZN8PANSTAMP9sleepMSecEj6RTCSRC20PANSTAMP_RADIO_POWER+0x68>
	}
	
	inline bool setRadioON()
	{
		 radio.wakeUp();
    2134:	ce 01       	movw	r24, r28
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN6CC11016wakeUpEv>
		 // set system state to RF Rx ON
		 state = RXON;
    213c:	18 82       	st	Y, r1
 {
	setRadioON();
 }
}
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	ff 90       	pop	r15
    2148:	ef 90       	pop	r14
    214a:	08 95       	ret

0000214c <_ZN8PANSTAMP6getVccEv>:
uint16_t PANSTAMP::getVcc(void)
{
  uint16_t result;
  
  // Read 1.1V reference against AVcc
  ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    214c:	8e e4       	ldi	r24, 0x4E	; 78
    214e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  delay(2); // Wait for Vref to settle
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
  ADCSRA |= _BV(ADSC); // Convert
    215e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2162:	80 64       	ori	r24, 0x40	; 64
    2164:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  while (bit_is_set(ADCSRA,ADSC));
    2168:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    216c:	86 fd       	sbrc	r24, 6
    216e:	fc cf       	rjmp	.-8      	; 0x2168 <_ZN8PANSTAMP6getVccEv+0x1c>
  result = ADCL;
    2170:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  result |= ADCH << 8;
    2174:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  result = 1077000L / result; // Back-calculate AVcc in mV
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	38 2b       	or	r19, r24
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	68 e0       	ldi	r22, 0x08	; 8
    2182:	7f e6       	ldi	r23, 0x6F	; 111
    2184:	80 e1       	ldi	r24, 0x10	; 16
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__divmodsi4>
  
  return result;
}
    218c:	c9 01       	movw	r24, r18
    218e:	08 95       	ret

00002190 <_GLOBAL__sub_I__Z8radioISRv>:

/**
 * Pre-instantiate PANSTAMP object
 */
PANSTAMP panstamp;
    2190:	8b e6       	ldi	r24, 0x6B	; 107
    2192:	93 e0       	ldi	r25, 0x03	; 3
    2194:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <_ZN8PANSTAMPC1Ev>

00002198 <_ZN9SIMPLESPI4initEv>:
 * SPI initialization
 */
void SIMPLESPI::init() 
{
	
  digitalWrite(SPI_SS, HIGH);
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	8a e0       	ldi	r24, 0x0A	; 10
    219c:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>
 
  // Configure SPI pins
  pinMode(SPI_SS, OUTPUT);
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	8a e0       	ldi	r24, 0x0A	; 10
    21a4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <pinMode>
 
  pinMode(SPI_MOSI, OUTPUT);
    21a8:	61 e0       	ldi	r22, 0x01	; 1
    21aa:	8b e0       	ldi	r24, 0x0B	; 11
    21ac:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <pinMode>
  pinMode(SPI_MISO, INPUT);  
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	8c e0       	ldi	r24, 0x0C	; 12
    21b4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <pinMode>
  pinMode(SPI_SCK, OUTPUT);
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	8d e0       	ldi	r24, 0x0D	; 13
    21bc:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <pinMode>
  
  digitalWrite(SPI_SCK, HIGH);
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	8d e0       	ldi	r24, 0x0D	; 13
    21c4:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>
  digitalWrite(SPI_MOSI, LOW);
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	8b e0       	ldi	r24, 0x0B	; 11
    21cc:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>

  // SPI speed = clk/4
  SPCR = _BV(SPE) | _BV(MSTR);
    21d0:	80 e5       	ldi	r24, 0x50	; 80
    21d2:	8c bd       	out	0x2c, r24	; 44
    21d4:	08 95       	ret

000021d6 <_ZN9SIMPLESPI4sendEh>:
 * Return:
 * 	Response received from SPI slave
 */
byte SIMPLESPI::send(byte value) 
{
  SPDR = value;                          // Transfer byte via SPI
    21d6:	6e bd       	out	0x2e, r22	; 46
  while(!(SPSR & _BV(SPIF)));            // Wait until SPI operation is terminated
    21d8:	0d b4       	in	r0, 0x2d	; 45
    21da:	07 fe       	sbrs	r0, 7
    21dc:	fd cf       	rjmp	.-6      	; 0x21d8 <_ZN9SIMPLESPI4sendEh+0x2>

  return SPDR;
    21de:	8e b5       	in	r24, 0x2e	; 46
}
    21e0:	08 95       	ret

000021e2 <_ZN8REGISTER4initEv>:
 * init
 *
 * Initialize register
 */
void REGISTER::init(void)
{
    21e2:	0f 93       	push	r16
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	1f 92       	push	r1
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
  // Does the value need to be read from EEPROM?
  if (eepromAddress >= 0)
    21ee:	fc 01       	movw	r30, r24
    21f0:	21 85       	ldd	r18, Z+9	; 0x09
    21f2:	32 85       	ldd	r19, Z+10	; 0x0a
    21f4:	37 fd       	sbrc	r19, 7
    21f6:	08 c0       	rjmp	.+16     	; 0x2208 <_ZN8REGISTER4initEv+0x26>
  {
    STORAGE nvMem;
    
    // Read from info memory
    nvMem.read(value, eepromBank, eepromAddress, length);
    21f8:	65 81       	ldd	r22, Z+5	; 0x05
    21fa:	76 81       	ldd	r23, Z+6	; 0x06
    21fc:	07 81       	ldd	r16, Z+7	; 0x07
    21fe:	43 85       	ldd	r20, Z+11	; 0x0b
    2200:	ce 01       	movw	r24, r28
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_ZN7STORAGE4readEPhhhh>
  }
}
    2208:	0f 90       	pop	r0
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	0f 91       	pop	r16
    2210:	08 95       	ret

00002212 <_ZN8REGISTER14sendSwapStatusEv>:
 * sendSwapStatus
 * 
 * Send SWAP status message
 */
void REGISTER::sendSwapStatus(void) 
{
    2212:	0f 93       	push	r16
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	c0 55       	subi	r28, 0x50	; 80
    221e:	d1 09       	sbc	r29, r1
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	fc 01       	movw	r30, r24
  SWSTATUS packet = SWSTATUS(id, value, length, type);
    222c:	45 81       	ldd	r20, Z+5	; 0x05
    222e:	56 81       	ldd	r21, Z+6	; 0x06
    2230:	00 85       	ldd	r16, Z+8	; 0x08
    2232:	27 81       	ldd	r18, Z+7	; 0x07
    2234:	64 81       	ldd	r22, Z+4	; 0x04
    2236:	ce 01       	movw	r24, r28
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
  packet.send();
    223e:	ce 01       	movw	r24, r28
    2240:	01 96       	adiw	r24, 0x01	; 1
    2242:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN8SWPACKET4sendEv>
}
    2246:	c0 5b       	subi	r28, 0xB0	; 176
    2248:	df 4f       	sbci	r29, 0xFF	; 255
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	0f 91       	pop	r16
    225a:	08 95       	ret

0000225c <_ZN8REGISTER7getDataEv>:
 * getData
 * 
 * Update and get register value
 */
void REGISTER::getData(void) 
{
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	ec 01       	movw	r28, r24
  // Update register value
  if (updateValue != NULL)
    2262:	e8 81       	ld	r30, Y
    2264:	f9 81       	ldd	r31, Y+1	; 0x01
    2266:	30 97       	sbiw	r30, 0x00	; 0
    2268:	11 f0       	breq	.+4      	; 0x226e <_ZN8REGISTER7getDataEv+0x12>
    updateValue(id);
    226a:	8c 81       	ldd	r24, Y+4	; 0x04
    226c:	09 95       	icall

  // Send SWAP status message about the new value
  sendSwapStatus();
    226e:	ce 01       	movw	r24, r28
}
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
  // Update register value
  if (updateValue != NULL)
    updateValue(id);

  // Send SWAP status message about the new value
  sendSwapStatus();
    2274:	0c 94 09 11 	jmp	0x2212	; 0x2212 <_ZN8REGISTER14sendSwapStatusEv>

00002278 <_ZN8REGISTER7setDataEPh>:
 * Set register value
 * 
 * @param data New register value
 */
void REGISTER::setData(unsigned char *data) 
{
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	0f 93       	push	r16
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	1f 92       	push	r1
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	7c 01       	movw	r14, r24
  // Update register value
  if (setValue != NULL)
    228a:	dc 01       	movw	r26, r24
    228c:	12 96       	adiw	r26, 0x02	; 2
    228e:	ed 91       	ld	r30, X+
    2290:	fc 91       	ld	r31, X
    2292:	13 97       	sbiw	r26, 0x03	; 3
    2294:	30 97       	sbiw	r30, 0x00	; 0
    2296:	19 f0       	breq	.+6      	; 0x229e <_ZN8REGISTER7setDataEPh+0x26>
    setValue(id, data);
    2298:	14 96       	adiw	r26, 0x04	; 4
    229a:	8c 91       	ld	r24, X
    229c:	09 95       	icall

  // Send SWAP status message
  sendSwapStatus();
    229e:	c7 01       	movw	r24, r14
    22a0:	0e 94 09 11 	call	0x2212	; 0x2212 <_ZN8REGISTER14sendSwapStatusEv>

  // Does the value need to be saved in info memory (flash)?
  if (eepromAddress >= 0)
    22a4:	f7 01       	movw	r30, r14
    22a6:	21 85       	ldd	r18, Z+9	; 0x09
    22a8:	32 85       	ldd	r19, Z+10	; 0x0a
    22aa:	37 fd       	sbrc	r19, 7
    22ac:	08 c0       	rjmp	.+16     	; 0x22be <_ZN8REGISTER7setDataEPh+0x46>
  {
    STORAGE nvMem;   
    // Write info memory
    nvMem.write(value, eepromBank, eepromAddress, length);
    22ae:	65 81       	ldd	r22, Z+5	; 0x05
    22b0:	76 81       	ldd	r23, Z+6	; 0x06
    22b2:	07 81       	ldd	r16, Z+7	; 0x07
    22b4:	43 85       	ldd	r20, Z+11	; 0x0b
    22b6:	ce 01       	movw	r24, r28
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN7STORAGE5writeEPhhhh>
  }
}
    22be:	0f 90       	pop	r0
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	0f 91       	pop	r16
    22c6:	ff 90       	pop	r15
    22c8:	ef 90       	pop	r14
    22ca:	08 95       	ret

000022cc <_ZN8REGISTER20setValueFromBeBufferEPh>:
 * Set curent value from a Big Endian buffer passed as argument
 *
 * @param beBuffer Big Endian buffer
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
    22cc:	dc 01       	movw	r26, r24
  unsigned char i;

  for(i=0 ; i<length ; i++)
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	17 96       	adiw	r26, 0x07	; 7
    22d2:	ec 91       	ld	r30, X
    22d4:	17 97       	sbiw	r26, 0x07	; 7
    22d6:	9e 17       	cp	r25, r30
    22d8:	98 f4       	brcc	.+38     	; 0x2300 <_ZN8REGISTER20setValueFromBeBufferEPh+0x34>
    value[i] = beBuffer[length-1-i];
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	29 2f       	mov	r18, r25
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	31 97       	sbiw	r30, 0x01	; 1
    22e2:	e2 1b       	sub	r30, r18
    22e4:	f3 0b       	sbc	r31, r19
    22e6:	e6 0f       	add	r30, r22
    22e8:	f7 1f       	adc	r31, r23
    22ea:	80 81       	ld	r24, Z
    22ec:	15 96       	adiw	r26, 0x05	; 5
    22ee:	4d 91       	ld	r20, X+
    22f0:	5c 91       	ld	r21, X
    22f2:	16 97       	sbiw	r26, 0x06	; 6
    22f4:	fa 01       	movw	r30, r20
    22f6:	e2 0f       	add	r30, r18
    22f8:	f3 1f       	adc	r31, r19
    22fa:	80 83       	st	Z, r24
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
  unsigned char i;

  for(i=0 ; i<length ; i++)
    22fc:	9f 5f       	subi	r25, 0xFF	; 255
    22fe:	e8 cf       	rjmp	.-48     	; 0x22d0 <_ZN8REGISTER20setValueFromBeBufferEPh+0x4>
    2300:	08 95       	ret

00002302 <_Z14pacKetReceivedP8CCPACKET>:
  //delay(500);
  panstamp.sleepSec(txInterval);
  //enterSystemState(SYSTATE_SYNC);
  systemState = SYSTATE_RXON;
  //enterSystemState(SYSTATE_RXON);
}
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	c0 55       	subi	r28, 0x50	; 80
    230c:	d1 09       	sbc	r29, r1
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	fc 01       	movw	r30, r24
    231a:	20 81       	ld	r18, Z
    231c:	27 30       	cpi	r18, 0x07	; 7
    231e:	08 f4       	brcc	.+2      	; 0x2322 <_Z14pacKetReceivedP8CCPACKET+0x20>
    2320:	a8 c0       	rjmp	.+336    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    2322:	bc 01       	movw	r22, r24
    2324:	ce 01       	movw	r24, r28
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_ZN8SWPACKETC1EP8CCPACKET>
    232c:	2b 96       	adiw	r28, 0x0b	; 11
    232e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2330:	2b 97       	sbiw	r28, 0x0b	; 11
    2332:	81 11       	cpse	r24, r1
    2334:	9e c0       	rjmp	.+316    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    2336:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <swap>
    233a:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <swap+0x1>
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	29 f0       	breq	.+10     	; 0x234c <_Z14pacKetReceivedP8CCPACKET+0x4a>
    2342:	be 01       	movw	r22, r28
    2344:	6f 5f       	subi	r22, 0xFF	; 255
    2346:	7f 4f       	sbci	r23, 0xFF	; 255
    2348:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <_ZN8REPEATER13packetHandlerEP8SWPACKET>
    234c:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <swap+0x3>
    2350:	21 ff       	sbrs	r18, 1
    2352:	05 c0       	rjmp	.+10     	; 0x235e <_Z14pacKetReceivedP8CCPACKET+0x5c>
    2354:	28 96       	adiw	r28, 0x08	; 8
    2356:	8f ad       	ldd	r24, Y+63	; 0x3f
    2358:	28 97       	sbiw	r28, 0x08	; 8
    235a:	81 ff       	sbrs	r24, 1
    235c:	8a c0       	rjmp	.+276    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    235e:	2a 96       	adiw	r28, 0x0a	; 10
    2360:	8f ad       	ldd	r24, Y+63	; 0x3f
    2362:	2a 97       	sbiw	r28, 0x0a	; 10
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	89 f5       	brne	.+98     	; 0x23ca <_Z14pacKetReceivedP8CCPACKET+0xc8>
    2368:	24 96       	adiw	r28, 0x04	; 4
    236a:	2e ad       	ldd	r18, Y+62	; 0x3e
    236c:	3f ad       	ldd	r19, Y+63	; 0x3f
    236e:	24 97       	sbiw	r28, 0x04	; 4
    2370:	21 15       	cp	r18, r1
    2372:	31 05       	cpc	r19, r1
    2374:	31 f4       	brne	.+12     	; 0x2382 <_Z14pacKetReceivedP8CCPACKET+0x80>
    2376:	2d 96       	adiw	r28, 0x0d	; 13
    2378:	8f ad       	ldd	r24, Y+63	; 0x3f
    237a:	2d 97       	sbiw	r28, 0x0d	; 13
    237c:	88 23       	and	r24, r24
    237e:	41 f0       	breq	.+16     	; 0x2390 <_Z14pacKetReceivedP8CCPACKET+0x8e>
    2380:	78 c0       	rjmp	.+240    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    2382:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <swap+0x2>
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	28 17       	cp	r18, r24
    238a:	39 07       	cpc	r19, r25
    238c:	09 f0       	breq	.+2      	; 0x2390 <_Z14pacKetReceivedP8CCPACKET+0x8e>
    238e:	71 c0       	rjmp	.+226    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    2390:	2c 96       	adiw	r28, 0x0c	; 12
    2392:	8f ad       	ldd	r24, Y+63	; 0x3f
    2394:	2c 97       	sbiw	r28, 0x0c	; 12
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	28 17       	cp	r18, r24
    239a:	39 07       	cpc	r19, r25
    239c:	09 f0       	breq	.+2      	; 0x23a0 <_Z14pacKetReceivedP8CCPACKET+0x9e>
    239e:	69 c0       	rjmp	.+210    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23a0:	2d 96       	adiw	r28, 0x0d	; 13
    23a2:	ef ad       	ldd	r30, Y+63	; 0x3f
    23a4:	2d 97       	sbiw	r28, 0x0d	; 13
    23a6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <regTableSize>
    23aa:	e8 17       	cp	r30, r24
    23ac:	08 f0       	brcs	.+2      	; 0x23b0 <_Z14pacKetReceivedP8CCPACKET+0xae>
    23ae:	61 c0       	rjmp	.+194    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	e8 5f       	subi	r30, 0xF8	; 248
    23b8:	fe 4f       	sbci	r31, 0xFE	; 254
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <_Z14pacKetReceivedP8CCPACKET+0xc2>
    23c2:	57 c0       	rjmp	.+174    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23c4:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN8REGISTER7getDataEv>
    23c8:	54 c0       	rjmp	.+168    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23ca:	81 30       	cpi	r24, 0x01	; 1
    23cc:	58 f4       	brcc	.+22     	; 0x23e4 <_Z14pacKetReceivedP8CCPACKET+0xe2>
    23ce:	e0 91 83 03 	lds	r30, 0x0383	; 0x800383 <swap+0xa>
    23d2:	f0 91 84 03 	lds	r31, 0x0384	; 0x800384 <swap+0xb>
    23d6:	30 97       	sbiw	r30, 0x00	; 0
    23d8:	09 f4       	brne	.+2      	; 0x23dc <_Z14pacKetReceivedP8CCPACKET+0xda>
    23da:	4b c0       	rjmp	.+150    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23dc:	ce 01       	movw	r24, r28
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	09 95       	icall
    23e2:	47 c0       	rjmp	.+142    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	09 f0       	breq	.+2      	; 0x23ea <_Z14pacKetReceivedP8CCPACKET+0xe8>
    23e8:	44 c0       	rjmp	.+136    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23ea:	24 96       	adiw	r28, 0x04	; 4
    23ec:	4e ad       	ldd	r20, Y+62	; 0x3e
    23ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    23f0:	24 97       	sbiw	r28, 0x04	; 4
    23f2:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <swap+0x2>
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	48 17       	cp	r20, r24
    23fa:	59 07       	cpc	r21, r25
    23fc:	d1 f5       	brne	.+116    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23fe:	2c 96       	adiw	r28, 0x0c	; 12
    2400:	8f ad       	ldd	r24, Y+63	; 0x3f
    2402:	2c 97       	sbiw	r28, 0x0c	; 12
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	48 17       	cp	r20, r24
    2408:	59 07       	cpc	r21, r25
    240a:	99 f5       	brne	.+102    	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    240c:	2d 96       	adiw	r28, 0x0d	; 13
    240e:	ef ad       	ldd	r30, Y+63	; 0x3f
    2410:	2d 97       	sbiw	r28, 0x0d	; 13
    2412:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <regTableSize>
    2416:	e3 17       	cp	r30, r19
    2418:	60 f5       	brcc	.+88     	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	e8 5f       	subi	r30, 0xF8	; 248
    2422:	fe 4f       	sbci	r31, 0xFE	; 254
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	19 f1       	breq	.+70     	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    242c:	20 ff       	sbrs	r18, 0
    242e:	11 c0       	rjmp	.+34     	; 0x2452 <_Z14pacKetReceivedP8CCPACKET+0x150>
    2430:	40 91 7d 03 	lds	r20, 0x037D	; 0x80037d <swap+0x4>
    2434:	29 96       	adiw	r28, 0x09	; 9
    2436:	2f ad       	ldd	r18, Y+63	; 0x3f
    2438:	29 97       	sbiw	r28, 0x09	; 9
    243a:	42 17       	cp	r20, r18
    243c:	51 f0       	breq	.+20     	; 0x2452 <_Z14pacKetReceivedP8CCPACKET+0x150>
    243e:	38 30       	cpi	r19, 0x08	; 8
    2440:	28 f0       	brcs	.+10     	; 0x244c <_Z14pacKetReceivedP8CCPACKET+0x14a>
    2442:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <regTable+0xe>
    2446:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <regTable+0xf>
    244a:	11 c0       	rjmp	.+34     	; 0x246e <_Z14pacKetReceivedP8CCPACKET+0x16c>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e c0       	rjmp	.+28     	; 0x246e <_Z14pacKetReceivedP8CCPACKET+0x16c>
    2452:	60 96       	adiw	r28, 0x10	; 16
    2454:	3f ad       	ldd	r19, Y+63	; 0x3f
    2456:	60 97       	sbiw	r28, 0x10	; 16
    2458:	fc 01       	movw	r30, r24
    245a:	27 81       	ldd	r18, Z+7	; 0x07
    245c:	32 13       	cpse	r19, r18
    245e:	07 c0       	rjmp	.+14     	; 0x246e <_Z14pacKetReceivedP8CCPACKET+0x16c>
    2460:	2f 96       	adiw	r28, 0x0f	; 15
    2462:	6e ad       	ldd	r22, Y+62	; 0x3e
    2464:	7f ad       	ldd	r23, Y+63	; 0x3f
    2466:	2f 97       	sbiw	r28, 0x0f	; 15
    2468:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN8REGISTER7setDataEPh>
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <_Z14pacKetReceivedP8CCPACKET+0x170>
    246e:	0e 94 09 11 	call	0x2212	; 0x2212 <_ZN8REGISTER14sendSwapStatusEv>
    2472:	c0 5b       	subi	r28, 0xB0	; 176
    2474:	df 4f       	sbci	r29, 0xFF	; 255
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	08 95       	ret

00002486 <_ZN4SWAP11goToSleepMSEj>:
 */
void SWAP::goToSleepMS(uint16_t ms)
{
  uint8_t time = 0;	
  
  if (ms == 125)
    2486:	6d 37       	cpi	r22, 0x7D	; 125
    2488:	71 05       	cpc	r23, r1
    248a:	41 f0       	breq	.+16     	; 0x249c <_ZN4SWAP11goToSleepMSEj+0x16>
   time = RTC_125MS;
  else
  if (ms == 250)
    248c:	6a 3f       	cpi	r22, 0xFA	; 250
    248e:	71 05       	cpc	r23, r1
    2490:	39 f0       	breq	.+14     	; 0x24a0 <_ZN4SWAP11goToSleepMSEj+0x1a>
  time = RTC_250MS;
  else
  if (ms == 500)
    2492:	64 3f       	cpi	r22, 0xF4	; 244
    2494:	71 40       	sbci	r23, 0x01	; 1
    2496:	31 f4       	brne	.+12     	; 0x24a4 <_ZN4SWAP11goToSleepMSEj+0x1e>
  time = RTC_500MS;
    2498:	64 e0       	ldi	r22, 0x04	; 4
    249a:	05 c0       	rjmp	.+10     	; 0x24a6 <_ZN4SWAP11goToSleepMSEj+0x20>
void SWAP::goToSleepMS(uint16_t ms)
{
  uint8_t time = 0;	
  
  if (ms == 125)
   time = RTC_125MS;
    249c:	62 e0       	ldi	r22, 0x02	; 2
    249e:	03 c0       	rjmp	.+6      	; 0x24a6 <_ZN4SWAP11goToSleepMSEj+0x20>
  else
  if (ms == 250)
  time = RTC_250MS;
    24a0:	63 e0       	ldi	r22, 0x03	; 3
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <_ZN4SWAP11goToSleepMSEj+0x20>
 *
 * put the MCU in sleep mode during txInterval seconds
 */
void SWAP::goToSleepMS(uint16_t ms)
{
  uint8_t time = 0;	
    24a4:	60 e0       	ldi	r22, 0x00	; 0
  time = RTC_250MS;
  else
  if (ms == 500)
  time = RTC_500MS;
  //systemState = SYSTATE_RXOFF;
  panstamp.sleepMSec(time, RTCSRC_XT2, NONE);
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	23 e0       	ldi	r18, 0x03	; 3
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	8b e6       	ldi	r24, 0x6B	; 107
    24ae:	93 e0       	ldi	r25, 0x03	; 3
    24b0:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <_ZN8PANSTAMP9sleepMSecEj6RTCSRC20PANSTAMP_RADIO_POWER>

000024b4 <_ZN4SWAP23nvolatToFactoryDefaultsEv>:
 * nvolatToFactoryDefaults
 * 
 * Write default config values in non-volatile memory
 */
void SWAP::nvolatToFactoryDefaults(void)
{
    24b4:	0f 93       	push	r16
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	2a 97       	sbiw	r28, 0x0a	; 10
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
  STORAGE nvMem;

  // Signature
  uint8_t signature[] = {NVOLAT_SIGNATURE_HIGH, NVOLAT_SIGNATURE_LOW};
    24ca:	8b ea       	ldi	r24, 0xAB	; 171
    24cc:	8f 83       	std	Y+7, r24	; 0x07
    24ce:	8d ec       	ldi	r24, 0xCD	; 205
    24d0:	88 87       	std	Y+8, r24	; 0x08
  nvMem.write(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    24d2:	02 e0       	ldi	r16, 0x02	; 2
    24d4:	28 e0       	ldi	r18, 0x08	; 8
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	be 01       	movw	r22, r28
    24da:	69 5f       	subi	r22, 0xF9	; 249
    24dc:	7f 4f       	sbci	r23, 0xFF	; 255
    24de:	ce 01       	movw	r24, r28
    24e0:	0a 96       	adiw	r24, 0x0a	; 10
    24e2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN7STORAGE5writeEPhhhh>
  
  // Frequency channel
  uint8_t channel[] = {CCDEF_CHANNR};
    24e6:	19 86       	std	Y+9, r1	; 0x09
  nvMem.write(channel, DEFAULT_NVOLAT_SECTION, NVOLAT_FREQ_CHANNEL, sizeof(channel));
    24e8:	01 e0       	ldi	r16, 0x01	; 1
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	be 01       	movw	r22, r28
    24f0:	67 5f       	subi	r22, 0xF7	; 247
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	ce 01       	movw	r24, r28
    24f6:	0a 96       	adiw	r24, 0x0a	; 10
    24f8:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN7STORAGE5writeEPhhhh>
  
  // Sync word
  uint8_t syncW[] = {CCDEF_SYNC1, CCDEF_SYNC0};
    24fc:	85 eb       	ldi	r24, 0xB5	; 181
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	87 e4       	ldi	r24, 0x47	; 71
    2502:	8e 83       	std	Y+6, r24	; 0x06
  nvMem.write(syncW, DEFAULT_NVOLAT_SECTION, NVOLAT_SYNC_WORD, sizeof(syncW));
    2504:	02 e0       	ldi	r16, 0x02	; 2
    2506:	22 e0       	ldi	r18, 0x02	; 2
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	be 01       	movw	r22, r28
    250c:	6b 5f       	subi	r22, 0xFB	; 251
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	ce 01       	movw	r24, r28
    2512:	0a 96       	adiw	r24, 0x0a	; 10
    2514:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN7STORAGE5writeEPhhhh>
     * 
     * @return pseudo-random number
     */
     inline uint16_t GET_RANDOM(void)
     {
       return OSCCAL;
    2518:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

  // SWAP address (pseudo-random number)
  uint16_t random = panstamp.GET_RANDOM();
  uint8_t addr[] = {static_cast<uint8_t>((random >> 8) & 0xFF), static_cast<uint8_t>(random & 0xFF)};
    251c:	1b 82       	std	Y+3, r1	; 0x03
    251e:	8c 83       	std	Y+4, r24	; 0x04
  nvMem.write(addr, DEFAULT_NVOLAT_SECTION, NVOLAT_DEVICE_ADDR, sizeof(addr));
    2520:	24 e0       	ldi	r18, 0x04	; 4
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	be 01       	movw	r22, r28
    2526:	6d 5f       	subi	r22, 0xFD	; 253
    2528:	7f 4f       	sbci	r23, 0xFF	; 255
    252a:	ce 01       	movw	r24, r28
    252c:	0a 96       	adiw	r24, 0x0a	; 10
    252e:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN7STORAGE5writeEPhhhh>
  
  // TX interval
  uint8_t txInt[] = {0x01, 0};
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	1a 82       	std	Y+2, r1	; 0x02
  nvMem.write(txInt, DEFAULT_NVOLAT_SECTION, NVOLAT_TX_INTERVAL, sizeof(txInt));
    2538:	26 e0       	ldi	r18, 0x06	; 6
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	be 01       	movw	r22, r28
    253e:	6f 5f       	subi	r22, 0xFF	; 255
    2540:	7f 4f       	sbci	r23, 0xFF	; 255
    2542:	ce 01       	movw	r24, r28
    2544:	0a 96       	adiw	r24, 0x0a	; 10
    2546:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN7STORAGE5writeEPhhhh>
}
    254a:	2a 96       	adiw	r28, 0x0a	; 10
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	0f 91       	pop	r16
    255c:	08 95       	ret

0000255e <_ZN4SWAP4initEv>:
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	00 d0       	rcall	.+0      	; 0x256c <_ZN4SWAP4initEv+0xe>
    256c:	1f 92       	push	r1
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	7c 01       	movw	r14, r24
  uint8_t i;
  STORAGE nvMem;

  // Read signature from info/eeprom memory
  uint8_t signature[2];
  nvMem.read(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    2574:	02 e0       	ldi	r16, 0x02	; 2
    2576:	28 e0       	ldi	r18, 0x08	; 8
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	be 01       	movw	r22, r28
    257c:	6f 5f       	subi	r22, 0xFF	; 255
    257e:	7f 4f       	sbci	r23, 0xFF	; 255
    2580:	ce 01       	movw	r24, r28
    2582:	03 96       	adiw	r24, 0x03	; 3
    2584:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_ZN7STORAGE4readEPhhhh>

  // Correct signature in non-volatile memory?
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	8b 3a       	cpi	r24, 0xAB	; 171
    258c:	19 f4       	brne	.+6      	; 0x2594 <_ZN4SWAP4initEv+0x36>
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	8d 3c       	cpi	r24, 0xCD	; 205
    2592:	19 f0       	breq	.+6      	; 0x259a <_ZN4SWAP4initEv+0x3c>
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
    2594:	c7 01       	movw	r24, r14
    2596:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN4SWAP23nvolatToFactoryDefaultsEv>
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    259a:	10 e0       	ldi	r17, 0x00	; 0
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
  //rcOscCalibrate();
  
  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    259c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <regTableSize>
    25a0:	18 17       	cp	r17, r24
    25a2:	60 f4       	brcc	.+24     	; 0x25bc <_ZN4SWAP4initEv+0x5e>
    regTable[i]->init();
    25a4:	e1 2f       	mov	r30, r17
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	ee 0f       	add	r30, r30
    25aa:	ff 1f       	adc	r31, r31
    25ac:	e8 5f       	subi	r30, 0xF8	; 248
    25ae:	fe 4f       	sbci	r31, 0xFE	; 254
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <_ZN8REGISTER4initEv>
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
  //rcOscCalibrate();
  
  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    25b8:	1f 5f       	subi	r17, 0xFF	; 255
    25ba:	f0 cf       	rjmp	.-32     	; 0x259c <_ZN4SWAP4initEv+0x3e>
    regTable[i]->init();
 
  // Config radio settings
  panstamp.radio.devAddress = devAddress & 0xFF; 
    25bc:	f7 01       	movw	r30, r14
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <panstamp+0x9>
  panstamp.init();
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	8b e6       	ldi	r24, 0x6B	; 107
    25ca:	93 e0       	ldi	r25, 0x03	; 3
    25cc:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN8PANSTAMP4initEhh>
    25d0:	40 ec       	ldi	r20, 0xC0	; 192
    25d2:	6e e3       	ldi	r22, 0x3E	; 62
    25d4:	8c e6       	ldi	r24, 0x6C	; 108
    25d6:	93 e0       	ldi	r25, 0x03	; 3
    25d8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6CC11018writeRegEhh>
     * 
     * @param funct pointer to the custom function
     */
     inline void attachInterrupt(void (*funct)(CCPACKET*))
     {
       ccPacketReceived = funct;
    25dc:	81 e8       	ldi	r24, 0x81	; 129
    25de:	91 e1       	ldi	r25, 0x11	; 17
    25e0:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <panstamp+0xc>
    25e4:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <panstamp+0xb>
  panstamp.setHighTxPower();
  // Attach RF ISR
  panstamp.attachInterrupt(pacKetReceived);
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	ff 90       	pop	r15
    25f8:	ef 90       	pop	r14
    25fa:	08 95       	ret

000025fc <_GLOBAL__sub_I__Z14pacKetReceivedP8CCPACKET>:
 *
 * Class constructor
 */
SWAP::SWAP(void)
{  
  statusReceived = NULL;
    25fc:	e9 e7       	ldi	r30, 0x79	; 121
    25fe:	f3 e0       	ldi	r31, 0x03	; 3
    2600:	13 86       	std	Z+11, r1	; 0x0b
    2602:	12 86       	std	Z+10, r1	; 0x0a
  repeater = NULL;
    2604:	11 82       	std	Z+1, r1	; 0x01
    2606:	10 82       	st	Z, r1
  encryptPwd = NULL;
    2608:	11 86       	std	Z+9, r1	; 0x09
    260a:	10 86       	std	Z+8, r1	; 0x08
  security = 0;
    260c:	13 82       	std	Z+3, r1	; 0x03
    260e:	08 95       	ret

00002610 <_ZN8SWPACKETC1Ev>:
/**
 * SWPACKET
 * 
 * Class constructor
 */
SWPACKET::SWPACKET(void) 
    2610:	08 95       	ret

00002612 <_ZN8SWPACKET12smartEncryptEb>:
 *
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
    2612:	af 92       	push	r10
    2614:	bf 92       	push	r11
    2616:	cf 92       	push	r12
    2618:	df 92       	push	r13
    261a:	ef 92       	push	r14
    261c:	ff 92       	push	r15
    261e:	0f 93       	push	r16
    2620:	1f 93       	push	r17
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	dc 01       	movw	r26, r24
    2628:	a9 5b       	subi	r26, 0xB9	; 185
    262a:	bf 4f       	sbci	r27, 0xFF	; 255
    262c:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <swap+0x8>
    2630:	f0 91 82 03 	lds	r31, 0x0382	; 0x800382 <swap+0x9>
  byte i, j = 0;
  static uint8_t newData[CCPACKET_DATA_LEN];

  if (decrypt)
    2634:	66 23       	and	r22, r22
    2636:	21 f0       	breq	.+8      	; 0x2640 <_ZN8SWPACKET12smartEncryptEb+0x2e>
    nonce ^= swap.encryptPwd[9];
    2638:	31 85       	ldd	r19, Z+9	; 0x09
    263a:	2c 91       	ld	r18, X
    263c:	23 27       	eor	r18, r19
    263e:	2c 93       	st	X, r18

  function ^= swap.encryptPwd[11] ^ nonce;
    2640:	2c 91       	ld	r18, X
    2642:	ec 01       	movw	r28, r24
    2644:	c8 5b       	subi	r28, 0xB8	; 184
    2646:	df 4f       	sbci	r29, 0xFF	; 255
    2648:	38 81       	ld	r19, Y
    264a:	32 27       	eor	r19, r18
    264c:	43 85       	ldd	r20, Z+11	; 0x0b
    264e:	34 27       	eor	r19, r20
    2650:	38 83       	st	Y, r19
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
    2652:	25 97       	sbiw	r28, 0x05	; 5
    2654:	32 85       	ldd	r19, Z+10	; 0x0a
    2656:	32 27       	eor	r19, r18
    2658:	48 81       	ld	r20, Y
    265a:	59 81       	ldd	r21, Y+1	; 0x01
    265c:	43 27       	eor	r20, r19
    265e:	59 83       	std	Y+1, r21	; 0x01
    2660:	48 83       	st	Y, r20
  regAddr ^= swap.encryptPwd[8] ^ nonce;
    2662:	27 96       	adiw	r28, 0x07	; 7
    2664:	38 81       	ld	r19, Y
    2666:	32 27       	eor	r19, r18
    2668:	40 85       	ldd	r20, Z+8	; 0x08
    266a:	34 27       	eor	r19, r20
    266c:	38 83       	st	Y, r19
  regId ^= swap.encryptPwd[7] ^ nonce;
    266e:	21 96       	adiw	r28, 0x01	; 1
    2670:	38 81       	ld	r19, Y
    2672:	32 27       	eor	r19, r18
    2674:	47 81       	ldd	r20, Z+7	; 0x07
    2676:	34 27       	eor	r19, r20
    2678:	38 83       	st	Y, r19

  for(i=0 ; i<value.length ; i++)
    267a:	23 96       	adiw	r28, 0x03	; 3
    267c:	78 81       	ld	r23, Y
    267e:	05 e8       	ldi	r16, 0x85	; 133
    2680:	13 e0       	ldi	r17, 0x03	; 3
    2682:	a1 2c       	mov	r10, r1
    2684:	b1 2c       	mov	r11, r1
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
  byte i, j = 0;
    2686:	30 e0       	ldi	r19, 0x00	; 0
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    2688:	7c 01       	movw	r14, r24
    268a:	4c e4       	ldi	r20, 0x4C	; 76
    268c:	e4 0e       	add	r14, r20
    268e:	f1 1c       	adc	r15, r1
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    2690:	a7 16       	cp	r10, r23
    2692:	c8 f4       	brcc	.+50     	; 0x26c6 <_ZN8SWPACKET12smartEncryptEb+0xb4>
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    2694:	e7 01       	movw	r28, r14
    2696:	48 81       	ld	r20, Y
    2698:	59 81       	ldd	r21, Y+1	; 0x01
    269a:	4a 0d       	add	r20, r10
    269c:	5b 1d       	adc	r21, r11
    269e:	6f 01       	movw	r12, r30
    26a0:	c3 0e       	add	r12, r19
    26a2:	d1 1c       	adc	r13, r1
    26a4:	ea 01       	movw	r28, r20
    26a6:	58 81       	ld	r21, Y
    26a8:	e6 01       	movw	r28, r12
    26aa:	48 81       	ld	r20, Y
    26ac:	45 27       	eor	r20, r21
    26ae:	42 27       	eor	r20, r18
    26b0:	e8 01       	movw	r28, r16
    26b2:	49 93       	st	Y+, r20
    26b4:	8e 01       	movw	r16, r28
    j++;
    26b6:	3f 5f       	subi	r19, 0xFF	; 255
    if (j == 11)  // Don't re-use last byte from password
    26b8:	3b 30       	cpi	r19, 0x0B	; 11
    26ba:	09 f4       	brne	.+2      	; 0x26be <_ZN8SWPACKET12smartEncryptEb+0xac>
      j = 0;
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	df ef       	ldi	r29, 0xFF	; 255
    26c0:	ad 1a       	sub	r10, r29
    26c2:	bd 0a       	sbc	r11, r29
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    26c4:	e5 cf       	rjmp	.-54     	; 0x2690 <_ZN8SWPACKET12smartEncryptEb+0x7e>
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    j++;
    if (j == 11)  // Don't re-use last byte from password
      j = 0;
  }
  if (value.length > 0)
    26c6:	77 23       	and	r23, r23
    26c8:	39 f0       	breq	.+14     	; 0x26d8 <_ZN8SWPACKET12smartEncryptEb+0xc6>
    value.data = newData;
    26ca:	ec 01       	movw	r28, r24
    26cc:	c4 5b       	subi	r28, 0xB4	; 180
    26ce:	df 4f       	sbci	r29, 0xFF	; 255
    26d0:	45 e8       	ldi	r20, 0x85	; 133
    26d2:	53 e0       	ldi	r21, 0x03	; 3
    26d4:	59 83       	std	Y+1, r21	; 0x01
    26d6:	48 83       	st	Y, r20

  if (!decrypt)
    26d8:	61 11       	cpse	r22, r1
    26da:	03 c0       	rjmp	.+6      	; 0x26e2 <_ZN8SWPACKET12smartEncryptEb+0xd0>
    nonce ^= swap.encryptPwd[9];
    26dc:	81 85       	ldd	r24, Z+9	; 0x09
    26de:	28 27       	eor	r18, r24
    26e0:	2c 93       	st	X, r18
}
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	ff 90       	pop	r15
    26ec:	ef 90       	pop	r14
    26ee:	df 90       	pop	r13
    26f0:	cf 90       	pop	r12
    26f2:	bf 90       	pop	r11
    26f4:	af 90       	pop	r10
    26f6:	08 95       	ret

000026f8 <_ZN8SWPACKETC1EP8CCPACKET>:
 * 
 * Class constructor
 * 
 * @param packet Pointer to the raw CC1101 packet
 */
SWPACKET::SWPACKET(CCPACKET *packet) 
    26f8:	cf 92       	push	r12
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	fc 01       	movw	r30, r24
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
    270a:	db 01       	movw	r26, r22
    270c:	8d 91       	ld	r24, X+
    270e:	ef 01       	movw	r28, r30
    2710:	89 93       	st	Y+, r24
  for(i=0 ; i<ccPacket.length ; i++)
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	98 17       	cp	r25, r24
    2716:	21 f0       	breq	.+8      	; 0x2720 <_ZN8SWPACKETC1EP8CCPACKET+0x28>
    ccPacket.data[i] = packet->data[i];
    2718:	2d 91       	ld	r18, X+
    271a:	29 93       	st	Y+, r18
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
  for(i=0 ; i<ccPacket.length ; i++)
    271c:	9f 5f       	subi	r25, 0xFF	; 255
    271e:	fa cf       	rjmp	.-12     	; 0x2714 <_ZN8SWPACKETC1EP8CCPACKET+0x1c>
    ccPacket.data[i] = packet->data[i];
  
  hop = (ccPacket.data[2] >> 4) & 0x0F;
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	df 01       	movw	r26, r30
    2724:	ab 5b       	subi	r26, 0xBB	; 187
    2726:	bf 4f       	sbci	r27, 0xFF	; 255
    2728:	29 2f       	mov	r18, r25
    272a:	22 95       	swap	r18
    272c:	2f 70       	andi	r18, 0x0F	; 15
    272e:	2c 93       	st	X, r18
  security = ccPacket.data[2] & 0x0F;
    2730:	6f 01       	movw	r12, r30
    2732:	26 e4       	ldi	r18, 0x46	; 70
    2734:	c2 0e       	add	r12, r18
    2736:	d1 1c       	adc	r13, r1
    2738:	9f 70       	andi	r25, 0x0F	; 15
    273a:	d6 01       	movw	r26, r12
    273c:	9c 93       	st	X, r25
  // AES-128 encrypted?
  if (security & 0x04)
    aesCrypto();  // Decrypt
  #endif
  
  nonce = ccPacket.data[3];
    273e:	94 81       	ldd	r25, Z+4	; 0x04
    2740:	11 96       	adiw	r26, 0x01	; 1
    2742:	9c 93       	st	X, r25
  function = ccPacket.data[4] & ~SWAP_EXTENDED_ADDRESS_BIT;
    2744:	95 81       	ldd	r25, Z+5	; 0x05
    2746:	11 96       	adiw	r26, 0x01	; 1
    2748:	29 2f       	mov	r18, r25
    274a:	2f 77       	andi	r18, 0x7F	; 127
    274c:	2c 93       	st	X, r18
    274e:	11 96       	adiw	r26, 0x01	; 1
    2750:	ef 01       	movw	r28, r30
    2752:	cf 5b       	subi	r28, 0xBF	; 191
    2754:	df 4f       	sbci	r29, 0xFF	; 255
    2756:	8f 01       	movw	r16, r30
    2758:	0d 5b       	subi	r16, 0xBD	; 189
    275a:	1f 4f       	sbci	r17, 0xFF	; 255
    275c:	bf 01       	movw	r22, r30
    275e:	66 5b       	subi	r22, 0xB6	; 182
    2760:	7f 4f       	sbci	r23, 0xFF	; 255
    2762:	af 01       	movw	r20, r30
    2764:	45 5b       	subi	r20, 0xB5	; 181
    2766:	5f 4f       	sbci	r21, 0xFF	; 255

  if (ccPacket.data[4] & SWAP_EXTENDED_ADDRESS_BIT)
    2768:	97 ff       	sbrs	r25, 7
    276a:	16 c0       	rjmp	.+44     	; 0x2798 <_ZN8SWPACKETC1EP8CCPACKET+0xa0>
  {
    addrType = SWAPADDR_EXTENDED;
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	9c 93       	st	X, r25
    destAddr = ccPacket.data[0];
    destAddr <<= 8;
    destAddr |= ccPacket.data[1];
    2770:	21 81       	ldd	r18, Z+1	; 0x01
    2772:	32 81       	ldd	r19, Z+2	; 0x02
    2774:	32 27       	eor	r19, r18
    2776:	23 27       	eor	r18, r19
    2778:	32 27       	eor	r19, r18
    277a:	39 83       	std	Y+1, r19	; 0x01
    277c:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[5];
    srcAddr <<= 8;
    srcAddr |= ccPacket.data[6];
    277e:	26 81       	ldd	r18, Z+6	; 0x06
    2780:	37 81       	ldd	r19, Z+7	; 0x07
    2782:	32 27       	eor	r19, r18
    2784:	23 27       	eor	r18, r19
    2786:	32 27       	eor	r19, r18
    2788:	e8 01       	movw	r28, r16
    278a:	39 83       	std	Y+1, r19	; 0x01
    278c:	28 83       	st	Y, r18
    regAddr = ccPacket.data[7];
    regAddr <<= 8;
    regAddr |= ccPacket.data[8];
    278e:	91 85       	ldd	r25, Z+9	; 0x09
    2790:	eb 01       	movw	r28, r22
    2792:	98 83       	st	Y, r25
    regId = ccPacket.data[9];
    2794:	92 85       	ldd	r25, Z+10	; 0x0a
    2796:	0e c0       	rjmp	.+28     	; 0x27b4 <_ZN8SWPACKETC1EP8CCPACKET+0xbc>
  }
  else
  {
    addrType = SWAPADDR_SIMPLE;
    2798:	1c 92       	st	X, r1
    destAddr = ccPacket.data[0];
    279a:	21 81       	ldd	r18, Z+1	; 0x01
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	39 83       	std	Y+1, r19	; 0x01
    27a0:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[1];
    27a2:	22 81       	ldd	r18, Z+2	; 0x02
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	e8 01       	movw	r28, r16
    27a8:	39 83       	std	Y+1, r19	; 0x01
    27aa:	28 83       	st	Y, r18
    regAddr = ccPacket.data[5];
    27ac:	96 81       	ldd	r25, Z+6	; 0x06
    27ae:	eb 01       	movw	r28, r22
    27b0:	98 83       	st	Y, r25
    regId = ccPacket.data[6];
    27b2:	97 81       	ldd	r25, Z+7	; 0x07
    27b4:	ea 01       	movw	r28, r20
    27b6:	98 83       	st	Y, r25
  }

  value.data = ccPacket.data + SWAP_DATA_HEAD_LEN + 1;
    27b8:	9f 01       	movw	r18, r30
    27ba:	24 5b       	subi	r18, 0xB4	; 180
    27bc:	3f 4f       	sbci	r19, 0xFF	; 255
    27be:	af 01       	movw	r20, r30
    27c0:	48 5f       	subi	r20, 0xF8	; 248
    27c2:	5f 4f       	sbci	r21, 0xFF	; 255
    27c4:	e9 01       	movw	r28, r18
    27c6:	59 83       	std	Y+1, r21	; 0x01
    27c8:	48 83       	st	Y, r20
  value.length = ccPacket.length - SWAP_DATA_HEAD_LEN - 1;
    27ca:	2e 5f       	subi	r18, 0xFE	; 254
    27cc:	3f 4f       	sbci	r19, 0xFF	; 255
    27ce:	87 50       	subi	r24, 0x07	; 7
    27d0:	e9 01       	movw	r28, r18
    27d2:	88 83       	st	Y, r24

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
    27d4:	8c 91       	ld	r24, X
    27d6:	81 11       	cpse	r24, r1
    27d8:	10 c0       	rjmp	.+32     	; 0x27fa <_ZN8SWPACKETC1EP8CCPACKET+0x102>
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
    27da:	d6 01       	movw	r26, r12
    27dc:	8c 91       	ld	r24, X
    27de:	81 ff       	sbrs	r24, 1
    27e0:	0c c0       	rjmp	.+24     	; 0x27fa <_ZN8SWPACKETC1EP8CCPACKET+0x102>
      smartDecrypt();
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	cf 01       	movw	r24, r30
  }
  #endif
}
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	ff 90       	pop	r15
    27f0:	ef 90       	pop	r14
    27f2:	df 90       	pop	r13
    27f4:	cf 90       	pop	r12
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
      smartDecrypt();
    27f6:	0c 94 09 13 	jmp	0x2612	; 0x2612 <_ZN8SWPACKET12smartEncryptEb>
  }
  #endif
}
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	df 90       	pop	r13
    2808:	cf 90       	pop	r12
    280a:	08 95       	ret

0000280c <_ZN8SWPACKET4sendEv>:
 * @return
 *  True if the transmission succeeds
 *  False otherwise
 */
bool SWPACKET::send(void)
{
    280c:	cf 92       	push	r12
    280e:	df 92       	push	r13
    2810:	ef 92       	push	r14
    2812:	ff 92       	push	r15
    2814:	0f 93       	push	r16
    2816:	1f 93       	push	r17
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	c1 54       	subi	r28, 0x41	; 65
    2822:	d1 09       	sbc	r29, r1
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	8c 01       	movw	r16, r24
  byte i;
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
    2830:	fc 01       	movw	r30, r24
    2832:	e1 5b       	subi	r30, 0xB1	; 177
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	98 01       	movw	r18, r16
    283a:	22 5b       	subi	r18, 0xB2	; 178
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	79 01       	movw	r14, r18
    2840:	e7 54       	subi	r30, 0x47	; 71
    2842:	f1 09       	sbc	r31, r1
    2844:	d9 01       	movw	r26, r18
    2846:	81 11       	cpse	r24, r1
    2848:	10 c0       	rjmp	.+32     	; 0x286a <_ZN8SWPACKET4sendEv+0x5e>
    284a:	8c 91       	ld	r24, X
    284c:	90 e0       	ldi	r25, 0x00	; 0
  {
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
    284e:	a8 01       	movw	r20, r16
    2850:	44 5b       	subi	r20, 0xB4	; 180
    2852:	5f 4f       	sbci	r21, 0xFF	; 255
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	d8 f0       	brcs	.+54     	; 0x288e <_ZN8SWPACKET4sendEv+0x82>
    2858:	da 01       	movw	r26, r20
    285a:	2d 91       	ld	r18, X+
    285c:	3c 91       	ld	r19, X
    285e:	d9 01       	movw	r26, r18
    2860:	a8 0f       	add	r26, r24
    2862:	b9 1f       	adc	r27, r25
    2864:	2c 91       	ld	r18, X
    2866:	21 93       	st	Z+, r18
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
  {
    for(i=0 ; i<value.length ; i++)
    2868:	f5 cf       	rjmp	.-22     	; 0x2854 <_ZN8SWPACKET4sendEv+0x48>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    286a:	3c 91       	ld	r19, X
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    2870:	a8 01       	movw	r20, r16
    2872:	44 5b       	subi	r20, 0xB4	; 180
    2874:	5f 4f       	sbci	r21, 0xFF	; 255
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    2876:	83 17       	cp	r24, r19
    2878:	50 f4       	brcc	.+20     	; 0x288e <_ZN8SWPACKET4sendEv+0x82>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    287a:	da 01       	movw	r26, r20
    287c:	6d 91       	ld	r22, X+
    287e:	7c 91       	ld	r23, X
    2880:	db 01       	movw	r26, r22
    2882:	a8 0f       	add	r26, r24
    2884:	b9 1f       	adc	r27, r25
    2886:	2c 91       	ld	r18, X
    2888:	21 93       	st	Z+, r18
    288a:	01 96       	adiw	r24, 0x01	; 1
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    288c:	f4 cf       	rjmp	.-24     	; 0x2876 <_ZN8SWPACKET4sendEv+0x6a>
  }

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
    // Need to encrypt packet?
    if (security & 0x02)
    288e:	68 01       	movw	r12, r16
    2890:	b6 e4       	ldi	r27, 0x46	; 70
    2892:	cb 0e       	add	r12, r27
    2894:	d1 1c       	adc	r13, r1
    2896:	f6 01       	movw	r30, r12
    2898:	80 81       	ld	r24, Z
    289a:	81 ff       	sbrs	r24, 1
    289c:	04 c0       	rjmp	.+8      	; 0x28a6 <_ZN8SWPACKET4sendEv+0x9a>
      smartEncrypt();
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	c8 01       	movw	r24, r16
    28a2:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN8SWPACKET12smartEncryptEb>
  #endif

  ccPacket.length = value.length + SWAP_DATA_HEAD_LEN + 1;
    28a6:	d7 01       	movw	r26, r14
    28a8:	8c 91       	ld	r24, X
    28aa:	89 5f       	subi	r24, 0xF9	; 249
    28ac:	f8 01       	movw	r30, r16
    28ae:	80 83       	st	Z, r24

  ccPacket.data[2] = (hop << 4) & 0xF0;
    28b0:	eb 5b       	subi	r30, 0xBB	; 187
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
  ccPacket.data[2] |= security & 0x0F;
    28b4:	80 81       	ld	r24, Z
    28b6:	f0 e1       	ldi	r31, 0x10	; 16
    28b8:	8f 9f       	mul	r24, r31
    28ba:	c0 01       	movw	r24, r0
    28bc:	11 24       	eor	r1, r1
    28be:	d6 01       	movw	r26, r12
    28c0:	9c 91       	ld	r25, X
    28c2:	9f 70       	andi	r25, 0x0F	; 15
    28c4:	89 2b       	or	r24, r25
    28c6:	f8 01       	movw	r30, r16
    28c8:	83 83       	std	Z+3, r24	; 0x03
  ccPacket.data[3] = nonce;
    28ca:	e9 5b       	subi	r30, 0xB9	; 185
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 81       	ld	r24, Z
    28d0:	d8 01       	movw	r26, r16
    28d2:	14 96       	adiw	r26, 0x04	; 4
    28d4:	8c 93       	st	X, r24
    28d6:	14 97       	sbiw	r26, 0x04	; 4
    ccPacket.data[6] = srcAddr & 0xFF;
    ccPacket.data[7] = (regAddr >> 8) & 0xFF;
    ccPacket.data[8] = regAddr & 0xFF;
    ccPacket.data[9] = regId;
  #else
    addrType = SWAPADDR_SIMPLE;
    28d8:	32 96       	adiw	r30, 0x02	; 2
    28da:	10 82       	st	Z, r1
    ccPacket.data[0] = destAddr;
    28dc:	38 97       	sbiw	r30, 0x08	; 8
    28de:	80 81       	ld	r24, Z
    28e0:	f8 01       	movw	r30, r16
    28e2:	81 83       	std	Z+1, r24	; 0x01
    ccPacket.data[1] = srcAddr;
    28e4:	ed 5b       	subi	r30, 0xBD	; 189
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	12 96       	adiw	r26, 0x02	; 2
    28ec:	8c 93       	st	X, r24
    28ee:	12 97       	sbiw	r26, 0x02	; 2
    ccPacket.data[4] = function;
    28f0:	35 96       	adiw	r30, 0x05	; 5
    28f2:	80 81       	ld	r24, Z
    28f4:	f8 01       	movw	r30, r16
    28f6:	85 83       	std	Z+5, r24	; 0x05
    ccPacket.data[5] = regAddr;
    28f8:	e6 5b       	subi	r30, 0xB6	; 182
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	16 96       	adiw	r26, 0x06	; 6
    2900:	8c 93       	st	X, r24
    ccPacket.data[6] = regId;
    2902:	31 96       	adiw	r30, 0x01	; 1
    2904:	80 81       	ld	r24, Z
    2906:	f8 01       	movw	r30, r16
    2908:	87 83       	std	Z+7, r24	; 0x07
    290a:	93 e0       	ldi	r25, 0x03	; 3
    290c:	f9 2e       	mov	r15, r25
    290e:	81 e4       	ldi	r24, 0x41	; 65
    2910:	f8 01       	movw	r30, r16
    2912:	de 01       	movw	r26, r28
    2914:	11 96       	adiw	r26, 0x01	; 1
    2916:	01 90       	ld	r0, Z+
    2918:	0d 92       	st	X+, r0
    291a:	8a 95       	dec	r24
    291c:	e1 f7       	brne	.-8      	; 0x2916 <_ZN8SWPACKET4sendEv+0x10a>
     *  True if the transmission succeeds
     *  False otherwise
     */
    inline bool sendData(CCPACKET packet)
    {
      return radio.sendData(packet);
    291e:	2d b7       	in	r18, 0x3d	; 61
    2920:	3e b7       	in	r19, 0x3e	; 62
    2922:	21 54       	subi	r18, 0x41	; 65
    2924:	31 09       	sbc	r19, r1
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	3e bf       	out	0x3e, r19	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	2d bf       	out	0x3d, r18	; 61
    2930:	ad b7       	in	r26, 0x3d	; 61
    2932:	be b7       	in	r27, 0x3e	; 62
    2934:	11 96       	adiw	r26, 0x01	; 1
    2936:	81 e4       	ldi	r24, 0x41	; 65
    2938:	fe 01       	movw	r30, r28
    293a:	31 96       	adiw	r30, 0x01	; 1
    293c:	01 90       	ld	r0, Z+
    293e:	0d 92       	st	X+, r0
    2940:	8a 95       	dec	r24
    2942:	e1 f7       	brne	.-8      	; 0x293c <_ZN8SWPACKET4sendEv+0x130>
    2944:	8c e6       	ldi	r24, 0x6C	; 108
    2946:	93 e0       	ldi	r25, 0x03	; 3
    2948:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN6CC11018sendDataE8CCPACKET>
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	81 11       	cpse	r24, r1
    2958:	0f c0       	rjmp	.+30     	; 0x2978 <_ZN8SWPACKET4sendEv+0x16c>
    295a:	fa 94       	dec	r15
    295c:	ff 20       	and	r15, r15
    295e:	61 f0       	breq	.+24     	; 0x2978 <_ZN8SWPACKET4sendEv+0x16c>
  {
    i--;
    delay(SWAP_TX_DELAY);
    2960:	60 91 74 03 	lds	r22, 0x0374	; 0x800374 <panstamp+0x9>
    2964:	70 e0       	ldi	r23, 0x00	; 0
    2966:	66 0f       	add	r22, r22
    2968:	77 1f       	adc	r23, r23
    296a:	07 2e       	mov	r0, r23
    296c:	00 0c       	add	r0, r0
    296e:	88 0b       	sbc	r24, r24
    2970:	99 0b       	sbc	r25, r25
    2972:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
    ccPacket.data[5] = regAddr;
    ccPacket.data[6] = regId;
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    2976:	cb cf       	rjmp	.-106    	; 0x290e <_ZN8SWPACKET4sendEv+0x102>
    i--;
    delay(SWAP_TX_DELAY);
  }
  return res;
  
}
    2978:	cf 5b       	subi	r28, 0xBF	; 191
    297a:	df 4f       	sbci	r29, 0xFF	; 255
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	df 90       	pop	r13
    2994:	cf 90       	pop	r12
    2996:	08 95       	ret

00002998 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>:
 * @param rId Register id
 * @param val	Pointer to new value
 * @param len Buffer length
 * @param type type of data contained
 */
SWSTATUS::SWSTATUS(unsigned char rId, unsigned char *val, unsigned char len, SWDTYPE type) 
    2998:	df 92       	push	r13
    299a:	ef 92       	push	r14
    299c:	ff 92       	push	r15
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	ec 01       	movw	r28, r24
    29a8:	d6 2e       	mov	r13, r22
    29aa:	7a 01       	movw	r14, r20
    29ac:	12 2f       	mov	r17, r18
    29ae:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZN8SWPACKETC1Ev>
{
  destAddr = SWAP_BCAST_ADDR;
    29b2:	fe 01       	movw	r30, r28
    29b4:	ef 5b       	subi	r30, 0xBF	; 191
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	11 82       	std	Z+1, r1	; 0x01
    29ba:	10 82       	st	Z, r1
  srcAddr = swap.devAddress;
    29bc:	e9 e7       	ldi	r30, 0x79	; 121
    29be:	f3 e0       	ldi	r31, 0x03	; 3
    29c0:	92 81       	ldd	r25, Z+2	; 0x02
    29c2:	de 01       	movw	r26, r28
    29c4:	ad 5b       	subi	r26, 0xBD	; 189
    29c6:	bf 4f       	sbci	r27, 0xFF	; 255
    29c8:	29 2f       	mov	r18, r25
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	11 96       	adiw	r26, 0x01	; 1
    29ce:	3c 93       	st	X, r19
    29d0:	2e 93       	st	-X, r18
  hop = 0;
    29d2:	12 96       	adiw	r26, 0x02	; 2
    29d4:	1c 92       	st	X, r1
  security = swap.security & 0x0F;
    29d6:	11 96       	adiw	r26, 0x01	; 1
    29d8:	83 81       	ldd	r24, Z+3	; 0x03
    29da:	8f 70       	andi	r24, 0x0F	; 15
    29dc:	8c 93       	st	X, r24
  nonce = ++swap.nonce;
    29de:	84 81       	ldd	r24, Z+4	; 0x04
    29e0:	8f 5f       	subi	r24, 0xFF	; 255
    29e2:	84 83       	std	Z+4, r24	; 0x04
    29e4:	fe 01       	movw	r30, r28
    29e6:	e9 5b       	subi	r30, 0xB9	; 185
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 83       	st	Z, r24
  function = SWAPFUNCT_STA;
    29ec:	31 96       	adiw	r30, 0x01	; 1
    29ee:	10 82       	st	Z, r1
  regAddr = swap.devAddress;
    29f0:	32 96       	adiw	r30, 0x02	; 2
    29f2:	90 83       	st	Z, r25
  regId = rId;
    29f4:	31 96       	adiw	r30, 0x01	; 1
    29f6:	d0 82       	st	Z, r13
  value.length = len;
    29f8:	33 96       	adiw	r30, 0x03	; 3
    29fa:	10 83       	st	Z, r17
  value.data = val;
    29fc:	32 97       	sbiw	r30, 0x02	; 2
    29fe:	f1 82       	std	Z+1, r15	; 0x01
    2a00:	e0 82       	st	Z, r14
  value.type = type;
    2a02:	c1 5b       	subi	r28, 0xB1	; 177
    2a04:	df 4f       	sbci	r29, 0xFF	; 255
    2a06:	08 83       	st	Y, r16
}
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	08 95       	ret

00002a18 <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	08 95       	ret

00002a1e <_ZN7TwoWire9availableEv>:
    2a1e:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2a28:	82 1b       	sub	r24, r18
    2a2a:	91 09       	sbc	r25, r1
    2a2c:	08 95       	ret

00002a2e <_ZN7TwoWire4readEv>:
    2a2e:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2a32:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2a36:	98 17       	cp	r25, r24
    2a38:	50 f4       	brcc	.+20     	; 0x2a4e <_ZN7TwoWire4readEv+0x20>
    2a3a:	e9 2f       	mov	r30, r25
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	ec 50       	subi	r30, 0x0C	; 12
    2a40:	fc 4f       	sbci	r31, 0xFC	; 252
    2a42:	20 81       	ld	r18, Z
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	9f 5f       	subi	r25, 0xFF	; 255
    2a48:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <_ZN7TwoWire4readEv+0x24>
    2a4e:	2f ef       	ldi	r18, 0xFF	; 255
    2a50:	3f ef       	ldi	r19, 0xFF	; 255
    2a52:	c9 01       	movw	r24, r18
    2a54:	08 95       	ret

00002a56 <_ZN7TwoWire4peekEv>:
    2a56:	e0 91 f3 03 	lds	r30, 0x03F3	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2a5a:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2a5e:	e8 17       	cp	r30, r24
    2a60:	30 f4       	brcc	.+12     	; 0x2a6e <_ZN7TwoWire4peekEv+0x18>
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	ec 50       	subi	r30, 0x0C	; 12
    2a66:	fc 4f       	sbci	r31, 0xFC	; 252
    2a68:	80 81       	ld	r24, Z
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	08 95       	ret
    2a6e:	8f ef       	ldi	r24, 0xFF	; 255
    2a70:	9f ef       	ldi	r25, 0xFF	; 255
    2a72:	08 95       	ret

00002a74 <_ZN7TwoWire5flushEv>:
    2a74:	08 95       	ret

00002a76 <_ZN7TwoWire5writeEPKhj>:
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	7c 01       	movw	r14, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	8a 01       	movw	r16, r20
    2a8c:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <_ZN7TwoWire12transmittingE>
    2a90:	22 23       	and	r18, r18
    2a92:	89 f0       	breq	.+34     	; 0x2ab6 <_ZN7TwoWire5writeEPKhj+0x40>
    2a94:	eb 01       	movw	r28, r22
    2a96:	6b 01       	movw	r12, r22
    2a98:	c4 0e       	add	r12, r20
    2a9a:	d5 1e       	adc	r13, r21
    2a9c:	cc 15       	cp	r28, r12
    2a9e:	dd 05       	cpc	r29, r13
    2aa0:	69 f0       	breq	.+26     	; 0x2abc <_ZN7TwoWire5writeEPKhj+0x46>
    2aa2:	69 91       	ld	r22, Y+
    2aa4:	d7 01       	movw	r26, r14
    2aa6:	ed 91       	ld	r30, X+
    2aa8:	fc 91       	ld	r31, X
    2aaa:	01 90       	ld	r0, Z+
    2aac:	f0 81       	ld	r31, Z
    2aae:	e0 2d       	mov	r30, r0
    2ab0:	c7 01       	movw	r24, r14
    2ab2:	09 95       	icall
    2ab4:	f3 cf       	rjmp	.-26     	; 0x2a9c <_ZN7TwoWire5writeEPKhj+0x26>
    2ab6:	64 2f       	mov	r22, r20
    2ab8:	0e 94 22 19 	call	0x3244	; 0x3244 <_Z12twi_transmitPKhh>
    2abc:	c8 01       	movw	r24, r16
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	ff 90       	pop	r15
    2ac8:	ef 90       	pop	r14
    2aca:	df 90       	pop	r13
    2acc:	cf 90       	pop	r12
    2ace:	08 95       	ret

00002ad0 <_ZN7TwoWire5writeEh>:
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	1f 92       	push	r1
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	69 83       	std	Y+1, r22	; 0x01
    2adc:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <_ZN7TwoWire12transmittingE>
    2ae0:	22 23       	and	r18, r18
    2ae2:	d1 f0       	breq	.+52     	; 0x2b18 <_ZN7TwoWire5writeEh+0x48>
    2ae4:	20 91 cf 03 	lds	r18, 0x03CF	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2ae8:	20 32       	cpi	r18, 0x20	; 32
    2aea:	40 f0       	brcs	.+16     	; 0x2afc <_ZN7TwoWire5writeEh+0x2c>
    2aec:	21 e0       	ldi	r18, 0x01	; 1
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	fc 01       	movw	r30, r24
    2af2:	33 83       	std	Z+3, r19	; 0x03
    2af4:	22 83       	std	Z+2, r18	; 0x02
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	15 c0       	rjmp	.+42     	; 0x2b26 <_ZN7TwoWire5writeEh+0x56>
    2afc:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2b00:	e8 2f       	mov	r30, r24
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	ef 52       	subi	r30, 0x2F	; 47
    2b06:	fc 4f       	sbci	r31, 0xFC	; 252
    2b08:	99 81       	ldd	r25, Y+1	; 0x01
    2b0a:	90 83       	st	Z, r25
    2b0c:	8f 5f       	subi	r24, 0xFF	; 255
    2b0e:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2b12:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2b16:	05 c0       	rjmp	.+10     	; 0x2b22 <_ZN7TwoWire5writeEh+0x52>
    2b18:	61 e0       	ldi	r22, 0x01	; 1
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	01 96       	adiw	r24, 0x01	; 1
    2b1e:	0e 94 22 19 	call	0x3244	; 0x3244 <_Z12twi_transmitPKhh>
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	0f 90       	pop	r0
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    2b2c:	08 95       	ret

00002b2e <_ZN7TwoWireC1Ev>:
    2b2e:	fc 01       	movw	r30, r24
    2b30:	13 82       	std	Z+3, r1	; 0x03
    2b32:	12 82       	std	Z+2, r1	; 0x02
    2b34:	88 ee       	ldi	r24, 0xE8	; 232
    2b36:	93 e0       	ldi	r25, 0x03	; 3
    2b38:	a0 e0       	ldi	r26, 0x00	; 0
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	84 83       	std	Z+4, r24	; 0x04
    2b3e:	95 83       	std	Z+5, r25	; 0x05
    2b40:	a6 83       	std	Z+6, r26	; 0x06
    2b42:	b7 83       	std	Z+7, r27	; 0x07
    2b44:	89 e5       	ldi	r24, 0x59	; 89
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	08 95       	ret

00002b4e <_ZN7TwoWire5beginEv>:
    2b4e:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2b52:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2b56:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2b5a:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2b5e:	0c 94 6f 18 	jmp	0x30de	; 0x30de <_Z8twi_initv>

00002b62 <_ZN7TwoWire11requestFromEhhh>:
    2b62:	86 2f       	mov	r24, r22
    2b64:	41 32       	cpi	r20, 0x21	; 33
    2b66:	08 f0       	brcs	.+2      	; 0x2b6a <_ZN7TwoWire11requestFromEhhh+0x8>
    2b68:	40 e2       	ldi	r20, 0x20	; 32
    2b6a:	64 ef       	ldi	r22, 0xF4	; 244
    2b6c:	73 e0       	ldi	r23, 0x03	; 3
    2b6e:	0e 94 8d 18 	call	0x311a	; 0x311a <_Z12twi_readFromhPhhh>
    2b72:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2b76:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2b7a:	08 95       	ret

00002b7c <_ZN7TwoWire11requestFromEii>:
    2b7c:	21 e0       	ldi	r18, 0x01	; 1
    2b7e:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <_ZN7TwoWire11requestFromEhhh>

00002b82 <_ZN7TwoWire17beginTransmissionEh>:
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <_ZN7TwoWire12transmittingE>
    2b88:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <_ZN7TwoWire9txAddressE>
    2b8c:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2b90:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2b94:	08 95       	ret

00002b96 <_ZN7TwoWire17beginTransmissionEi>:
    2b96:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <_ZN7TwoWire17beginTransmissionEh>

00002b9a <_ZN7TwoWire15endTransmissionEh>:
    2b9a:	0f 93       	push	r16
    2b9c:	06 2f       	mov	r16, r22
    2b9e:	21 e0       	ldi	r18, 0x01	; 1
    2ba0:	40 91 cf 03 	lds	r20, 0x03CF	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2ba4:	61 ed       	ldi	r22, 0xD1	; 209
    2ba6:	73 e0       	ldi	r23, 0x03	; 3
    2ba8:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <_ZN7TwoWire9txAddressE>
    2bac:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <_Z11twi_writeTohPhhhh>
    2bb0:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2bb4:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2bb8:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_ZN7TwoWire12transmittingE>
    2bbc:	0f 91       	pop	r16
    2bbe:	08 95       	ret

00002bc0 <_ZN7TwoWire15endTransmissionEv>:
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <_ZN7TwoWire15endTransmissionEh>

00002bc6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2bc6:	82 ec       	ldi	r24, 0xC2	; 194
    2bc8:	93 e0       	ldi	r25, 0x03	; 3
    2bca:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <_ZN7TwoWireC1Ev>

00002bce <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2bce:	08 95       	ret

00002bd0 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    2bd0:	08 95       	ret

00002bd2 <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2bd2:	82 30       	cpi	r24, 0x02	; 2
    2bd4:	e8 f4       	brcc	.+58     	; 0x2c10 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    2bd6:	e8 2f       	mov	r30, r24
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	ee 0f       	add	r30, r30
    2bdc:	ff 1f       	adc	r31, r31
    2bde:	ef 5a       	subi	r30, 0xAF	; 175
    2be0:	fe 4f       	sbci	r31, 0xFE	; 254
    2be2:	71 83       	std	Z+1, r23	; 0x01
    2be4:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    2be6:	81 30       	cpi	r24, 0x01	; 1
    2be8:	41 f0       	breq	.+16     	; 0x2bfa <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    2bea:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2bee:	8c 7f       	andi	r24, 0xFC	; 252
    2bf0:	48 2b       	or	r20, r24
    2bf2:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    2bf6:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    2bf8:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    2bfa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2bfe:	83 7f       	andi	r24, 0xF3	; 243
    2c00:	44 0f       	add	r20, r20
    2c02:	55 1f       	adc	r21, r21
    2c04:	44 0f       	add	r20, r20
    2c06:	55 1f       	adc	r21, r21
    2c08:	48 2b       	or	r20, r24
    2c0a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    2c0e:	e9 9a       	sbi	0x1d, 1	; 29
    2c10:	08 95       	ret

00002c12 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2c12:	82 30       	cpi	r24, 0x02	; 2
    2c14:	78 f4       	brcc	.+30     	; 0x2c34 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    2c16:	81 30       	cpi	r24, 0x01	; 1
    2c18:	11 f0       	breq	.+4      	; 0x2c1e <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    2c1a:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    2c1c:	01 c0       	rjmp	.+2      	; 0x2c20 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    2c1e:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2c20:	e8 2f       	mov	r30, r24
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	ee 0f       	add	r30, r30
    2c26:	ff 1f       	adc	r31, r31
    2c28:	ef 5a       	subi	r30, 0xAF	; 175
    2c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2c:	88 ee       	ldi	r24, 0xE8	; 232
    2c2e:	95 e1       	ldi	r25, 0x15	; 21
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	80 83       	st	Z, r24
    2c34:	08 95       	ret

00002c36 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2c36:	1f 92       	push	r1
    2c38:	0f 92       	push	r0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	0f 92       	push	r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	2f 93       	push	r18
    2c42:	3f 93       	push	r19
    2c44:	4f 93       	push	r20
    2c46:	5f 93       	push	r21
    2c48:	6f 93       	push	r22
    2c4a:	7f 93       	push	r23
    2c4c:	8f 93       	push	r24
    2c4e:	9f 93       	push	r25
    2c50:	af 93       	push	r26
    2c52:	bf 93       	push	r27
    2c54:	ef 93       	push	r30
    2c56:	ff 93       	push	r31
    2c58:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <intFunc>
    2c5c:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <intFunc+0x1>
    2c60:	09 95       	icall
    2c62:	ff 91       	pop	r31
    2c64:	ef 91       	pop	r30
    2c66:	bf 91       	pop	r27
    2c68:	af 91       	pop	r26
    2c6a:	9f 91       	pop	r25
    2c6c:	8f 91       	pop	r24
    2c6e:	7f 91       	pop	r23
    2c70:	6f 91       	pop	r22
    2c72:	5f 91       	pop	r21
    2c74:	4f 91       	pop	r20
    2c76:	3f 91       	pop	r19
    2c78:	2f 91       	pop	r18
    2c7a:	0f 90       	pop	r0
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	0f 90       	pop	r0
    2c80:	1f 90       	pop	r1
    2c82:	18 95       	reti

00002c84 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2c84:	1f 92       	push	r1
    2c86:	0f 92       	push	r0
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	0f 92       	push	r0
    2c8c:	11 24       	eor	r1, r1
    2c8e:	2f 93       	push	r18
    2c90:	3f 93       	push	r19
    2c92:	4f 93       	push	r20
    2c94:	5f 93       	push	r21
    2c96:	6f 93       	push	r22
    2c98:	7f 93       	push	r23
    2c9a:	8f 93       	push	r24
    2c9c:	9f 93       	push	r25
    2c9e:	af 93       	push	r26
    2ca0:	bf 93       	push	r27
    2ca2:	ef 93       	push	r30
    2ca4:	ff 93       	push	r31
    2ca6:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <intFunc+0x2>
    2caa:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <intFunc+0x3>
    2cae:	09 95       	icall
    2cb0:	ff 91       	pop	r31
    2cb2:	ef 91       	pop	r30
    2cb4:	bf 91       	pop	r27
    2cb6:	af 91       	pop	r26
    2cb8:	9f 91       	pop	r25
    2cba:	8f 91       	pop	r24
    2cbc:	7f 91       	pop	r23
    2cbe:	6f 91       	pop	r22
    2cc0:	5f 91       	pop	r21
    2cc2:	4f 91       	pop	r20
    2cc4:	3f 91       	pop	r19
    2cc6:	2f 91       	pop	r18
    2cc8:	0f 90       	pop	r0
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	0f 90       	pop	r0
    2cce:	1f 90       	pop	r1
    2cd0:	18 95       	reti

00002cd2 <_ZN6AVRRTC6wakeUpEv>:
 * 'rxOn' Enter RX_ON state after waking up
 */
void AVRRTC::wakeUp(void) 
{
  // Exit from sleep
  sleep_disable();
    2cd2:	83 b7       	in	r24, 0x33	; 51
    2cd4:	8e 7f       	andi	r24, 0xFE	; 254
    2cd6:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
    2cd8:	e4 e6       	ldi	r30, 0x64	; 100
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	80 71       	andi	r24, 0x10	; 16
    2ce0:	80 83       	st	Z, r24
  //wdt_disable();
  // Re-enable functions
  //clock_prescale_set(clock_div_1);
  power_all_enable();
  // Enable ADC
  ADCSRA |= (1 << ADEN);
    2ce2:	ea e7       	ldi	r30, 0x7A	; 122
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 68       	ori	r24, 0x80	; 128
    2cea:	80 83       	st	Z, r24
  
  TIMSK2 = 0x00;
    2cec:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    2cf0:	08 95       	ret

00002cf2 <__vector_6>:
 * ISR(WDT_vect)
 *
 * Watchdog ISR. Called whenever a watchdog interrupt occurs
 */
ISR(WDT_vect)
{
    2cf2:	1f 92       	push	r1
    2cf4:	0f 92       	push	r0
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	0f 92       	push	r0
    2cfa:	11 24       	eor	r1, r1
}
    2cfc:	0f 90       	pop	r0
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	0f 90       	pop	r0
    2d02:	1f 90       	pop	r1
    2d04:	18 95       	reti

00002d06 <_ZN6AVRRTC14setup_watchdogEh>:
 */
void AVRRTC::setup_watchdog(uint8_t time) 
{
  uint8_t bb;

  bb = time & 7;
    2d06:	86 2f       	mov	r24, r22
    2d08:	87 70       	andi	r24, 0x07	; 7
  if (time > 7)
    2d0a:	68 30       	cpi	r22, 0x08	; 8
    2d0c:	08 f0       	brcs	.+2      	; 0x2d10 <_ZN6AVRRTC14setup_watchdogEh+0xa>
    bb|= (1<<5);
    2d0e:	80 62       	ori	r24, 0x20	; 32

  bb|= (1<<WDCE);
    2d10:	80 61       	ori	r24, 0x10	; 16

  MCUSR &= ~(1<<WDRF);
    2d12:	94 b7       	in	r25, 0x34	; 52
    2d14:	97 7f       	andi	r25, 0xF7	; 247
    2d16:	94 bf       	out	0x34, r25	; 52
  // start timed sequence
  WDTCSR |= (1<<WDCE) | (1<<WDE);
    2d18:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2d1c:	98 61       	ori	r25, 0x18	; 24
    2d1e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  // set new watchdog timeout value
  WDTCSR = bb;
    2d22:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  WDTCSR |= _BV(WDIE);    // Enable Watchdog interrupt
    2d26:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2d2a:	80 64       	ori	r24, 0x40	; 64
    2d2c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2d30:	08 95       	ret

00002d32 <__vector_9>:

/**
 * Timer 2 (RTC) ISR routine
 */
ISR(TIMER2_OVF_vect)
{
    2d32:	1f 92       	push	r1
    2d34:	0f 92       	push	r0
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	0f 92       	push	r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	8f 93       	push	r24
    2d3e:	9f 93       	push	r25
    2d40:	af 93       	push	r26
    2d42:	bf 93       	push	r27
  AVRRTC::count++;    // Increment counter
    2d44:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <_ZN6AVRRTC5countE>
    2d48:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <_ZN6AVRRTC5countE+0x1>
    2d4c:	a0 91 16 04 	lds	r26, 0x0416	; 0x800416 <_ZN6AVRRTC5countE+0x2>
    2d50:	b0 91 17 04 	lds	r27, 0x0417	; 0x800417 <_ZN6AVRRTC5countE+0x3>
    2d54:	01 96       	adiw	r24, 0x01	; 1
    2d56:	a1 1d       	adc	r26, r1
    2d58:	b1 1d       	adc	r27, r1
    2d5a:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <_ZN6AVRRTC5countE>
    2d5e:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <_ZN6AVRRTC5countE+0x1>
    2d62:	a0 93 16 04 	sts	0x0416, r26	; 0x800416 <_ZN6AVRRTC5countE+0x2>
    2d66:	b0 93 17 04 	sts	0x0417, r27	; 0x800417 <_ZN6AVRRTC5countE+0x3>
}
    2d6a:	bf 91       	pop	r27
    2d6c:	af 91       	pop	r26
    2d6e:	9f 91       	pop	r25
    2d70:	8f 91       	pop	r24
    2d72:	0f 90       	pop	r0
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	0f 90       	pop	r0
    2d78:	1f 90       	pop	r1
    2d7a:	18 95       	reti

00002d7c <_ZN6AVRRTC9setup_rtcEh>:
 *          RTC_8S = 1024 for 8 sec
 */
void AVRRTC::setup_rtc(uint8_t time)
{
  // Set timer 2 to asyncronous mode (32.768KHz crystal)
  ASSR = (1 << AS2);
    2d7c:	80 e2       	ldi	r24, 0x20	; 32
    2d7e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>

  TCNT2 = 0;      // Reset count
    2d82:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
  TCCR2A = 0x00;  // Normal port operation
    2d86:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  // (256 cycles) * (prescaler) / (32.768KHz clock speed) = N sec
  TCCR2B = time;  // Timer 2 prescaler
    2d8a:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

  while (ASSR & (_BV(TCN2UB) | _BV(TCR2AUB) | _BV(TCR2BUB))) {}    // Wait for the registers to be updated    
    2d8e:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
    2d92:	83 71       	andi	r24, 0x13	; 19
    2d94:	e1 f7       	brne	.-8      	; 0x2d8e <_ZN6AVRRTC9setup_rtcEh+0x12>
  TIFR2 = _BV(OCF2B) | _BV(OCF2A) | _BV(TOV2);                     // Clear the interrupt flags
    2d96:	87 e0       	ldi	r24, 0x07	; 7
    2d98:	87 bb       	out	0x17, r24	; 23

  TIMSK2 = 0x01;  // Enable timer2A overflow interrupt
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    2da0:	08 95       	ret

00002da2 <_ZN6AVRRTC7sleepWdEh>:
 *  WDTO_2S = 2 s
 *  WDTO_4S = 4 s
 *  WDTO_8S = 8 s
 */
void AVRRTC::sleepWd(uint8_t time) 
{
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	ec 01       	movw	r28, r24
  // Power-down panStamp
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2da8:	83 b7       	in	r24, 0x33	; 51
    2daa:	81 7f       	andi	r24, 0xF1	; 241
    2dac:	84 60       	ori	r24, 0x04	; 4
    2dae:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
    2db0:	83 b7       	in	r24, 0x33	; 51
    2db2:	81 60       	ori	r24, 0x01	; 1
    2db4:	83 bf       	out	0x33, r24	; 51
  setup_watchdog(time);
    2db6:	ce 01       	movw	r24, r28
    2db8:	0e 94 83 16 	call	0x2d06	; 0x2d06 <_ZN6AVRRTC14setup_watchdogEh>
  delayMicroseconds(10);
    2dbc:	8a e0       	ldi	r24, 0x0A	; 10
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 55 09 	call	0x12aa	; 0x12aa <delayMicroseconds>
  // Disable ADC
  ADCSRA &= ~(1 << ADEN);
    2dc4:	ea e7       	ldi	r30, 0x7A	; 122
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	8f 77       	andi	r24, 0x7F	; 127
    2dcc:	80 83       	st	Z, r24
  // Unpower functions
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1280__)
  PRR0 = 0xFF;
#else
  PRR = 0xFF;
    2dce:	8f ef       	ldi	r24, 0xFF	; 255
    2dd0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
#endif
  //power_all_disable();
  //clock_prescale_set(clock_div_8);
  // Enter sleep mode
  sleep_mode();
    2dd4:	83 b7       	in	r24, 0x33	; 51
    2dd6:	81 60       	ori	r24, 0x01	; 1
    2dd8:	83 bf       	out	0x33, r24	; 51
    2dda:	88 95       	sleep
    2ddc:	83 b7       	in	r24, 0x33	; 51
    2dde:	8e 7f       	andi	r24, 0xFE	; 254
    2de0:	83 bf       	out	0x33, r24	; 51

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    2de2:	ce 01       	movw	r24, r28
}
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
  sleep_mode();

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    2de8:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <_ZN6AVRRTC6wakeUpEv>

00002dec <_ZN6AVRRTC8sleepRtcEh>:
 *  RTC_1S = 1 s
 *  RTC_2S = 2 s
 *  RTC_8S = 8 s
 */
void AVRRTC::sleepRtc(uint8_t time) 
{
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	ec 01       	movw	r28, r24
  // Power-down panStamp
  set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    2df2:	83 b7       	in	r24, 0x33	; 51
    2df4:	81 7f       	andi	r24, 0xF1	; 241
    2df6:	86 60       	ori	r24, 0x06	; 6
    2df8:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
    2dfa:	83 b7       	in	r24, 0x33	; 51
    2dfc:	81 60       	ori	r24, 0x01	; 1
    2dfe:	83 bf       	out	0x33, r24	; 51
  setup_rtc(time);
    2e00:	ce 01       	movw	r24, r28
    2e02:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN6AVRRTC9setup_rtcEh>
  delayMicroseconds(10);
    2e06:	8a e0       	ldi	r24, 0x0A	; 10
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	0e 94 55 09 	call	0x12aa	; 0x12aa <delayMicroseconds>
  // Disable ADC
  ADCSRA &= ~(1 << ADEN);
    2e0e:	ea e7       	ldi	r30, 0x7A	; 122
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	8f 77       	andi	r24, 0x7F	; 127
    2e16:	80 83       	st	Z, r24
  // Unpower functions
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1280__)
  PRR0 = 0xFF;
#else
  PRR = 0xFF;
    2e18:	8f ef       	ldi	r24, 0xFF	; 255
    2e1a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
#endif
  // Enter sleep mode
  sleep_mode();
    2e1e:	83 b7       	in	r24, 0x33	; 51
    2e20:	81 60       	ori	r24, 0x01	; 1
    2e22:	83 bf       	out	0x33, r24	; 51
    2e24:	88 95       	sleep
    2e26:	83 b7       	in	r24, 0x33	; 51
    2e28:	8e 7f       	andi	r24, 0xFE	; 254
    2e2a:	83 bf       	out	0x33, r24	; 51

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    2e2c:	ce 01       	movw	r24, r28
}
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
  sleep_mode();

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    2e32:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <_ZN6AVRRTC6wakeUpEv>

00002e36 <_ZN7STORAGE4readEPhhhh>:
 * @pararm length Length to be read
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    2e36:	cf 92       	push	r12
    2e38:	df 92       	push	r13
    2e3a:	ef 92       	push	r14
    2e3c:	ff 92       	push	r15
    2e3e:	0f 93       	push	r16
    2e40:	1f 93       	push	r17
    2e42:	cf 93       	push	r28
    2e44:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    2e46:	41 11       	cpse	r20, r1
    2e48:	1a c0       	rjmp	.+52     	; 0x2e7e <_ZN7STORAGE4readEPhhhh+0x48>
    2e4a:	7b 01       	movw	r14, r22
  {
    cli();
    2e4c:	f8 94       	cli
    2e4e:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    2e50:	10 e0       	ldi	r17, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    2e52:	c2 2f       	mov	r28, r18
    2e54:	d0 e0       	ldi	r29, 0x00	; 0
    2e56:	c6 1b       	sub	r28, r22
    2e58:	d7 0b       	sbc	r29, r23
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2e5a:	80 2f       	mov	r24, r16
    2e5c:	96 01       	movw	r18, r12
    2e5e:	2e 19       	sub	r18, r14
    2e60:	3f 09       	sbc	r19, r15
    2e62:	20 17       	cp	r18, r16
    2e64:	31 07       	cpc	r19, r17
    2e66:	48 f4       	brcc	.+18     	; 0x2e7a <_ZN7STORAGE4readEPhhhh+0x44>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    2e68:	ce 01       	movw	r24, r28
    2e6a:	8c 0d       	add	r24, r12
    2e6c:	9d 1d       	adc	r25, r13
    2e6e:	0e 94 11 1b 	call	0x3622	; 0x3622 <eeprom_read_byte>
    2e72:	f6 01       	movw	r30, r12
    2e74:	81 93       	st	Z+, r24
    2e76:	6f 01       	movw	r12, r30
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2e78:	f0 cf       	rjmp	.-32     	; 0x2e5a <_ZN7STORAGE4readEPhhhh+0x24>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
    2e7a:	78 94       	sei
    2e7c:	01 c0       	rjmp	.+2      	; 0x2e80 <_ZN7STORAGE4readEPhhhh+0x4a>
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
  }
  
  return i;
}
    2e80:	df 91       	pop	r29
    2e82:	cf 91       	pop	r28
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	ff 90       	pop	r15
    2e8a:	ef 90       	pop	r14
    2e8c:	df 90       	pop	r13
    2e8e:	cf 90       	pop	r12
    2e90:	08 95       	ret

00002e92 <_ZN7STORAGE5writeEPhhhh>:
 * @pararm length Length to be written
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    2e92:	cf 92       	push	r12
    2e94:	df 92       	push	r13
    2e96:	ef 92       	push	r14
    2e98:	ff 92       	push	r15
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    2ea2:	41 11       	cpse	r20, r1
    2ea4:	19 c0       	rjmp	.+50     	; 0x2ed8 <_ZN7STORAGE5writeEPhhhh+0x46>
  {
    cli();
    2ea6:	f8 94       	cli
    2ea8:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    2eaa:	e1 2c       	mov	r14, r1
    2eac:	f1 2c       	mov	r15, r1
    2eae:	10 e0       	ldi	r17, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    2eb0:	c2 2f       	mov	r28, r18
    2eb2:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2eb4:	80 2f       	mov	r24, r16
    2eb6:	e0 16       	cp	r14, r16
    2eb8:	f1 06       	cpc	r15, r17
    2eba:	60 f4       	brcc	.+24     	; 0x2ed4 <_ZN7STORAGE5writeEPhhhh+0x42>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    2ebc:	f6 01       	movw	r30, r12
    2ebe:	61 91       	ld	r22, Z+
    2ec0:	6f 01       	movw	r12, r30
    2ec2:	ce 01       	movw	r24, r28
    2ec4:	8e 0d       	add	r24, r14
    2ec6:	9f 1d       	adc	r25, r15
    2ec8:	0e 94 19 1b 	call	0x3632	; 0x3632 <eeprom_write_byte>
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2ecc:	ff ef       	ldi	r31, 0xFF	; 255
    2ece:	ef 1a       	sub	r14, r31
    2ed0:	ff 0a       	sbc	r15, r31
    2ed2:	f0 cf       	rjmp	.-32     	; 0x2eb4 <_ZN7STORAGE5writeEPhhhh+0x22>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
    2ed4:	78 94       	sei
    2ed6:	01 c0       	rjmp	.+2      	; 0x2eda <_ZN7STORAGE5writeEPhhhh+0x48>
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
  }
  
  return i;
}
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	ff 90       	pop	r15
    2ee4:	ef 90       	pop	r14
    2ee6:	df 90       	pop	r13
    2ee8:	cf 90       	pop	r12
    2eea:	08 95       	ret

00002eec <_ZN8REPEATER15saveTransactionEP8SWPACKET>:
 * Save transaction in array
 *
 * @param packet SWAP packet being repeated
 */
void REPEATER::saveTransaction(SWPACKET *packet)
{
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	7c 01       	movw	r14, r24
    2efa:	8b 01       	movw	r16, r22
  static uint8_t transactionIndex = 0;

  // Save current transaction in first position
  transactions[transactionIndex].timeStamp = millis();         // Current time stamp
    2efc:	c0 91 18 04 	lds	r28, 0x0418	; 0x800418 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    2f00:	d0 e0       	ldi	r29, 0x00	; 0
    2f02:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <millis>
    2f06:	23 e0       	ldi	r18, 0x03	; 3
    2f08:	cc 0f       	add	r28, r28
    2f0a:	dd 1f       	adc	r29, r29
    2f0c:	2a 95       	dec	r18
    2f0e:	e1 f7       	brne	.-8      	; 0x2f08 <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x1c>
    2f10:	ce 0d       	add	r28, r14
    2f12:	df 1d       	adc	r29, r15
    2f14:	69 83       	std	Y+1, r22	; 0x01
    2f16:	7a 83       	std	Y+2, r23	; 0x02
    2f18:	8b 83       	std	Y+3, r24	; 0x03
    2f1a:	9c 83       	std	Y+4, r25	; 0x04
  transactions[transactionIndex].function = packet->function;  // SWAP function
    2f1c:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    2f20:	f8 01       	movw	r30, r16
    2f22:	e8 5b       	subi	r30, 0xB8	; 184
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	30 81       	ld	r19, Z
    2f28:	82 2f       	mov	r24, r18
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	f7 01       	movw	r30, r14
    2f2e:	48 e0       	ldi	r20, 0x08	; 8
    2f30:	24 9f       	mul	r18, r20
    2f32:	e0 0d       	add	r30, r0
    2f34:	f1 1d       	adc	r31, r1
    2f36:	11 24       	eor	r1, r1
    2f38:	35 83       	std	Z+5, r19	; 0x05
  transactions[transactionIndex].srcAddr = packet->srcAddr;    // Source address
    2f3a:	d8 01       	movw	r26, r16
    2f3c:	ad 5b       	subi	r26, 0xBD	; 189
    2f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f40:	2c 91       	ld	r18, X
    2f42:	26 83       	std	Z+6, r18	; 0x06
  transactions[transactionIndex].nonce = packet->nonce;        // Cyclic nonce
    2f44:	14 96       	adiw	r26, 0x04	; 4
    2f46:	2c 91       	ld	r18, X
    2f48:	27 83       	std	Z+7, r18	; 0x07
  transactions[transactionIndex].regAddr = packet->regAddr;    // Register address
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	e6 5b       	subi	r30, 0xB6	; 182
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	40 81       	ld	r20, Z
    2f52:	01 96       	adiw	r24, 0x01	; 1
    2f54:	9c 01       	movw	r18, r24
    2f56:	53 e0       	ldi	r21, 0x03	; 3
    2f58:	22 0f       	add	r18, r18
    2f5a:	33 1f       	adc	r19, r19
    2f5c:	5a 95       	dec	r21
    2f5e:	e1 f7       	brne	.-8      	; 0x2f58 <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x6c>
    2f60:	f7 01       	movw	r30, r14
    2f62:	e2 0f       	add	r30, r18
    2f64:	f3 1f       	adc	r31, r19
    2f66:	40 83       	st	Z, r20
   
  transactionIndex = (transactionIndex + 1) % REPEATER_TABLE_DEPTH;
    2f68:	64 e1       	ldi	r22, 0x14	; 20
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__divmodhi4>
    2f70:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
}
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	ff 90       	pop	r15
    2f7e:	ef 90       	pop	r14
    2f80:	08 95       	ret

00002f82 <_ZN8REPEATER13packetHandlerEP8SWPACKET>:
 * Handle incoming packet. Repeat if necessary
 *
 * @param packet Pointer to the SWAP packet received
 */
void REPEATER::packetHandler(SWPACKET *packet)
{
    2f82:	4f 92       	push	r4
    2f84:	5f 92       	push	r5
    2f86:	6f 92       	push	r6
    2f88:	7f 92       	push	r7
    2f8a:	8f 92       	push	r8
    2f8c:	9f 92       	push	r9
    2f8e:	af 92       	push	r10
    2f90:	bf 92       	push	r11
    2f92:	cf 92       	push	r12
    2f94:	df 92       	push	r13
    2f96:	ef 92       	push	r14
    2f98:	ff 92       	push	r15
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
  bool repeatPacket = true;
  uint32_t currentTime;

  if (enabled)
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	ef 55       	subi	r30, 0x5F	; 95
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	20 81       	ld	r18, Z
    2faa:	22 23       	and	r18, r18
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x2e>
    2fae:	86 c0       	rjmp	.+268    	; 0x30bc <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
  {
    // Don't repeat packets addressed to our device
    if (packet->destAddr != swap.devAddress)
    2fb0:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <swap+0x2>
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	fb 01       	movw	r30, r22
    2fb8:	ef 5b       	subi	r30, 0xBF	; 191
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	40 81       	ld	r20, Z
    2fbe:	51 81       	ldd	r21, Z+1	; 0x01
    2fc0:	42 17       	cp	r20, r18
    2fc2:	53 07       	cpc	r21, r19
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x46>
    2fc6:	7a c0       	rjmp	.+244    	; 0x30bc <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    {
      // Don't repeat beyond the maximum hop count
      if (packet->hop < maxHopCount)
    2fc8:	4b 01       	movw	r8, r22
    2fca:	25 e4       	ldi	r18, 0x45	; 69
    2fcc:	82 0e       	add	r8, r18
    2fce:	91 1c       	adc	r9, r1
    2fd0:	f4 01       	movw	r30, r8
    2fd2:	30 81       	ld	r19, Z
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	20 81       	ld	r18, Z
    2fd8:	32 17       	cp	r19, r18
    2fda:	08 f0       	brcs	.+2      	; 0x2fde <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x5c>
    2fdc:	6f c0       	rjmp	.+222    	; 0x30bc <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    2fde:	eb 01       	movw	r28, r22
    2fe0:	8c 01       	movw	r16, r24
    2fe2:	7c 01       	movw	r14, r24
    2fe4:	2c 01       	movw	r4, r24
    2fe6:	f0 ea       	ldi	r31, 0xA0	; 160
    2fe8:	4f 0e       	add	r4, r31
    2fea:	51 1c       	adc	r5, r1

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
    2fec:	3b 01       	movw	r6, r22
    2fee:	2a e4       	ldi	r18, 0x4A	; 74
    2ff0:	62 0e       	add	r6, r18
    2ff2:	71 1c       	adc	r7, r1
          {
            // Same SWAP function?
            if (transactions[i].function == packet->function)
    2ff4:	6b 01       	movw	r12, r22
    2ff6:	88 e4       	ldi	r24, 0x48	; 72
    2ff8:	c8 0e       	add	r12, r24
    2ffa:	d1 1c       	adc	r13, r1
            {
              // Same cyclic nonce?
              if (transactions[i].nonce == packet->nonce)
    2ffc:	5b 01       	movw	r10, r22
    2ffe:	e7 e4       	ldi	r30, 0x47	; 71
    3000:	ae 0e       	add	r10, r30
    3002:	b1 1c       	adc	r11, r1

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
    3004:	f7 01       	movw	r30, r14
    3006:	90 85       	ldd	r25, Z+8	; 0x08
    3008:	f3 01       	movw	r30, r6
    300a:	80 81       	ld	r24, Z
    300c:	98 17       	cp	r25, r24
    300e:	39 f0       	breq	.+14     	; 0x301e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x9c>
    3010:	f8 e0       	ldi	r31, 0x08	; 8
    3012:	ef 0e       	add	r14, r31
    3014:	f1 1c       	adc	r15, r1
      if (packet->hop < maxHopCount)
      {
        uint8_t i;        

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
    3016:	4e 14       	cp	r4, r14
    3018:	5f 04       	cpc	r5, r15
    301a:	a1 f7       	brne	.-24     	; 0x3004 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x82>
    301c:	1f c0       	rjmp	.+62     	; 0x305c <_ZN8REPEATER13packetHandlerEP8SWPACKET+0xda>
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
          {
            // Same SWAP function?
            if (transactions[i].function == packet->function)
    301e:	f7 01       	movw	r30, r14
    3020:	95 81       	ldd	r25, Z+5	; 0x05
    3022:	f6 01       	movw	r30, r12
    3024:	80 81       	ld	r24, Z
    3026:	98 13       	cpse	r25, r24
    3028:	f3 cf       	rjmp	.-26     	; 0x3010 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
            {
              // Same cyclic nonce?
              if (transactions[i].nonce == packet->nonce)
    302a:	f7 01       	movw	r30, r14
    302c:	97 81       	ldd	r25, Z+7	; 0x07
    302e:	f5 01       	movw	r30, r10
    3030:	80 81       	ld	r24, Z
    3032:	98 13       	cpse	r25, r24
    3034:	ed cf       	rjmp	.-38     	; 0x3010 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
              {
                currentTime = millis();
    3036:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <millis>
                // Time stamp not expired?
                if ((currentTime - transactions[i].timeStamp) < REPEATER_EXPIRATION_TIME)
    303a:	f7 01       	movw	r30, r14
    303c:	21 81       	ldd	r18, Z+1	; 0x01
    303e:	32 81       	ldd	r19, Z+2	; 0x02
    3040:	43 81       	ldd	r20, Z+3	; 0x03
    3042:	54 81       	ldd	r21, Z+4	; 0x04
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	82 1b       	sub	r24, r18
    304a:	93 0b       	sbc	r25, r19
    304c:	a4 0b       	sbc	r26, r20
    304e:	b5 0b       	sbc	r27, r21
    3050:	80 3d       	cpi	r24, 0xD0	; 208
    3052:	97 40       	sbci	r25, 0x07	; 7
    3054:	a1 05       	cpc	r26, r1
    3056:	b1 05       	cpc	r27, r1
    3058:	d8 f6       	brcc	.-74     	; 0x3010 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
    305a:	30 c0       	rjmp	.+96     	; 0x30bc <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
        }

        // Repeat packet?
        if (repeatPacket)
        {
          packet->srcAddr = swap.devAddress;              // Modify source address
    305c:	fe 01       	movw	r30, r28
    305e:	ed 5b       	subi	r30, 0xBD	; 189
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <swap+0x2>
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	80 83       	st	Z, r24
          packet->hop++;                                  // Increment hop counter
    306c:	f4 01       	movw	r30, r8
    306e:	80 81       	ld	r24, Z
    3070:	8f 5f       	subi	r24, 0xFF	; 255
    3072:	80 83       	st	Z, r24
          delay(SWAP_TX_DELAY);                           // Delay before sending
    3074:	60 91 74 03 	lds	r22, 0x0374	; 0x800374 <panstamp+0x9>
    3078:	70 e0       	ldi	r23, 0x00	; 0
    307a:	66 0f       	add	r22, r22
    307c:	77 1f       	adc	r23, r23
    307e:	07 2e       	mov	r0, r23
    3080:	00 0c       	add	r0, r0
    3082:	88 0b       	sbc	r24, r24
    3084:	99 0b       	sbc	r25, r25
    3086:	0e 94 19 09 	call	0x1232	; 0x1232 <delay>
          if (packet->send())                             // Repeat packet
    308a:	ce 01       	movw	r24, r28
    308c:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN8SWPACKET4sendEv>
    3090:	88 23       	and	r24, r24
    3092:	a1 f0       	breq	.+40     	; 0x30bc <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
            saveTransaction(packet);                      // Save transaction
    3094:	be 01       	movw	r22, r28
    3096:	c8 01       	movw	r24, r16
        }
      }
    }
  }
}
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	ef 90       	pop	r14
    30a4:	df 90       	pop	r13
    30a6:	cf 90       	pop	r12
    30a8:	bf 90       	pop	r11
    30aa:	af 90       	pop	r10
    30ac:	9f 90       	pop	r9
    30ae:	8f 90       	pop	r8
    30b0:	7f 90       	pop	r7
    30b2:	6f 90       	pop	r6
    30b4:	5f 90       	pop	r5
    30b6:	4f 90       	pop	r4
        {
          packet->srcAddr = swap.devAddress;              // Modify source address
          packet->hop++;                                  // Increment hop counter
          delay(SWAP_TX_DELAY);                           // Delay before sending
          if (packet->send())                             // Repeat packet
            saveTransaction(packet);                      // Save transaction
    30b8:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <_ZN8REPEATER15saveTransactionEP8SWPACKET>
        }
      }
    }
  }
}
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	1f 91       	pop	r17
    30c2:	0f 91       	pop	r16
    30c4:	ff 90       	pop	r15
    30c6:	ef 90       	pop	r14
    30c8:	df 90       	pop	r13
    30ca:	cf 90       	pop	r12
    30cc:	bf 90       	pop	r11
    30ce:	af 90       	pop	r10
    30d0:	9f 90       	pop	r9
    30d2:	8f 90       	pop	r8
    30d4:	7f 90       	pop	r7
    30d6:	6f 90       	pop	r6
    30d8:	5f 90       	pop	r5
    30da:	4f 90       	pop	r4
    30dc:	08 95       	ret

000030de <_Z8twi_initv>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30de:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZL9twi_state>
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <_ZL12twi_sendStop>
    30e8:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZL14twi_inRepStart>
    30ec:	61 e0       	ldi	r22, 0x01	; 1
    30ee:	82 e1       	ldi	r24, 0x12	; 18
    30f0:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>
    30f4:	61 e0       	ldi	r22, 0x01	; 1
    30f6:	83 e1       	ldi	r24, 0x13	; 19
    30f8:	0e 94 1e 0a 	call	0x143c	; 0x143c <digitalWrite>
    30fc:	e9 eb       	ldi	r30, 0xB9	; 185
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	8e 7f       	andi	r24, 0xFE	; 254
    3104:	80 83       	st	Z, r24
    3106:	80 81       	ld	r24, Z
    3108:	8d 7f       	andi	r24, 0xFD	; 253
    310a:	80 83       	st	Z, r24
    310c:	80 e2       	ldi	r24, 0x20	; 32
    310e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    3112:	85 e4       	ldi	r24, 0x45	; 69
    3114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3118:	08 95       	ret

0000311a <_Z12twi_readFromhPhhh>:
    311a:	41 32       	cpi	r20, 0x21	; 33
    311c:	e8 f5       	brcc	.+122    	; 0x3198 <_Z12twi_readFromhPhhh+0x7e>
    311e:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZL9twi_state>
    3122:	91 11       	cpse	r25, r1
    3124:	fc cf       	rjmp	.-8      	; 0x311e <_Z12twi_readFromhPhhh+0x4>
    3126:	91 e0       	ldi	r25, 0x01	; 1
    3128:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZL9twi_state>
    312c:	20 93 84 04 	sts	0x0484, r18	; 0x800484 <_ZL12twi_sendStop>
    3130:	2f ef       	ldi	r18, 0xFF	; 255
    3132:	20 93 19 04 	sts	0x0419, r18	; 0x800419 <_ZL9twi_error>
    3136:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <_ZL21twi_masterBufferIndex>
    313a:	24 0f       	add	r18, r20
    313c:	20 93 5d 04 	sts	0x045D, r18	; 0x80045d <_ZL22twi_masterBufferLength>
    3140:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <_ZL9twi_slarw>
    3144:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <_ZL9twi_slarw>
    3148:	88 0f       	add	r24, r24
    314a:	89 2b       	or	r24, r25
    314c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZL9twi_slarw>
    3150:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZL14twi_inRepStart>
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	41 f4       	brne	.+16     	; 0x3168 <_Z12twi_readFromhPhhh+0x4e>
    3158:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZL14twi_inRepStart>
    315c:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZL9twi_slarw>
    3160:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3164:	85 ec       	ldi	r24, 0xC5	; 197
    3166:	01 c0       	rjmp	.+2      	; 0x316a <_Z12twi_readFromhPhhh+0x50>
    3168:	85 ee       	ldi	r24, 0xE5	; 229
    316a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    316e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZL9twi_state>
    3172:	81 30       	cpi	r24, 0x01	; 1
    3174:	e1 f3       	breq	.-8      	; 0x316e <_Z12twi_readFromhPhhh+0x54>
    3176:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    317a:	84 17       	cp	r24, r20
    317c:	10 f4       	brcc	.+4      	; 0x3182 <_Z12twi_readFromhPhhh+0x68>
    317e:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    3182:	af e5       	ldi	r26, 0x5F	; 95
    3184:	b4 e0       	ldi	r27, 0x04	; 4
    3186:	96 2f       	mov	r25, r22
    3188:	fb 01       	movw	r30, r22
    318a:	8e 2f       	mov	r24, r30
    318c:	89 1b       	sub	r24, r25
    318e:	84 17       	cp	r24, r20
    3190:	28 f4       	brcc	.+10     	; 0x319c <_Z12twi_readFromhPhhh+0x82>
    3192:	8d 91       	ld	r24, X+
    3194:	81 93       	st	Z+, r24
    3196:	f9 cf       	rjmp	.-14     	; 0x318a <_Z12twi_readFromhPhhh+0x70>
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	08 95       	ret
    319c:	84 2f       	mov	r24, r20
    319e:	08 95       	ret

000031a0 <_Z11twi_writeTohPhhhh>:
    31a0:	0f 93       	push	r16
    31a2:	41 32       	cpi	r20, 0x21	; 33
    31a4:	c8 f5       	brcc	.+114    	; 0x3218 <_Z11twi_writeTohPhhhh+0x78>
    31a6:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZL9twi_state>
    31aa:	91 11       	cpse	r25, r1
    31ac:	fc cf       	rjmp	.-8      	; 0x31a6 <_Z11twi_writeTohPhhhh+0x6>
    31ae:	32 e0       	ldi	r19, 0x02	; 2
    31b0:	30 93 86 04 	sts	0x0486, r19	; 0x800486 <_ZL9twi_state>
    31b4:	00 93 84 04 	sts	0x0484, r16	; 0x800484 <_ZL12twi_sendStop>
    31b8:	3f ef       	ldi	r19, 0xFF	; 255
    31ba:	30 93 19 04 	sts	0x0419, r19	; 0x800419 <_ZL9twi_error>
    31be:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <_ZL21twi_masterBufferIndex>
    31c2:	40 93 5d 04 	sts	0x045D, r20	; 0x80045d <_ZL22twi_masterBufferLength>
    31c6:	56 2f       	mov	r21, r22
    31c8:	af e5       	ldi	r26, 0x5F	; 95
    31ca:	b4 e0       	ldi	r27, 0x04	; 4
    31cc:	fb 01       	movw	r30, r22
    31ce:	3e 2f       	mov	r19, r30
    31d0:	35 1b       	sub	r19, r21
    31d2:	34 17       	cp	r19, r20
    31d4:	18 f4       	brcc	.+6      	; 0x31dc <_Z11twi_writeTohPhhhh+0x3c>
    31d6:	31 91       	ld	r19, Z+
    31d8:	3d 93       	st	X+, r19
    31da:	f9 cf       	rjmp	.-14     	; 0x31ce <_Z11twi_writeTohPhhhh+0x2e>
    31dc:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZL9twi_slarw>
    31e0:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <_ZL9twi_slarw>
    31e4:	88 0f       	add	r24, r24
    31e6:	83 2b       	or	r24, r19
    31e8:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZL9twi_slarw>
    31ec:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZL14twi_inRepStart>
    31f0:	81 30       	cpi	r24, 0x01	; 1
    31f2:	41 f4       	brne	.+16     	; 0x3204 <_Z11twi_writeTohPhhhh+0x64>
    31f4:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZL14twi_inRepStart>
    31f8:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZL9twi_slarw>
    31fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3200:	85 ec       	ldi	r24, 0xC5	; 197
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <_Z11twi_writeTohPhhhh+0x66>
    3204:	85 ee       	ldi	r24, 0xE5	; 229
    3206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    320a:	22 23       	and	r18, r18
    320c:	39 f0       	breq	.+14     	; 0x321c <_Z11twi_writeTohPhhhh+0x7c>
    320e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZL9twi_state>
    3212:	82 30       	cpi	r24, 0x02	; 2
    3214:	19 f4       	brne	.+6      	; 0x321c <_Z11twi_writeTohPhhhh+0x7c>
    3216:	f9 cf       	rjmp	.-14     	; 0x320a <_Z11twi_writeTohPhhhh+0x6a>
    3218:	91 e0       	ldi	r25, 0x01	; 1
    321a:	11 c0       	rjmp	.+34     	; 0x323e <_Z11twi_writeTohPhhhh+0x9e>
    321c:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZL9twi_error>
    3220:	8f 3f       	cpi	r24, 0xFF	; 255
    3222:	69 f0       	breq	.+26     	; 0x323e <_Z11twi_writeTohPhhhh+0x9e>
    3224:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZL9twi_error>
    3228:	80 32       	cpi	r24, 0x20	; 32
    322a:	31 f0       	breq	.+12     	; 0x3238 <_Z11twi_writeTohPhhhh+0x98>
    322c:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZL9twi_error>
    3230:	80 33       	cpi	r24, 0x30	; 48
    3232:	21 f0       	breq	.+8      	; 0x323c <_Z11twi_writeTohPhhhh+0x9c>
    3234:	94 e0       	ldi	r25, 0x04	; 4
    3236:	03 c0       	rjmp	.+6      	; 0x323e <_Z11twi_writeTohPhhhh+0x9e>
    3238:	92 e0       	ldi	r25, 0x02	; 2
    323a:	01 c0       	rjmp	.+2      	; 0x323e <_Z11twi_writeTohPhhhh+0x9e>
    323c:	93 e0       	ldi	r25, 0x03	; 3
    323e:	89 2f       	mov	r24, r25
    3240:	0f 91       	pop	r16
    3242:	08 95       	ret

00003244 <_Z12twi_transmitPKhh>:
    3244:	61 32       	cpi	r22, 0x21	; 33
    3246:	88 f4       	brcc	.+34     	; 0x326a <_Z12twi_transmitPKhh+0x26>
    3248:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZL9twi_state>
    324c:	24 30       	cpi	r18, 0x04	; 4
    324e:	79 f4       	brne	.+30     	; 0x326e <_Z12twi_transmitPKhh+0x2a>
    3250:	60 93 3b 04 	sts	0x043B, r22	; 0x80043b <_ZL18twi_txBufferLength>
    3254:	28 2f       	mov	r18, r24
    3256:	ad e3       	ldi	r26, 0x3D	; 61
    3258:	b4 e0       	ldi	r27, 0x04	; 4
    325a:	fc 01       	movw	r30, r24
    325c:	8e 2f       	mov	r24, r30
    325e:	82 1b       	sub	r24, r18
    3260:	86 17       	cp	r24, r22
    3262:	38 f4       	brcc	.+14     	; 0x3272 <_Z12twi_transmitPKhh+0x2e>
    3264:	81 91       	ld	r24, Z+
    3266:	8d 93       	st	X+, r24
    3268:	f9 cf       	rjmp	.-14     	; 0x325c <_Z12twi_transmitPKhh+0x18>
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	08 95       	ret
    326e:	82 e0       	ldi	r24, 0x02	; 2
    3270:	08 95       	ret
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	08 95       	ret

00003276 <_Z8twi_stopv>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3276:	85 ed       	ldi	r24, 0xD5	; 213
    3278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    327c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3280:	84 fd       	sbrc	r24, 4
    3282:	fc cf       	rjmp	.-8      	; 0x327c <_Z8twi_stopv+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3284:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZL9twi_state>
    3288:	08 95       	ret

0000328a <_Z14twi_releaseBusv>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    328a:	85 ec       	ldi	r24, 0xC5	; 197
    328c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

  // update twi state
  twi_state = TWI_READY;
    3290:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZL9twi_state>
    3294:	08 95       	ret

00003296 <__vector_24>:
}

ISR(TWI_vect)
{
    3296:	1f 92       	push	r1
    3298:	0f 92       	push	r0
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	0f 92       	push	r0
    329e:	11 24       	eor	r1, r1
    32a0:	2f 93       	push	r18
    32a2:	3f 93       	push	r19
    32a4:	4f 93       	push	r20
    32a6:	5f 93       	push	r21
    32a8:	6f 93       	push	r22
    32aa:	7f 93       	push	r23
    32ac:	8f 93       	push	r24
    32ae:	9f 93       	push	r25
    32b0:	af 93       	push	r26
    32b2:	bf 93       	push	r27
    32b4:	ef 93       	push	r30
    32b6:	ff 93       	push	r31
  switch(TW_STATUS){
    32b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    32bc:	88 7f       	andi	r24, 0xF8	; 248
    32be:	80 36       	cpi	r24, 0x60	; 96
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <__vector_24+0x2e>
    32c2:	9c c0       	rjmp	.+312    	; 0x33fc <__vector_24+0x166>
    32c4:	68 f5       	brcc	.+90     	; 0x3320 <__vector_24+0x8a>
    32c6:	88 32       	cpi	r24, 0x28	; 40
    32c8:	09 f4       	brne	.+2      	; 0x32cc <__vector_24+0x36>
    32ca:	5b c0       	rjmp	.+182    	; 0x3382 <__vector_24+0xec>
    32cc:	90 f4       	brcc	.+36     	; 0x32f2 <__vector_24+0x5c>
    32ce:	80 31       	cpi	r24, 0x10	; 16
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <__vector_24+0x3e>
    32d2:	54 c0       	rjmp	.+168    	; 0x337c <__vector_24+0xe6>
    32d4:	38 f4       	brcc	.+14     	; 0x32e4 <__vector_24+0x4e>
    32d6:	88 23       	and	r24, r24
    32d8:	09 f4       	brne	.+2      	; 0x32dc <__vector_24+0x46>
    32da:	f5 c0       	rjmp	.+490    	; 0x34c6 <__vector_24+0x230>
    32dc:	88 30       	cpi	r24, 0x08	; 8
    32de:	09 f4       	brne	.+2      	; 0x32e2 <__vector_24+0x4c>
    32e0:	4d c0       	rjmp	.+154    	; 0x337c <__vector_24+0xe6>
    32e2:	f5 c0       	rjmp	.+490    	; 0x34ce <__vector_24+0x238>
    32e4:	88 31       	cpi	r24, 0x18	; 24
    32e6:	09 f4       	brne	.+2      	; 0x32ea <__vector_24+0x54>
    32e8:	4c c0       	rjmp	.+152    	; 0x3382 <__vector_24+0xec>
    32ea:	80 32       	cpi	r24, 0x20	; 32
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <__vector_24+0x5a>
    32ee:	5d c0       	rjmp	.+186    	; 0x33aa <__vector_24+0x114>
    32f0:	ee c0       	rjmp	.+476    	; 0x34ce <__vector_24+0x238>
    32f2:	80 34       	cpi	r24, 0x40	; 64
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <__vector_24+0x62>
    32f6:	68 c0       	rjmp	.+208    	; 0x33c8 <__vector_24+0x132>
    32f8:	48 f4       	brcc	.+18     	; 0x330c <__vector_24+0x76>
    32fa:	80 33       	cpi	r24, 0x30	; 48
    32fc:	09 f4       	brne	.+2      	; 0x3300 <__vector_24+0x6a>
    32fe:	55 c0       	rjmp	.+170    	; 0x33aa <__vector_24+0x114>
    3300:	88 33       	cpi	r24, 0x38	; 56
    3302:	09 f0       	breq	.+2      	; 0x3306 <__vector_24+0x70>
    3304:	e4 c0       	rjmp	.+456    	; 0x34ce <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3306:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZL9twi_error>
    330a:	a8 c0       	rjmp	.+336    	; 0x345c <__vector_24+0x1c6>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    330c:	80 35       	cpi	r24, 0x50	; 80
    330e:	09 f4       	brne	.+2      	; 0x3312 <__vector_24+0x7c>
    3310:	4f c0       	rjmp	.+158    	; 0x33b0 <__vector_24+0x11a>
    3312:	88 35       	cpi	r24, 0x58	; 88
    3314:	09 f4       	brne	.+2      	; 0x3318 <__vector_24+0x82>
    3316:	5d c0       	rjmp	.+186    	; 0x33d2 <__vector_24+0x13c>
    3318:	88 34       	cpi	r24, 0x48	; 72
    331a:	09 f0       	breq	.+2      	; 0x331e <__vector_24+0x88>
    331c:	d8 c0       	rjmp	.+432    	; 0x34ce <__vector_24+0x238>
    331e:	d5 c0       	rjmp	.+426    	; 0x34ca <__vector_24+0x234>
    3320:	88 39       	cpi	r24, 0x98	; 152
    3322:	09 f4       	brne	.+2      	; 0x3326 <__vector_24+0x90>
    3324:	c6 c0       	rjmp	.+396    	; 0x34b2 <__vector_24+0x21c>
    3326:	a8 f4       	brcc	.+42     	; 0x3352 <__vector_24+0xbc>
    3328:	88 37       	cpi	r24, 0x78	; 120
    332a:	09 f4       	brne	.+2      	; 0x332e <__vector_24+0x98>
    332c:	67 c0       	rjmp	.+206    	; 0x33fc <__vector_24+0x166>
    332e:	38 f4       	brcc	.+14     	; 0x333e <__vector_24+0xa8>
    3330:	88 36       	cpi	r24, 0x68	; 104
    3332:	09 f4       	brne	.+2      	; 0x3336 <__vector_24+0xa0>
    3334:	63 c0       	rjmp	.+198    	; 0x33fc <__vector_24+0x166>
    3336:	80 37       	cpi	r24, 0x70	; 112
    3338:	09 f4       	brne	.+2      	; 0x333c <__vector_24+0xa6>
    333a:	60 c0       	rjmp	.+192    	; 0x33fc <__vector_24+0x166>
    333c:	c8 c0       	rjmp	.+400    	; 0x34ce <__vector_24+0x238>
    333e:	88 38       	cpi	r24, 0x88	; 136
    3340:	09 f4       	brne	.+2      	; 0x3344 <__vector_24+0xae>
    3342:	b7 c0       	rjmp	.+366    	; 0x34b2 <__vector_24+0x21c>
    3344:	80 39       	cpi	r24, 0x90	; 144
    3346:	09 f4       	brne	.+2      	; 0x334a <__vector_24+0xb4>
    3348:	5f c0       	rjmp	.+190    	; 0x3408 <__vector_24+0x172>
    334a:	80 38       	cpi	r24, 0x80	; 128
    334c:	09 f0       	breq	.+2      	; 0x3350 <__vector_24+0xba>
    334e:	bf c0       	rjmp	.+382    	; 0x34ce <__vector_24+0x238>
    3350:	5b c0       	rjmp	.+182    	; 0x3408 <__vector_24+0x172>
    3352:	80 3b       	cpi	r24, 0xB0	; 176
    3354:	09 f4       	brne	.+2      	; 0x3358 <__vector_24+0xc2>
    3356:	85 c0       	rjmp	.+266    	; 0x3462 <__vector_24+0x1cc>
    3358:	38 f4       	brcc	.+14     	; 0x3368 <__vector_24+0xd2>
    335a:	80 3a       	cpi	r24, 0xA0	; 160
    335c:	09 f4       	brne	.+2      	; 0x3360 <__vector_24+0xca>
    335e:	66 c0       	rjmp	.+204    	; 0x342c <__vector_24+0x196>
    3360:	88 3a       	cpi	r24, 0xA8	; 168
    3362:	09 f4       	brne	.+2      	; 0x3366 <__vector_24+0xd0>
    3364:	7e c0       	rjmp	.+252    	; 0x3462 <__vector_24+0x1cc>
    3366:	b3 c0       	rjmp	.+358    	; 0x34ce <__vector_24+0x238>
    3368:	80 3c       	cpi	r24, 0xC0	; 192
    336a:	09 f4       	brne	.+2      	; 0x336e <__vector_24+0xd8>
    336c:	a6 c0       	rjmp	.+332    	; 0x34ba <__vector_24+0x224>
    336e:	88 3c       	cpi	r24, 0xC8	; 200
    3370:	09 f4       	brne	.+2      	; 0x3374 <__vector_24+0xde>
    3372:	a3 c0       	rjmp	.+326    	; 0x34ba <__vector_24+0x224>
    3374:	88 3b       	cpi	r24, 0xB8	; 184
    3376:	09 f4       	brne	.+2      	; 0x337a <__vector_24+0xe4>
    3378:	89 c0       	rjmp	.+274    	; 0x348c <__vector_24+0x1f6>
    337a:	a9 c0       	rjmp	.+338    	; 0x34ce <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    337c:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZL9twi_slarw>
    3380:	10 c0       	rjmp	.+32     	; 0x33a2 <__vector_24+0x10c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3382:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    3386:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <_ZL22twi_masterBufferLength>
    338a:	98 17       	cp	r25, r24
    338c:	70 f5       	brcc	.+92     	; 0x33ea <__vector_24+0x154>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    338e:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	8e 0f       	add	r24, r30
    3396:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZL21twi_masterBufferIndex>
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	e1 5a       	subi	r30, 0xA1	; 161
    339e:	fb 4f       	sbci	r31, 0xFB	; 251
    33a0:	80 81       	ld	r24, Z
    33a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    33a6:	85 ec       	ldi	r24, 0xC5	; 197
    33a8:	85 c0       	rjmp	.+266    	; 0x34b4 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    33aa:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZL9twi_error>
    33ae:	8d c0       	rjmp	.+282    	; 0x34ca <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    33b0:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	8e 0f       	add	r24, r30
    33b8:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZL21twi_masterBufferIndex>
    33bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	e1 5a       	subi	r30, 0xA1	; 161
    33c4:	fb 4f       	sbci	r31, 0xFB	; 251
    33c6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    33c8:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    33cc:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <_ZL22twi_masterBufferLength>
    33d0:	6d c0       	rjmp	.+218    	; 0x34ac <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    33d2:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	8e 0f       	add	r24, r30
    33da:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZL21twi_masterBufferIndex>
    33de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	e1 5a       	subi	r30, 0xA1	; 161
    33e6:	fb 4f       	sbci	r31, 0xFB	; 251
    33e8:	80 83       	st	Z, r24
	if (twi_sendStop)
    33ea:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZL12twi_sendStop>
    33ee:	81 11       	cpse	r24, r1
    33f0:	6c c0       	rjmp	.+216    	; 0x34ca <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZL14twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    33f8:	84 ea       	ldi	r24, 0xA4	; 164
    33fa:	60 c0       	rjmp	.+192    	; 0x34bc <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    33fc:	83 e0       	ldi	r24, 0x03	; 3
    33fe:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZL9twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3402:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZL17twi_rxBufferIndex>
    3406:	cf cf       	rjmp	.-98     	; 0x33a6 <__vector_24+0x110>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3408:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    340c:	80 32       	cpi	r24, 0x20	; 32
    340e:	08 f0       	brcs	.+2      	; 0x3412 <__vector_24+0x17c>
    3410:	50 c0       	rjmp	.+160    	; 0x34b2 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3412:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	8e 0f       	add	r24, r30
    341a:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <_ZL17twi_rxBufferIndex>
    341e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	e5 5e       	subi	r30, 0xE5	; 229
    3426:	fb 4f       	sbci	r31, 0xFB	; 251
    3428:	80 83       	st	Z, r24
    342a:	bd cf       	rjmp	.-134    	; 0x33a6 <__vector_24+0x110>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    342c:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    3430:	80 32       	cpi	r24, 0x20	; 32
    3432:	30 f4       	brcc	.+12     	; 0x3440 <__vector_24+0x1aa>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3434:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	e5 5e       	subi	r30, 0xE5	; 229
    343c:	fb 4f       	sbci	r31, 0xFB	; 251
    343e:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    3440:	0e 94 3b 19 	call	0x3276	; 0x3276 <_Z8twi_stopv>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3444:	60 91 1a 04 	lds	r22, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <_ZL18twi_onSlaveReceive>
    344e:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <_ZL18twi_onSlaveReceive+0x1>
    3452:	8b e1       	ldi	r24, 0x1B	; 27
    3454:	94 e0       	ldi	r25, 0x04	; 4
    3456:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3458:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZL17twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    345c:	0e 94 45 19 	call	0x328a	; 0x328a <_Z14twi_releaseBusv>
      break;
    3460:	36 c0       	rjmp	.+108    	; 0x34ce <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3462:	84 e0       	ldi	r24, 0x04	; 4
    3464:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZL9twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3468:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZL17twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    346c:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZL18twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3470:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <_ZL19twi_onSlaveTransmit>
    3474:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <_ZL19twi_onSlaveTransmit+0x1>
    3478:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    347a:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZL18twi_txBufferLength>
    347e:	81 11       	cpse	r24, r1
    3480:	05 c0       	rjmp	.+10     	; 0x348c <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZL18twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3488:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZL12twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    348c:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <_ZL17twi_txBufferIndex>
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	8e 0f       	add	r24, r30
    3494:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL17twi_txBufferIndex>
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	e3 5c       	subi	r30, 0xC3	; 195
    349c:	fb 4f       	sbci	r31, 0xFB	; 251
    349e:	80 81       	ld	r24, Z
    34a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    34a4:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <_ZL17twi_txBufferIndex>
    34a8:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZL18twi_txBufferLength>
    34ac:	98 17       	cp	r25, r24
    34ae:	08 f4       	brcc	.+2      	; 0x34b2 <__vector_24+0x21c>
    34b0:	7a cf       	rjmp	.-268    	; 0x33a6 <__vector_24+0x110>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    34b2:	85 e8       	ldi	r24, 0x85	; 133
    34b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    34b8:	0a c0       	rjmp	.+20     	; 0x34ce <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    34ba:	85 ec       	ldi	r24, 0xC5	; 197
    34bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    34c0:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZL9twi_state>
      break;
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    34c6:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZL9twi_error>
      twi_stop();
    34ca:	0e 94 3b 19 	call	0x3276	; 0x3276 <_Z8twi_stopv>
      break;
  }
}
    34ce:	ff 91       	pop	r31
    34d0:	ef 91       	pop	r30
    34d2:	bf 91       	pop	r27
    34d4:	af 91       	pop	r26
    34d6:	9f 91       	pop	r25
    34d8:	8f 91       	pop	r24
    34da:	7f 91       	pop	r23
    34dc:	6f 91       	pop	r22
    34de:	5f 91       	pop	r21
    34e0:	4f 91       	pop	r20
    34e2:	3f 91       	pop	r19
    34e4:	2f 91       	pop	r18
    34e6:	0f 90       	pop	r0
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	0f 90       	pop	r0
    34ec:	1f 90       	pop	r1
    34ee:	18 95       	reti

000034f0 <__mulsi3>:
    34f0:	db 01       	movw	r26, r22
    34f2:	8f 93       	push	r24
    34f4:	9f 93       	push	r25
    34f6:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__muluhisi3>
    34fa:	bf 91       	pop	r27
    34fc:	af 91       	pop	r26
    34fe:	a2 9f       	mul	r26, r18
    3500:	80 0d       	add	r24, r0
    3502:	91 1d       	adc	r25, r1
    3504:	a3 9f       	mul	r26, r19
    3506:	90 0d       	add	r25, r0
    3508:	b2 9f       	mul	r27, r18
    350a:	90 0d       	add	r25, r0
    350c:	11 24       	eor	r1, r1
    350e:	08 95       	ret

00003510 <__udivmodhi4>:
    3510:	aa 1b       	sub	r26, r26
    3512:	bb 1b       	sub	r27, r27
    3514:	51 e1       	ldi	r21, 0x11	; 17
    3516:	07 c0       	rjmp	.+14     	; 0x3526 <__udivmodhi4_ep>

00003518 <__udivmodhi4_loop>:
    3518:	aa 1f       	adc	r26, r26
    351a:	bb 1f       	adc	r27, r27
    351c:	a6 17       	cp	r26, r22
    351e:	b7 07       	cpc	r27, r23
    3520:	10 f0       	brcs	.+4      	; 0x3526 <__udivmodhi4_ep>
    3522:	a6 1b       	sub	r26, r22
    3524:	b7 0b       	sbc	r27, r23

00003526 <__udivmodhi4_ep>:
    3526:	88 1f       	adc	r24, r24
    3528:	99 1f       	adc	r25, r25
    352a:	5a 95       	dec	r21
    352c:	a9 f7       	brne	.-22     	; 0x3518 <__udivmodhi4_loop>
    352e:	80 95       	com	r24
    3530:	90 95       	com	r25
    3532:	bc 01       	movw	r22, r24
    3534:	cd 01       	movw	r24, r26
    3536:	08 95       	ret

00003538 <__divmodhi4>:
    3538:	97 fb       	bst	r25, 7
    353a:	07 2e       	mov	r0, r23
    353c:	16 f4       	brtc	.+4      	; 0x3542 <__divmodhi4+0xa>
    353e:	00 94       	com	r0
    3540:	07 d0       	rcall	.+14     	; 0x3550 <__divmodhi4_neg1>
    3542:	77 fd       	sbrc	r23, 7
    3544:	09 d0       	rcall	.+18     	; 0x3558 <__divmodhi4_neg2>
    3546:	0e 94 88 1a 	call	0x3510	; 0x3510 <__udivmodhi4>
    354a:	07 fc       	sbrc	r0, 7
    354c:	05 d0       	rcall	.+10     	; 0x3558 <__divmodhi4_neg2>
    354e:	3e f4       	brtc	.+14     	; 0x355e <__divmodhi4_exit>

00003550 <__divmodhi4_neg1>:
    3550:	90 95       	com	r25
    3552:	81 95       	neg	r24
    3554:	9f 4f       	sbci	r25, 0xFF	; 255
    3556:	08 95       	ret

00003558 <__divmodhi4_neg2>:
    3558:	70 95       	com	r23
    355a:	61 95       	neg	r22
    355c:	7f 4f       	sbci	r23, 0xFF	; 255

0000355e <__divmodhi4_exit>:
    355e:	08 95       	ret

00003560 <__udivmodsi4>:
    3560:	a1 e2       	ldi	r26, 0x21	; 33
    3562:	1a 2e       	mov	r1, r26
    3564:	aa 1b       	sub	r26, r26
    3566:	bb 1b       	sub	r27, r27
    3568:	fd 01       	movw	r30, r26
    356a:	0d c0       	rjmp	.+26     	; 0x3586 <__udivmodsi4_ep>

0000356c <__udivmodsi4_loop>:
    356c:	aa 1f       	adc	r26, r26
    356e:	bb 1f       	adc	r27, r27
    3570:	ee 1f       	adc	r30, r30
    3572:	ff 1f       	adc	r31, r31
    3574:	a2 17       	cp	r26, r18
    3576:	b3 07       	cpc	r27, r19
    3578:	e4 07       	cpc	r30, r20
    357a:	f5 07       	cpc	r31, r21
    357c:	20 f0       	brcs	.+8      	; 0x3586 <__udivmodsi4_ep>
    357e:	a2 1b       	sub	r26, r18
    3580:	b3 0b       	sbc	r27, r19
    3582:	e4 0b       	sbc	r30, r20
    3584:	f5 0b       	sbc	r31, r21

00003586 <__udivmodsi4_ep>:
    3586:	66 1f       	adc	r22, r22
    3588:	77 1f       	adc	r23, r23
    358a:	88 1f       	adc	r24, r24
    358c:	99 1f       	adc	r25, r25
    358e:	1a 94       	dec	r1
    3590:	69 f7       	brne	.-38     	; 0x356c <__udivmodsi4_loop>
    3592:	60 95       	com	r22
    3594:	70 95       	com	r23
    3596:	80 95       	com	r24
    3598:	90 95       	com	r25
    359a:	9b 01       	movw	r18, r22
    359c:	ac 01       	movw	r20, r24
    359e:	bd 01       	movw	r22, r26
    35a0:	cf 01       	movw	r24, r30
    35a2:	08 95       	ret

000035a4 <__divmodsi4>:
    35a4:	05 2e       	mov	r0, r21
    35a6:	97 fb       	bst	r25, 7
    35a8:	1e f4       	brtc	.+6      	; 0x35b0 <__divmodsi4+0xc>
    35aa:	00 94       	com	r0
    35ac:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__negsi2>
    35b0:	57 fd       	sbrc	r21, 7
    35b2:	07 d0       	rcall	.+14     	; 0x35c2 <__divmodsi4_neg2>
    35b4:	0e 94 b0 1a 	call	0x3560	; 0x3560 <__udivmodsi4>
    35b8:	07 fc       	sbrc	r0, 7
    35ba:	03 d0       	rcall	.+6      	; 0x35c2 <__divmodsi4_neg2>
    35bc:	4e f4       	brtc	.+18     	; 0x35d0 <__divmodsi4_exit>
    35be:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__negsi2>

000035c2 <__divmodsi4_neg2>:
    35c2:	50 95       	com	r21
    35c4:	40 95       	com	r20
    35c6:	30 95       	com	r19
    35c8:	21 95       	neg	r18
    35ca:	3f 4f       	sbci	r19, 0xFF	; 255
    35cc:	4f 4f       	sbci	r20, 0xFF	; 255
    35ce:	5f 4f       	sbci	r21, 0xFF	; 255

000035d0 <__divmodsi4_exit>:
    35d0:	08 95       	ret

000035d2 <__negsi2>:
    35d2:	90 95       	com	r25
    35d4:	80 95       	com	r24
    35d6:	70 95       	com	r23
    35d8:	61 95       	neg	r22
    35da:	7f 4f       	sbci	r23, 0xFF	; 255
    35dc:	8f 4f       	sbci	r24, 0xFF	; 255
    35de:	9f 4f       	sbci	r25, 0xFF	; 255
    35e0:	08 95       	ret

000035e2 <__muluhisi3>:
    35e2:	0e 94 02 1b 	call	0x3604	; 0x3604 <__umulhisi3>
    35e6:	a5 9f       	mul	r26, r21
    35e8:	90 0d       	add	r25, r0
    35ea:	b4 9f       	mul	r27, r20
    35ec:	90 0d       	add	r25, r0
    35ee:	a4 9f       	mul	r26, r20
    35f0:	80 0d       	add	r24, r0
    35f2:	91 1d       	adc	r25, r1
    35f4:	11 24       	eor	r1, r1
    35f6:	08 95       	ret

000035f8 <__tablejump2__>:
    35f8:	ee 0f       	add	r30, r30
    35fa:	ff 1f       	adc	r31, r31
    35fc:	05 90       	lpm	r0, Z+
    35fe:	f4 91       	lpm	r31, Z
    3600:	e0 2d       	mov	r30, r0
    3602:	09 94       	ijmp

00003604 <__umulhisi3>:
    3604:	a2 9f       	mul	r26, r18
    3606:	b0 01       	movw	r22, r0
    3608:	b3 9f       	mul	r27, r19
    360a:	c0 01       	movw	r24, r0
    360c:	a3 9f       	mul	r26, r19
    360e:	70 0d       	add	r23, r0
    3610:	81 1d       	adc	r24, r1
    3612:	11 24       	eor	r1, r1
    3614:	91 1d       	adc	r25, r1
    3616:	b2 9f       	mul	r27, r18
    3618:	70 0d       	add	r23, r0
    361a:	81 1d       	adc	r24, r1
    361c:	11 24       	eor	r1, r1
    361e:	91 1d       	adc	r25, r1
    3620:	08 95       	ret

00003622 <eeprom_read_byte>:
    3622:	f9 99       	sbic	0x1f, 1	; 31
    3624:	fe cf       	rjmp	.-4      	; 0x3622 <eeprom_read_byte>
    3626:	92 bd       	out	0x22, r25	; 34
    3628:	81 bd       	out	0x21, r24	; 33
    362a:	f8 9a       	sbi	0x1f, 0	; 31
    362c:	99 27       	eor	r25, r25
    362e:	80 b5       	in	r24, 0x20	; 32
    3630:	08 95       	ret

00003632 <eeprom_write_byte>:
    3632:	26 2f       	mov	r18, r22

00003634 <eeprom_write_r18>:
    3634:	f9 99       	sbic	0x1f, 1	; 31
    3636:	fe cf       	rjmp	.-4      	; 0x3634 <eeprom_write_r18>
    3638:	1f ba       	out	0x1f, r1	; 31
    363a:	92 bd       	out	0x22, r25	; 34
    363c:	81 bd       	out	0x21, r24	; 33
    363e:	20 bd       	out	0x20, r18	; 32
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	fa 9a       	sbi	0x1f, 2	; 31
    3646:	f9 9a       	sbi	0x1f, 1	; 31
    3648:	0f be       	out	0x3f, r0	; 63
    364a:	01 96       	adiw	r24, 0x01	; 1
    364c:	08 95       	ret

0000364e <_exit>:
    364e:	f8 94       	cli

00003650 <__stop_program>:
    3650:	ff cf       	rjmp	.-2      	; 0x3650 <__stop_program>
