
Klappe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00003694  00003728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003694  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000323  00800164  00800164  0000378c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000378c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  00003800  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011d7b  00000000  00000000  00003fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003be2  00000000  00000000  00015d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c54  00000000  00000000  00019945  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014f4  00000000  00000000  0001e59c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000042b0  00000000  00000000  0001fa90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000631b  00000000  00000000  00023d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  0002a05b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__vector_1>
       8:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__vector_2>
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__vector_6>
      1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      24:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__vector_9>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      40:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__vector_16>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      60:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__vector_24>
      64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	de 01       	movw	r26, r28
      ba:	ab 04       	cpc	r10, r11
      bc:	cf 10       	cpse	r12, r15
      be:	1f 13       	cpse	r17, r31
      c0:	04 16       	cp	r0, r20

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	11 e0       	ldi	r17, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e4 e9       	ldi	r30, 0x94	; 148
      d6:	f6 e3       	ldi	r31, 0x36	; 54
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a4 36       	cpi	r26, 0x64	; 100
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	24 e0       	ldi	r18, 0x04	; 4
      e6:	a4 e6       	ldi	r26, 0x64	; 100
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a7 38       	cpi	r26, 0x87	; 135
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>

000000f4 <__do_global_ctors>:
      f4:	10 e0       	ldi	r17, 0x00	; 0
      f6:	c1 e6       	ldi	r28, 0x61	; 97
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	04 c0       	rjmp	.+8      	; 0x104 <__do_global_ctors+0x10>
      fc:	21 97       	sbiw	r28, 0x01	; 1
      fe:	fe 01       	movw	r30, r28
     100:	0e 94 1d 1b 	call	0x363a	; 0x363a <__tablejump2__>
     104:	cc 35       	cpi	r28, 0x5C	; 92
     106:	d1 07       	cpc	r29, r17
     108:	c9 f7       	brne	.-14     	; 0xfc <__do_global_ctors+0x8>
     10a:	0e 94 9b 08 	call	0x1136	; 0x1136 <main>
     10e:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <_exit>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>:
     *
     * Enter system state
     *
     * @param state New system state
     */
    void __inline__ enterSystemState(SYSTATE state)
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	1f 92       	push	r1
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	89 83       	std	Y+1, r24	; 0x01
    {
      // System state register -> id = 3
      regTable[3]->setData((uint8_t *) &state);
     122:	be 01       	movw	r22, r28
     124:	6f 5f       	subi	r22, 0xFF	; 255
     126:	7f 4f       	sbci	r23, 0xFF	; 255
     128:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <regTable+0x6>
     12c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <regTable+0x7>
     130:	0e 94 43 11 	call	0x2286	; 0x2286 <_ZN8REGISTER7setDataEPh>
    }
     134:	0f 90       	pop	r0
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <_ZN4SWAP11getRegisterEh.isra.1>:
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     13c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <regTableSize>
     140:	89 17       	cp	r24, r25
     142:	48 f4       	brcc	.+18     	; 0x156 <_ZN4SWAP11getRegisterEh.isra.1+0x1a>
        return regTable[regId];
     144:	e8 2f       	mov	r30, r24
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	ee 0f       	add	r30, r30
     14a:	ff 1f       	adc	r31, r31
     14c:	ec 5f       	subi	r30, 0xFC	; 252
     14e:	fe 4f       	sbci	r31, 0xFE	; 254
     150:	80 81       	ld	r24, Z
     152:	91 81       	ldd	r25, Z+1	; 0x01
     154:	08 95       	ret

      return NULL;
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
    }
     15a:	08 95       	ret

0000015c <setup>:
 * setup
 *
 * Arduino setup function
 */
void setup()
{
     15c:	cf 93       	push	r28
  uint8_t i;
  uint8_t rgc;

  //stateCode = STATE_INIT;	
  INIT_ONBOARD_LED();
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	84 e0       	ldi	r24, 0x04	; 4
     162:	0e 94 ee 09 	call	0x13dc	; 0x13dc <pinMode>
  digitalWrite(LED, HIGH);
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	84 e0       	ldi	r24, 0x04	; 4
     16a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>
  while(!Serial);
  Serial.println(F("Modul Start!"));
#endif

  // Init SWAP stack
  swap.init();
     16e:	89 e7       	ldi	r24, 0x79	; 121
     170:	93 e0       	ldi	r25, 0x03	; 3
     172:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN4SWAP4initEv>
 
  // Enter SYNC state
  swap.enterSystemState(SYSTATE_SYNC);
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
     17c:	c6 e0       	ldi	r28, 0x06	; 6
// During 3 seconds, listen the network for possible commands whilst the LED blinks
  for(i=0 ; i<6 ; i++)
  {
	digitalWrite(LED, HIGH);
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	84 e0       	ldi	r24, 0x04	; 4
     182:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>
	delay(50);
     186:	62 e3       	ldi	r22, 0x32	; 50
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
	digitalWrite(LED, LOW);
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	84 e0       	ldi	r24, 0x04	; 4
     196:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>
	delay(450);
     19a:	62 ec       	ldi	r22, 0xC2	; 194
     19c:	71 e0       	ldi	r23, 0x01	; 1
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
     1a6:	c1 50       	subi	r28, 0x01	; 1
  swap.init();
 
  // Enter SYNC state
  swap.enterSystemState(SYSTATE_SYNC);
// During 3 seconds, listen the network for possible commands whilst the LED blinks
  for(i=0 ; i<6 ; i++)
     1a8:	51 f7       	brne	.-44     	; 0x17e <setup+0x22>
  }
  // Optionally set transmission amplifier to its maximum level (10dB)
  //panstamp.setHighTxPower();
  // Transmit all standard register
  for (rgc=0; rgc<=REGI_TXINTERVAL; rgc++)
   swap.getRegister(rgc)->getData();
     1aa:	8c 2f       	mov	r24, r28
     1ac:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     1b0:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
	delay(450);
  }
  // Optionally set transmission amplifier to its maximum level (10dB)
  //panstamp.setHighTxPower();
  // Transmit all standard register
  for (rgc=0; rgc<=REGI_TXINTERVAL; rgc++)
     1b4:	cf 5f       	subi	r28, 0xFF	; 255
     1b6:	cb 30       	cpi	r28, 0x0B	; 11
     1b8:	c1 f7       	brne	.-16     	; 0x1aa <setup+0x4e>
   swap.getRegister(rgc)->getData();
  // Transmit initial custom register 
  //for (rgc=REGI_PROCVOLTSUPPLY; rgc<=REGI_STATECODE; rgc++)
	 // swap.getRegister(rgc)->getData();
  swap.getRegister(REGI_PROCVOLTSUPPLY)->getData();
     1ba:	8b e0       	ldi	r24, 0x0B	; 11
     1bc:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     1c0:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
  swap.getRegister(REGI_BATTVOLTSUPPLY)->getData();
     1c4:	8c e0       	ldi	r24, 0x0C	; 12
     1c6:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     1ca:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
  swap.getRegister(REGI_SLEEP_MS)->getData(); 
     1ce:	8a e1       	ldi	r24, 0x1A	; 26
     1d0:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     1d4:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
  swap.getRegister(REGI_LED1)->getData();    
     1d8:	8e e0       	ldi	r24, 0x0E	; 14
     1da:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     1de:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
  // attach Hall position sensor	  
  stateCode = STATE_DETECT_SENSOR_I2C;
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <stateCode>
  swap.getRegister(REGI_STATECODE)->getData();
     1e8:	8b e1       	ldi	r24, 0x1B	; 27
     1ea:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     1ee:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
  Wire.begin();  
     1f2:	82 ec       	ldi	r24, 0xC2	; 194
     1f4:	93 e0       	ldi	r25, 0x03	; 3
     1f6:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <_ZN7TwoWire5beginEv>
  if(ams5600.detectMagnet() == 0 ){
     1fa:	84 e6       	ldi	r24, 0x64	; 100
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZN8AMS_560012detectMagnetEv>
     202:	89 2b       	or	r24, r25
     204:	f1 f4       	brne	.+60     	; 0x242 <setup+0xe6>
		  }
		  else {
#ifdef  USE_SERIAL_DEBUG			  
			  Serial.println(F("Can not detect magnet"));
#endif
			  stateCode = STATE_MAGNET_DETECT;
     206:	c2 e0       	ldi	r28, 0x02	; 2
  stateCode = STATE_DETECT_SENSOR_I2C;
  swap.getRegister(REGI_STATECODE)->getData();
  Wire.begin();  
  if(ams5600.detectMagnet() == 0 ){
	  while(1){
		  if(ams5600.detectMagnet() == 1 ) {
     208:	84 e6       	ldi	r24, 0x64	; 100
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZN8AMS_560012detectMagnetEv>
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	49 f4       	brne	.+18     	; 0x226 <setup+0xca>
			  stateCode = STATE_MAIN_LOOP;
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <stateCode>
			  swap.getRegister(REGI_STATECODE)->getData();
     21a:	8b e1       	ldi	r24, 0x1B	; 27
     21c:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     220:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
     224:	0e c0       	rjmp	.+28     	; 0x242 <setup+0xe6>
		  }
		  else {
#ifdef  USE_SERIAL_DEBUG			  
			  Serial.println(F("Can not detect magnet"));
#endif
			  stateCode = STATE_MAGNET_DETECT;
     226:	c0 93 94 01 	sts	0x0194, r28	; 0x800194 <stateCode>
			  swap.getRegister(REGI_STATECODE)->getData();
     22a:	8b e1       	ldi	r24, 0x1B	; 27
     22c:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     230:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
		  }
		  delay(1000);
     234:	68 ee       	ldi	r22, 0xE8	; 232
     236:	73 e0       	ldi	r23, 0x03	; 3
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
  // attach Hall position sensor	  
  stateCode = STATE_DETECT_SENSOR_I2C;
  swap.getRegister(REGI_STATECODE)->getData();
  Wire.begin();  
  if(ams5600.detectMagnet() == 0 ){
	  while(1){
     240:	e3 cf       	rjmp	.-58     	; 0x208 <setup+0xac>
			  swap.getRegister(REGI_STATECODE)->getData();
		  }
		  delay(1000);
	  }
  }
  swap.getRegister(REGI_AS5600_ANGLEDEG)->getData();
     242:	81 e1       	ldi	r24, 0x11	; 17
     244:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     248:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
  swap.getRegister(REGI_AS5600_MAGNETSTRENGTH)->getData();
     24c:	83 e1       	ldi	r24, 0x13	; 19
     24e:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     252:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
  res = ams5600.setPowerMode(ams5600.POWER_MODE_LPM3);
     256:	63 e0       	ldi	r22, 0x03	; 3
     258:	84 e6       	ldi	r24, 0x64	; 100
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_ZN8AMS_560012setPowerModeEh>
     260:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <res>
#ifdef  USE_SERIAL_DEBUG    
  if (res == true)
	Serial.println(F("Set Powermode to LPM3 = 100ms"));
  Serial.println(F("Modul ready!"));
#endif
}
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <loop>:

void loop()
{
	int16_t agcDiff;
	
	updAS5600_MagnetStrengthValue(0);
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_Z29updAS5600_MagnetStrengthValueh>
	if ((as5600_MagnetStrengthValue >=1) && (as5600_MagnetStrengthValue <=3))
     26e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <as5600_MagnetStrengthValue>
     272:	81 50       	subi	r24, 0x01	; 1
     274:	83 30       	cpi	r24, 0x03	; 3
     276:	08 f0       	brcs	.+2      	; 0x27a <loop+0x12>
     278:	98 c0       	rjmp	.+304    	; 0x3aa <loop+0x142>
	{ // MAGNET IS AVAILABLE; DO NORMAL WORK
		// receive possible set commands
		if (msgcnt == 0)  {
     27a:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <msgcnt>
     27e:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <msgcnt+0x1>
     282:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <msgcnt+0x2>
     286:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <msgcnt+0x3>
     28a:	89 2b       	or	r24, r25
     28c:	8a 2b       	or	r24, r26
     28e:	8b 2b       	or	r24, r27
     290:	d9 f5       	brne	.+118    	; 0x308 <loop+0xa0>
			msgcnt = SEND_STATE_MSG;
     292:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <swap+0x6>
     296:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <swap+0x7>
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msgcnt>
     2aa:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msgcnt+0x1>
     2ae:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <msgcnt+0x2>
     2b2:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <msgcnt+0x3>
			swap.enterSystemState(SYSTATE_RXON);  
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
			swap.getRegister(REGI_PROCVOLTSUPPLY)->getData(); 
     2bc:	8b e0       	ldi	r24, 0x0B	; 11
     2be:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     2c2:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
			swap.getRegister(REGI_BATTVOLTSUPPLY)->getData();
     2c6:	8c e0       	ldi	r24, 0x0C	; 12
     2c8:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     2cc:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
			swap.getRegister(REGI_AS5600_ANGLEDEG)->getData();
     2d0:	81 e1       	ldi	r24, 0x11	; 17
     2d2:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     2d6:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
			swap.getRegister(REGI_AS5600_MAGNETSTRENGTH)->getData();
     2da:	83 e1       	ldi	r24, 0x13	; 19
     2dc:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     2e0:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
			Serial.print(F("Magnet Strength: "));
			Serial.print(as5600_MagnetStrengthValue);
			Serial.print(F("  Grad: "));
			Serial.println(String(as5600_AngleValueDegActual,DEC));
#endif
			swap.enterSystemState(SYSTATE_SYNC); 
     2e4:	83 e0       	ldi	r24, 0x03	; 3
     2e6:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
 			delay(1000); // wait for receive mesg
     2ea:	68 ee       	ldi	r22, 0xE8	; 232
     2ec:	73 e0       	ldi	r23, 0x03	; 3
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
			swap.enterSystemState(SYSTATE_RXOFF);
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
			delay(500);
     2fc:	64 ef       	ldi	r22, 0xF4	; 244
     2fe:	71 e0       	ldi	r23, 0x01	; 1
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
		}
		msgcnt--;	
     308:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <msgcnt>
     30c:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <msgcnt+0x1>
     310:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <msgcnt+0x2>
     314:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <msgcnt+0x3>
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	a1 09       	sbc	r26, r1
     31c:	b1 09       	sbc	r27, r1
     31e:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msgcnt>
     322:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msgcnt+0x1>
     326:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <msgcnt+0x2>
     32a:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <msgcnt+0x3>
		updAS5600_AngleValueDeg(0);
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 a4 02 	call	0x548	; 0x548 <_Z23updAS5600_AngleValueDegh>
		agcDiff = as5600_AngleValueDegActual - oldAngleValue;
     334:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <as5600_AngleValueDegActual>
     338:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <as5600_AngleValueDegActual+0x1>
     33c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <oldAngleValue>
     340:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <oldAngleValue+0x1>
     344:	28 1b       	sub	r18, r24
     346:	39 0b       	sbc	r19, r25
		if ((agcDiff < (led1[0] * -1)) || (agcDiff > led1[0]))  // there is really a change and not only a noise
     348:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led1>
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	44 27       	eor	r20, r20
     350:	55 27       	eor	r21, r21
     352:	48 1b       	sub	r20, r24
     354:	59 0b       	sbc	r21, r25
     356:	24 17       	cp	r18, r20
     358:	35 07       	cpc	r19, r21
     35a:	1c f0       	brlt	.+6      	; 0x362 <loop+0xfa>
     35c:	82 17       	cp	r24, r18
     35e:	93 07       	cpc	r25, r19
     360:	e4 f4       	brge	.+56     	; 0x39a <loop+0x132>
		{
		  swap.enterSystemState(SYSTATE_RXON);  
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
		  swap.getRegister(REGI_AS5600_ANGLEDEG)->getData();
     368:	81 e1       	ldi	r24, 0x11	; 17
     36a:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     36e:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
		  oldAngleValue = as5600_AngleValueDegActual;
     372:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <as5600_AngleValueDegActual>
     376:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <as5600_AngleValueDegActual+0x1>
     37a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <oldAngleValue+0x1>
     37e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <oldAngleValue>
		  swap.enterSystemState(SYSTATE_SYNC); 
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
		  delay(100);
     388:	64 e6       	ldi	r22, 0x64	; 100
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
		  swap.enterSystemState(SYSTATE_RXOFF);
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN4SWAP16enterSystemStateE7SYSTATE.isra.0>
		  Serial.println(String(as5600_AngleValueDegActual,DEC));
		  delay(100);
#endif
		}
		// Sleep
		swap.goToSleepMS(sleepIntervall);		
     39a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     39e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3a2:	89 e7       	ldi	r24, 0x79	; 121
     3a4:	93 e0       	ldi	r25, 0x03	; 3
     3a6:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <_ZN4SWAP11goToSleepMSEj>
	}
	else
	{
	 	swap.getRegister(REGI_AS5600_MAGNETSTRENGTH)->getData();
     3aa:	83 e1       	ldi	r24, 0x13	; 19
     3ac:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4SWAP11getRegisterEh.isra.1>
     3b0:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
#ifdef  USE_SERIAL_DEBUG		 
		Serial.print(F("Magnet Strength: "));
		Serial.println(as5600_MagnetStrengthValue);
	    delay(500);
#endif		
		swap.goToSleep();
     3b4:	89 e7       	ldi	r24, 0x79	; 121
     3b6:	93 e0       	ldi	r25, 0x03	; 3
     3b8:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <_ZN4SWAP9goToSleepEv>

000003bc <_GLOBAL__sub_I_led0>:
#define STATE_MAGNET_DETECT			STATE_DETECT_SENSOR_I2C + 1
#define STATE_MAIN_LOOP   			STATE_MAGNET_DETECT + 1

uint8_t stateCode = STATE_INIT;	

AMS_5600 ams5600;  // position sensor
     3bc:	84 e6       	ldi	r24, 0x64	; 100
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <_ZN8AMS_5600C1Ev>

000003c4 <_Z7setled1hPh>:

uint16_t convertRawAngleToDegrees(uint16_t newAngle)
{
/* Raw data reports 0 - 4095 segments, which is 0.087 of a degree */
  return ((newAngle * 0.087) + 0.5); // round to a full degree
}
     3c4:	fb 01       	movw	r30, r22
     3c6:	80 81       	ld	r24, Z
     3c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led1>
     3cc:	08 95       	ret

000003ce <_Z13setTxIntervalhPh>:
     3ce:	81 e9       	ldi	r24, 0x91	; 145
     3d0:	92 e0       	ldi	r25, 0x02	; 2
     3d2:	0c 94 6d 11 	jmp	0x22da	; 0x22da <_ZN8REGISTER20setValueFromBeBufferEPh>

000003d6 <_Z20setSleepIntervall_mshPh>:
     3d6:	8e ea       	ldi	r24, 0xAE	; 174
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0c 94 6d 11 	jmp	0x22da	; 0x22da <_ZN8REGISTER20setValueFromBeBufferEPh>

000003de <_Z13setDevAddresshPh>:
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	c0 55       	subi	r28, 0x50	; 80
     3f2:	d1 09       	sbc	r29, r1
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	7b 01       	movw	r14, r22
     400:	8e e9       	ldi	r24, 0x9E	; 158
     402:	c8 2e       	mov	r12, r24
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	d8 2e       	mov	r13, r24
     408:	01 e0       	ldi	r16, 0x01	; 1
     40a:	f6 01       	movw	r30, r12
     40c:	27 81       	ldd	r18, Z+7	; 0x07
     40e:	ab 01       	movw	r20, r22
     410:	64 81       	ldd	r22, Z+4	; 0x04
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	0e 94 ed 14 	call	0x29da	; 0x29da <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     41a:	ce 01       	movw	r24, r28
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	0e 94 27 14 	call	0x284e	; 0x284e <_ZN8SWPACKET4sendEv>
     422:	b7 01       	movw	r22, r14
     424:	c6 01       	movw	r24, r12
     426:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN8REGISTER20setValueFromBeBufferEPh>
     42a:	f6 01       	movw	r30, r12
     42c:	87 81       	ldd	r24, Z+7	; 0x07
     42e:	e8 0e       	add	r14, r24
     430:	f1 1c       	adc	r15, r1
     432:	f7 01       	movw	r30, r14
     434:	31 97       	sbiw	r30, 0x01	; 1
     436:	60 81       	ld	r22, Z
     438:	8c e6       	ldi	r24, 0x6C	; 108
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <_ZN6CC110113setDevAddressEh>
     440:	c0 5b       	subi	r28, 0xB0	; 176
     442:	df 4f       	sbci	r29, 0xFF	; 255
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	08 95       	ret

0000045e <_Z12setNetworkIdhPh>:
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	c0 55       	subi	r28, 0x50	; 80
     46e:	d1 09       	sbc	r29, r1
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <regNetworkId+0x5>
     47e:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <regNetworkId+0x6>
     482:	db 01       	movw	r26, r22
     484:	9c 91       	ld	r25, X
     486:	80 81       	ld	r24, Z
     488:	98 13       	cpse	r25, r24
     48a:	05 c0       	rjmp	.+10     	; 0x496 <_Z12setNetworkIdhPh+0x38>
     48c:	11 96       	adiw	r26, 0x01	; 1
     48e:	9c 91       	ld	r25, X
     490:	81 81       	ldd	r24, Z+1	; 0x01
     492:	98 17       	cp	r25, r24
     494:	a1 f0       	breq	.+40     	; 0x4be <_Z12setNetworkIdhPh+0x60>
     496:	7b 01       	movw	r14, r22
     498:	01 e0       	ldi	r16, 0x01	; 1
     49a:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <regNetworkId+0x7>
     49e:	ab 01       	movw	r20, r22
     4a0:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <regNetworkId+0x4>
     4a4:	ce 01       	movw	r24, r28
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	0e 94 ed 14 	call	0x29da	; 0x29da <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	0e 94 27 14 	call	0x284e	; 0x284e <_ZN8SWPACKET4sendEv>
     4b4:	b7 01       	movw	r22, r14
     4b6:	8c e6       	ldi	r24, 0x6C	; 108
     4b8:	93 e0       	ldi	r25, 0x03	; 3
     4ba:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN6CC110111setSyncWordEPh>
     4be:	c0 5b       	subi	r28, 0xB0	; 176
     4c0:	df 4f       	sbci	r29, 0xFF	; 255
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	08 95       	ret

000004d8 <_Z18updtProcVoltSupplyh>:
     4d8:	cf 93       	push	r28
     4da:	c8 2f       	mov	r28, r24
     4dc:	8b e6       	ldi	r24, 0x6B	; 107
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN8PANSTAMP6getVccEv>
     4e4:	ec 2f       	mov	r30, r28
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	ec 5f       	subi	r30, 0xFC	; 252
     4ee:	fe 4f       	sbci	r31, 0xFE	; 254
     4f0:	a0 81       	ld	r26, Z
     4f2:	b1 81       	ldd	r27, Z+1	; 0x01
     4f4:	15 96       	adiw	r26, 0x05	; 5
     4f6:	0d 90       	ld	r0, X+
     4f8:	bc 91       	ld	r27, X
     4fa:	a0 2d       	mov	r26, r0
     4fc:	9c 93       	st	X, r25
     4fe:	01 90       	ld	r0, Z+
     500:	f0 81       	ld	r31, Z
     502:	e0 2d       	mov	r30, r0
     504:	05 80       	ldd	r0, Z+5	; 0x05
     506:	f6 81       	ldd	r31, Z+6	; 0x06
     508:	e0 2d       	mov	r30, r0
     50a:	81 83       	std	Z+1, r24	; 0x01
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <_Z23updAS5600_AngleValueRawh>:
     510:	cf 93       	push	r28
     512:	c8 2f       	mov	r28, r24
     514:	84 e6       	ldi	r24, 0x64	; 100
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN8AMS_560011getRawAngleEv>
     51c:	ec 2f       	mov	r30, r28
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	ee 0f       	add	r30, r30
     522:	ff 1f       	adc	r31, r31
     524:	ec 5f       	subi	r30, 0xFC	; 252
     526:	fe 4f       	sbci	r31, 0xFE	; 254
     528:	a0 81       	ld	r26, Z
     52a:	b1 81       	ldd	r27, Z+1	; 0x01
     52c:	15 96       	adiw	r26, 0x05	; 5
     52e:	0d 90       	ld	r0, X+
     530:	bc 91       	ld	r27, X
     532:	a0 2d       	mov	r26, r0
     534:	9c 93       	st	X, r25
     536:	01 90       	ld	r0, Z+
     538:	f0 81       	ld	r31, Z
     53a:	e0 2d       	mov	r30, r0
     53c:	05 80       	ldd	r0, Z+5	; 0x05
     53e:	f6 81       	ldd	r31, Z+6	; 0x06
     540:	e0 2d       	mov	r30, r0
     542:	81 83       	std	Z+1, r24	; 0x01
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <_Z23updAS5600_AngleValueDegh>:
     548:	cf 93       	push	r28
     54a:	c8 2f       	mov	r28, r24
     54c:	84 e6       	ldi	r24, 0x64	; 100
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN8AMS_560011getRawAngleEv>
     554:	bc 01       	movw	r22, r24
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__floatunsisf>
     55e:	2e e0       	ldi	r18, 0x0E	; 14
     560:	3d e2       	ldi	r19, 0x2D	; 45
     562:	42 eb       	ldi	r20, 0xB2	; 178
     564:	5d e3       	ldi	r21, 0x3D	; 61
     566:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	5f e3       	ldi	r21, 0x3F	; 63
     572:	0e 94 04 07 	call	0xe08	; 0xe08 <__addsf3>
     576:	0e 94 70 07 	call	0xee0	; 0xee0 <__fixunssfsi>
     57a:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <as5600_AngleValueDegActual>
     57e:	70 93 9e 01 	sts	0x019E, r23	; 0x80019e <as5600_AngleValueDegActual+0x1>
     582:	ec 2f       	mov	r30, r28
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	ee 0f       	add	r30, r30
     588:	ff 1f       	adc	r31, r31
     58a:	ec 5f       	subi	r30, 0xFC	; 252
     58c:	fe 4f       	sbci	r31, 0xFE	; 254
     58e:	a0 81       	ld	r26, Z
     590:	b1 81       	ldd	r27, Z+1	; 0x01
     592:	15 96       	adiw	r26, 0x05	; 5
     594:	0d 90       	ld	r0, X+
     596:	bc 91       	ld	r27, X
     598:	a0 2d       	mov	r26, r0
     59a:	7c 93       	st	X, r23
     59c:	01 90       	ld	r0, Z+
     59e:	f0 81       	ld	r31, Z
     5a0:	e0 2d       	mov	r30, r0
     5a2:	05 80       	ldd	r0, Z+5	; 0x05
     5a4:	f6 81       	ldd	r31, Z+6	; 0x06
     5a6:	e0 2d       	mov	r30, r0
     5a8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <as5600_AngleValueDegActual>
     5ac:	81 83       	std	Z+1, r24	; 0x01
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <_Z24updAS5600_MagnitudeValueh>:
     5b2:	cf 93       	push	r28
     5b4:	c8 2f       	mov	r28, r24
     5b6:	84 e6       	ldi	r24, 0x64	; 100
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_ZN8AMS_560012getMagnitudeEv>
     5be:	ec 2f       	mov	r30, r28
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	ec 5f       	subi	r30, 0xFC	; 252
     5c8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ca:	a0 81       	ld	r26, Z
     5cc:	b1 81       	ldd	r27, Z+1	; 0x01
     5ce:	15 96       	adiw	r26, 0x05	; 5
     5d0:	0d 90       	ld	r0, X+
     5d2:	bc 91       	ld	r27, X
     5d4:	a0 2d       	mov	r26, r0
     5d6:	9c 93       	st	X, r25
     5d8:	01 90       	ld	r0, Z+
     5da:	f0 81       	ld	r31, Z
     5dc:	e0 2d       	mov	r30, r0
     5de:	05 80       	ldd	r0, Z+5	; 0x05
     5e0:	f6 81       	ldd	r31, Z+6	; 0x06
     5e2:	e0 2d       	mov	r30, r0
     5e4:	81 83       	std	Z+1, r24	; 0x01
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <_Z29updAS5600_MagnetStrengthValueh>:
     5ea:	84 e6       	ldi	r24, 0x64	; 100
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN8AMS_560017getMagnetStrengthEv>
     5f2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <as5600_MagnetStrengthValue>
     5f6:	08 95       	ret

000005f8 <_Z21updAS5600_ScaledAngleh>:
     5f8:	cf 93       	push	r28
     5fa:	c8 2f       	mov	r28, r24
     5fc:	84 e6       	ldi	r24, 0x64	; 100
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN8AMS_560014getScaledAngleEv>
     604:	ec 2f       	mov	r30, r28
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ec 5f       	subi	r30, 0xFC	; 252
     60e:	fe 4f       	sbci	r31, 0xFE	; 254
     610:	a0 81       	ld	r26, Z
     612:	b1 81       	ldd	r27, Z+1	; 0x01
     614:	15 96       	adiw	r26, 0x05	; 5
     616:	0d 90       	ld	r0, X+
     618:	bc 91       	ld	r27, X
     61a:	a0 2d       	mov	r26, r0
     61c:	9c 93       	st	X, r25
     61e:	01 90       	ld	r0, Z+
     620:	f0 81       	ld	r31, Z
     622:	e0 2d       	mov	r30, r0
     624:	05 80       	ldd	r0, Z+5	; 0x05
     626:	f6 81       	ldd	r31, Z+6	; 0x06
     628:	e0 2d       	mov	r30, r0
     62a:	81 83       	std	Z+1, r24	; 0x01
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <_Z18updAS5600_MaxAngleh>:
     630:	cf 93       	push	r28
     632:	c8 2f       	mov	r28, r24
     634:	84 e6       	ldi	r24, 0x64	; 100
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN8AMS_560011getMaxAngleEv>
     63c:	ec 2f       	mov	r30, r28
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	ec 5f       	subi	r30, 0xFC	; 252
     646:	fe 4f       	sbci	r31, 0xFE	; 254
     648:	a0 81       	ld	r26, Z
     64a:	b1 81       	ldd	r27, Z+1	; 0x01
     64c:	15 96       	adiw	r26, 0x05	; 5
     64e:	0d 90       	ld	r0, X+
     650:	bc 91       	ld	r27, X
     652:	a0 2d       	mov	r26, r0
     654:	9c 93       	st	X, r25
     656:	01 90       	ld	r0, Z+
     658:	f0 81       	ld	r31, Z
     65a:	e0 2d       	mov	r30, r0
     65c:	05 80       	ldd	r0, Z+5	; 0x05
     65e:	f6 81       	ldd	r31, Z+6	; 0x06
     660:	e0 2d       	mov	r30, r0
     662:	81 83       	std	Z+1, r24	; 0x01
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <_Z18setAS5600_MaxAnglehPh>:
     668:	fb 01       	movw	r30, r22
     66a:	81 81       	ldd	r24, Z+1	; 0x01
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	98 2f       	mov	r25, r24
     670:	88 27       	eor	r24, r24
     672:	20 81       	ld	r18, Z
     674:	bc 01       	movw	r22, r24
     676:	62 0f       	add	r22, r18
     678:	71 1d       	adc	r23, r1
     67a:	84 e6       	ldi	r24, 0x64	; 100
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <_ZN8AMS_560011setMaxAngleEj>

00000682 <_Z23updAS5600_StartPositionh>:
     682:	cf 93       	push	r28
     684:	c8 2f       	mov	r28, r24
     686:	84 e6       	ldi	r24, 0x64	; 100
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN8AMS_560016getStartPositionEv>
     68e:	ec 2f       	mov	r30, r28
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	ec 5f       	subi	r30, 0xFC	; 252
     698:	fe 4f       	sbci	r31, 0xFE	; 254
     69a:	a0 81       	ld	r26, Z
     69c:	b1 81       	ldd	r27, Z+1	; 0x01
     69e:	15 96       	adiw	r26, 0x05	; 5
     6a0:	0d 90       	ld	r0, X+
     6a2:	bc 91       	ld	r27, X
     6a4:	a0 2d       	mov	r26, r0
     6a6:	9c 93       	st	X, r25
     6a8:	01 90       	ld	r0, Z+
     6aa:	f0 81       	ld	r31, Z
     6ac:	e0 2d       	mov	r30, r0
     6ae:	05 80       	ldd	r0, Z+5	; 0x05
     6b0:	f6 81       	ldd	r31, Z+6	; 0x06
     6b2:	e0 2d       	mov	r30, r0
     6b4:	81 83       	std	Z+1, r24	; 0x01
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <_Z23setAS5600_StartPositionhPh>:
     6ba:	fb 01       	movw	r30, r22
     6bc:	81 81       	ldd	r24, Z+1	; 0x01
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	98 2f       	mov	r25, r24
     6c2:	88 27       	eor	r24, r24
     6c4:	20 81       	ld	r18, Z
     6c6:	bc 01       	movw	r22, r24
     6c8:	62 0f       	add	r22, r18
     6ca:	71 1d       	adc	r23, r1
     6cc:	84 e6       	ldi	r24, 0x64	; 100
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <_ZN8AMS_560016setStartPositionEj>

000006d4 <_Z21updAS5600_EndPositionh>:
     6d4:	cf 93       	push	r28
     6d6:	c8 2f       	mov	r28, r24
     6d8:	84 e6       	ldi	r24, 0x64	; 100
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN8AMS_560014getEndPositionEv>
     6e0:	ec 2f       	mov	r30, r28
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	ec 5f       	subi	r30, 0xFC	; 252
     6ea:	fe 4f       	sbci	r31, 0xFE	; 254
     6ec:	a0 81       	ld	r26, Z
     6ee:	b1 81       	ldd	r27, Z+1	; 0x01
     6f0:	15 96       	adiw	r26, 0x05	; 5
     6f2:	0d 90       	ld	r0, X+
     6f4:	bc 91       	ld	r27, X
     6f6:	a0 2d       	mov	r26, r0
     6f8:	9c 93       	st	X, r25
     6fa:	01 90       	ld	r0, Z+
     6fc:	f0 81       	ld	r31, Z
     6fe:	e0 2d       	mov	r30, r0
     700:	05 80       	ldd	r0, Z+5	; 0x05
     702:	f6 81       	ldd	r31, Z+6	; 0x06
     704:	e0 2d       	mov	r30, r0
     706:	81 83       	std	Z+1, r24	; 0x01
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <_Z21setAS5600_EndPositionhPh>:
     70c:	fb 01       	movw	r30, r22
     70e:	81 81       	ldd	r24, Z+1	; 0x01
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	98 2f       	mov	r25, r24
     714:	88 27       	eor	r24, r24
     716:	20 81       	ld	r18, Z
     718:	bc 01       	movw	r22, r24
     71a:	62 0f       	add	r22, r18
     71c:	71 1d       	adc	r23, r1
     71e:	84 e6       	ldi	r24, 0x64	; 100
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <_ZN8AMS_560014setEndPositionEj>

00000726 <_Z20updAS5600_i2cAddressh>:
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	e8 2f       	mov	r30, r24
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ec 5f       	subi	r30, 0xFC	; 252
     734:	fe 4f       	sbci	r31, 0xFE	; 254
     736:	01 90       	ld	r0, Z+
     738:	f0 81       	ld	r31, Z
     73a:	e0 2d       	mov	r30, r0
     73c:	c5 81       	ldd	r28, Z+5	; 0x05
     73e:	d6 81       	ldd	r29, Z+6	; 0x06
     740:	84 e6       	ldi	r24, 0x64	; 100
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN8AMS_560010getAddressEv>
     748:	88 83       	st	Y, r24
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <_Z13updAS5600_AGCh>:
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	e8 2f       	mov	r30, r24
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	ec 5f       	subi	r30, 0xFC	; 252
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	01 90       	ld	r0, Z+
     762:	f0 81       	ld	r31, Z
     764:	e0 2d       	mov	r30, r0
     766:	c5 81       	ldd	r28, Z+5	; 0x05
     768:	d6 81       	ldd	r29, Z+6	; 0x06
     76a:	84 e6       	ldi	r24, 0x64	; 100
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 25 0b 	call	0x164a	; 0x164a <_ZN8AMS_56006getAgcEv>
     772:	88 83       	st	Y, r24
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <_Z14setFreqChannelhPh>:
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	c0 55       	subi	r28, 0x50	; 80
     78a:	d1 09       	sbc	r29, r1
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <regFreqChannel+0x5>
     79a:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <regFreqChannel+0x6>
     79e:	db 01       	movw	r26, r22
     7a0:	9c 91       	ld	r25, X
     7a2:	80 81       	ld	r24, Z
     7a4:	98 17       	cp	r25, r24
     7a6:	a9 f0       	breq	.+42     	; 0x7d2 <_Z14setFreqChannelhPh+0x58>
     7a8:	7b 01       	movw	r14, r22
     7aa:	01 e0       	ldi	r16, 0x01	; 1
     7ac:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <regFreqChannel+0x7>
     7b0:	ab 01       	movw	r20, r22
     7b2:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <regFreqChannel+0x4>
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	0e 94 ed 14 	call	0x29da	; 0x29da <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     7be:	ce 01       	movw	r24, r28
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	0e 94 27 14 	call	0x284e	; 0x284e <_ZN8SWPACKET4sendEv>
     7c6:	f7 01       	movw	r30, r14
     7c8:	60 81       	ld	r22, Z
     7ca:	8c e6       	ldi	r24, 0x6C	; 108
     7cc:	93 e0       	ldi	r25, 0x03	; 3
     7ce:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN6CC110110setChannelEh>
     7d2:	c0 5b       	subi	r28, 0xB0	; 176
     7d4:	df 4f       	sbci	r29, 0xFF	; 255
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	08 95       	ret

000007ec <_Z7setled0hPh>:
     7ec:	fb 01       	movw	r30, r22
     7ee:	80 81       	ld	r24, Z
     7f0:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <led0>
     7f4:	81 11       	cpse	r24, r1
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <_Z7setled0hPh+0x10>
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <_Z7setled0hPh+0x12>
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <digitalWrite>

00000804 <_Z10modulresethPh>:
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	1f 92       	push	r1
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	fb 01       	movw	r30, r22
     814:	80 81       	ld	r24, Z
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	a1 f4       	brne	.+40     	; 0x842 <_Z10modulresethPh+0x3e>
     81a:	8b 01       	movw	r16, r22
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	be 01       	movw	r22, r28
     822:	6f 5f       	subi	r22, 0xFF	; 255
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <regTable+0x6>
     82a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <regTable+0x7>
     82e:	0e 94 43 11 	call	0x2286	; 0x2286 <_ZN8REGISTER7setDataEPh>
     832:	f8 01       	movw	r30, r16
     834:	80 81       	ld	r24, Z
     836:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <rst>
     83a:	8b e6       	ldi	r24, 0x6B	; 107
     83c:	93 e0       	ldi	r25, 0x03	; 3
     83e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN8PANSTAMP5resetEv>
     842:	0f 90       	pop	r0
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	08 95       	ret

0000084e <_Z11setSysStatehPh>:
     84e:	fb 01       	movw	r30, r22
     850:	80 81       	ld	r24, Z
     852:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <swap+0x5>
     856:	80 81       	ld	r24, Z
     858:	81 11       	cpse	r24, r1
     85a:	11 c0       	rjmp	.+34     	; 0x87e <_Z11setSysStatehPh+0x30>
     85c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <regTableSize>
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	28 f0       	brcs	.+10     	; 0x86e <_Z11setSysStatehPh+0x20>
     864:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <regTable+0x6>
     868:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <regTable+0x7>
     86c:	02 c0       	rjmp	.+4      	; 0x872 <_Z11setSysStatehPh+0x24>
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN8REGISTER14sendSwapStatusEv>
     876:	8b e6       	ldi	r24, 0x6B	; 107
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <_ZN8PANSTAMP5resetEv>
     87e:	08 95       	ret

00000880 <_Z17getBatteryVoltagev>:
     880:	cf 92       	push	r12
     882:	df 92       	push	r13
     884:	ef 92       	push	r14
     886:	ff 92       	push	r15
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	81 e1       	ldi	r24, 0x11	; 17
     890:	0e 94 ee 09 	call	0x13dc	; 0x13dc <pinMode>
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	87 e0       	ldi	r24, 0x07	; 7
     898:	0e 94 ee 09 	call	0x13dc	; 0x13dc <pinMode>
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	87 e0       	ldi	r24, 0x07	; 7
     8a0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	0e 94 a5 09 	call	0x134a	; 0x134a <analogReference>
     8aa:	ca e0       	ldi	r28, 0x0A	; 10
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
     8ae:	c1 2c       	mov	r12, r1
     8b0:	d1 2c       	mov	r13, r1
     8b2:	76 01       	movw	r14, r12
     8b4:	81 e1       	ldi	r24, 0x11	; 17
     8b6:	0e 94 a8 09 	call	0x1350	; 0x1350 <analogRead>
     8ba:	09 2e       	mov	r0, r25
     8bc:	00 0c       	add	r0, r0
     8be:	aa 0b       	sbc	r26, r26
     8c0:	bb 0b       	sbc	r27, r27
     8c2:	c8 0e       	add	r12, r24
     8c4:	d9 1e       	adc	r13, r25
     8c6:	ea 1e       	adc	r14, r26
     8c8:	fb 1e       	adc	r15, r27
     8ca:	62 e0       	ldi	r22, 0x02	; 2
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
     8d6:	21 97       	sbiw	r28, 0x01	; 1
     8d8:	69 f7       	brne	.-38     	; 0x8b4 <_Z17getBatteryVoltagev+0x34>
     8da:	62 e0       	ldi	r22, 0x02	; 2
     8dc:	87 e0       	ldi	r24, 0x07	; 7
     8de:	0e 94 ee 09 	call	0x13dc	; 0x13dc <pinMode>
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	81 e1       	ldi	r24, 0x11	; 17
     8e6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>
     8ea:	c7 01       	movw	r24, r14
     8ec:	b6 01       	movw	r22, r12
     8ee:	2a e0       	ldi	r18, 0x0A	; 10
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	0e 94 bd 1a 	call	0x357a	; 0x357a <__udivmodsi4>
     8fa:	68 ec       	ldi	r22, 0xC8	; 200
     8fc:	7d ea       	ldi	r23, 0xAD	; 173
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 99 1a 	call	0x3532	; 0x3532 <__mulsi3>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	38 e2       	ldi	r19, 0x28	; 40
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	0e 94 bd 1a 	call	0x357a	; 0x357a <__udivmodsi4>
     912:	c9 01       	movw	r24, r18
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	08 95       	ret

00000922 <_Z18updtBattVoltSupplyh>:
     922:	cf 93       	push	r28
     924:	c8 2f       	mov	r28, r24
     926:	0e 94 40 04 	call	0x880	; 0x880 <_Z17getBatteryVoltagev>
     92a:	ec 2f       	mov	r30, r28
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ec 5f       	subi	r30, 0xFC	; 252
     934:	fe 4f       	sbci	r31, 0xFE	; 254
     936:	a0 81       	ld	r26, Z
     938:	b1 81       	ldd	r27, Z+1	; 0x01
     93a:	15 96       	adiw	r26, 0x05	; 5
     93c:	0d 90       	ld	r0, X+
     93e:	bc 91       	ld	r27, X
     940:	a0 2d       	mov	r26, r0
     942:	9c 93       	st	X, r25
     944:	01 90       	ld	r0, Z+
     946:	f0 81       	ld	r31, Z
     948:	e0 2d       	mov	r30, r0
     94a:	05 80       	ldd	r0, Z+5	; 0x05
     94c:	f6 81       	ldd	r31, Z+6	; 0x06
     94e:	e0 2d       	mov	r30, r0
     950:	81 83       	std	Z+1, r24	; 0x01
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <_GLOBAL__sub_I_regProductCode>:
     * @param typ      Type of SWAP data (SWDTYPE)
     * @param eepromAddr address in EEPROM. Set to -1 if the register value has not to
     * be saved in EEPROM
     * @param bank sector in eeprom or flash
     */
    REGISTER(uint8_t *val, const uint8_t len, const void (*updateValH)(uint8_t rId), const void (*setValH)(uint8_t rId, uint8_t *v), const SWDTYPE typ=SWDTYPE_OTHER, const int eepromAddr=-1, const uint16_t bank=DEFAULT_NVOLAT_SECTION): id(regIndex++), value(val), length(len), updateValue(updateValH), setValue(setValH), type(typ), eepromAddress(eepromAddr), eepromBank(bank) {};
     956:	e4 e1       	ldi	r30, 0x14	; 20
     958:	f3 e0       	ldi	r31, 0x03	; 3
     95a:	11 82       	std	Z+1, r1	; 0x01
     95c:	10 82       	st	Z, r1
     95e:	13 82       	std	Z+3, r1	; 0x03
     960:	12 82       	std	Z+2, r1	; 0x02
     962:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <regIndex>
     966:	94 83       	std	Z+4, r25	; 0x04
     968:	24 e4       	ldi	r18, 0x44	; 68
     96a:	31 e0       	ldi	r19, 0x01	; 1
     96c:	36 83       	std	Z+6, r19	; 0x06
     96e:	25 83       	std	Z+5, r18	; 0x05
     970:	88 e0       	ldi	r24, 0x08	; 8
     972:	87 83       	std	Z+7, r24	; 0x07
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 87       	std	Z+8, r24	; 0x08
     978:	2f ef       	ldi	r18, 0xFF	; 255
     97a:	3f ef       	ldi	r19, 0xFF	; 255
     97c:	32 87       	std	Z+10, r19	; 0x0a
     97e:	21 87       	std	Z+9, r18	; 0x09
     980:	14 86       	std	Z+12, r1	; 0x0c
     982:	13 86       	std	Z+11, r1	; 0x0b
     984:	e7 e0       	ldi	r30, 0x07	; 7
     986:	f3 e0       	ldi	r31, 0x03	; 3
     988:	11 82       	std	Z+1, r1	; 0x01
     98a:	10 82       	st	Z, r1
     98c:	13 82       	std	Z+3, r1	; 0x03
     98e:	12 82       	std	Z+2, r1	; 0x02
     990:	41 e0       	ldi	r20, 0x01	; 1
     992:	49 0f       	add	r20, r25
     994:	44 83       	std	Z+4, r20	; 0x04
     996:	40 e4       	ldi	r20, 0x40	; 64
     998:	51 e0       	ldi	r21, 0x01	; 1
     99a:	56 83       	std	Z+6, r21	; 0x06
     99c:	45 83       	std	Z+5, r20	; 0x05
     99e:	44 e0       	ldi	r20, 0x04	; 4
     9a0:	47 83       	std	Z+7, r20	; 0x07
     9a2:	80 87       	std	Z+8, r24	; 0x08
     9a4:	32 87       	std	Z+10, r19	; 0x0a
     9a6:	21 87       	std	Z+9, r18	; 0x09
     9a8:	14 86       	std	Z+12, r1	; 0x0c
     9aa:	13 86       	std	Z+11, r1	; 0x0b
     9ac:	ea ef       	ldi	r30, 0xFA	; 250
     9ae:	f2 e0       	ldi	r31, 0x02	; 2
     9b0:	11 82       	std	Z+1, r1	; 0x01
     9b2:	10 82       	st	Z, r1
     9b4:	13 82       	std	Z+3, r1	; 0x03
     9b6:	12 82       	std	Z+2, r1	; 0x02
     9b8:	52 e0       	ldi	r21, 0x02	; 2
     9ba:	59 0f       	add	r21, r25
     9bc:	54 83       	std	Z+4, r21	; 0x04
     9be:	6c e3       	ldi	r22, 0x3C	; 60
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	76 83       	std	Z+6, r23	; 0x06
     9c4:	65 83       	std	Z+5, r22	; 0x05
     9c6:	47 83       	std	Z+7, r20	; 0x07
     9c8:	80 87       	std	Z+8, r24	; 0x08
     9ca:	32 87       	std	Z+10, r19	; 0x0a
     9cc:	21 87       	std	Z+9, r18	; 0x09
     9ce:	14 86       	std	Z+12, r1	; 0x0c
     9d0:	13 86       	std	Z+11, r1	; 0x0b
     9d2:	ed ee       	ldi	r30, 0xED	; 237
     9d4:	f2 e0       	ldi	r31, 0x02	; 2
     9d6:	11 82       	std	Z+1, r1	; 0x01
     9d8:	10 82       	st	Z, r1
     9da:	47 e2       	ldi	r20, 0x27	; 39
     9dc:	54 e0       	ldi	r21, 0x04	; 4
     9de:	53 83       	std	Z+3, r21	; 0x03
     9e0:	42 83       	std	Z+2, r20	; 0x02
     9e2:	43 e0       	ldi	r20, 0x03	; 3
     9e4:	49 0f       	add	r20, r25
     9e6:	44 83       	std	Z+4, r20	; 0x04
     9e8:	4e e7       	ldi	r20, 0x7E	; 126
     9ea:	53 e0       	ldi	r21, 0x03	; 3
     9ec:	56 83       	std	Z+6, r21	; 0x06
     9ee:	45 83       	std	Z+5, r20	; 0x05
     9f0:	87 83       	std	Z+7, r24	; 0x07
     9f2:	80 87       	std	Z+8, r24	; 0x08
     9f4:	32 87       	std	Z+10, r19	; 0x0a
     9f6:	21 87       	std	Z+9, r18	; 0x09
     9f8:	14 86       	std	Z+12, r1	; 0x0c
     9fa:	13 86       	std	Z+11, r1	; 0x0b
     9fc:	e0 ee       	ldi	r30, 0xE0	; 224
     9fe:	f2 e0       	ldi	r31, 0x02	; 2
     a00:	11 82       	std	Z+1, r1	; 0x01
     a02:	10 82       	st	Z, r1
     a04:	4d eb       	ldi	r20, 0xBD	; 189
     a06:	53 e0       	ldi	r21, 0x03	; 3
     a08:	53 83       	std	Z+3, r21	; 0x03
     a0a:	42 83       	std	Z+2, r20	; 0x02
     a0c:	44 e0       	ldi	r20, 0x04	; 4
     a0e:	49 0f       	add	r20, r25
     a10:	44 83       	std	Z+4, r20	; 0x04
     a12:	41 e7       	ldi	r20, 0x71	; 113
     a14:	53 e0       	ldi	r21, 0x03	; 3
     a16:	56 83       	std	Z+6, r21	; 0x06
     a18:	45 83       	std	Z+5, r20	; 0x05
     a1a:	87 83       	std	Z+7, r24	; 0x07
     a1c:	10 86       	std	Z+8, r1	; 0x08
     a1e:	12 86       	std	Z+10, r1	; 0x0a
     a20:	11 86       	std	Z+9, r1	; 0x09
     a22:	14 86       	std	Z+12, r1	; 0x0c
     a24:	13 86       	std	Z+11, r1	; 0x0b
     a26:	e3 ed       	ldi	r30, 0xD3	; 211
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	11 82       	std	Z+1, r1	; 0x01
     a2c:	10 82       	st	Z, r1
     a2e:	13 82       	std	Z+3, r1	; 0x03
     a30:	12 82       	std	Z+2, r1	; 0x02
     a32:	45 e0       	ldi	r20, 0x05	; 5
     a34:	49 0f       	add	r20, r25
     a36:	44 83       	std	Z+4, r20	; 0x04
     a38:	4c e7       	ldi	r20, 0x7C	; 124
     a3a:	53 e0       	ldi	r21, 0x03	; 3
     a3c:	56 83       	std	Z+6, r21	; 0x06
     a3e:	45 83       	std	Z+5, r20	; 0x05
     a40:	87 83       	std	Z+7, r24	; 0x07
     a42:	80 87       	std	Z+8, r24	; 0x08
     a44:	32 87       	std	Z+10, r19	; 0x0a
     a46:	21 87       	std	Z+9, r18	; 0x09
     a48:	14 86       	std	Z+12, r1	; 0x0c
     a4a:	13 86       	std	Z+11, r1	; 0x0b
     a4c:	e5 ec       	ldi	r30, 0xC5	; 197
     a4e:	f2 e0       	ldi	r31, 0x02	; 2
     a50:	11 82       	std	Z+1, r1	; 0x01
     a52:	10 82       	st	Z, r1
     a54:	13 82       	std	Z+3, r1	; 0x03
     a56:	12 82       	std	Z+2, r1	; 0x02
     a58:	46 e0       	ldi	r20, 0x06	; 6
     a5a:	49 0f       	add	r20, r25
     a5c:	44 83       	std	Z+4, r20	; 0x04
     a5e:	42 ed       	ldi	r20, 0xD2	; 210
     a60:	52 e0       	ldi	r21, 0x02	; 2
     a62:	56 83       	std	Z+6, r21	; 0x06
     a64:	45 83       	std	Z+5, r20	; 0x05
     a66:	87 83       	std	Z+7, r24	; 0x07
     a68:	80 87       	std	Z+8, r24	; 0x08
     a6a:	32 87       	std	Z+10, r19	; 0x0a
     a6c:	21 87       	std	Z+9, r18	; 0x09
     a6e:	14 86       	std	Z+12, r1	; 0x0c
     a70:	13 86       	std	Z+11, r1	; 0x0b
     a72:	e8 eb       	ldi	r30, 0xB8	; 184
     a74:	f2 e0       	ldi	r31, 0x02	; 2
     a76:	11 82       	std	Z+1, r1	; 0x01
     a78:	10 82       	st	Z, r1
     a7a:	13 82       	std	Z+3, r1	; 0x03
     a7c:	12 82       	std	Z+2, r1	; 0x02
     a7e:	47 e0       	ldi	r20, 0x07	; 7
     a80:	49 0f       	add	r20, r25
     a82:	44 83       	std	Z+4, r20	; 0x04
     a84:	4d e7       	ldi	r20, 0x7D	; 125
     a86:	53 e0       	ldi	r21, 0x03	; 3
     a88:	56 83       	std	Z+6, r21	; 0x06
     a8a:	45 83       	std	Z+5, r20	; 0x05
     a8c:	87 83       	std	Z+7, r24	; 0x07
     a8e:	80 87       	std	Z+8, r24	; 0x08
     a90:	32 87       	std	Z+10, r19	; 0x0a
     a92:	21 87       	std	Z+9, r18	; 0x09
     a94:	14 86       	std	Z+12, r1	; 0x0c
     a96:	13 86       	std	Z+11, r1	; 0x0b
     a98:	eb ea       	ldi	r30, 0xAB	; 171
     a9a:	f2 e0       	ldi	r31, 0x02	; 2
     a9c:	11 82       	std	Z+1, r1	; 0x01
     a9e:	10 82       	st	Z, r1
     aa0:	4f e2       	ldi	r20, 0x2F	; 47
     aa2:	52 e0       	ldi	r21, 0x02	; 2
     aa4:	53 83       	std	Z+3, r21	; 0x03
     aa6:	42 83       	std	Z+2, r20	; 0x02
     aa8:	48 e0       	ldi	r20, 0x08	; 8
     aaa:	49 0f       	add	r20, r25
     aac:	44 83       	std	Z+4, r20	; 0x04
     aae:	42 e7       	ldi	r20, 0x72	; 114
     ab0:	53 e0       	ldi	r21, 0x03	; 3
     ab2:	56 83       	std	Z+6, r21	; 0x06
     ab4:	45 83       	std	Z+5, r20	; 0x05
     ab6:	42 e0       	ldi	r20, 0x02	; 2
     ab8:	47 83       	std	Z+7, r20	; 0x07
     aba:	80 87       	std	Z+8, r24	; 0x08
     abc:	62 e0       	ldi	r22, 0x02	; 2
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	72 87       	std	Z+10, r23	; 0x0a
     ac2:	61 87       	std	Z+9, r22	; 0x09
     ac4:	14 86       	std	Z+12, r1	; 0x0c
     ac6:	13 86       	std	Z+11, r1	; 0x0b
     ac8:	ee e9       	ldi	r30, 0x9E	; 158
     aca:	f2 e0       	ldi	r31, 0x02	; 2
     acc:	11 82       	std	Z+1, r1	; 0x01
     ace:	10 82       	st	Z, r1
     ad0:	6f ee       	ldi	r22, 0xEF	; 239
     ad2:	71 e0       	ldi	r23, 0x01	; 1
     ad4:	73 83       	std	Z+3, r23	; 0x03
     ad6:	62 83       	std	Z+2, r22	; 0x02
     ad8:	59 e0       	ldi	r21, 0x09	; 9
     ada:	59 0f       	add	r21, r25
     adc:	54 83       	std	Z+4, r21	; 0x04
     ade:	6b e7       	ldi	r22, 0x7B	; 123
     ae0:	73 e0       	ldi	r23, 0x03	; 3
     ae2:	76 83       	std	Z+6, r23	; 0x06
     ae4:	65 83       	std	Z+5, r22	; 0x05
     ae6:	87 83       	std	Z+7, r24	; 0x07
     ae8:	10 86       	std	Z+8, r1	; 0x08
     aea:	65 e0       	ldi	r22, 0x05	; 5
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	72 87       	std	Z+10, r23	; 0x0a
     af0:	61 87       	std	Z+9, r22	; 0x09
     af2:	14 86       	std	Z+12, r1	; 0x0c
     af4:	13 86       	std	Z+11, r1	; 0x0b
     af6:	e1 e9       	ldi	r30, 0x91	; 145
     af8:	f2 e0       	ldi	r31, 0x02	; 2
     afa:	11 82       	std	Z+1, r1	; 0x01
     afc:	10 82       	st	Z, r1
     afe:	67 ee       	ldi	r22, 0xE7	; 231
     b00:	71 e0       	ldi	r23, 0x01	; 1
     b02:	73 83       	std	Z+3, r23	; 0x03
     b04:	62 83       	std	Z+2, r22	; 0x02
     b06:	5a e0       	ldi	r21, 0x0A	; 10
     b08:	59 0f       	add	r21, r25
     b0a:	54 83       	std	Z+4, r21	; 0x04
     b0c:	6f e7       	ldi	r22, 0x7F	; 127
     b0e:	73 e0       	ldi	r23, 0x03	; 3
     b10:	76 83       	std	Z+6, r23	; 0x06
     b12:	65 83       	std	Z+5, r22	; 0x05
     b14:	47 83       	std	Z+7, r20	; 0x07
     b16:	10 86       	std	Z+8, r1	; 0x08
     b18:	66 e0       	ldi	r22, 0x06	; 6
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	72 87       	std	Z+10, r23	; 0x0a
     b1e:	61 87       	std	Z+9, r22	; 0x09
     b20:	14 86       	std	Z+12, r1	; 0x0c
     b22:	13 86       	std	Z+11, r1	; 0x0b
     b24:	e2 e8       	ldi	r30, 0x82	; 130
     b26:	f2 e0       	ldi	r31, 0x02	; 2
     b28:	6c e6       	ldi	r22, 0x6C	; 108
     b2a:	72 e0       	ldi	r23, 0x02	; 2
     b2c:	71 83       	std	Z+1, r23	; 0x01
     b2e:	60 83       	st	Z, r22
     b30:	13 82       	std	Z+3, r1	; 0x03
     b32:	12 82       	std	Z+2, r1	; 0x02
     b34:	5c e0       	ldi	r21, 0x0C	; 12
     b36:	59 0f       	add	r21, r25
     b38:	6b e0       	ldi	r22, 0x0B	; 11
     b3a:	69 0f       	add	r22, r25
     b3c:	64 83       	std	Z+4, r22	; 0x04
     b3e:	6f e8       	ldi	r22, 0x8F	; 143
     b40:	72 e0       	ldi	r23, 0x02	; 2
     b42:	76 83       	std	Z+6, r23	; 0x06
     b44:	65 83       	std	Z+5, r22	; 0x05
     b46:	47 83       	std	Z+7, r20	; 0x07
     b48:	80 87       	std	Z+8, r24	; 0x08
     b4a:	32 87       	std	Z+10, r19	; 0x0a
     b4c:	21 87       	std	Z+9, r18	; 0x09
     b4e:	14 86       	std	Z+12, r1	; 0x0c
     b50:	13 86       	std	Z+11, r1	; 0x0b
     b52:	e3 e7       	ldi	r30, 0x73	; 115
     b54:	f2 e0       	ldi	r31, 0x02	; 2
     b56:	61 e9       	ldi	r22, 0x91	; 145
     b58:	74 e0       	ldi	r23, 0x04	; 4
     b5a:	71 83       	std	Z+1, r23	; 0x01
     b5c:	60 83       	st	Z, r22
     b5e:	13 82       	std	Z+3, r1	; 0x03
     b60:	12 82       	std	Z+2, r1	; 0x02
     b62:	54 83       	std	Z+4, r21	; 0x04
     b64:	60 e8       	ldi	r22, 0x80	; 128
     b66:	72 e0       	ldi	r23, 0x02	; 2
     b68:	76 83       	std	Z+6, r23	; 0x06
     b6a:	65 83       	std	Z+5, r22	; 0x05
     b6c:	47 83       	std	Z+7, r20	; 0x07
     b6e:	80 87       	std	Z+8, r24	; 0x08
     b70:	32 87       	std	Z+10, r19	; 0x0a
     b72:	21 87       	std	Z+9, r18	; 0x09
     b74:	14 86       	std	Z+12, r1	; 0x0c
     b76:	13 86       	std	Z+11, r1	; 0x0b
     b78:	e6 e6       	ldi	r30, 0x66	; 102
     b7a:	f2 e0       	ldi	r31, 0x02	; 2
     b7c:	11 82       	std	Z+1, r1	; 0x01
     b7e:	10 82       	st	Z, r1
     b80:	66 ef       	ldi	r22, 0xF6	; 246
     b82:	73 e0       	ldi	r23, 0x03	; 3
     b84:	73 83       	std	Z+3, r23	; 0x03
     b86:	62 83       	std	Z+2, r22	; 0x02
     b88:	5d e0       	ldi	r21, 0x0D	; 13
     b8a:	59 0f       	add	r21, r25
     b8c:	54 83       	std	Z+4, r21	; 0x04
     b8e:	60 ea       	ldi	r22, 0xA0	; 160
     b90:	71 e0       	ldi	r23, 0x01	; 1
     b92:	76 83       	std	Z+6, r23	; 0x06
     b94:	65 83       	std	Z+5, r22	; 0x05
     b96:	87 83       	std	Z+7, r24	; 0x07
     b98:	80 87       	std	Z+8, r24	; 0x08
     b9a:	32 87       	std	Z+10, r19	; 0x0a
     b9c:	21 87       	std	Z+9, r18	; 0x09
     b9e:	14 86       	std	Z+12, r1	; 0x0c
     ba0:	13 86       	std	Z+11, r1	; 0x0b
     ba2:	e9 e5       	ldi	r30, 0x59	; 89
     ba4:	f2 e0       	ldi	r31, 0x02	; 2
     ba6:	11 82       	std	Z+1, r1	; 0x01
     ba8:	10 82       	st	Z, r1
     baa:	62 ee       	ldi	r22, 0xE2	; 226
     bac:	71 e0       	ldi	r23, 0x01	; 1
     bae:	73 83       	std	Z+3, r23	; 0x03
     bb0:	62 83       	std	Z+2, r22	; 0x02
     bb2:	5e e0       	ldi	r21, 0x0E	; 14
     bb4:	59 0f       	add	r21, r25
     bb6:	54 83       	std	Z+4, r21	; 0x04
     bb8:	62 e0       	ldi	r22, 0x02	; 2
     bba:	71 e0       	ldi	r23, 0x01	; 1
     bbc:	76 83       	std	Z+6, r23	; 0x06
     bbe:	65 83       	std	Z+5, r22	; 0x05
     bc0:	87 83       	std	Z+7, r24	; 0x07
     bc2:	10 86       	std	Z+8, r1	; 0x08
     bc4:	62 e2       	ldi	r22, 0x22	; 34
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	72 87       	std	Z+10, r23	; 0x0a
     bca:	61 87       	std	Z+9, r22	; 0x09
     bcc:	14 86       	std	Z+12, r1	; 0x0c
     bce:	13 86       	std	Z+11, r1	; 0x0b
     bd0:	ec e4       	ldi	r30, 0x4C	; 76
     bd2:	f2 e0       	ldi	r31, 0x02	; 2
     bd4:	11 82       	std	Z+1, r1	; 0x01
     bd6:	10 82       	st	Z, r1
     bd8:	62 e0       	ldi	r22, 0x02	; 2
     bda:	74 e0       	ldi	r23, 0x04	; 4
     bdc:	73 83       	std	Z+3, r23	; 0x03
     bde:	62 83       	std	Z+2, r22	; 0x02
     be0:	5f e0       	ldi	r21, 0x0F	; 15
     be2:	59 0f       	add	r21, r25
     be4:	54 83       	std	Z+4, r21	; 0x04
     be6:	6f e9       	ldi	r22, 0x9F	; 159
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	76 83       	std	Z+6, r23	; 0x06
     bec:	65 83       	std	Z+5, r22	; 0x05
     bee:	87 83       	std	Z+7, r24	; 0x07
     bf0:	80 87       	std	Z+8, r24	; 0x08
     bf2:	32 87       	std	Z+10, r19	; 0x0a
     bf4:	21 87       	std	Z+9, r18	; 0x09
     bf6:	14 86       	std	Z+12, r1	; 0x0c
     bf8:	13 86       	std	Z+11, r1	; 0x0b
     bfa:	ed e3       	ldi	r30, 0x3D	; 61
     bfc:	f2 e0       	ldi	r31, 0x02	; 2
     bfe:	68 e8       	ldi	r22, 0x88	; 136
     c00:	72 e0       	ldi	r23, 0x02	; 2
     c02:	71 83       	std	Z+1, r23	; 0x01
     c04:	60 83       	st	Z, r22
     c06:	13 82       	std	Z+3, r1	; 0x03
     c08:	12 82       	std	Z+2, r1	; 0x02
     c0a:	50 e1       	ldi	r21, 0x10	; 16
     c0c:	59 0f       	add	r21, r25
     c0e:	54 83       	std	Z+4, r21	; 0x04
     c10:	6a e4       	ldi	r22, 0x4A	; 74
     c12:	72 e0       	ldi	r23, 0x02	; 2
     c14:	76 83       	std	Z+6, r23	; 0x06
     c16:	65 83       	std	Z+5, r22	; 0x05
     c18:	47 83       	std	Z+7, r20	; 0x07
     c1a:	80 87       	std	Z+8, r24	; 0x08
     c1c:	32 87       	std	Z+10, r19	; 0x0a
     c1e:	21 87       	std	Z+9, r18	; 0x09
     c20:	14 86       	std	Z+12, r1	; 0x0c
     c22:	13 86       	std	Z+11, r1	; 0x0b
     c24:	ee e2       	ldi	r30, 0x2E	; 46
     c26:	f2 e0       	ldi	r31, 0x02	; 2
     c28:	64 ea       	ldi	r22, 0xA4	; 164
     c2a:	72 e0       	ldi	r23, 0x02	; 2
     c2c:	71 83       	std	Z+1, r23	; 0x01
     c2e:	60 83       	st	Z, r22
     c30:	13 82       	std	Z+3, r1	; 0x03
     c32:	12 82       	std	Z+2, r1	; 0x02
     c34:	51 e1       	ldi	r21, 0x11	; 17
     c36:	59 0f       	add	r21, r25
     c38:	54 83       	std	Z+4, r21	; 0x04
     c3a:	6b e3       	ldi	r22, 0x3B	; 59
     c3c:	72 e0       	ldi	r23, 0x02	; 2
     c3e:	76 83       	std	Z+6, r23	; 0x06
     c40:	65 83       	std	Z+5, r22	; 0x05
     c42:	47 83       	std	Z+7, r20	; 0x07
     c44:	80 87       	std	Z+8, r24	; 0x08
     c46:	32 87       	std	Z+10, r19	; 0x0a
     c48:	21 87       	std	Z+9, r18	; 0x09
     c4a:	14 86       	std	Z+12, r1	; 0x0c
     c4c:	13 86       	std	Z+11, r1	; 0x0b
     c4e:	e0 e2       	ldi	r30, 0x20	; 32
     c50:	f2 e0       	ldi	r31, 0x02	; 2
     c52:	69 ed       	ldi	r22, 0xD9	; 217
     c54:	72 e0       	ldi	r23, 0x02	; 2
     c56:	71 83       	std	Z+1, r23	; 0x01
     c58:	60 83       	st	Z, r22
     c5a:	13 82       	std	Z+3, r1	; 0x03
     c5c:	12 82       	std	Z+2, r1	; 0x02
     c5e:	52 e1       	ldi	r21, 0x12	; 18
     c60:	59 0f       	add	r21, r25
     c62:	54 83       	std	Z+4, r21	; 0x04
     c64:	6d e2       	ldi	r22, 0x2D	; 45
     c66:	72 e0       	ldi	r23, 0x02	; 2
     c68:	76 83       	std	Z+6, r23	; 0x06
     c6a:	65 83       	std	Z+5, r22	; 0x05
     c6c:	87 83       	std	Z+7, r24	; 0x07
     c6e:	80 87       	std	Z+8, r24	; 0x08
     c70:	32 87       	std	Z+10, r19	; 0x0a
     c72:	21 87       	std	Z+9, r18	; 0x09
     c74:	14 86       	std	Z+12, r1	; 0x0c
     c76:	13 86       	std	Z+11, r1	; 0x0b
     c78:	e3 e1       	ldi	r30, 0x13	; 19
     c7a:	f2 e0       	ldi	r31, 0x02	; 2
     c7c:	65 ef       	ldi	r22, 0xF5	; 245
     c7e:	72 e0       	ldi	r23, 0x02	; 2
     c80:	71 83       	std	Z+1, r23	; 0x01
     c82:	60 83       	st	Z, r22
     c84:	13 82       	std	Z+3, r1	; 0x03
     c86:	12 82       	std	Z+2, r1	; 0x02
     c88:	53 e1       	ldi	r21, 0x13	; 19
     c8a:	59 0f       	add	r21, r25
     c8c:	54 83       	std	Z+4, r21	; 0x04
     c8e:	6c e9       	ldi	r22, 0x9C	; 156
     c90:	71 e0       	ldi	r23, 0x01	; 1
     c92:	76 83       	std	Z+6, r23	; 0x06
     c94:	65 83       	std	Z+5, r22	; 0x05
     c96:	87 83       	std	Z+7, r24	; 0x07
     c98:	80 87       	std	Z+8, r24	; 0x08
     c9a:	32 87       	std	Z+10, r19	; 0x0a
     c9c:	21 87       	std	Z+9, r18	; 0x09
     c9e:	14 86       	std	Z+12, r1	; 0x0c
     ca0:	13 86       	std	Z+11, r1	; 0x0b
     ca2:	e4 e0       	ldi	r30, 0x04	; 4
     ca4:	f2 e0       	ldi	r31, 0x02	; 2
     ca6:	6c ef       	ldi	r22, 0xFC	; 252
     ca8:	72 e0       	ldi	r23, 0x02	; 2
     caa:	71 83       	std	Z+1, r23	; 0x01
     cac:	60 83       	st	Z, r22
     cae:	13 82       	std	Z+3, r1	; 0x03
     cb0:	12 82       	std	Z+2, r1	; 0x02
     cb2:	54 e1       	ldi	r21, 0x14	; 20
     cb4:	59 0f       	add	r21, r25
     cb6:	54 83       	std	Z+4, r21	; 0x04
     cb8:	61 e1       	ldi	r22, 0x11	; 17
     cba:	72 e0       	ldi	r23, 0x02	; 2
     cbc:	76 83       	std	Z+6, r23	; 0x06
     cbe:	65 83       	std	Z+5, r22	; 0x05
     cc0:	47 83       	std	Z+7, r20	; 0x07
     cc2:	80 87       	std	Z+8, r24	; 0x08
     cc4:	32 87       	std	Z+10, r19	; 0x0a
     cc6:	21 87       	std	Z+9, r18	; 0x09
     cc8:	14 86       	std	Z+12, r1	; 0x0c
     cca:	13 86       	std	Z+11, r1	; 0x0b
     ccc:	e5 ef       	ldi	r30, 0xF5	; 245
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	68 e1       	ldi	r22, 0x18	; 24
     cd2:	73 e0       	ldi	r23, 0x03	; 3
     cd4:	71 83       	std	Z+1, r23	; 0x01
     cd6:	60 83       	st	Z, r22
     cd8:	64 e3       	ldi	r22, 0x34	; 52
     cda:	73 e0       	ldi	r23, 0x03	; 3
     cdc:	73 83       	std	Z+3, r23	; 0x03
     cde:	62 83       	std	Z+2, r22	; 0x02
     ce0:	55 e1       	ldi	r21, 0x15	; 21
     ce2:	59 0f       	add	r21, r25
     ce4:	54 83       	std	Z+4, r21	; 0x04
     ce6:	62 e0       	ldi	r22, 0x02	; 2
     ce8:	72 e0       	ldi	r23, 0x02	; 2
     cea:	76 83       	std	Z+6, r23	; 0x06
     cec:	65 83       	std	Z+5, r22	; 0x05
     cee:	47 83       	std	Z+7, r20	; 0x07
     cf0:	80 87       	std	Z+8, r24	; 0x08
     cf2:	32 87       	std	Z+10, r19	; 0x0a
     cf4:	21 87       	std	Z+9, r18	; 0x09
     cf6:	14 86       	std	Z+12, r1	; 0x0c
     cf8:	13 86       	std	Z+11, r1	; 0x0b
     cfa:	e6 ee       	ldi	r30, 0xE6	; 230
     cfc:	f1 e0       	ldi	r31, 0x01	; 1
     cfe:	61 e4       	ldi	r22, 0x41	; 65
     d00:	73 e0       	ldi	r23, 0x03	; 3
     d02:	71 83       	std	Z+1, r23	; 0x01
     d04:	60 83       	st	Z, r22
     d06:	6d e5       	ldi	r22, 0x5D	; 93
     d08:	73 e0       	ldi	r23, 0x03	; 3
     d0a:	73 83       	std	Z+3, r23	; 0x03
     d0c:	62 83       	std	Z+2, r22	; 0x02
     d0e:	56 e1       	ldi	r21, 0x16	; 22
     d10:	59 0f       	add	r21, r25
     d12:	54 83       	std	Z+4, r21	; 0x04
     d14:	63 ef       	ldi	r22, 0xF3	; 243
     d16:	71 e0       	ldi	r23, 0x01	; 1
     d18:	76 83       	std	Z+6, r23	; 0x06
     d1a:	65 83       	std	Z+5, r22	; 0x05
     d1c:	47 83       	std	Z+7, r20	; 0x07
     d1e:	80 87       	std	Z+8, r24	; 0x08
     d20:	32 87       	std	Z+10, r19	; 0x0a
     d22:	21 87       	std	Z+9, r18	; 0x09
     d24:	14 86       	std	Z+12, r1	; 0x0c
     d26:	13 86       	std	Z+11, r1	; 0x0b
     d28:	e7 ed       	ldi	r30, 0xD7	; 215
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	6a e6       	ldi	r22, 0x6A	; 106
     d2e:	73 e0       	ldi	r23, 0x03	; 3
     d30:	71 83       	std	Z+1, r23	; 0x01
     d32:	60 83       	st	Z, r22
     d34:	66 e8       	ldi	r22, 0x86	; 134
     d36:	73 e0       	ldi	r23, 0x03	; 3
     d38:	73 83       	std	Z+3, r23	; 0x03
     d3a:	62 83       	std	Z+2, r22	; 0x02
     d3c:	57 e1       	ldi	r21, 0x17	; 23
     d3e:	59 0f       	add	r21, r25
     d40:	54 83       	std	Z+4, r21	; 0x04
     d42:	64 ee       	ldi	r22, 0xE4	; 228
     d44:	71 e0       	ldi	r23, 0x01	; 1
     d46:	76 83       	std	Z+6, r23	; 0x06
     d48:	65 83       	std	Z+5, r22	; 0x05
     d4a:	47 83       	std	Z+7, r20	; 0x07
     d4c:	80 87       	std	Z+8, r24	; 0x08
     d4e:	32 87       	std	Z+10, r19	; 0x0a
     d50:	21 87       	std	Z+9, r18	; 0x09
     d52:	14 86       	std	Z+12, r1	; 0x0c
     d54:	13 86       	std	Z+11, r1	; 0x0b
     d56:	e9 ec       	ldi	r30, 0xC9	; 201
     d58:	f1 e0       	ldi	r31, 0x01	; 1
     d5a:	63 e9       	ldi	r22, 0x93	; 147
     d5c:	73 e0       	ldi	r23, 0x03	; 3
     d5e:	71 83       	std	Z+1, r23	; 0x01
     d60:	60 83       	st	Z, r22
     d62:	13 82       	std	Z+3, r1	; 0x03
     d64:	12 82       	std	Z+2, r1	; 0x02
     d66:	58 e1       	ldi	r21, 0x18	; 24
     d68:	59 0f       	add	r21, r25
     d6a:	54 83       	std	Z+4, r21	; 0x04
     d6c:	66 ed       	ldi	r22, 0xD6	; 214
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	76 83       	std	Z+6, r23	; 0x06
     d72:	65 83       	std	Z+5, r22	; 0x05
     d74:	87 83       	std	Z+7, r24	; 0x07
     d76:	80 87       	std	Z+8, r24	; 0x08
     d78:	32 87       	std	Z+10, r19	; 0x0a
     d7a:	21 87       	std	Z+9, r18	; 0x09
     d7c:	14 86       	std	Z+12, r1	; 0x0c
     d7e:	13 86       	std	Z+11, r1	; 0x0b
     d80:	eb eb       	ldi	r30, 0xBB	; 187
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	68 ea       	ldi	r22, 0xA8	; 168
     d86:	73 e0       	ldi	r23, 0x03	; 3
     d88:	71 83       	std	Z+1, r23	; 0x01
     d8a:	60 83       	st	Z, r22
     d8c:	13 82       	std	Z+3, r1	; 0x03
     d8e:	12 82       	std	Z+2, r1	; 0x02
     d90:	59 e1       	ldi	r21, 0x19	; 25
     d92:	59 0f       	add	r21, r25
     d94:	54 83       	std	Z+4, r21	; 0x04
     d96:	68 ec       	ldi	r22, 0xC8	; 200
     d98:	71 e0       	ldi	r23, 0x01	; 1
     d9a:	76 83       	std	Z+6, r23	; 0x06
     d9c:	65 83       	std	Z+5, r22	; 0x05
     d9e:	87 83       	std	Z+7, r24	; 0x07
     da0:	80 87       	std	Z+8, r24	; 0x08
     da2:	32 87       	std	Z+10, r19	; 0x0a
     da4:	21 87       	std	Z+9, r18	; 0x09
     da6:	14 86       	std	Z+12, r1	; 0x0c
     da8:	13 86       	std	Z+11, r1	; 0x0b
     daa:	ee ea       	ldi	r30, 0xAE	; 174
     dac:	f1 e0       	ldi	r31, 0x01	; 1
     dae:	11 82       	std	Z+1, r1	; 0x01
     db0:	10 82       	st	Z, r1
     db2:	6b ee       	ldi	r22, 0xEB	; 235
     db4:	71 e0       	ldi	r23, 0x01	; 1
     db6:	73 83       	std	Z+3, r23	; 0x03
     db8:	62 83       	std	Z+2, r22	; 0x02
     dba:	5a e1       	ldi	r21, 0x1A	; 26
     dbc:	59 0f       	add	r21, r25
     dbe:	54 83       	std	Z+4, r21	; 0x04
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	76 83       	std	Z+6, r23	; 0x06
     dc6:	65 83       	std	Z+5, r22	; 0x05
     dc8:	47 83       	std	Z+7, r20	; 0x07
     dca:	10 86       	std	Z+8, r1	; 0x08
     dcc:	40 e2       	ldi	r20, 0x20	; 32
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	52 87       	std	Z+10, r21	; 0x0a
     dd2:	41 87       	std	Z+9, r20	; 0x09
     dd4:	14 86       	std	Z+12, r1	; 0x0c
     dd6:	13 86       	std	Z+11, r1	; 0x0b
     dd8:	e1 ea       	ldi	r30, 0xA1	; 161
     dda:	f1 e0       	ldi	r31, 0x01	; 1
     ddc:	11 82       	std	Z+1, r1	; 0x01
     dde:	10 82       	st	Z, r1
     de0:	13 82       	std	Z+3, r1	; 0x03
     de2:	12 82       	std	Z+2, r1	; 0x02
     de4:	4c e1       	ldi	r20, 0x1C	; 28
     de6:	49 0f       	add	r20, r25
     de8:	40 93 78 03 	sts	0x0378, r20	; 0x800378 <regIndex>
     dec:	95 5e       	subi	r25, 0xE5	; 229
     dee:	94 83       	std	Z+4, r25	; 0x04
     df0:	44 e9       	ldi	r20, 0x94	; 148
     df2:	51 e0       	ldi	r21, 0x01	; 1
     df4:	56 83       	std	Z+6, r21	; 0x06
     df6:	45 83       	std	Z+5, r20	; 0x05
     df8:	87 83       	std	Z+7, r24	; 0x07
     dfa:	80 87       	std	Z+8, r24	; 0x08
     dfc:	32 87       	std	Z+10, r19	; 0x0a
     dfe:	21 87       	std	Z+9, r18	; 0x09
     e00:	14 86       	std	Z+12, r1	; 0x0c
     e02:	13 86       	std	Z+11, r1	; 0x0b
     e04:	08 95       	ret

00000e06 <__subsf3>:
     e06:	50 58       	subi	r21, 0x80	; 128

00000e08 <__addsf3>:
     e08:	bb 27       	eor	r27, r27
     e0a:	aa 27       	eor	r26, r26
     e0c:	0e 94 1b 07 	call	0xe36	; 0xe36 <__addsf3x>
     e10:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_round>
     e14:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_pscA>
     e18:	38 f0       	brcs	.+14     	; 0xe28 <__addsf3+0x20>
     e1a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__fp_pscB>
     e1e:	20 f0       	brcs	.+8      	; 0xe28 <__addsf3+0x20>
     e20:	39 f4       	brne	.+14     	; 0xe30 <__addsf3+0x28>
     e22:	9f 3f       	cpi	r25, 0xFF	; 255
     e24:	19 f4       	brne	.+6      	; 0xe2c <__addsf3+0x24>
     e26:	26 f4       	brtc	.+8      	; 0xe30 <__addsf3+0x28>
     e28:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_nan>
     e2c:	0e f4       	brtc	.+2      	; 0xe30 <__addsf3+0x28>
     e2e:	e0 95       	com	r30
     e30:	e7 fb       	bst	r30, 7
     e32:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_inf>

00000e36 <__addsf3x>:
     e36:	e9 2f       	mov	r30, r25
     e38:	0e 94 04 08 	call	0x1008	; 0x1008 <__fp_split3>
     e3c:	58 f3       	brcs	.-42     	; 0xe14 <__addsf3+0xc>
     e3e:	ba 17       	cp	r27, r26
     e40:	62 07       	cpc	r22, r18
     e42:	73 07       	cpc	r23, r19
     e44:	84 07       	cpc	r24, r20
     e46:	95 07       	cpc	r25, r21
     e48:	20 f0       	brcs	.+8      	; 0xe52 <__addsf3x+0x1c>
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__addsf3x+0x34>
     e4c:	a6 f5       	brtc	.+104    	; 0xeb6 <__addsf3x+0x80>
     e4e:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_zero>
     e52:	0e f4       	brtc	.+2      	; 0xe56 <__addsf3x+0x20>
     e54:	e0 95       	com	r30
     e56:	0b 2e       	mov	r0, r27
     e58:	ba 2f       	mov	r27, r26
     e5a:	a0 2d       	mov	r26, r0
     e5c:	0b 01       	movw	r0, r22
     e5e:	b9 01       	movw	r22, r18
     e60:	90 01       	movw	r18, r0
     e62:	0c 01       	movw	r0, r24
     e64:	ca 01       	movw	r24, r20
     e66:	a0 01       	movw	r20, r0
     e68:	11 24       	eor	r1, r1
     e6a:	ff 27       	eor	r31, r31
     e6c:	59 1b       	sub	r21, r25
     e6e:	99 f0       	breq	.+38     	; 0xe96 <__addsf3x+0x60>
     e70:	59 3f       	cpi	r21, 0xF9	; 249
     e72:	50 f4       	brcc	.+20     	; 0xe88 <__addsf3x+0x52>
     e74:	50 3e       	cpi	r21, 0xE0	; 224
     e76:	68 f1       	brcs	.+90     	; 0xed2 <__addsf3x+0x9c>
     e78:	1a 16       	cp	r1, r26
     e7a:	f0 40       	sbci	r31, 0x00	; 0
     e7c:	a2 2f       	mov	r26, r18
     e7e:	23 2f       	mov	r18, r19
     e80:	34 2f       	mov	r19, r20
     e82:	44 27       	eor	r20, r20
     e84:	58 5f       	subi	r21, 0xF8	; 248
     e86:	f3 cf       	rjmp	.-26     	; 0xe6e <__addsf3x+0x38>
     e88:	46 95       	lsr	r20
     e8a:	37 95       	ror	r19
     e8c:	27 95       	ror	r18
     e8e:	a7 95       	ror	r26
     e90:	f0 40       	sbci	r31, 0x00	; 0
     e92:	53 95       	inc	r21
     e94:	c9 f7       	brne	.-14     	; 0xe88 <__addsf3x+0x52>
     e96:	7e f4       	brtc	.+30     	; 0xeb6 <__addsf3x+0x80>
     e98:	1f 16       	cp	r1, r31
     e9a:	ba 0b       	sbc	r27, r26
     e9c:	62 0b       	sbc	r22, r18
     e9e:	73 0b       	sbc	r23, r19
     ea0:	84 0b       	sbc	r24, r20
     ea2:	ba f0       	brmi	.+46     	; 0xed2 <__addsf3x+0x9c>
     ea4:	91 50       	subi	r25, 0x01	; 1
     ea6:	a1 f0       	breq	.+40     	; 0xed0 <__addsf3x+0x9a>
     ea8:	ff 0f       	add	r31, r31
     eaa:	bb 1f       	adc	r27, r27
     eac:	66 1f       	adc	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	88 1f       	adc	r24, r24
     eb2:	c2 f7       	brpl	.-16     	; 0xea4 <__addsf3x+0x6e>
     eb4:	0e c0       	rjmp	.+28     	; 0xed2 <__addsf3x+0x9c>
     eb6:	ba 0f       	add	r27, r26
     eb8:	62 1f       	adc	r22, r18
     eba:	73 1f       	adc	r23, r19
     ebc:	84 1f       	adc	r24, r20
     ebe:	48 f4       	brcc	.+18     	; 0xed2 <__addsf3x+0x9c>
     ec0:	87 95       	ror	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b7 95       	ror	r27
     ec8:	f7 95       	ror	r31
     eca:	9e 3f       	cpi	r25, 0xFE	; 254
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <__addsf3x+0x9a>
     ece:	b0 cf       	rjmp	.-160    	; 0xe30 <__addsf3+0x28>
     ed0:	93 95       	inc	r25
     ed2:	88 0f       	add	r24, r24
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <__addsf3x+0xa2>
     ed6:	99 27       	eor	r25, r25
     ed8:	ee 0f       	add	r30, r30
     eda:	97 95       	ror	r25
     edc:	87 95       	ror	r24
     ede:	08 95       	ret

00000ee0 <__fixunssfsi>:
     ee0:	0e 94 0c 08 	call	0x1018	; 0x1018 <__fp_splitA>
     ee4:	88 f0       	brcs	.+34     	; 0xf08 <__fixunssfsi+0x28>
     ee6:	9f 57       	subi	r25, 0x7F	; 127
     ee8:	98 f0       	brcs	.+38     	; 0xf10 <__fixunssfsi+0x30>
     eea:	b9 2f       	mov	r27, r25
     eec:	99 27       	eor	r25, r25
     eee:	b7 51       	subi	r27, 0x17	; 23
     ef0:	b0 f0       	brcs	.+44     	; 0xf1e <__fixunssfsi+0x3e>
     ef2:	e1 f0       	breq	.+56     	; 0xf2c <__fixunssfsi+0x4c>
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	1a f0       	brmi	.+6      	; 0xf04 <__fixunssfsi+0x24>
     efe:	ba 95       	dec	r27
     f00:	c9 f7       	brne	.-14     	; 0xef4 <__fixunssfsi+0x14>
     f02:	14 c0       	rjmp	.+40     	; 0xf2c <__fixunssfsi+0x4c>
     f04:	b1 30       	cpi	r27, 0x01	; 1
     f06:	91 f0       	breq	.+36     	; 0xf2c <__fixunssfsi+0x4c>
     f08:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_zero>
     f0c:	b1 e0       	ldi	r27, 0x01	; 1
     f0e:	08 95       	ret
     f10:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_zero>
     f14:	67 2f       	mov	r22, r23
     f16:	78 2f       	mov	r23, r24
     f18:	88 27       	eor	r24, r24
     f1a:	b8 5f       	subi	r27, 0xF8	; 248
     f1c:	39 f0       	breq	.+14     	; 0xf2c <__fixunssfsi+0x4c>
     f1e:	b9 3f       	cpi	r27, 0xF9	; 249
     f20:	cc f3       	brlt	.-14     	; 0xf14 <__fixunssfsi+0x34>
     f22:	86 95       	lsr	r24
     f24:	77 95       	ror	r23
     f26:	67 95       	ror	r22
     f28:	b3 95       	inc	r27
     f2a:	d9 f7       	brne	.-10     	; 0xf22 <__fixunssfsi+0x42>
     f2c:	3e f4       	brtc	.+14     	; 0xf3c <__fixunssfsi+0x5c>
     f2e:	90 95       	com	r25
     f30:	80 95       	com	r24
     f32:	70 95       	com	r23
     f34:	61 95       	neg	r22
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	8f 4f       	sbci	r24, 0xFF	; 255
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	08 95       	ret

00000f3e <__floatunsisf>:
     f3e:	e8 94       	clt
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <__floatsisf+0x12>

00000f42 <__floatsisf>:
     f42:	97 fb       	bst	r25, 7
     f44:	3e f4       	brtc	.+14     	; 0xf54 <__floatsisf+0x12>
     f46:	90 95       	com	r25
     f48:	80 95       	com	r24
     f4a:	70 95       	com	r23
     f4c:	61 95       	neg	r22
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	99 23       	and	r25, r25
     f56:	a9 f0       	breq	.+42     	; 0xf82 <__floatsisf+0x40>
     f58:	f9 2f       	mov	r31, r25
     f5a:	96 e9       	ldi	r25, 0x96	; 150
     f5c:	bb 27       	eor	r27, r27
     f5e:	93 95       	inc	r25
     f60:	f6 95       	lsr	r31
     f62:	87 95       	ror	r24
     f64:	77 95       	ror	r23
     f66:	67 95       	ror	r22
     f68:	b7 95       	ror	r27
     f6a:	f1 11       	cpse	r31, r1
     f6c:	f8 cf       	rjmp	.-16     	; 0xf5e <__floatsisf+0x1c>
     f6e:	fa f4       	brpl	.+62     	; 0xfae <__floatsisf+0x6c>
     f70:	bb 0f       	add	r27, r27
     f72:	11 f4       	brne	.+4      	; 0xf78 <__floatsisf+0x36>
     f74:	60 ff       	sbrs	r22, 0
     f76:	1b c0       	rjmp	.+54     	; 0xfae <__floatsisf+0x6c>
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	16 c0       	rjmp	.+44     	; 0xfae <__floatsisf+0x6c>
     f82:	88 23       	and	r24, r24
     f84:	11 f0       	breq	.+4      	; 0xf8a <__floatsisf+0x48>
     f86:	96 e9       	ldi	r25, 0x96	; 150
     f88:	11 c0       	rjmp	.+34     	; 0xfac <__floatsisf+0x6a>
     f8a:	77 23       	and	r23, r23
     f8c:	21 f0       	breq	.+8      	; 0xf96 <__floatsisf+0x54>
     f8e:	9e e8       	ldi	r25, 0x8E	; 142
     f90:	87 2f       	mov	r24, r23
     f92:	76 2f       	mov	r23, r22
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <__floatsisf+0x5e>
     f96:	66 23       	and	r22, r22
     f98:	71 f0       	breq	.+28     	; 0xfb6 <__floatsisf+0x74>
     f9a:	96 e8       	ldi	r25, 0x86	; 134
     f9c:	86 2f       	mov	r24, r22
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	2a f0       	brmi	.+10     	; 0xfae <__floatsisf+0x6c>
     fa4:	9a 95       	dec	r25
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	da f7       	brpl	.-10     	; 0xfa4 <__floatsisf+0x62>
     fae:	88 0f       	add	r24, r24
     fb0:	96 95       	lsr	r25
     fb2:	87 95       	ror	r24
     fb4:	97 f9       	bld	r25, 7
     fb6:	08 95       	ret

00000fb8 <__fp_inf>:
     fb8:	97 f9       	bld	r25, 7
     fba:	9f 67       	ori	r25, 0x7F	; 127
     fbc:	80 e8       	ldi	r24, 0x80	; 128
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	08 95       	ret

00000fc4 <__fp_nan>:
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
     fc6:	80 ec       	ldi	r24, 0xC0	; 192
     fc8:	08 95       	ret

00000fca <__fp_pscA>:
     fca:	00 24       	eor	r0, r0
     fcc:	0a 94       	dec	r0
     fce:	16 16       	cp	r1, r22
     fd0:	17 06       	cpc	r1, r23
     fd2:	18 06       	cpc	r1, r24
     fd4:	09 06       	cpc	r0, r25
     fd6:	08 95       	ret

00000fd8 <__fp_pscB>:
     fd8:	00 24       	eor	r0, r0
     fda:	0a 94       	dec	r0
     fdc:	12 16       	cp	r1, r18
     fde:	13 06       	cpc	r1, r19
     fe0:	14 06       	cpc	r1, r20
     fe2:	05 06       	cpc	r0, r21
     fe4:	08 95       	ret

00000fe6 <__fp_round>:
     fe6:	09 2e       	mov	r0, r25
     fe8:	03 94       	inc	r0
     fea:	00 0c       	add	r0, r0
     fec:	11 f4       	brne	.+4      	; 0xff2 <__fp_round+0xc>
     fee:	88 23       	and	r24, r24
     ff0:	52 f0       	brmi	.+20     	; 0x1006 <__fp_round+0x20>
     ff2:	bb 0f       	add	r27, r27
     ff4:	40 f4       	brcc	.+16     	; 0x1006 <__fp_round+0x20>
     ff6:	bf 2b       	or	r27, r31
     ff8:	11 f4       	brne	.+4      	; 0xffe <__fp_round+0x18>
     ffa:	60 ff       	sbrs	r22, 0
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <__fp_round+0x20>
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	08 95       	ret

00001008 <__fp_split3>:
    1008:	57 fd       	sbrc	r21, 7
    100a:	90 58       	subi	r25, 0x80	; 128
    100c:	44 0f       	add	r20, r20
    100e:	55 1f       	adc	r21, r21
    1010:	59 f0       	breq	.+22     	; 0x1028 <__fp_splitA+0x10>
    1012:	5f 3f       	cpi	r21, 0xFF	; 255
    1014:	71 f0       	breq	.+28     	; 0x1032 <__fp_splitA+0x1a>
    1016:	47 95       	ror	r20

00001018 <__fp_splitA>:
    1018:	88 0f       	add	r24, r24
    101a:	97 fb       	bst	r25, 7
    101c:	99 1f       	adc	r25, r25
    101e:	61 f0       	breq	.+24     	; 0x1038 <__fp_splitA+0x20>
    1020:	9f 3f       	cpi	r25, 0xFF	; 255
    1022:	79 f0       	breq	.+30     	; 0x1042 <__fp_splitA+0x2a>
    1024:	87 95       	ror	r24
    1026:	08 95       	ret
    1028:	12 16       	cp	r1, r18
    102a:	13 06       	cpc	r1, r19
    102c:	14 06       	cpc	r1, r20
    102e:	55 1f       	adc	r21, r21
    1030:	f2 cf       	rjmp	.-28     	; 0x1016 <__fp_split3+0xe>
    1032:	46 95       	lsr	r20
    1034:	f1 df       	rcall	.-30     	; 0x1018 <__fp_splitA>
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <__fp_splitA+0x30>
    1038:	16 16       	cp	r1, r22
    103a:	17 06       	cpc	r1, r23
    103c:	18 06       	cpc	r1, r24
    103e:	99 1f       	adc	r25, r25
    1040:	f1 cf       	rjmp	.-30     	; 0x1024 <__fp_splitA+0xc>
    1042:	86 95       	lsr	r24
    1044:	71 05       	cpc	r23, r1
    1046:	61 05       	cpc	r22, r1
    1048:	08 94       	sec
    104a:	08 95       	ret

0000104c <__fp_zero>:
    104c:	e8 94       	clt

0000104e <__fp_szero>:
    104e:	bb 27       	eor	r27, r27
    1050:	66 27       	eor	r22, r22
    1052:	77 27       	eor	r23, r23
    1054:	cb 01       	movw	r24, r22
    1056:	97 f9       	bld	r25, 7
    1058:	08 95       	ret

0000105a <__mulsf3>:
    105a:	0e 94 40 08 	call	0x1080	; 0x1080 <__mulsf3x>
    105e:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_round>
    1062:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_pscA>
    1066:	38 f0       	brcs	.+14     	; 0x1076 <__mulsf3+0x1c>
    1068:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__fp_pscB>
    106c:	20 f0       	brcs	.+8      	; 0x1076 <__mulsf3+0x1c>
    106e:	95 23       	and	r25, r21
    1070:	11 f0       	breq	.+4      	; 0x1076 <__mulsf3+0x1c>
    1072:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_inf>
    1076:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_nan>
    107a:	11 24       	eor	r1, r1
    107c:	0c 94 27 08 	jmp	0x104e	; 0x104e <__fp_szero>

00001080 <__mulsf3x>:
    1080:	0e 94 04 08 	call	0x1008	; 0x1008 <__fp_split3>
    1084:	70 f3       	brcs	.-36     	; 0x1062 <__mulsf3+0x8>

00001086 <__mulsf3_pse>:
    1086:	95 9f       	mul	r25, r21
    1088:	c1 f3       	breq	.-16     	; 0x107a <__mulsf3+0x20>
    108a:	95 0f       	add	r25, r21
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	55 1f       	adc	r21, r21
    1090:	62 9f       	mul	r22, r18
    1092:	f0 01       	movw	r30, r0
    1094:	72 9f       	mul	r23, r18
    1096:	bb 27       	eor	r27, r27
    1098:	f0 0d       	add	r31, r0
    109a:	b1 1d       	adc	r27, r1
    109c:	63 9f       	mul	r22, r19
    109e:	aa 27       	eor	r26, r26
    10a0:	f0 0d       	add	r31, r0
    10a2:	b1 1d       	adc	r27, r1
    10a4:	aa 1f       	adc	r26, r26
    10a6:	64 9f       	mul	r22, r20
    10a8:	66 27       	eor	r22, r22
    10aa:	b0 0d       	add	r27, r0
    10ac:	a1 1d       	adc	r26, r1
    10ae:	66 1f       	adc	r22, r22
    10b0:	82 9f       	mul	r24, r18
    10b2:	22 27       	eor	r18, r18
    10b4:	b0 0d       	add	r27, r0
    10b6:	a1 1d       	adc	r26, r1
    10b8:	62 1f       	adc	r22, r18
    10ba:	73 9f       	mul	r23, r19
    10bc:	b0 0d       	add	r27, r0
    10be:	a1 1d       	adc	r26, r1
    10c0:	62 1f       	adc	r22, r18
    10c2:	83 9f       	mul	r24, r19
    10c4:	a0 0d       	add	r26, r0
    10c6:	61 1d       	adc	r22, r1
    10c8:	22 1f       	adc	r18, r18
    10ca:	74 9f       	mul	r23, r20
    10cc:	33 27       	eor	r19, r19
    10ce:	a0 0d       	add	r26, r0
    10d0:	61 1d       	adc	r22, r1
    10d2:	23 1f       	adc	r18, r19
    10d4:	84 9f       	mul	r24, r20
    10d6:	60 0d       	add	r22, r0
    10d8:	21 1d       	adc	r18, r1
    10da:	82 2f       	mov	r24, r18
    10dc:	76 2f       	mov	r23, r22
    10de:	6a 2f       	mov	r22, r26
    10e0:	11 24       	eor	r1, r1
    10e2:	9f 57       	subi	r25, 0x7F	; 127
    10e4:	50 40       	sbci	r21, 0x00	; 0
    10e6:	9a f0       	brmi	.+38     	; 0x110e <__mulsf3_pse+0x88>
    10e8:	f1 f0       	breq	.+60     	; 0x1126 <__mulsf3_pse+0xa0>
    10ea:	88 23       	and	r24, r24
    10ec:	4a f0       	brmi	.+18     	; 0x1100 <__mulsf3_pse+0x7a>
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	bb 1f       	adc	r27, r27
    10f4:	66 1f       	adc	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	91 50       	subi	r25, 0x01	; 1
    10fc:	50 40       	sbci	r21, 0x00	; 0
    10fe:	a9 f7       	brne	.-22     	; 0x10ea <__mulsf3_pse+0x64>
    1100:	9e 3f       	cpi	r25, 0xFE	; 254
    1102:	51 05       	cpc	r21, r1
    1104:	80 f0       	brcs	.+32     	; 0x1126 <__mulsf3_pse+0xa0>
    1106:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_inf>
    110a:	0c 94 27 08 	jmp	0x104e	; 0x104e <__fp_szero>
    110e:	5f 3f       	cpi	r21, 0xFF	; 255
    1110:	e4 f3       	brlt	.-8      	; 0x110a <__mulsf3_pse+0x84>
    1112:	98 3e       	cpi	r25, 0xE8	; 232
    1114:	d4 f3       	brlt	.-12     	; 0x110a <__mulsf3_pse+0x84>
    1116:	86 95       	lsr	r24
    1118:	77 95       	ror	r23
    111a:	67 95       	ror	r22
    111c:	b7 95       	ror	r27
    111e:	f7 95       	ror	r31
    1120:	e7 95       	ror	r30
    1122:	9f 5f       	subi	r25, 0xFF	; 255
    1124:	c1 f7       	brne	.-16     	; 0x1116 <__mulsf3_pse+0x90>
    1126:	fe 2b       	or	r31, r30
    1128:	88 0f       	add	r24, r24
    112a:	91 1d       	adc	r25, r1
    112c:	96 95       	lsr	r25
    112e:	87 95       	ror	r24
    1130:	97 f9       	bld	r25, 7
    1132:	08 95       	ret

00001134 <initVariant>:
    1134:	08 95       	ret

00001136 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1136:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <init>

	initVariant();
    113a:	0e 94 9a 08 	call	0x1134	; 0x1134 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    113e:	0e 94 ae 00 	call	0x15c	; 0x15c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1142:	c0 e0       	ldi	r28, 0x00	; 0
    1144:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1146:	0e 94 34 01 	call	0x268	; 0x268 <loop>
		if (serialEventRun) serialEventRun();
    114a:	20 97       	sbiw	r28, 0x00	; 0
    114c:	e1 f3       	breq	.-8      	; 0x1146 <main+0x10>
    114e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1152:	f9 cf       	rjmp	.-14     	; 0x1146 <main+0x10>

00001154 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1154:	1f 92       	push	r1
    1156:	0f 92       	push	r0
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	0f 92       	push	r0
    115c:	11 24       	eor	r1, r1
    115e:	2f 93       	push	r18
    1160:	3f 93       	push	r19
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    116a:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <timer0_millis>
    116e:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <timer0_millis+0x1>
    1172:	a0 91 24 03 	lds	r26, 0x0324	; 0x800324 <timer0_millis+0x2>
    1176:	b0 91 25 03 	lds	r27, 0x0325	; 0x800325 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    117a:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    117e:	26 e0       	ldi	r18, 0x06	; 6
    1180:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1182:	2d 37       	cpi	r18, 0x7D	; 125
    1184:	20 f4       	brcc	.+8      	; 0x118e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1186:	02 96       	adiw	r24, 0x02	; 2
    1188:	a1 1d       	adc	r26, r1
    118a:	b1 1d       	adc	r27, r1
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    118e:	29 e8       	ldi	r18, 0x89	; 137
    1190:	23 0f       	add	r18, r19
		m += 1;
    1192:	03 96       	adiw	r24, 0x03	; 3
    1194:	a1 1d       	adc	r26, r1
    1196:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1198:	20 93 21 03 	sts	0x0321, r18	; 0x800321 <timer0_fract>
	timer0_millis = m;
    119c:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <timer0_millis>
    11a0:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <timer0_millis+0x1>
    11a4:	a0 93 24 03 	sts	0x0324, r26	; 0x800324 <timer0_millis+0x2>
    11a8:	b0 93 25 03 	sts	0x0325, r27	; 0x800325 <timer0_millis+0x3>
	timer0_overflow_count++;
    11ac:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <timer0_overflow_count>
    11b0:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <timer0_overflow_count+0x1>
    11b4:	a0 91 28 03 	lds	r26, 0x0328	; 0x800328 <timer0_overflow_count+0x2>
    11b8:	b0 91 29 03 	lds	r27, 0x0329	; 0x800329 <timer0_overflow_count+0x3>
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	a1 1d       	adc	r26, r1
    11c0:	b1 1d       	adc	r27, r1
    11c2:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <timer0_overflow_count>
    11c6:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <timer0_overflow_count+0x1>
    11ca:	a0 93 28 03 	sts	0x0328, r26	; 0x800328 <timer0_overflow_count+0x2>
    11ce:	b0 93 29 03 	sts	0x0329, r27	; 0x800329 <timer0_overflow_count+0x3>
}
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	3f 91       	pop	r19
    11dc:	2f 91       	pop	r18
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti

000011e8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    11e8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    11ea:	f8 94       	cli
	m = timer0_millis;
    11ec:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <timer0_millis>
    11f0:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <timer0_millis+0x1>
    11f4:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <timer0_millis+0x2>
    11f8:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <timer0_millis+0x3>
	SREG = oldSREG;
    11fc:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    11fe:	08 95       	ret

00001200 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1200:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1202:	f8 94       	cli
	m = timer0_overflow_count;
    1204:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <timer0_overflow_count>
    1208:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <timer0_overflow_count+0x1>
    120c:	a0 91 28 03 	lds	r26, 0x0328	; 0x800328 <timer0_overflow_count+0x2>
    1210:	b0 91 29 03 	lds	r27, 0x0329	; 0x800329 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1214:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1216:	a8 9b       	sbis	0x15, 0	; 21
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <micros+0x24>
    121a:	2f 3f       	cpi	r18, 0xFF	; 255
    121c:	19 f0       	breq	.+6      	; 0x1224 <micros+0x24>
		m++;
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	a1 1d       	adc	r26, r1
    1222:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1224:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1226:	ba 2f       	mov	r27, r26
    1228:	a9 2f       	mov	r26, r25
    122a:	98 2f       	mov	r25, r24
    122c:	88 27       	eor	r24, r24
    122e:	82 0f       	add	r24, r18
    1230:	91 1d       	adc	r25, r1
    1232:	a1 1d       	adc	r26, r1
    1234:	b1 1d       	adc	r27, r1
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	43 e0       	ldi	r20, 0x03	; 3
    123c:	66 0f       	add	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	88 1f       	adc	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	4a 95       	dec	r20
    1246:	d1 f7       	brne	.-12     	; 0x123c <micros+0x3c>
}
    1248:	08 95       	ret

0000124a <delay>:

void delay(unsigned long ms)
{
    124a:	8f 92       	push	r8
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	6b 01       	movw	r12, r22
    125c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    125e:	0e 94 00 09 	call	0x1200	; 0x1200 <micros>
    1262:	4b 01       	movw	r8, r22
    1264:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1266:	c1 14       	cp	r12, r1
    1268:	d1 04       	cpc	r13, r1
    126a:	e1 04       	cpc	r14, r1
    126c:	f1 04       	cpc	r15, r1
    126e:	01 f1       	breq	.+64     	; 0x12b0 <delay+0x66>
		yield();
    1270:	0e 94 08 16 	call	0x2c10	; 0x2c10 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1274:	0e 94 00 09 	call	0x1200	; 0x1200 <micros>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	88 19       	sub	r24, r8
    127e:	99 09       	sbc	r25, r9
    1280:	aa 09       	sbc	r26, r10
    1282:	bb 09       	sbc	r27, r11
    1284:	88 3e       	cpi	r24, 0xE8	; 232
    1286:	93 40       	sbci	r25, 0x03	; 3
    1288:	a1 05       	cpc	r26, r1
    128a:	b1 05       	cpc	r27, r1
    128c:	60 f3       	brcs	.-40     	; 0x1266 <delay+0x1c>
			ms--;
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	c2 1a       	sub	r12, r18
    1292:	d1 08       	sbc	r13, r1
    1294:	e1 08       	sbc	r14, r1
    1296:	f1 08       	sbc	r15, r1
			start += 1000;
    1298:	88 ee       	ldi	r24, 0xE8	; 232
    129a:	88 0e       	add	r8, r24
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	98 1e       	adc	r9, r24
    12a0:	a1 1c       	adc	r10, r1
    12a2:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    12a4:	c1 14       	cp	r12, r1
    12a6:	d1 04       	cpc	r13, r1
    12a8:	e1 04       	cpc	r14, r1
    12aa:	f1 04       	cpc	r15, r1
    12ac:	19 f7       	brne	.-58     	; 0x1274 <delay+0x2a>
    12ae:	db cf       	rjmp	.-74     	; 0x1266 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	bf 90       	pop	r11
    12ba:	af 90       	pop	r10
    12bc:	9f 90       	pop	r9
    12be:	8f 90       	pop	r8
    12c0:	08 95       	ret

000012c2 <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	91 05       	cpc	r25, r1
    12c6:	28 f0       	brcs	.+10     	; 0x12d2 <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
    12cc:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <delayMicroseconds+0xc>
    12d2:	08 95       	ret

000012d4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    12d4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    12d6:	84 b5       	in	r24, 0x24	; 36
    12d8:	82 60       	ori	r24, 0x02	; 2
    12da:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    12dc:	84 b5       	in	r24, 0x24	; 36
    12de:	81 60       	ori	r24, 0x01	; 1
    12e0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    12e2:	85 b5       	in	r24, 0x25	; 37
    12e4:	82 60       	ori	r24, 0x02	; 2
    12e6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    12e8:	85 b5       	in	r24, 0x25	; 37
    12ea:	81 60       	ori	r24, 0x01	; 1
    12ec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    12ee:	ee e6       	ldi	r30, 0x6E	; 110
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	81 60       	ori	r24, 0x01	; 1
    12f6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    12f8:	e1 e8       	ldi	r30, 0x81	; 129
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    12fe:	80 81       	ld	r24, Z
    1300:	82 60       	ori	r24, 0x02	; 2
    1302:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1304:	80 81       	ld	r24, Z
    1306:	81 60       	ori	r24, 0x01	; 1
    1308:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    130a:	e0 e8       	ldi	r30, 0x80	; 128
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	81 60       	ori	r24, 0x01	; 1
    1312:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1314:	e1 eb       	ldi	r30, 0xB1	; 177
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	84 60       	ori	r24, 0x04	; 4
    131c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    131e:	e0 eb       	ldi	r30, 0xB0	; 176
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1328:	ea e7       	ldi	r30, 0x7A	; 122
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	84 60       	ori	r24, 0x04	; 4
    1330:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1332:	80 81       	ld	r24, Z
    1334:	82 60       	ori	r24, 0x02	; 2
    1336:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1338:	80 81       	ld	r24, Z
    133a:	8e 7f       	andi	r24, 0xFE	; 254
    133c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    133e:	80 81       	ld	r24, Z
    1340:	80 68       	ori	r24, 0x80	; 128
    1342:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1344:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1348:	08 95       	ret

0000134a <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    134a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <analog_reference>
    134e:	08 95       	ret

00001350 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1350:	8e 30       	cpi	r24, 0x0E	; 14
    1352:	08 f0       	brcs	.+2      	; 0x1356 <analogRead+0x6>
    1354:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1356:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <analog_reference>
    135a:	90 e4       	ldi	r25, 0x40	; 64
    135c:	29 9f       	mul	r18, r25
    135e:	90 01       	movw	r18, r0
    1360:	11 24       	eor	r1, r1
    1362:	87 70       	andi	r24, 0x07	; 7
    1364:	82 2b       	or	r24, r18
    1366:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    136a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    136e:	80 64       	ori	r24, 0x40	; 64
    1370:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1374:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1378:	86 fd       	sbrc	r24, 6
    137a:	fc cf       	rjmp	.-8      	; 0x1374 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    137c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    1380:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1384:	90 e0       	ldi	r25, 0x00	; 0
}
    1386:	92 2b       	or	r25, r18
    1388:	08 95       	ret

0000138a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	81 f0       	breq	.+32     	; 0x13ae <turnOffPWM+0x24>
    138e:	28 f4       	brcc	.+10     	; 0x139a <turnOffPWM+0x10>
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	99 f0       	breq	.+38     	; 0x13ba <turnOffPWM+0x30>
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	a1 f0       	breq	.+40     	; 0x13c0 <turnOffPWM+0x36>
    1398:	08 95       	ret
    139a:	87 30       	cpi	r24, 0x07	; 7
    139c:	a9 f0       	breq	.+42     	; 0x13c8 <turnOffPWM+0x3e>
    139e:	88 30       	cpi	r24, 0x08	; 8
    13a0:	b9 f0       	breq	.+46     	; 0x13d0 <turnOffPWM+0x46>
    13a2:	84 30       	cpi	r24, 0x04	; 4
    13a4:	d1 f4       	brne	.+52     	; 0x13da <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    13aa:	8f 7d       	andi	r24, 0xDF	; 223
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    13ae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    13b2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    13b8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13ba:	84 b5       	in	r24, 0x24	; 36
    13bc:	8f 77       	andi	r24, 0x7F	; 127
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13c0:	84 b5       	in	r24, 0x24	; 36
    13c2:	8f 7d       	andi	r24, 0xDF	; 223
    13c4:	84 bd       	out	0x24, r24	; 36
    13c6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    13cc:	8f 77       	andi	r24, 0x7F	; 127
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13d0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    13d4:	8f 7d       	andi	r24, 0xDF	; 223
    13d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    13da:	08 95       	ret

000013dc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	fc 01       	movw	r30, r24
    13e4:	e4 58       	subi	r30, 0x84	; 132
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    13ea:	fc 01       	movw	r30, r24
    13ec:	e0 57       	subi	r30, 0x70	; 112
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    13f2:	88 23       	and	r24, r24
    13f4:	61 f1       	breq	.+88     	; 0x144e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	fc 01       	movw	r30, r24
    13fe:	e2 55       	subi	r30, 0x52	; 82
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	c5 91       	lpm	r28, Z+
    1404:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1406:	fc 01       	movw	r30, r24
    1408:	ec 55       	subi	r30, 0x5C	; 92
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	a5 91       	lpm	r26, Z+
    140e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1410:	61 11       	cpse	r22, r1
    1412:	09 c0       	rjmp	.+18     	; 0x1426 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1414:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1416:	f8 94       	cli
		*reg &= ~bit;
    1418:	88 81       	ld	r24, Y
    141a:	20 95       	com	r18
    141c:	82 23       	and	r24, r18
    141e:	88 83       	st	Y, r24
		*out &= ~bit;
    1420:	ec 91       	ld	r30, X
    1422:	2e 23       	and	r18, r30
    1424:	0b c0       	rjmp	.+22     	; 0x143c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1426:	62 30       	cpi	r22, 0x02	; 2
    1428:	61 f4       	brne	.+24     	; 0x1442 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    142a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    142c:	f8 94       	cli
		*reg &= ~bit;
    142e:	88 81       	ld	r24, Y
    1430:	32 2f       	mov	r19, r18
    1432:	30 95       	com	r19
    1434:	83 23       	and	r24, r19
    1436:	88 83       	st	Y, r24
		*out |= bit;
    1438:	ec 91       	ld	r30, X
    143a:	2e 2b       	or	r18, r30
    143c:	2c 93       	st	X, r18
		SREG = oldSREG;
    143e:	9f bf       	out	0x3f, r25	; 63
    1440:	06 c0       	rjmp	.+12     	; 0x144e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1442:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1444:	f8 94       	cli
		*reg |= bit;
    1446:	e8 81       	ld	r30, Y
    1448:	2e 2b       	or	r18, r30
    144a:	28 83       	st	Y, r18
		SREG = oldSREG;
    144c:	8f bf       	out	0x3f, r24	; 63
	}
}
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	f9 01       	movw	r30, r18
    1460:	e8 59       	subi	r30, 0x98	; 152
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1466:	f9 01       	movw	r30, r18
    1468:	e4 58       	subi	r30, 0x84	; 132
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    146e:	f9 01       	movw	r30, r18
    1470:	e0 57       	subi	r30, 0x70	; 112
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1476:	cc 23       	and	r28, r28
    1478:	c1 f0       	breq	.+48     	; 0x14aa <digitalWrite+0x56>
    147a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    147c:	81 11       	cpse	r24, r1
    147e:	0e 94 c5 09 	call	0x138a	; 0x138a <turnOffPWM>

	out = portOutputRegister(port);
    1482:	ec 2f       	mov	r30, r28
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	ee 0f       	add	r30, r30
    1488:	ff 1f       	adc	r31, r31
    148a:	ec 55       	subi	r30, 0x5C	; 92
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	a5 91       	lpm	r26, Z+
    1490:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1492:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1494:	f8 94       	cli

	if (val == LOW) {
    1496:	11 11       	cpse	r17, r1
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <digitalWrite+0x4e>
		*out &= ~bit;
    149a:	8c 91       	ld	r24, X
    149c:	d0 95       	com	r29
    149e:	d8 23       	and	r29, r24
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    14a2:	ec 91       	ld	r30, X
    14a4:	de 2b       	or	r29, r30
    14a6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    14a8:	9f bf       	out	0x3f, r25	; 63
}
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	08 95       	ret

000014b2 <_ZN7TwoWire5writeEi>:
  }
  else
    retVal = -1;

  return retVal;
}
    14b2:	dc 01       	movw	r26, r24
    14b4:	ed 91       	ld	r30, X+
    14b6:	fc 91       	ld	r31, X
    14b8:	01 90       	ld	r0, Z+
    14ba:	f0 81       	ld	r31, Z
    14bc:	e0 2d       	mov	r30, r0
    14be:	09 94       	ijmp

000014c0 <_ZN8AMS_5600C1Ev>:
    14c0:	fc 01       	movw	r30, r24
    14c2:	86 e3       	ldi	r24, 0x36	; 54
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
    14ca:	15 86       	std	Z+13, r1	; 0x0d
    14cc:	14 86       	std	Z+12, r1	; 0x0c
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	97 87       	std	Z+15, r25	; 0x0f
    14d4:	86 87       	std	Z+14, r24	; 0x0e
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	91 8b       	std	Z+17, r25	; 0x11
    14dc:	80 8b       	std	Z+16, r24	; 0x10
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	93 8b       	std	Z+19, r25	; 0x13
    14e4:	82 8b       	std	Z+18, r24	; 0x12
    14e6:	84 e0       	ldi	r24, 0x04	; 4
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	95 8b       	std	Z+21, r25	; 0x15
    14ec:	84 8b       	std	Z+20, r24	; 0x14
    14ee:	85 e0       	ldi	r24, 0x05	; 5
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	97 8b       	std	Z+23, r25	; 0x17
    14f4:	86 8b       	std	Z+22, r24	; 0x16
    14f6:	86 e0       	ldi	r24, 0x06	; 6
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	91 8f       	std	Z+25, r25	; 0x19
    14fc:	80 8f       	std	Z+24, r24	; 0x18
    14fe:	87 e0       	ldi	r24, 0x07	; 7
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	93 8f       	std	Z+27, r25	; 0x1b
    1504:	82 8f       	std	Z+26, r24	; 0x1a
    1506:	88 e0       	ldi	r24, 0x08	; 8
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	95 8f       	std	Z+29, r25	; 0x1d
    150c:	84 8f       	std	Z+28, r24	; 0x1c
    150e:	8c e0       	ldi	r24, 0x0C	; 12
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	97 8f       	std	Z+31, r25	; 0x1f
    1514:	86 8f       	std	Z+30, r24	; 0x1e
    1516:	8d e0       	ldi	r24, 0x0D	; 13
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	91 a3       	std	Z+33, r25	; 0x21
    151c:	80 a3       	std	Z+32, r24	; 0x20
    151e:	8e e0       	ldi	r24, 0x0E	; 14
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	93 a3       	std	Z+35, r25	; 0x23
    1524:	82 a3       	std	Z+34, r24	; 0x22
    1526:	8f e0       	ldi	r24, 0x0F	; 15
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	95 a3       	std	Z+37, r25	; 0x25
    152c:	84 a3       	std	Z+36, r24	; 0x24
    152e:	8b e0       	ldi	r24, 0x0B	; 11
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	97 a3       	std	Z+39, r25	; 0x27
    1534:	86 a3       	std	Z+38, r24	; 0x26
    1536:	8a e1       	ldi	r24, 0x1A	; 26
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	91 a7       	std	Z+41, r25	; 0x29
    153c:	80 a7       	std	Z+40, r24	; 0x28
    153e:	8b e1       	ldi	r24, 0x1B	; 27
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	93 a7       	std	Z+43, r25	; 0x2b
    1544:	82 a7       	std	Z+42, r24	; 0x2a
    1546:	8c e1       	ldi	r24, 0x1C	; 28
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	95 a7       	std	Z+45, r25	; 0x2d
    154c:	84 a7       	std	Z+44, r24	; 0x2c
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	97 a7       	std	Z+47, r25	; 0x2f
    1554:	86 a7       	std	Z+46, r24	; 0x2e
    1556:	08 95       	ret

00001558 <_ZN8AMS_560010getAddressEv>:
    1558:	fc 01       	movw	r30, r24
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	08 95       	ret

00001560 <_ZN8AMS_560012writeOneByteEii>:
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	8b 01       	movw	r16, r22
    156a:	ea 01       	movw	r28, r20
    156c:	fc 01       	movw	r30, r24
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 ec       	ldi	r24, 0xC2	; 194
    1574:	93 e0       	ldi	r25, 0x03	; 3
    1576:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN7TwoWire17beginTransmissionEi>
    157a:	b8 01       	movw	r22, r16
    157c:	82 ec       	ldi	r24, 0xC2	; 194
    157e:	93 e0       	ldi	r25, 0x03	; 3
    1580:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN7TwoWire5writeEi>
    1584:	be 01       	movw	r22, r28
    1586:	82 ec       	ldi	r24, 0xC2	; 194
    1588:	93 e0       	ldi	r25, 0x03	; 3
    158a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN7TwoWire5writeEi>
    158e:	82 ec       	ldi	r24, 0xC2	; 194
    1590:	93 e0       	ldi	r25, 0x03	; 3
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <_ZN7TwoWire15endTransmissionEv>

0000159e <_ZN8AMS_560011readOneByteEi>:
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	ec 01       	movw	r28, r24
    15a8:	8b 01       	movw	r16, r22
    15aa:	68 81       	ld	r22, Y
    15ac:	79 81       	ldd	r23, Y+1	; 0x01
    15ae:	82 ec       	ldi	r24, 0xC2	; 194
    15b0:	93 e0       	ldi	r25, 0x03	; 3
    15b2:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN7TwoWire17beginTransmissionEi>
    15b6:	b8 01       	movw	r22, r16
    15b8:	82 ec       	ldi	r24, 0xC2	; 194
    15ba:	93 e0       	ldi	r25, 0x03	; 3
    15bc:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN7TwoWire5writeEi>
    15c0:	82 ec       	ldi	r24, 0xC2	; 194
    15c2:	93 e0       	ldi	r25, 0x03	; 3
    15c4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN7TwoWire15endTransmissionEv>
    15c8:	68 81       	ld	r22, Y
    15ca:	79 81       	ldd	r23, Y+1	; 0x01
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	82 ec       	ldi	r24, 0xC2	; 194
    15d2:	93 e0       	ldi	r25, 0x03	; 3
    15d4:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN7TwoWire11requestFromEii>
    15d8:	82 ec       	ldi	r24, 0xC2	; 194
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN7TwoWire9availableEv>
    15e0:	89 2b       	or	r24, r25
    15e2:	d1 f3       	breq	.-12     	; 0x15d8 <_ZN8AMS_560011readOneByteEi+0x3a>
    15e4:	82 ec       	ldi	r24, 0xC2	; 194
    15e6:	93 e0       	ldi	r25, 0x03	; 3
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <_ZN7TwoWire4readEv>

000015f4 <_ZN8AMS_560012detectMagnetEv>:
    15f4:	fc 01       	movw	r30, r24
    15f6:	66 a1       	ldd	r22, Z+38	; 0x26
    15f8:	77 a1       	ldd	r23, Z+39	; 0x27
    15fa:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN8AMS_560011readOneByteEi>
    15fe:	85 fb       	bst	r24, 5
    1600:	88 27       	eor	r24, r24
    1602:	80 f9       	bld	r24, 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	08 95       	ret

00001608 <_ZN8AMS_560017getMagnetStrengthEv>:
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	ec 01       	movw	r28, r24
    1610:	6e a1       	ldd	r22, Y+38	; 0x26
    1612:	7f a1       	ldd	r23, Y+39	; 0x27
    1614:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN8AMS_560011readOneByteEi>
    1618:	18 2f       	mov	r17, r24
    161a:	ce 01       	movw	r24, r28
    161c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZN8AMS_560012detectMagnetEv>
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	39 f4       	brne	.+14     	; 0x1632 <_ZN8AMS_560017getMagnetStrengthEv+0x2a>
    1624:	14 fd       	sbrc	r17, 4
    1626:	08 c0       	rjmp	.+16     	; 0x1638 <_ZN8AMS_560017getMagnetStrengthEv+0x30>
    1628:	13 ff       	sbrs	r17, 3
    162a:	09 c0       	rjmp	.+18     	; 0x163e <_ZN8AMS_560017getMagnetStrengthEv+0x36>
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <_ZN8AMS_560017getMagnetStrengthEv+0x3a>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <_ZN8AMS_560017getMagnetStrengthEv+0x3a>
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <_ZN8AMS_560017getMagnetStrengthEv+0x3a>
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	08 95       	ret

0000164a <_ZN8AMS_56006getAgcEv>:
    164a:	fc 01       	movw	r30, r24
    164c:	60 a5       	ldd	r22, Z+40	; 0x28
    164e:	71 a5       	ldd	r23, Z+41	; 0x29
    1650:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <_ZN8AMS_560011readOneByteEi>

00001654 <_ZN8AMS_560012setPowerModeEh>:
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	64 30       	cpi	r22, 0x04	; 4
    165c:	b0 f4       	brcc	.+44     	; 0x168a <_ZN8AMS_560012setPowerModeEh+0x36>
    165e:	16 2f       	mov	r17, r22
    1660:	ec 01       	movw	r28, r24
    1662:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1664:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1666:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN8AMS_560011readOneByteEi>
    166a:	8c 7f       	andi	r24, 0xFC	; 252
    166c:	18 2b       	or	r17, r24
    166e:	41 2f       	mov	r20, r17
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1674:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1676:	ce 01       	movw	r24, r28
    1678:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN8AMS_560012writeOneByteEii>
    167c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    167e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1680:	ce 01       	movw	r24, r28
    1682:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN8AMS_560011readOneByteEi>
    1686:	91 e0       	ldi	r25, 0x01	; 1
    1688:	18 13       	cpse	r17, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	89 2f       	mov	r24, r25
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	08 95       	ret

00001696 <_ZN8AMS_560012readTwoBytesEii>:
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	ec 01       	movw	r28, r24
    16a4:	7b 01       	movw	r14, r22
    16a6:	8a 01       	movw	r16, r20
    16a8:	68 81       	ld	r22, Y
    16aa:	79 81       	ldd	r23, Y+1	; 0x01
    16ac:	82 ec       	ldi	r24, 0xC2	; 194
    16ae:	93 e0       	ldi	r25, 0x03	; 3
    16b0:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN7TwoWire17beginTransmissionEi>
    16b4:	b8 01       	movw	r22, r16
    16b6:	82 ec       	ldi	r24, 0xC2	; 194
    16b8:	93 e0       	ldi	r25, 0x03	; 3
    16ba:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN7TwoWire5writeEi>
    16be:	82 ec       	ldi	r24, 0xC2	; 194
    16c0:	93 e0       	ldi	r25, 0x03	; 3
    16c2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN7TwoWire15endTransmissionEv>
    16c6:	68 81       	ld	r22, Y
    16c8:	79 81       	ldd	r23, Y+1	; 0x01
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	82 ec       	ldi	r24, 0xC2	; 194
    16d0:	93 e0       	ldi	r25, 0x03	; 3
    16d2:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN7TwoWire11requestFromEii>
    16d6:	82 ec       	ldi	r24, 0xC2	; 194
    16d8:	93 e0       	ldi	r25, 0x03	; 3
    16da:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN7TwoWire9availableEv>
    16de:	89 2b       	or	r24, r25
    16e0:	d1 f3       	breq	.-12     	; 0x16d6 <_ZN8AMS_560012readTwoBytesEii+0x40>
    16e2:	82 ec       	ldi	r24, 0xC2	; 194
    16e4:	93 e0       	ldi	r25, 0x03	; 3
    16e6:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_ZN7TwoWire4readEv>
    16ea:	8c 01       	movw	r16, r24
    16ec:	68 81       	ld	r22, Y
    16ee:	79 81       	ldd	r23, Y+1	; 0x01
    16f0:	82 ec       	ldi	r24, 0xC2	; 194
    16f2:	93 e0       	ldi	r25, 0x03	; 3
    16f4:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN7TwoWire17beginTransmissionEi>
    16f8:	b7 01       	movw	r22, r14
    16fa:	82 ec       	ldi	r24, 0xC2	; 194
    16fc:	93 e0       	ldi	r25, 0x03	; 3
    16fe:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN7TwoWire5writeEi>
    1702:	82 ec       	ldi	r24, 0xC2	; 194
    1704:	93 e0       	ldi	r25, 0x03	; 3
    1706:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN7TwoWire15endTransmissionEv>
    170a:	68 81       	ld	r22, Y
    170c:	79 81       	ldd	r23, Y+1	; 0x01
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	82 ec       	ldi	r24, 0xC2	; 194
    1714:	93 e0       	ldi	r25, 0x03	; 3
    1716:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN7TwoWire11requestFromEii>
    171a:	82 ec       	ldi	r24, 0xC2	; 194
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN7TwoWire9availableEv>
    1722:	89 2b       	or	r24, r25
    1724:	d1 f3       	breq	.-12     	; 0x171a <_ZN8AMS_560012readTwoBytesEii+0x84>
    1726:	82 ec       	ldi	r24, 0xC2	; 194
    1728:	93 e0       	ldi	r25, 0x03	; 3
    172a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_ZN7TwoWire4readEv>
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	38 2f       	mov	r19, r24
    1734:	c9 01       	movw	r24, r18
    1736:	80 2b       	or	r24, r16
    1738:	91 2b       	or	r25, r17
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	08 95       	ret

00001748 <_ZN8AMS_560011getMaxAngleEv>:
    1748:	fc 01       	movw	r30, r24
    174a:	40 8d       	ldd	r20, Z+24	; 0x18
    174c:	51 8d       	ldd	r21, Z+25	; 0x19
    174e:	66 89       	ldd	r22, Z+22	; 0x16
    1750:	77 89       	ldd	r23, Z+23	; 0x17
    1752:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_ZN8AMS_560012readTwoBytesEii>

00001756 <_ZN8AMS_560016getStartPositionEv>:
    1756:	fc 01       	movw	r30, r24
    1758:	40 89       	ldd	r20, Z+16	; 0x10
    175a:	51 89       	ldd	r21, Z+17	; 0x11
    175c:	66 85       	ldd	r22, Z+14	; 0x0e
    175e:	77 85       	ldd	r23, Z+15	; 0x0f
    1760:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_ZN8AMS_560012readTwoBytesEii>

00001764 <_ZN8AMS_560014getEndPositionEv>:
    1764:	fc 01       	movw	r30, r24
    1766:	44 89       	ldd	r20, Z+20	; 0x14
    1768:	55 89       	ldd	r21, Z+21	; 0x15
    176a:	62 89       	ldd	r22, Z+18	; 0x12
    176c:	73 89       	ldd	r23, Z+19	; 0x13
    176e:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_ZN8AMS_560012readTwoBytesEii>

00001772 <_ZN8AMS_560011getRawAngleEv>:
  Description: gets raw value of magnet position.
  start, end, and max angle settings do not apply
*******************************************************/
word AMS_5600::getRawAngle()
{
  return readTwoBytes(_raw_ang_hi, _raw_ang_lo);
    1772:	fc 01       	movw	r30, r24
    1774:	40 a1       	ldd	r20, Z+32	; 0x20
    1776:	51 a1       	ldd	r21, Z+33	; 0x21
    1778:	66 8d       	ldd	r22, Z+30	; 0x1e
    177a:	77 8d       	ldd	r23, Z+31	; 0x1f
    177c:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_ZN8AMS_560012readTwoBytesEii>

00001780 <_ZN8AMS_560011setMaxAngleEj>:
  If no value is provided, method will read position of
  magnet.  Setting this register zeros out max position
  register.
*******************************************************/
word AMS_5600::setMaxAngle(word newMaxAngle)
{
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
  word retVal;
  if (newMaxAngle == -1)
    1786:	6f 3f       	cpi	r22, 0xFF	; 255
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	78 07       	cpc	r23, r24
    178c:	31 f4       	brne	.+12     	; 0x179a <_ZN8AMS_560011setMaxAngleEj+0x1a>
  {
    _maxAngle = getRawAngle();
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN8AMS_560011getRawAngleEv>
    1794:	9b 87       	std	Y+11, r25	; 0x0b
    1796:	8a 87       	std	Y+10, r24	; 0x0a
    1798:	02 c0       	rjmp	.+4      	; 0x179e <_ZN8AMS_560011setMaxAngleEj+0x1e>
  }
  else
    _maxAngle = newMaxAngle;
    179a:	7b 87       	std	Y+11, r23	; 0x0b
    179c:	6a 87       	std	Y+10, r22	; 0x0a

  writeOneByte(_mang_hi, highByte(_maxAngle));
    179e:	4b 85       	ldd	r20, Y+11	; 0x0b
    17a0:	6e 89       	ldd	r22, Y+22	; 0x16
    17a2:	7f 89       	ldd	r23, Y+23	; 0x17
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	ce 01       	movw	r24, r28
    17a8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    17ac:	62 e0       	ldi	r22, 0x02	; 2
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
  writeOneByte(_mang_lo, lowByte(_maxAngle));
    17b8:	4a 85       	ldd	r20, Y+10	; 0x0a
    17ba:	5b 85       	ldd	r21, Y+11	; 0x0b
    17bc:	55 27       	eor	r21, r21
    17be:	68 8d       	ldd	r22, Y+24	; 0x18
    17c0:	79 8d       	ldd	r23, Y+25	; 0x19
    17c2:	ce 01       	movw	r24, r28
    17c4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    17c8:	62 e0       	ldi	r22, 0x02	; 2
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 25 09 	call	0x124a	; 0x124a <delay>

  retVal = readTwoBytes(_mang_hi, _mang_lo);
    17d4:	48 8d       	ldd	r20, Y+24	; 0x18
    17d6:	59 8d       	ldd	r21, Y+25	; 0x19
    17d8:	6e 89       	ldd	r22, Y+22	; 0x16
    17da:	7f 89       	ldd	r23, Y+23	; 0x17
    17dc:	ce 01       	movw	r24, r28
  return retVal;
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
  writeOneByte(_mang_hi, highByte(_maxAngle));
  delay(2);
  writeOneByte(_mang_lo, lowByte(_maxAngle));
  delay(2);

  retVal = readTwoBytes(_mang_hi, _mang_lo);
    17e2:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_ZN8AMS_560012readTwoBytesEii>

000017e6 <_ZN8AMS_560016setStartPositionEj>:
  Description: sets a value in start position register.
  If no value is provided, method will read position of
  magnet.  
*******************************************************/
word AMS_5600::setStartPosition(word startAngle)
{
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	ec 01       	movw	r28, r24
  if (startAngle == -1)
    17ec:	6f 3f       	cpi	r22, 0xFF	; 255
    17ee:	8f ef       	ldi	r24, 0xFF	; 255
    17f0:	78 07       	cpc	r23, r24
    17f2:	31 f4       	brne	.+12     	; 0x1800 <_ZN8AMS_560016setStartPositionEj+0x1a>
  {
    _rawStartAngle = getRawAngle();
    17f4:	ce 01       	movw	r24, r28
    17f6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN8AMS_560011getRawAngleEv>
    17fa:	9b 83       	std	Y+3, r25	; 0x03
    17fc:	8a 83       	std	Y+2, r24	; 0x02
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <_ZN8AMS_560016setStartPositionEj+0x1e>
  }
  else
    _rawStartAngle = startAngle;
    1800:	7b 83       	std	Y+3, r23	; 0x03
    1802:	6a 83       	std	Y+2, r22	; 0x02

  writeOneByte(_zpos_hi, highByte(_rawStartAngle));
    1804:	4b 81       	ldd	r20, Y+3	; 0x03
    1806:	6e 85       	ldd	r22, Y+14	; 0x0e
    1808:	7f 85       	ldd	r23, Y+15	; 0x0f
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	ce 01       	movw	r24, r28
    180e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    1812:	62 e0       	ldi	r22, 0x02	; 2
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
  writeOneByte(_zpos_lo, lowByte(_rawStartAngle));
    181e:	4a 81       	ldd	r20, Y+2	; 0x02
    1820:	5b 81       	ldd	r21, Y+3	; 0x03
    1822:	55 27       	eor	r21, r21
    1824:	68 89       	ldd	r22, Y+16	; 0x10
    1826:	79 89       	ldd	r23, Y+17	; 0x11
    1828:	ce 01       	movw	r24, r28
    182a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    182e:	62 e0       	ldi	r22, 0x02	; 2
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
  _zPosition = readTwoBytes(_zpos_hi, _zpos_lo);
    183a:	48 89       	ldd	r20, Y+16	; 0x10
    183c:	59 89       	ldd	r21, Y+17	; 0x11
    183e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1840:	7f 85       	ldd	r23, Y+15	; 0x0f
    1842:	ce 01       	movw	r24, r28
    1844:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN8AMS_560012readTwoBytesEii>
    1848:	9d 83       	std	Y+5, r25	; 0x05
    184a:	8c 83       	std	Y+4, r24	; 0x04

  return (_zPosition);
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <_ZN8AMS_560014setEndPositionEj>:
  Description: sets a value in end position register.
  If no value is provided, method will read position of
  magnet.  
*******************************************************/
word AMS_5600::setEndPosition(word endAngle)
{
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	ec 01       	movw	r28, r24
  if (endAngle == -1)
    1858:	6f 3f       	cpi	r22, 0xFF	; 255
    185a:	8f ef       	ldi	r24, 0xFF	; 255
    185c:	78 07       	cpc	r23, r24
    185e:	31 f4       	brne	.+12     	; 0x186c <_ZN8AMS_560014setEndPositionEj+0x1a>
    _rawEndAngle = getRawAngle();
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN8AMS_560011getRawAngleEv>
    1866:	9f 83       	std	Y+7, r25	; 0x07
    1868:	8e 83       	std	Y+6, r24	; 0x06
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <_ZN8AMS_560014setEndPositionEj+0x1e>
  else
    _rawEndAngle = endAngle;
    186c:	7f 83       	std	Y+7, r23	; 0x07
    186e:	6e 83       	std	Y+6, r22	; 0x06

  writeOneByte(_mpos_hi, highByte(_rawEndAngle));
    1870:	4f 81       	ldd	r20, Y+7	; 0x07
    1872:	6a 89       	ldd	r22, Y+18	; 0x12
    1874:	7b 89       	ldd	r23, Y+19	; 0x13
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	ce 01       	movw	r24, r28
    187a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
  writeOneByte(_mpos_lo, lowByte(_rawEndAngle));
    188a:	4e 81       	ldd	r20, Y+6	; 0x06
    188c:	5f 81       	ldd	r21, Y+7	; 0x07
    188e:	55 27       	eor	r21, r21
    1890:	6c 89       	ldd	r22, Y+20	; 0x14
    1892:	7d 89       	ldd	r23, Y+21	; 0x15
    1894:	ce 01       	movw	r24, r28
    1896:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN8AMS_560012writeOneByteEii>
  delay(2);
    189a:	62 e0       	ldi	r22, 0x02	; 2
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
  _mPosition = readTwoBytes(_mpos_hi, _mpos_lo);
    18a6:	4c 89       	ldd	r20, Y+20	; 0x14
    18a8:	5d 89       	ldd	r21, Y+21	; 0x15
    18aa:	6a 89       	ldd	r22, Y+18	; 0x12
    18ac:	7b 89       	ldd	r23, Y+19	; 0x13
    18ae:	ce 01       	movw	r24, r28
    18b0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN8AMS_560012readTwoBytesEii>
    18b4:	99 87       	std	Y+9, r25	; 0x09
    18b6:	88 87       	std	Y+8, r24	; 0x08

  return (_mPosition);
}
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <_ZN8AMS_560014getScaledAngleEv>:
  start, end, or max angle settings are used to 
  determine value
*******************************************************/
word AMS_5600::getScaledAngle()
{
  return readTwoBytes(_ang_hi, _ang_lo);
    18be:	fc 01       	movw	r30, r24
    18c0:	44 a1       	ldd	r20, Z+36	; 0x24
    18c2:	55 a1       	ldd	r21, Z+37	; 0x25
    18c4:	62 a1       	ldd	r22, Z+34	; 0x22
    18c6:	73 a1       	ldd	r23, Z+35	; 0x23
    18c8:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_ZN8AMS_560012readTwoBytesEii>

000018cc <_ZN8AMS_560012getMagnitudeEv>:
  Out: value of magnitude register
  Description: gets value of magnitude register.
*******************************************************/
word AMS_5600::getMagnitude()
{
  return readTwoBytes(_mag_hi, _mag_lo);
    18cc:	fc 01       	movw	r30, r24
    18ce:	44 a5       	ldd	r20, Z+44	; 0x2c
    18d0:	55 a5       	ldd	r21, Z+45	; 0x2d
    18d2:	62 a5       	ldd	r22, Z+42	; 0x2a
    18d4:	73 a5       	ldd	r23, Z+43	; 0x2b
    18d6:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_ZN8AMS_560012readTwoBytesEii>

000018da <_ZN6CC1101C1Ev>:
/**
 * CC1101
 * 
 * Class constructor
 */
CC1101::CC1101(void)
    18da:	fc 01       	movw	r30, r24
{
  carrierFreq = CFREQ_868;
    18dc:	13 82       	std	Z+3, r1	; 0x03
  channel = CC1101_DEFVAL_CHANNR;
    18de:	15 82       	std	Z+5, r1	; 0x05
  syncWord[0] = CC1101_DEFVAL_SYNC1;
    18e0:	85 eb       	ldi	r24, 0xB5	; 181
    18e2:	86 83       	std	Z+6, r24	; 0x06
  syncWord[1] = CC1101_DEFVAL_SYNC0;
    18e4:	87 e4       	ldi	r24, 0x47	; 71
    18e6:	87 83       	std	Z+7, r24	; 0x07
  devAddress = CC1101_DEFVAL_ADDR;
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	80 87       	std	Z+8, r24	; 0x08

  hgmEnabled = false;
    18ec:	11 82       	std	Z+1, r1	; 0x01
    18ee:	08 95       	ret

000018f0 <_ZN6CC11016wakeUpEv>:
 * 
 * Wake up CC1101 from Power Down state
 */
void CC1101::wakeUp(void)
{
  cc1101_Select();                      // Select CC1101
    18f0:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    18f2:	1c 99       	sbic	0x03, 4	; 3
    18f4:	fe cf       	rjmp	.-4      	; 0x18f2 <_ZN6CC11016wakeUpEv+0x2>
  cc1101_Deselect();                    // Deselect CC1101
    18f6:	2a 9a       	sbi	0x05, 2	; 5
    18f8:	08 95       	ret

000018fa <_ZN6CC11018writeRegEhh>:
 * 
 * 'regAddr'	Register address
 * 'value'	Value to be writen
 */
void CC1101::writeReg(byte regAddr, byte value) 
{
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	ec 01       	movw	r28, r24
    1902:	14 2f       	mov	r17, r20
  cc1101_Select();                      // Select CC1101
    1904:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    1906:	1c 99       	sbic	0x03, 4	; 3
    1908:	fe cf       	rjmp	.-4      	; 0x1906 <_ZN6CC11018writeRegEhh+0xc>
  spi.send(regAddr);                    // Send register address
    190a:	ce 01       	movw	r24, r28
    190c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
  spi.send(value);                      // Send value
    1910:	61 2f       	mov	r22, r17
    1912:	ce 01       	movw	r24, r28
    1914:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
    1918:	2a 9a       	sbi	0x05, 2	; 5
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	08 95       	ret

00001922 <_ZN6CC110113writeBurstRegEhPhh>:
 * 'regAddr'	Register address
 * 'buffer'	Data to be writen
 * 'len'	Data length
 */
void CC1101::writeBurstReg(byte regAddr, byte* buffer, byte len)
{
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	8c 01       	movw	r16, r24
    1932:	d4 2e       	mov	r13, r20
    1934:	e5 2e       	mov	r14, r21
    1936:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
    1938:	60 64       	ori	r22, 0x40	; 64
  cc1101_Select();                      // Select CC1101
    193a:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    193c:	1c 99       	sbic	0x03, 4	; 3
    193e:	fe cf       	rjmp	.-4      	; 0x193c <_ZN6CC110113writeBurstRegEhPhh+0x1a>
  spi.send(addr);                       // Send register address
    1940:	c8 01       	movw	r24, r16
    1942:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
    1946:	cd 2d       	mov	r28, r13
    1948:	de 2d       	mov	r29, r14
    194a:	ce 01       	movw	r24, r28
    194c:	8f 0d       	add	r24, r15
    194e:	91 1d       	adc	r25, r1
    1950:	7c 01       	movw	r14, r24
  
  for(i=0 ; i<len ; i++)
    1952:	ce 15       	cp	r28, r14
    1954:	df 05       	cpc	r29, r15
    1956:	29 f0       	breq	.+10     	; 0x1962 <_ZN6CC110113writeBurstRegEhPhh+0x40>
    spi.send(buffer[i]);                // Send value
    1958:	69 91       	ld	r22, Y+
    195a:	c8 01       	movw	r24, r16
    195c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  
  for(i=0 ; i<len ; i++)
    1960:	f8 cf       	rjmp	.-16     	; 0x1952 <_ZN6CC110113writeBurstRegEhPhh+0x30>
    spi.send(buffer[i]);                // Send value

  cc1101_Deselect();                    // Deselect CC1101  
    1962:	2a 9a       	sbi	0x05, 2	; 5
}
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	08 95       	ret

00001974 <_ZN6CC11019cmdStrobeEh>:
 * 
 * 'cmd'	Command strobe
 */     
void CC1101::cmdStrobe(byte cmd) 
{
  cc1101_Select();                      // Select CC1101
    1974:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    1976:	1c 99       	sbic	0x03, 4	; 3
    1978:	fe cf       	rjmp	.-4      	; 0x1976 <_ZN6CC11019cmdStrobeEh+0x2>
  spi.send(cmd);                        // Send strobe command
    197a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
    197e:	2a 9a       	sbi	0x05, 2	; 5
    1980:	08 95       	ret

00001982 <_ZN6CC11017readRegEhh>:
 * 
 * Return:
 * 	Data byte returned by the CC1101 IC
 */
byte CC1101::readReg(byte regAddr, byte regType)
{
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	ec 01       	movw	r28, r24
  byte addr, val;

  addr = regAddr | regType;
    1988:	64 2b       	or	r22, r20
  cc1101_Select();                      // Select CC1101
    198a:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    198c:	1c 99       	sbic	0x03, 4	; 3
    198e:	fe cf       	rjmp	.-4      	; 0x198c <_ZN6CC11017readRegEhh+0xa>
  spi.send(addr);                       // Send register address
    1990:	ce 01       	movw	r24, r28
    1992:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
  val = spi.send(0x00);                 // Read result
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	ce 01       	movw	r24, r28
    199a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
    199e:	2a 9a       	sbi	0x05, 2	; 5

  return val;
}
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	08 95       	ret

000019a6 <_ZN6CC110112readBurstRegEPhhh>:
 * 'buffer'	Buffer where to copy the result to
 * 'regAddr'	Register address
 * 'len'	Data length
 */
void CC1101::readBurstReg(byte * buffer, byte regAddr, byte len) 
{
    19a6:	df 92       	push	r13
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	8c 01       	movw	r16, r24
    19b6:	d6 2e       	mov	r13, r22
    19b8:	e7 2e       	mov	r14, r23
    19ba:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | READ_BURST;
    19bc:	64 2f       	mov	r22, r20
    19be:	60 6c       	ori	r22, 0xC0	; 192
  cc1101_Select();                      // Select CC1101
    19c0:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    19c2:	1c 99       	sbic	0x03, 4	; 3
    19c4:	fe cf       	rjmp	.-4      	; 0x19c2 <_ZN6CC110112readBurstRegEPhhh+0x1c>
  spi.send(addr);                       // Send register address
    19c6:	c8 01       	movw	r24, r16
    19c8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
    19cc:	cd 2d       	mov	r28, r13
    19ce:	de 2d       	mov	r29, r14
    19d0:	ce 01       	movw	r24, r28
    19d2:	8f 0d       	add	r24, r15
    19d4:	91 1d       	adc	r25, r1
    19d6:	7c 01       	movw	r14, r24
  for(i=0 ; i<len ; i++)
    19d8:	ce 15       	cp	r28, r14
    19da:	df 05       	cpc	r29, r15
    19dc:	31 f0       	breq	.+12     	; 0x19ea <_ZN6CC110112readBurstRegEPhhh+0x44>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	c8 01       	movw	r24, r16
    19e2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
    19e6:	89 93       	st	Y+, r24
  
  addr = regAddr | READ_BURST;
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  for(i=0 ; i<len ; i++)
    19e8:	f7 cf       	rjmp	.-18     	; 0x19d8 <_ZN6CC110112readBurstRegEPhhh+0x32>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
  cc1101_Deselect();                    // Deselect CC1101
    19ea:	2a 9a       	sbi	0x05, 2	; 5
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	08 95       	ret

000019fc <_ZN6CC110111setSyncWordEhh>:
 * 
 * 'syncH'	Synchronization word - High byte
 * 'syncL'	Synchronization word - Low byte
 */
void CC1101::setSyncWord(uint8_t syncH, uint8_t syncL) 
{
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	ec 01       	movw	r28, r24
    1a06:	06 2f       	mov	r16, r22
    1a08:	14 2f       	mov	r17, r20
  writeReg(CC1101_SYNC1, syncH);
    1a0a:	46 2f       	mov	r20, r22
    1a0c:	64 e0       	ldi	r22, 0x04	; 4
    1a0e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_SYNC0, syncL);
    1a12:	41 2f       	mov	r20, r17
    1a14:	65 e0       	ldi	r22, 0x05	; 5
    1a16:	ce 01       	movw	r24, r28
    1a18:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  syncWord[0] = syncH;
    1a1c:	0e 83       	std	Y+6, r16	; 0x06
  syncWord[1] = syncL;
    1a1e:	1f 83       	std	Y+7, r17	; 0x07
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <_ZN6CC110111setSyncWordEPh>:
 * 
 * 'syncH'	Synchronization word - pointer to 2-byte array
 */
void CC1101::setSyncWord(byte *sync) 
{
  CC1101::setSyncWord(sync[0], sync[1]);
    1a2a:	fb 01       	movw	r30, r22
    1a2c:	41 81       	ldd	r20, Z+1	; 0x01
    1a2e:	60 81       	ld	r22, Z
    1a30:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <_ZN6CC110111setSyncWordEhh>

00001a34 <_ZN6CC110113setDevAddressEh>:
 * Set device address
 * 
 * @param addr	Device address
 */
void CC1101::setDevAddress(byte addr) 
{
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	ec 01       	movw	r28, r24
    1a3c:	16 2f       	mov	r17, r22
  writeReg(CC1101_ADDR, addr);
    1a3e:	46 2f       	mov	r20, r22
    1a40:	69 e0       	ldi	r22, 0x09	; 9
    1a42:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  devAddress = addr;
    1a46:	18 87       	std	Y+8, r17	; 0x08
}
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	08 95       	ret

00001a50 <_ZN6CC110110setChannelEh>:
 * Set frequency channel
 * 
 * 'chnl'	Frequency channel
 */
void CC1101::setChannel(byte chnl) 
{
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	ec 01       	movw	r28, r24
    1a58:	16 2f       	mov	r17, r22
  writeReg(CC1101_CHANNR,  chnl);
    1a5a:	46 2f       	mov	r20, r22
    1a5c:	6a e0       	ldi	r22, 0x0A	; 10
    1a5e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  channel = chnl;
    1a62:	1d 83       	std	Y+5, r17	; 0x05
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	08 95       	ret

00001a6c <_ZN6CC110114setCarrierFreqEh>:
 * Set carrier frequency
 * 
 * 'freq'	New carrier frequency
 */
void CC1101::setCarrierFreq(byte freq)
{
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	ec 01       	movw	r28, r24
    1a74:	16 2f       	mov	r17, r22
  switch(freq)
    1a76:	62 30       	cpi	r22, 0x02	; 2
    1a78:	79 f0       	breq	.+30     	; 0x1a98 <_ZN6CC110114setCarrierFreqEh+0x2c>
    1a7a:	63 30       	cpi	r22, 0x03	; 3
    1a7c:	c1 f0       	breq	.+48     	; 0x1aae <_ZN6CC110114setCarrierFreqEh+0x42>
    1a7e:	61 30       	cpi	r22, 0x01	; 1
    1a80:	09 f5       	brne	.+66     	; 0x1ac4 <_ZN6CC110114setCarrierFreqEh+0x58>
  {
    case CFREQ_915:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_915);
    1a82:	42 e2       	ldi	r20, 0x22	; 34
    1a84:	6d e0       	ldi	r22, 0x0D	; 13
    1a86:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_915);
    1a8a:	41 eb       	ldi	r20, 0xB1	; 177
    1a8c:	6e e0       	ldi	r22, 0x0E	; 14
    1a8e:	ce 01       	movw	r24, r28
    1a90:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_915);
    1a94:	4b e3       	ldi	r20, 0x3B	; 59
    1a96:	20 c0       	rjmp	.+64     	; 0x1ad8 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_433:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_433);
    1a98:	40 e1       	ldi	r20, 0x10	; 16
    1a9a:	6d e0       	ldi	r22, 0x0D	; 13
    1a9c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_433);
    1aa0:	47 ea       	ldi	r20, 0xA7	; 167
    1aa2:	6e e0       	ldi	r22, 0x0E	; 14
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_433);
    1aaa:	42 e6       	ldi	r20, 0x62	; 98
    1aac:	15 c0       	rjmp	.+42     	; 0x1ad8 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_918:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_918);
    1aae:	43 e2       	ldi	r20, 0x23	; 35
    1ab0:	6d e0       	ldi	r22, 0x0D	; 13
    1ab2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_918);
    1ab6:	4e e4       	ldi	r20, 0x4E	; 78
    1ab8:	6e e0       	ldi	r22, 0x0E	; 14
    1aba:	ce 01       	movw	r24, r28
    1abc:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_918);
    1ac0:	44 ec       	ldi	r20, 0xC4	; 196
    1ac2:	0a c0       	rjmp	.+20     	; 0x1ad8 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    default:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_868);
    1ac4:	41 e2       	ldi	r20, 0x21	; 33
    1ac6:	6d e0       	ldi	r22, 0x0D	; 13
    1ac8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_868);
    1acc:	42 e6       	ldi	r20, 0x62	; 98
    1ace:	6e e0       	ldi	r22, 0x0E	; 14
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_868);
    1ad6:	46 e7       	ldi	r20, 0x76	; 118
    1ad8:	6f e0       	ldi	r22, 0x0F	; 15
    1ada:	ce 01       	movw	r24, r28
    1adc:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
      break;
  }
   
  carrierFreq = freq;  
    1ae0:	1b 83       	std	Y+3, r17	; 0x03
}
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	08 95       	ret

00001aea <_ZN6CC110117setPowerDownStateEv>:
 * setPowerDownState
 * 
 * Put CC1101 into power-down state
 */
void CC1101::setPowerDownState() 
{
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ec 01       	movw	r28, r24
  // Comming from RX state, we need to enter the IDLE state first
  cmdStrobe(CC1101_SIDLE);
    1af0:	66 e3       	ldi	r22, 0x36	; 54
    1af2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>
  // Enter Power-down state
  cmdStrobe(CC1101_SPWD);
    1af6:	69 e3       	ldi	r22, 0x39	; 57
    1af8:	ce 01       	movw	r24, r28
}
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
void CC1101::setPowerDownState() 
{
  // Comming from RX state, we need to enter the IDLE state first
  cmdStrobe(CC1101_SIDLE);
  // Enter Power-down state
  cmdStrobe(CC1101_SPWD);
    1afe:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>

00001b02 <_ZN6CC110110setRxStateEv>:
 * setRxState
 * 
 * Enter Rx state
 */
void CC1101::setRxState(void)
{
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	ec 01       	movw	r28, r24
  cmdStrobe(CC1101_SRX);
    1b08:	64 e3       	ldi	r22, 0x34	; 52
    1b0a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_RX;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	8a 83       	std	Y+2, r24	; 0x02
}
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <_ZN6CC110111receiveDataEP8CCPACKET>:
 * 
 * Return:
 * 	Amount of bytes received
 */
byte CC1101::receiveData(CCPACKET * packet)
{
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	ec 01       	movw	r28, r24
    1b22:	8b 01       	movw	r16, r22
  byte val;
  byte rxBytes = readStatusReg(CC1101_RXBYTES);
    1b24:	40 ec       	ldi	r20, 0xC0	; 192
    1b26:	6b e3       	ldi	r22, 0x3B	; 59
    1b28:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN6CC11017readRegEhh>

  // Any byte waiting to be read and no overflow?
  if (rxBytes & 0x7F && !(rxBytes & 0x80))
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	9f 77       	andi	r25, 0x7F	; 127
    1b30:	59 f0       	breq	.+22     	; 0x1b48 <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
    1b32:	87 fd       	sbrc	r24, 7
    1b34:	09 c0       	rjmp	.+18     	; 0x1b48 <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
  {
    // Read data length
    packet->length = readConfigReg(CC1101_RXFIFO);
    1b36:	40 e8       	ldi	r20, 0x80	; 128
    1b38:	6f e3       	ldi	r22, 0x3F	; 63
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN6CC11017readRegEhh>
    1b40:	f8 01       	movw	r30, r16
    1b42:	80 83       	st	Z, r24
    // If packet is too long
    if (packet->length > CCPACKET_DATA_LEN)
    1b44:	8e 33       	cpi	r24, 0x3E	; 62
    1b46:	18 f0       	brcs	.+6      	; 0x1b4e <_ZN6CC110111receiveDataEP8CCPACKET+0x36>
      packet->length = 0;   // Discard packet
    1b48:	f8 01       	movw	r30, r16
    1b4a:	10 82       	st	Z, r1
    1b4c:	1f c0       	rjmp	.+62     	; 0x1b8c <_ZN6CC110111receiveDataEP8CCPACKET+0x74>
    else
    {
      // Read data packet
      readBurstReg(packet->data, CC1101_RXFIFO, packet->length);
    1b4e:	28 2f       	mov	r18, r24
    1b50:	4f e3       	ldi	r20, 0x3F	; 63
    1b52:	b8 01       	movw	r22, r16
    1b54:	6f 5f       	subi	r22, 0xFF	; 255
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	ce 01       	movw	r24, r28
    1b5a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_ZN6CC110112readBurstRegEPhhh>
      // Read RSSI
      packet->rssi = readConfigReg(CC1101_RXFIFO);
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	6f e3       	ldi	r22, 0x3F	; 63
    1b62:	ce 01       	movw	r24, r28
    1b64:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN6CC11017readRegEhh>
    1b68:	f8 01       	movw	r30, r16
    1b6a:	87 af       	std	Z+63, r24	; 0x3f
      // Read LQI and CRC_OK
      val = readConfigReg(CC1101_RXFIFO);
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	6f e3       	ldi	r22, 0x3F	; 63
    1b70:	ce 01       	movw	r24, r28
    1b72:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN6CC11017readRegEhh>
      packet->lqi = val & 0x7F;
    1b76:	f8 01       	movw	r30, r16
    1b78:	e0 5c       	subi	r30, 0xC0	; 192
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	98 2f       	mov	r25, r24
    1b7e:	9f 77       	andi	r25, 0x7F	; 127
    1b80:	90 83       	st	Z, r25
      packet->crc_ok = bitRead(val, 7);
    1b82:	88 1f       	adc	r24, r24
    1b84:	88 27       	eor	r24, r24
    1b86:	88 1f       	adc	r24, r24
    1b88:	f8 01       	movw	r30, r16
    1b8a:	86 af       	std	Z+62, r24	; 0x3e
    }
  }
  else
    packet->length = 0;

  setIdleState();       // Enter IDLE state
    1b8c:	66 e3       	ldi	r22, 0x36	; 54
    1b8e:	ce 01       	movw	r24, r28
    1b90:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>
  flushRxFifo();        // Flush Rx FIFO
    1b94:	6a e3       	ldi	r22, 0x3A	; 58
    1b96:	ce 01       	movw	r24, r28
    1b98:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>
  //cmdStrobe(CC1101_SCAL);

  // Back to RX state
  setRxState();
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN6CC110110setRxStateEv>

  return packet->length;
}
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	80 81       	ld	r24, Z
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <_ZN6CC110110setTxStateEv>:
 * setTxState
 * 
 * Enter Tx state
 */
void CC1101::setTxState(void)
{
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	ec 01       	movw	r28, r24
  cmdStrobe(CC1101_STX);
    1bb6:	65 e3       	ldi	r22, 0x35	; 53
    1bb8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_TX;
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
}
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	08 95       	ret

00001bc6 <_ZN6CC11018sendDataE8CCPACKET>:
 *  Return:
 *    True if the transmission succeeds
 *    False otherwise
 */
bool CC1101::sendData(CCPACKET packet)
{
    1bc6:	ff 92       	push	r15
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	8c 01       	movw	r16, r24
  byte marcState;
  bool res = false;
 
  // Declare to be in Tx state. This will avoid receiving packets whilst
  // transmitting
  rfState = RFSTATE_TX;
    1bd6:	82 e0       	ldi	r24, 0x02	; 2
    1bd8:	f8 01       	movw	r30, r16
    1bda:	82 83       	std	Z+2, r24	; 0x02

  // Enter RX state
  setRxState();
    1bdc:	c8 01       	movw	r24, r16
    1bde:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN6CC110110setRxStateEv>

  // Check that the RX state has been entered
  while (((marcState = readStatusReg(CC1101_MARCSTATE)) & 0x1F) != 0x0D)
    1be2:	40 ec       	ldi	r20, 0xC0	; 192
    1be4:	65 e3       	ldi	r22, 0x35	; 53
    1be6:	c8 01       	movw	r24, r16
    1be8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN6CC11017readRegEhh>
    1bec:	98 2f       	mov	r25, r24
    1bee:	9f 71       	andi	r25, 0x1F	; 31
    1bf0:	9d 30       	cpi	r25, 0x0D	; 13
    1bf2:	39 f0       	breq	.+14     	; 0x1c02 <_ZN6CC11018sendDataE8CCPACKET+0x3c>
  {
    if (marcState == 0x11)        // RX_OVERFLOW
    1bf4:	81 31       	cpi	r24, 0x11	; 17
    1bf6:	a9 f7       	brne	.-22     	; 0x1be2 <_ZN6CC11018sendDataE8CCPACKET+0x1c>
      flushRxFifo();              // flush receive queue
    1bf8:	6a e3       	ldi	r22, 0x3A	; 58
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>
    1c00:	f0 cf       	rjmp	.-32     	; 0x1be2 <_ZN6CC11018sendDataE8CCPACKET+0x1c>
  }

  delayMicroseconds(500);
    1c02:	84 ef       	ldi	r24, 0xF4	; 244
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 61 09 	call	0x12c2	; 0x12c2 <delayMicroseconds>

  if (packet.length > 0)
    1c0a:	48 85       	ldd	r20, Y+8	; 0x08
    1c0c:	44 23       	and	r20, r20
    1c0e:	79 f0       	breq	.+30     	; 0x1c2e <_ZN6CC11018sendDataE8CCPACKET+0x68>
  {
    // Set data length at the first position of the TX FIFO
    writeReg(CC1101_TXFIFO,  packet.length);
    1c10:	6f e3       	ldi	r22, 0x3F	; 63
    1c12:	c8 01       	movw	r24, r16
    1c14:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
    // Write data into the TX FIFO
    writeBurstReg(CC1101_TXFIFO, packet.data, packet.length);
    1c18:	28 85       	ldd	r18, Y+8	; 0x08
    1c1a:	ae 01       	movw	r20, r28
    1c1c:	47 5f       	subi	r20, 0xF7	; 247
    1c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c20:	6f e3       	ldi	r22, 0x3F	; 63
    1c22:	c8 01       	movw	r24, r16
    1c24:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN6CC110113writeBurstRegEhPhh>

    // CCA enabled: will enter TX state only if the channel is clear
    setTxState();
    1c28:	c8 01       	movw	r24, r16
    1c2a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN6CC110110setTxStateEv>
  }

  // Check that TX state is being entered (state = RXTX_SETTLING)
  marcState = readStatusReg(CC1101_MARCSTATE) & 0x1F;
    1c2e:	40 ec       	ldi	r20, 0xC0	; 192
    1c30:	65 e3       	ldi	r22, 0x35	; 53
    1c32:	c8 01       	movw	r24, r16
    1c34:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN6CC11017readRegEhh>
  if((marcState != 0x13) && (marcState != 0x14) && (marcState != 0x15))
    1c38:	8f 71       	andi	r24, 0x1F	; 31
    1c3a:	83 51       	subi	r24, 0x13	; 19
    1c3c:	83 30       	cpi	r24, 0x03	; 3
    1c3e:	80 f0       	brcs	.+32     	; 0x1c60 <_ZN6CC11018sendDataE8CCPACKET+0x9a>
  {
    setIdleState();       // Enter IDLE state
    1c40:	66 e3       	ldi	r22, 0x36	; 54
    1c42:	c8 01       	movw	r24, r16
    1c44:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>
    flushTxFifo();        // Flush Tx FIFO
    1c48:	6b e3       	ldi	r22, 0x3B	; 59
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>
    setRxState();         // Back to RX state
    1c50:	c8 01       	movw	r24, r16
    1c52:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN6CC110110setRxStateEv>

    // Declare to be in Rx state
    rfState = RFSTATE_RX;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	f8 01       	movw	r30, r16
    1c5a:	82 83       	std	Z+2, r24	; 0x02
    return false;
    1c5c:	f1 2c       	mov	r15, r1
    1c5e:	1c c0       	rjmp	.+56     	; 0x1c98 <_ZN6CC11018sendDataE8CCPACKET+0xd2>
  }

  // Wait for the sync word to be transmitted
  wait_GDO0_high();
    1c60:	4a 9b       	sbis	0x09, 2	; 9
    1c62:	fe cf       	rjmp	.-4      	; 0x1c60 <_ZN6CC11018sendDataE8CCPACKET+0x9a>

  // Wait until the end of the packet transmission
  wait_GDO0_low();
    1c64:	4a 99       	sbic	0x09, 2	; 9
    1c66:	fe cf       	rjmp	.-4      	; 0x1c64 <_ZN6CC11018sendDataE8CCPACKET+0x9e>

  // Check that the TX FIFO is empty
  if((readStatusReg(CC1101_TXBYTES) & 0x7F) == 0)
    1c68:	40 ec       	ldi	r20, 0xC0	; 192
    1c6a:	6a e3       	ldi	r22, 0x3A	; 58
    1c6c:	c8 01       	movw	r24, r16
    1c6e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN6CC11017readRegEhh>
    1c72:	8f 77       	andi	r24, 0x7F	; 127
    1c74:	ff 24       	eor	r15, r15
    1c76:	f3 94       	inc	r15
    1c78:	81 11       	cpse	r24, r1
    1c7a:	f1 2c       	mov	r15, r1
    res = true;

  setIdleState();       // Enter IDLE state
    1c7c:	66 e3       	ldi	r22, 0x36	; 54
    1c7e:	c8 01       	movw	r24, r16
    1c80:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>
  flushTxFifo();        // Flush Tx FIFO
    1c84:	6b e3       	ldi	r22, 0x3B	; 59
    1c86:	c8 01       	movw	r24, r16
    1c88:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN6CC11019cmdStrobeEh>

  // Enter back into RX state
  setRxState();
    1c8c:	c8 01       	movw	r24, r16
    1c8e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN6CC110110setRxStateEv>

  // Declare to be in Rx state
  rfState = RFSTATE_RX;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	f8 01       	movw	r30, r16
    1c96:	82 83       	std	Z+2, r24	; 0x02

  return res;
}
    1c98:	8f 2d       	mov	r24, r15
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	08 95       	ret

00001ca6 <_ZN6CC11019setCCregsEv>:
 * setCCregs
 * 
 * Configure CC1101 registers
 */
void CC1101::setCCregs(void) 
{
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	c1 54       	subi	r28, 0x41	; 65
    1cb4:	d1 09       	sbc	r29, r1
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	8c 01       	movw	r16, r24
  writeReg(CC1101_IOCFG2,  CC1101_DEFVAL_IOCFG2);
    1cc2:	4e e2       	ldi	r20, 0x2E	; 46
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG1,  CC1101_DEFVAL_IOCFG1);
    1cca:	4e e2       	ldi	r20, 0x2E	; 46
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	c8 01       	movw	r24, r16
    1cd0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG0,  CC1101_DEFVAL_IOCFG0);
    1cd4:	46 e0       	ldi	r20, 0x06	; 6
    1cd6:	62 e0       	ldi	r22, 0x02	; 2
    1cd8:	c8 01       	movw	r24, r16
    1cda:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FIFOTHR,  CC1101_DEFVAL_FIFOTHR);
    1cde:	47 e0       	ldi	r20, 0x07	; 7
    1ce0:	63 e0       	ldi	r22, 0x03	; 3
    1ce2:	c8 01       	movw	r24, r16
    1ce4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTLEN,  CC1101_DEFVAL_PKTLEN);
    1ce8:	4d e3       	ldi	r20, 0x3D	; 61
    1cea:	66 e0       	ldi	r22, 0x06	; 6
    1cec:	c8 01       	movw	r24, r16
    1cee:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL1,  CC1101_DEFVAL_PKTCTRL1);
    1cf2:	46 e0       	ldi	r20, 0x06	; 6
    1cf4:	67 e0       	ldi	r22, 0x07	; 7
    1cf6:	c8 01       	movw	r24, r16
    1cf8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL0,  CC1101_DEFVAL_PKTCTRL0);
    1cfc:	45 e0       	ldi	r20, 0x05	; 5
    1cfe:	68 e0       	ldi	r22, 0x08	; 8
    1d00:	c8 01       	movw	r24, r16
    1d02:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>

  // Set default synchronization word
  setSyncWord(syncWord);
    1d06:	b8 01       	movw	r22, r16
    1d08:	6a 5f       	subi	r22, 0xFA	; 250
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN6CC110111setSyncWordEPh>

  // Set default device address
  setDevAddress(devAddress);
    1d12:	f8 01       	movw	r30, r16
    1d14:	60 85       	ldd	r22, Z+8	; 0x08
    1d16:	c8 01       	movw	r24, r16
    1d18:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <_ZN6CC110113setDevAddressEh>

  // Set default frequency channel
  setChannel(channel);
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	65 81       	ldd	r22, Z+5	; 0x05
    1d20:	c8 01       	movw	r24, r16
    1d22:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN6CC110110setChannelEh>
  
  writeReg(CC1101_FSCTRL1,  CC1101_DEFVAL_FSCTRL1);
    1d26:	48 e0       	ldi	r20, 0x08	; 8
    1d28:	6b e0       	ldi	r22, 0x0B	; 11
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCTRL0,  CC1101_DEFVAL_FSCTRL0);
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	6c e0       	ldi	r22, 0x0C	; 12
    1d34:	c8 01       	movw	r24, r16
    1d36:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>

  // Set default carrier frequency = 868 MHz
  setCarrierFreq(carrierFreq);
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	63 81       	ldd	r22, Z+3	; 0x03
    1d3e:	c8 01       	movw	r24, r16
    1d40:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN6CC110114setCarrierFreqEh>

  // RF speed
  if (workMode == MODE_LOW_SPEED)
    1d44:	f8 01       	movw	r30, r16
    1d46:	84 81       	ldd	r24, Z+4	; 0x04
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <_ZN6CC11019setCCregsEv+0xaa>
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_4800);
    1d4c:	47 ec       	ldi	r20, 0xC7	; 199
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <_ZN6CC11019setCCregsEv+0xac>
  else
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_38400);
    1d50:	4a ec       	ldi	r20, 0xCA	; 202
    1d52:	60 e1       	ldi	r22, 0x10	; 16
    1d54:	c8 01       	movw	r24, r16
    1d56:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
    
  writeReg(CC1101_MDMCFG3,  CC1101_DEFVAL_MDMCFG3);
    1d5a:	43 e8       	ldi	r20, 0x83	; 131
    1d5c:	61 e1       	ldi	r22, 0x11	; 17
    1d5e:	c8 01       	movw	r24, r16
    1d60:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG2,  CC1101_DEFVAL_MDMCFG2);
    1d64:	43 e9       	ldi	r20, 0x93	; 147
    1d66:	62 e1       	ldi	r22, 0x12	; 18
    1d68:	c8 01       	movw	r24, r16
    1d6a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG1,  CC1101_DEFVAL_MDMCFG1);
    1d6e:	42 e2       	ldi	r20, 0x22	; 34
    1d70:	63 e1       	ldi	r22, 0x13	; 19
    1d72:	c8 01       	movw	r24, r16
    1d74:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG0,  CC1101_DEFVAL_MDMCFG0);
    1d78:	48 ef       	ldi	r20, 0xF8	; 248
    1d7a:	64 e1       	ldi	r22, 0x14	; 20
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_DEVIATN,  CC1101_DEFVAL_DEVIATN);
    1d82:	45 e3       	ldi	r20, 0x35	; 53
    1d84:	65 e1       	ldi	r22, 0x15	; 21
    1d86:	c8 01       	movw	r24, r16
    1d88:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM2,  CC1101_DEFVAL_MCSM2);
    1d8c:	47 e0       	ldi	r20, 0x07	; 7
    1d8e:	66 e1       	ldi	r22, 0x16	; 22
    1d90:	c8 01       	movw	r24, r16
    1d92:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM1,  CC1101_DEFVAL_MCSM1);
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	67 e1       	ldi	r22, 0x17	; 23
    1d9a:	c8 01       	movw	r24, r16
    1d9c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM0,  CC1101_DEFVAL_MCSM0);
    1da0:	48 e1       	ldi	r20, 0x18	; 24
    1da2:	68 e1       	ldi	r22, 0x18	; 24
    1da4:	c8 01       	movw	r24, r16
    1da6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FOCCFG,  CC1101_DEFVAL_FOCCFG);
    1daa:	46 e1       	ldi	r20, 0x16	; 22
    1dac:	69 e1       	ldi	r22, 0x19	; 25
    1dae:	c8 01       	movw	r24, r16
    1db0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_BSCFG,  CC1101_DEFVAL_BSCFG);
    1db4:	4c e6       	ldi	r20, 0x6C	; 108
    1db6:	6a e1       	ldi	r22, 0x1A	; 26
    1db8:	c8 01       	movw	r24, r16
    1dba:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL2,  CC1101_DEFVAL_AGCCTRL2);
    1dbe:	43 e4       	ldi	r20, 0x43	; 67
    1dc0:	6b e1       	ldi	r22, 0x1B	; 27
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL1,  CC1101_DEFVAL_AGCCTRL1);
    1dc8:	40 e4       	ldi	r20, 0x40	; 64
    1dca:	6c e1       	ldi	r22, 0x1C	; 28
    1dcc:	c8 01       	movw	r24, r16
    1dce:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL0,  CC1101_DEFVAL_AGCCTRL0);
    1dd2:	41 e9       	ldi	r20, 0x91	; 145
    1dd4:	6d e1       	ldi	r22, 0x1D	; 29
    1dd6:	c8 01       	movw	r24, r16
    1dd8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT1,  CC1101_DEFVAL_WOREVT1);
    1ddc:	47 e8       	ldi	r20, 0x87	; 135
    1dde:	6e e1       	ldi	r22, 0x1E	; 30
    1de0:	c8 01       	movw	r24, r16
    1de2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT0,  CC1101_DEFVAL_WOREVT0);
    1de6:	4b e6       	ldi	r20, 0x6B	; 107
    1de8:	6f e1       	ldi	r22, 0x1F	; 31
    1dea:	c8 01       	movw	r24, r16
    1dec:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WORCTRL,  CC1101_DEFVAL_WORCTRL);
    1df0:	4b ef       	ldi	r20, 0xFB	; 251
    1df2:	60 e2       	ldi	r22, 0x20	; 32
    1df4:	c8 01       	movw	r24, r16
    1df6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND1,  CC1101_DEFVAL_FREND1);
    1dfa:	46 e5       	ldi	r20, 0x56	; 86
    1dfc:	61 e2       	ldi	r22, 0x21	; 33
    1dfe:	c8 01       	movw	r24, r16
    1e00:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND0,  CC1101_DEFVAL_FREND0);
    1e04:	40 e1       	ldi	r20, 0x10	; 16
    1e06:	62 e2       	ldi	r22, 0x22	; 34
    1e08:	c8 01       	movw	r24, r16
    1e0a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL3,  CC1101_DEFVAL_FSCAL3);
    1e0e:	49 ee       	ldi	r20, 0xE9	; 233
    1e10:	63 e2       	ldi	r22, 0x23	; 35
    1e12:	c8 01       	movw	r24, r16
    1e14:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL2,  CC1101_DEFVAL_FSCAL2);
    1e18:	4a e2       	ldi	r20, 0x2A	; 42
    1e1a:	64 e2       	ldi	r22, 0x24	; 36
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL1,  CC1101_DEFVAL_FSCAL1);
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	65 e2       	ldi	r22, 0x25	; 37
    1e26:	c8 01       	movw	r24, r16
    1e28:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL0,  CC1101_DEFVAL_FSCAL0);
    1e2c:	4f e1       	ldi	r20, 0x1F	; 31
    1e2e:	66 e2       	ldi	r22, 0x26	; 38
    1e30:	c8 01       	movw	r24, r16
    1e32:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL1,  CC1101_DEFVAL_RCCTRL1);
    1e36:	41 e4       	ldi	r20, 0x41	; 65
    1e38:	67 e2       	ldi	r22, 0x27	; 39
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL0,  CC1101_DEFVAL_RCCTRL0);
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	68 e2       	ldi	r22, 0x28	; 40
    1e44:	c8 01       	movw	r24, r16
    1e46:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSTEST,  CC1101_DEFVAL_FSTEST);
    1e4a:	49 e5       	ldi	r20, 0x59	; 89
    1e4c:	69 e2       	ldi	r22, 0x29	; 41
    1e4e:	c8 01       	movw	r24, r16
    1e50:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PTEST,  CC1101_DEFVAL_PTEST);
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	6a e2       	ldi	r22, 0x2A	; 42
    1e58:	c8 01       	movw	r24, r16
    1e5a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCTEST,  CC1101_DEFVAL_AGCTEST);
    1e5e:	4f e3       	ldi	r20, 0x3F	; 63
    1e60:	6b e2       	ldi	r22, 0x2B	; 43
    1e62:	c8 01       	movw	r24, r16
    1e64:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST2,  CC1101_DEFVAL_TEST2);
    1e68:	41 e8       	ldi	r20, 0x81	; 129
    1e6a:	6c e2       	ldi	r22, 0x2C	; 44
    1e6c:	c8 01       	movw	r24, r16
    1e6e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST1,  CC1101_DEFVAL_TEST1);
    1e72:	45 e3       	ldi	r20, 0x35	; 53
    1e74:	6d e2       	ldi	r22, 0x2D	; 45
    1e76:	c8 01       	movw	r24, r16
    1e78:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST0,  CC1101_DEFVAL_TEST0);
    1e7c:	49 e0       	ldi	r20, 0x09	; 9
    1e7e:	6e e2       	ldi	r22, 0x2E	; 46
    1e80:	c8 01       	movw	r24, r16
    1e82:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
  
  // Send empty packet
  CCPACKET packet;
  packet.length = 0;
    1e86:	19 82       	std	Y+1, r1	; 0x01
  sendData(packet);
    1e88:	8d b7       	in	r24, 0x3d	; 61
    1e8a:	9e b7       	in	r25, 0x3e	; 62
    1e8c:	81 54       	subi	r24, 0x41	; 65
    1e8e:	91 09       	sbc	r25, r1
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	9e bf       	out	0x3e, r25	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	8d bf       	out	0x3d, r24	; 61
    1e9a:	ad b7       	in	r26, 0x3d	; 61
    1e9c:	be b7       	in	r27, 0x3e	; 62
    1e9e:	11 96       	adiw	r26, 0x01	; 1
    1ea0:	81 e4       	ldi	r24, 0x41	; 65
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	31 96       	adiw	r30, 0x01	; 1
    1ea6:	01 90       	ld	r0, Z+
    1ea8:	0d 92       	st	X+, r0
    1eaa:	8a 95       	dec	r24
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <_ZN6CC11019setCCregsEv+0x200>
    1eae:	c8 01       	movw	r24, r16
    1eb0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN6CC11018sendDataE8CCPACKET>
}
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	cf 5b       	subi	r28, 0xBF	; 191
    1ec0:	df 4f       	sbci	r29, 0xFF	; 255
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	1f 91       	pop	r17
    1ed2:	0f 91       	pop	r16
    1ed4:	08 95       	ret

00001ed6 <_ZN6CC11015resetEv>:
 * reset
 * 
 * Reset CC1101
 */
void CC1101::reset(void) 
{
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	ec 01       	movw	r28, r24
  cc1101_Deselect();                    // Deselect CC1101
    1edc:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(5);
    1ede:	85 e0       	ldi	r24, 0x05	; 5
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    1ee6:	2a 98       	cbi	0x05, 2	; 5
  delayMicroseconds(10);
    1ee8:	8a e0       	ldi	r24, 0x0A	; 10
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 61 09 	call	0x12c2	; 0x12c2 <delayMicroseconds>
  cc1101_Deselect();                    // Deselect CC1101
    1ef0:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(41);
    1ef2:	89 e2       	ldi	r24, 0x29	; 41
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 61 09 	call	0x12c2	; 0x12c2 <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    1efa:	2a 98       	cbi	0x05, 2	; 5

  wait_Miso();                          // Wait until MISO goes low
    1efc:	1c 99       	sbic	0x03, 4	; 3
    1efe:	fe cf       	rjmp	.-4      	; 0x1efc <_ZN6CC11015resetEv+0x26>
  spi.send(CC1101_SRES);                // Send reset command strobe
    1f00:	60 e3       	ldi	r22, 0x30	; 48
    1f02:	ce 01       	movw	r24, r28
    1f04:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN9SIMPLESPI4sendEh>
  wait_Miso();                          // Wait until MISO goes low
    1f08:	1c 99       	sbic	0x03, 4	; 3
    1f0a:	fe cf       	rjmp	.-4      	; 0x1f08 <_ZN6CC11015resetEv+0x32>

  cc1101_Deselect();                    // Deselect CC1101
    1f0c:	2a 9a       	sbi	0x05, 2	; 5

  setCCregs();                          // Reconfigure CC1101
    1f0e:	ce 01       	movw	r24, r28
}
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
  spi.send(CC1101_SRES);                // Send reset command strobe
  wait_Miso();                          // Wait until MISO goes low

  cc1101_Deselect();                    // Deselect CC1101

  setCCregs();                          // Reconfigure CC1101
    1f14:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <_ZN6CC11019setCCregsEv>

00001f18 <_ZN6CC11014initEhh>:
 *
 * @param freq Carrier frequency
 * @param mode Working mode (speed, ...)
 */
void CC1101::init(uint8_t freq, uint8_t mode)
{
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	ec 01       	movw	r28, r24
  carrierFreq = freq;
    1f1e:	6b 83       	std	Y+3, r22	; 0x03
  workMode = mode;
    1f20:	4c 83       	std	Y+4, r20	; 0x04
  
  spi.init();                           // Initialize SPI interface
    1f22:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_ZN9SIMPLESPI4initEv>
  pinMode(GDO0, INPUT);                 // Config GDO0 as input
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <pinMode>

  reset();                              // Reset CC1101
    1f2e:	ce 01       	movw	r24, r28
    1f30:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <_ZN6CC11015resetEv>
     * 
     * @param paLevel amplification value
     */
    inline void setTxPowerAmp(uint8_t paLevel)
    {
      writeReg(CC1101_PATABLE, paLevel);
    1f34:	40 e6       	ldi	r20, 0x60	; 96
    1f36:	6e e3       	ldi	r22, 0x3E	; 62
    1f38:	ce 01       	movw	r24, r28

  // Configure PATABLE
  setTxPowerAmp(PA_LowPower);
}
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>

00001f42 <_Z8radioISRv>:
  sleep_mode();

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <detachInterrupt>
    1f48:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <panstamp+0x3>
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	a9 f4       	brne	.+42     	; 0x1f7a <_Z8radioISRv+0x38>
    1f50:	6a e2       	ldi	r22, 0x2A	; 42
    1f52:	73 e0       	ldi	r23, 0x03	; 3
    1f54:	8c e6       	ldi	r24, 0x6C	; 108
    1f56:	93 e0       	ldi	r25, 0x03	; 3
    1f58:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN6CC110111receiveDataEP8CCPACKET>
    1f5c:	88 23       	and	r24, r24
    1f5e:	69 f0       	breq	.+26     	; 0x1f7a <_Z8radioISRv+0x38>
    1f60:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <_ZZ8radioISRvE8ccPacket+0x3e>
    1f64:	88 23       	and	r24, r24
    1f66:	49 f0       	breq	.+18     	; 0x1f7a <_Z8radioISRv+0x38>
    1f68:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <panstamp+0xb>
    1f6c:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <panstamp+0xc>
    1f70:	30 97       	sbiw	r30, 0x00	; 0
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <_Z8radioISRv+0x38>
    1f74:	8a e2       	ldi	r24, 0x2A	; 42
    1f76:	93 e0       	ldi	r25, 0x03	; 3
    1f78:	09 95       	icall
    1f7a:	42 e0       	ldi	r20, 0x02	; 2
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	61 ea       	ldi	r22, 0xA1	; 161
    1f80:	7f e0       	ldi	r23, 0x0F	; 15
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <attachInterrupt>

00001f88 <_ZN8PANSTAMPC1Ev>:
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	ec 01       	movw	r28, r24
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN6CC1101C1Ev>
    1f94:	1c 86       	std	Y+12, r1	; 0x0c
    1f96:	1b 86       	std	Y+11, r1	; 0x0b
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <_ZN8PANSTAMP4initEhh>:
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	ec 01       	movw	r28, r24
    1fa8:	8c 01       	movw	r16, r24
    1faa:	0f 5f       	subi	r16, 0xFF	; 255
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	c8 01       	movw	r24, r16
    1fb0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN6CC11014initEhh>
    1fb4:	82 e3       	ldi	r24, 0x32	; 50
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <delayMicroseconds>
    1fbc:	c8 01       	movw	r24, r16
    1fbe:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN6CC110110setRxStateEv>
    1fc2:	42 e0       	ldi	r20, 0x02	; 2
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	61 ea       	ldi	r22, 0xA1	; 161
    1fc8:	7f e0       	ldi	r23, 0x0F	; 15
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <attachInterrupt>
    1fd0:	18 82       	st	Y, r1
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	08 95       	ret

00001fdc <_ZN8PANSTAMP5resetEv>:
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	a8 95       	wdr
    1fe2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1fe6:	88 61       	ori	r24, 0x18	; 24
    1fe8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1fec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	98 e0       	ldi	r25, 0x08	; 8
    1ff4:	88 e1       	ldi	r24, 0x18	; 24
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	a8 95       	wdr
    1ffc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2006:	ff cf       	rjmp	.-2      	; 0x2006 <_ZN8PANSTAMP5resetEv+0x2a>

00002008 <_ZN8PANSTAMP8sleepSecEj6RTCSRC>:
 *
 * @param time Sleep time in seconds
 * @param source Source of interruption (RTCSRC_WDT or RTCSRC_XT2)
 */
void PANSTAMP::sleepSec(uint16_t time, RTCSRC source)
{
    2008:	8f 92       	push	r8
    200a:	9f 92       	push	r9
    200c:	af 92       	push	r10
    200e:	bf 92       	push	r11
    2010:	cf 92       	push	r12
    2012:	df 92       	push	r13
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
  int i, loops;
  byte minTime;
  
  // No interval? Then return
  if (time == 0)
    2020:	61 15       	cp	r22, r1
    2022:	71 05       	cpc	r23, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x20>
    2026:	56 c0       	rjmp	.+172    	; 0x20d4 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xcc>
    return;

  // Search the maximum sleep time passed as argument to sleepWd that best
  // suits our desired interval
  if (time % 8 == 0)
    2028:	9b 01       	movw	r18, r22
    202a:	27 70       	andi	r18, 0x07	; 7
    202c:	33 27       	eor	r19, r19
    202e:	23 2b       	or	r18, r19
    2030:	51 f4       	brne	.+20     	; 0x2046 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x3e>
  {
    loops = time / 8;
    2032:	8b 01       	movw	r16, r22
    2034:	63 e0       	ldi	r22, 0x03	; 3
    2036:	16 95       	lsr	r17
    2038:	07 95       	ror	r16
    203a:	6a 95       	dec	r22
    203c:	e1 f7       	brne	.-8      	; 0x2036 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x2e>
    
    if (source == RTCSRC_XT2)
    203e:	41 30       	cpi	r20, 0x01	; 1
    2040:	e9 f0       	breq	.+58     	; 0x207c <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x74>
      minTime = RTC_8S;
    else
      minTime = WDTO_8S;
    2042:	c9 e0       	ldi	r28, 0x09	; 9
    2044:	20 c0       	rjmp	.+64     	; 0x2086 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
  }
  else if (time % 4 == 0)
    2046:	9b 01       	movw	r18, r22
    2048:	23 70       	andi	r18, 0x03	; 3
    204a:	33 27       	eor	r19, r19
  {
    if (source == RTCSRC_XT2)
    {
      loops = time / 2;
    204c:	8b 01       	movw	r16, r22
    if (source == RTCSRC_XT2)
      minTime = RTC_8S;
    else
      minTime = WDTO_8S;
  }
  else if (time % 4 == 0)
    204e:	23 2b       	or	r18, r19
    2050:	59 f4       	brne	.+22     	; 0x2068 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x60>
  {
    if (source == RTCSRC_XT2)
    2052:	41 30       	cpi	r20, 0x01	; 1
    2054:	19 f4       	brne	.+6      	; 0x205c <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x54>
    {
      loops = time / 2;
    2056:	16 95       	lsr	r17
    2058:	07 95       	ror	r16
    205a:	12 c0       	rjmp	.+36     	; 0x2080 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x78>
      minTime = RTC_2S;
    }
    else
    {
      loops = time / 4;
    205c:	16 95       	lsr	r17
    205e:	07 95       	ror	r16
    2060:	16 95       	lsr	r17
    2062:	07 95       	ror	r16
      minTime = WDTO_4S;
    2064:	c8 e0       	ldi	r28, 0x08	; 8
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
    }
  }
  else if (time % 2 == 0)
    2068:	60 fd       	sbrc	r22, 0
    206a:	05 c0       	rjmp	.+10     	; 0x2076 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x6e>
  {
    loops = time / 2;
    206c:	16 95       	lsr	r17
    206e:	07 95       	ror	r16
    if (source == RTCSRC_XT2)    
    2070:	41 30       	cpi	r20, 0x01	; 1
    2072:	21 f4       	brne	.+8      	; 0x207c <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x74>
    2074:	05 c0       	rjmp	.+10     	; 0x2080 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x78>
      minTime = WDTO_2S;
  }
  else
  {
    loops = time;
    if (source == RTCSRC_XT2)
    2076:	41 30       	cpi	r20, 0x01	; 1
    2078:	19 f4       	brne	.+6      	; 0x2080 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x78>
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7c>
  if (time % 8 == 0)
  {
    loops = time / 8;
    
    if (source == RTCSRC_XT2)
      minTime = RTC_8S;
    207c:	c7 e0       	ldi	r28, 0x07	; 7
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
  }
  else if (time % 2 == 0)
  {
    loops = time / 2;
    if (source == RTCSRC_XT2)    
      minTime = RTC_2S;
    2080:	c6 e0       	ldi	r28, 0x06	; 6
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
  }
  else
  {
    loops = time;
    if (source == RTCSRC_XT2)
      minTime = RTC_1S;
    2084:	c5 e0       	ldi	r28, 0x05	; 5
    2086:	d4 2f       	mov	r29, r20
    2088:	7c 01       	movw	r14, r24
    else
      minTime = WDTO_1S;
  }

  state = RXOFF;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	f7 01       	movw	r30, r14
    208e:	81 93       	st	Z+, r24
    2090:	6f 01       	movw	r12, r30

  // Power-down CC1101
  radio.setPowerDownState();
    2092:	cf 01       	movw	r24, r30
    2094:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN6CC110117setPowerDownStateEv>

  // Sleep
  for (i=0 ; i<loops ; i++)
    2098:	a1 2c       	mov	r10, r1
    209a:	b1 2c       	mov	r11, r1
    209c:	c7 01       	movw	r24, r14
    209e:	0a 96       	adiw	r24, 0x0a	; 10
    20a0:	4c 01       	movw	r8, r24
    20a2:	a0 16       	cp	r10, r16
    20a4:	b1 06       	cpc	r11, r17
    20a6:	8c f4       	brge	.+34     	; 0x20ca <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xc2>
  {
    // Exit sleeping loop?
    if (state == RXON)
    20a8:	f7 01       	movw	r30, r14
    20aa:	80 81       	ld	r24, Z
    20ac:	88 23       	and	r24, r24
    20ae:	69 f0       	breq	.+26     	; 0x20ca <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xc2>
      break;

    if (source == RTCSRC_XT2)
      rtc.sleepRtc(minTime);
    20b0:	6c 2f       	mov	r22, r28
    20b2:	c4 01       	movw	r24, r8
  {
    // Exit sleeping loop?
    if (state == RXON)
      break;

    if (source == RTCSRC_XT2)
    20b4:	d1 30       	cpi	r29, 0x01	; 1
    20b6:	19 f4       	brne	.+6      	; 0x20be <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xb6>
      rtc.sleepRtc(minTime);
    20b8:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN6AVRRTC8sleepRtcEh>
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xba>
    else
      rtc.sleepWd(minTime);
    20be:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN6AVRRTC7sleepWdEh>

  // Power-down CC1101
  radio.setPowerDownState();

  // Sleep
  for (i=0 ; i<loops ; i++)
    20c2:	ff ef       	ldi	r31, 0xFF	; 255
    20c4:	af 1a       	sub	r10, r31
    20c6:	bf 0a       	sbc	r11, r31
    20c8:	ec cf       	rjmp	.-40     	; 0x20a2 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x9a>
    else
      rtc.sleepWd(minTime);
  }

  // Reset CC1101 IC
  radio.wakeUp();
    20ca:	c6 01       	movw	r24, r12
    20cc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN6CC11016wakeUpEv>

  // set system state to RF Rx ON
  state = RXON; 
    20d0:	f7 01       	movw	r30, r14
    20d2:	10 82       	st	Z, r1
}
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	df 90       	pop	r13
    20e2:	cf 90       	pop	r12
    20e4:	bf 90       	pop	r11
    20e6:	af 90       	pop	r10
    20e8:	9f 90       	pop	r9
    20ea:	8f 90       	pop	r8
    20ec:	08 95       	ret

000020ee <_ZN8PANSTAMP9sleepMSecEj6RTCSRC>:
 *
 * @param time Sleep time in seconds
 * @param source Source of interruption (RTCSRC_WDT or RTCSRC_XT2)
 */
void PANSTAMP::sleepMSec(uint16_t time, RTCSRC source)
{
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
  // No interval? Then return
  if (time == 0)
    20fc:	61 15       	cp	r22, r1
    20fe:	71 05       	cpc	r23, r1
    2100:	21 f1       	breq	.+72     	; 0x214a <_ZN8PANSTAMP9sleepMSecEj6RTCSRC+0x5c>
    2102:	d4 2e       	mov	r13, r20
    2104:	eb 01       	movw	r28, r22
    2106:	8c 01       	movw	r16, r24
    return;

  // Search the maximum sleep time passed as argument to sleepWd that best
  // suits our desired interval
 state = RXOFF;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	f8 01       	movw	r30, r16
    210c:	81 93       	st	Z+, r24
    210e:	7f 01       	movw	r14, r30
 // Power-down CC1101
 radio.setPowerDownState();
    2110:	cf 01       	movw	r24, r30
    2112:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN6CC110117setPowerDownStateEv>
 
 if (source == RTCSRC_XT2)
    2116:	f1 e0       	ldi	r31, 0x01	; 1
    2118:	df 12       	cpse	r13, r31
    211a:	0a c0       	rjmp	.+20     	; 0x2130 <_ZN8PANSTAMP9sleepMSecEj6RTCSRC+0x42>
 {
   if ((time == RTC_125MS) ||(time == RTC_250MS) ||(time == RTC_500MS))
    211c:	ce 01       	movw	r24, r28
    211e:	02 97       	sbiw	r24, 0x02	; 2
    2120:	03 97       	sbiw	r24, 0x03	; 3
    2122:	70 f4       	brcc	.+28     	; 0x2140 <_ZN8PANSTAMP9sleepMSecEj6RTCSRC+0x52>
    rtc.sleepRtc(time);
    2124:	6c 2f       	mov	r22, r28
    2126:	c8 01       	movw	r24, r16
    2128:	0a 96       	adiw	r24, 0x0a	; 10
    212a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN6AVRRTC8sleepRtcEh>
    212e:	08 c0       	rjmp	.+16     	; 0x2140 <_ZN8PANSTAMP9sleepMSecEj6RTCSRC+0x52>
 }
 else 
 {
   if ((time == WDTO_15MS) || (time == WDTO_30MS) || (time == WDTO_60MS) || (time == WDTO_120MS) || (time == WDTO_250MS) || (time == WDTO_500MS))
    2130:	c6 30       	cpi	r28, 0x06	; 6
    2132:	d1 05       	cpc	r29, r1
    2134:	28 f4       	brcc	.+10     	; 0x2140 <_ZN8PANSTAMP9sleepMSecEj6RTCSRC+0x52>
    rtc.sleepWd(time);
    2136:	6c 2f       	mov	r22, r28
    2138:	c8 01       	movw	r24, r16
    213a:	0a 96       	adiw	r24, 0x0a	; 10
    213c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN6AVRRTC7sleepWdEh>
 }
 
  // Reset CC1101 IC
  radio.wakeUp();
    2140:	c7 01       	movw	r24, r14
    2142:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN6CC11016wakeUpEv>

  // set system state to RF Rx ON
  state = RXON; 
    2146:	f8 01       	movw	r30, r16
    2148:	10 82       	st	Z, r1
}
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	df 90       	pop	r13
    2158:	08 95       	ret

0000215a <_ZN8PANSTAMP6getVccEv>:
uint16_t PANSTAMP::getVcc(void)
{
  uint16_t result;
  
  // Read 1.1V reference against AVcc
  ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    215a:	8e e4       	ldi	r24, 0x4E	; 78
    215c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  delay(2); // Wait for Vref to settle
    2160:	62 e0       	ldi	r22, 0x02	; 2
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
  ADCSRA |= _BV(ADSC); // Convert
    216c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2170:	80 64       	ori	r24, 0x40	; 64
    2172:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  while (bit_is_set(ADCSRA,ADSC));
    2176:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    217a:	86 fd       	sbrc	r24, 6
    217c:	fc cf       	rjmp	.-8      	; 0x2176 <_ZN8PANSTAMP6getVccEv+0x1c>
  result = ADCL;
    217e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  result |= ADCH << 8;
    2182:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  result = 1077000L / result; // Back-calculate AVcc in mV
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	38 2b       	or	r19, r24
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	68 e0       	ldi	r22, 0x08	; 8
    2190:	7f e6       	ldi	r23, 0x6F	; 111
    2192:	80 e1       	ldi	r24, 0x10	; 16
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 df 1a 	call	0x35be	; 0x35be <__divmodsi4>
  
  return result;
}
    219a:	c9 01       	movw	r24, r18
    219c:	08 95       	ret

0000219e <_GLOBAL__sub_I__Z8radioISRv>:

/**
 * Pre-instantiate PANSTAMP object
 */
PANSTAMP panstamp;
    219e:	8b e6       	ldi	r24, 0x6B	; 107
    21a0:	93 e0       	ldi	r25, 0x03	; 3
    21a2:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <_ZN8PANSTAMPC1Ev>

000021a6 <_ZN9SIMPLESPI4initEv>:
 * SPI initialization
 */
void SIMPLESPI::init() 
{
	
  digitalWrite(SPI_SS, HIGH);
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	8a e0       	ldi	r24, 0x0A	; 10
    21aa:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>
 
  // Configure SPI pins
  pinMode(SPI_SS, OUTPUT);
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	8a e0       	ldi	r24, 0x0A	; 10
    21b2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <pinMode>
 
  pinMode(SPI_MOSI, OUTPUT);
    21b6:	61 e0       	ldi	r22, 0x01	; 1
    21b8:	8b e0       	ldi	r24, 0x0B	; 11
    21ba:	0e 94 ee 09 	call	0x13dc	; 0x13dc <pinMode>
  pinMode(SPI_MISO, INPUT);  
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	8c e0       	ldi	r24, 0x0C	; 12
    21c2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <pinMode>
  pinMode(SPI_SCK, OUTPUT);
    21c6:	61 e0       	ldi	r22, 0x01	; 1
    21c8:	8d e0       	ldi	r24, 0x0D	; 13
    21ca:	0e 94 ee 09 	call	0x13dc	; 0x13dc <pinMode>
  
  digitalWrite(SPI_SCK, HIGH);
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	8d e0       	ldi	r24, 0x0D	; 13
    21d2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>
  digitalWrite(SPI_MOSI, LOW);
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	8b e0       	ldi	r24, 0x0B	; 11
    21da:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>

  // SPI speed = clk/4
  SPCR = _BV(SPE) | _BV(MSTR);
    21de:	80 e5       	ldi	r24, 0x50	; 80
    21e0:	8c bd       	out	0x2c, r24	; 44
    21e2:	08 95       	ret

000021e4 <_ZN9SIMPLESPI4sendEh>:
 * Return:
 * 	Response received from SPI slave
 */
byte SIMPLESPI::send(byte value) 
{
  SPDR = value;                          // Transfer byte via SPI
    21e4:	6e bd       	out	0x2e, r22	; 46
  while(!(SPSR & _BV(SPIF)));            // Wait until SPI operation is terminated
    21e6:	0d b4       	in	r0, 0x2d	; 45
    21e8:	07 fe       	sbrs	r0, 7
    21ea:	fd cf       	rjmp	.-6      	; 0x21e6 <_ZN9SIMPLESPI4sendEh+0x2>

  return SPDR;
    21ec:	8e b5       	in	r24, 0x2e	; 46
}
    21ee:	08 95       	ret

000021f0 <_ZN8REGISTER4initEv>:
 * init
 *
 * Initialize register
 */
void REGISTER::init(void)
{
    21f0:	0f 93       	push	r16
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	1f 92       	push	r1
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
  // Does the value need to be read from EEPROM?
  if (eepromAddress >= 0)
    21fc:	fc 01       	movw	r30, r24
    21fe:	21 85       	ldd	r18, Z+9	; 0x09
    2200:	32 85       	ldd	r19, Z+10	; 0x0a
    2202:	37 fd       	sbrc	r19, 7
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <_ZN8REGISTER4initEv+0x26>
  {
    STORAGE nvMem;
    
    // Read from info memory
    nvMem.read(value, eepromBank, eepromAddress, length);
    2206:	65 81       	ldd	r22, Z+5	; 0x05
    2208:	76 81       	ldd	r23, Z+6	; 0x06
    220a:	07 81       	ldd	r16, Z+7	; 0x07
    220c:	43 85       	ldd	r20, Z+11	; 0x0b
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <_ZN7STORAGE4readEPhhhh>
  }
}
    2216:	0f 90       	pop	r0
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	0f 91       	pop	r16
    221e:	08 95       	ret

00002220 <_ZN8REGISTER14sendSwapStatusEv>:
 * sendSwapStatus
 * 
 * Send SWAP status message
 */
void REGISTER::sendSwapStatus(void) 
{
    2220:	0f 93       	push	r16
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	c0 55       	subi	r28, 0x50	; 80
    222c:	d1 09       	sbc	r29, r1
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	fc 01       	movw	r30, r24
  SWSTATUS packet = SWSTATUS(id, value, length, type);
    223a:	45 81       	ldd	r20, Z+5	; 0x05
    223c:	56 81       	ldd	r21, Z+6	; 0x06
    223e:	00 85       	ldd	r16, Z+8	; 0x08
    2240:	27 81       	ldd	r18, Z+7	; 0x07
    2242:	64 81       	ldd	r22, Z+4	; 0x04
    2244:	ce 01       	movw	r24, r28
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	0e 94 ed 14 	call	0x29da	; 0x29da <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
  packet.send();
    224c:	ce 01       	movw	r24, r28
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	0e 94 27 14 	call	0x284e	; 0x284e <_ZN8SWPACKET4sendEv>
}
    2254:	c0 5b       	subi	r28, 0xB0	; 176
    2256:	df 4f       	sbci	r29, 0xFF	; 255
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	0f 91       	pop	r16
    2268:	08 95       	ret

0000226a <_ZN8REGISTER7getDataEv>:
 * getData
 * 
 * Update and get register value
 */
void REGISTER::getData(void) 
{
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	ec 01       	movw	r28, r24
  // Update register value
  if (updateValue != NULL)
    2270:	e8 81       	ld	r30, Y
    2272:	f9 81       	ldd	r31, Y+1	; 0x01
    2274:	30 97       	sbiw	r30, 0x00	; 0
    2276:	11 f0       	breq	.+4      	; 0x227c <_ZN8REGISTER7getDataEv+0x12>
    updateValue(id);
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	09 95       	icall

  // Send SWAP status message about the new value
  sendSwapStatus();
    227c:	ce 01       	movw	r24, r28
}
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
  // Update register value
  if (updateValue != NULL)
    updateValue(id);

  // Send SWAP status message about the new value
  sendSwapStatus();
    2282:	0c 94 10 11 	jmp	0x2220	; 0x2220 <_ZN8REGISTER14sendSwapStatusEv>

00002286 <_ZN8REGISTER7setDataEPh>:
 * Set register value
 * 
 * @param data New register value
 */
void REGISTER::setData(unsigned char *data) 
{
    2286:	ef 92       	push	r14
    2288:	ff 92       	push	r15
    228a:	0f 93       	push	r16
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	1f 92       	push	r1
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	7c 01       	movw	r14, r24
  // Update register value
  if (setValue != NULL)
    2298:	dc 01       	movw	r26, r24
    229a:	12 96       	adiw	r26, 0x02	; 2
    229c:	ed 91       	ld	r30, X+
    229e:	fc 91       	ld	r31, X
    22a0:	13 97       	sbiw	r26, 0x03	; 3
    22a2:	30 97       	sbiw	r30, 0x00	; 0
    22a4:	19 f0       	breq	.+6      	; 0x22ac <_ZN8REGISTER7setDataEPh+0x26>
    setValue(id, data);
    22a6:	14 96       	adiw	r26, 0x04	; 4
    22a8:	8c 91       	ld	r24, X
    22aa:	09 95       	icall

  // Send SWAP status message
  sendSwapStatus();
    22ac:	c7 01       	movw	r24, r14
    22ae:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN8REGISTER14sendSwapStatusEv>

  // Does the value need to be saved in info memory (flash)?
  if (eepromAddress >= 0)
    22b2:	f7 01       	movw	r30, r14
    22b4:	21 85       	ldd	r18, Z+9	; 0x09
    22b6:	32 85       	ldd	r19, Z+10	; 0x0a
    22b8:	37 fd       	sbrc	r19, 7
    22ba:	08 c0       	rjmp	.+16     	; 0x22cc <_ZN8REGISTER7setDataEPh+0x46>
  {
    STORAGE nvMem;   
    // Write info memory
    nvMem.write(value, eepromBank, eepromAddress, length);
    22bc:	65 81       	ldd	r22, Z+5	; 0x05
    22be:	76 81       	ldd	r23, Z+6	; 0x06
    22c0:	07 81       	ldd	r16, Z+7	; 0x07
    22c2:	43 85       	ldd	r20, Z+11	; 0x0b
    22c4:	ce 01       	movw	r24, r28
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN7STORAGE5writeEPhhhh>
  }
}
    22cc:	0f 90       	pop	r0
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	0f 91       	pop	r16
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	08 95       	ret

000022da <_ZN8REGISTER20setValueFromBeBufferEPh>:
 * Set curent value from a Big Endian buffer passed as argument
 *
 * @param beBuffer Big Endian buffer
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
    22da:	dc 01       	movw	r26, r24
  unsigned char i;

  for(i=0 ; i<length ; i++)
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	17 96       	adiw	r26, 0x07	; 7
    22e0:	ec 91       	ld	r30, X
    22e2:	17 97       	sbiw	r26, 0x07	; 7
    22e4:	9e 17       	cp	r25, r30
    22e6:	98 f4       	brcc	.+38     	; 0x230e <_ZN8REGISTER20setValueFromBeBufferEPh+0x34>
    value[i] = beBuffer[length-1-i];
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	29 2f       	mov	r18, r25
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	31 97       	sbiw	r30, 0x01	; 1
    22f0:	e2 1b       	sub	r30, r18
    22f2:	f3 0b       	sbc	r31, r19
    22f4:	e6 0f       	add	r30, r22
    22f6:	f7 1f       	adc	r31, r23
    22f8:	80 81       	ld	r24, Z
    22fa:	15 96       	adiw	r26, 0x05	; 5
    22fc:	4d 91       	ld	r20, X+
    22fe:	5c 91       	ld	r21, X
    2300:	16 97       	sbiw	r26, 0x06	; 6
    2302:	fa 01       	movw	r30, r20
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	80 83       	st	Z, r24
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
  unsigned char i;

  for(i=0 ; i<length ; i++)
    230a:	9f 5f       	subi	r25, 0xFF	; 255
    230c:	e8 cf       	rjmp	.-48     	; 0x22de <_ZN8REGISTER20setValueFromBeBufferEPh+0x4>
    230e:	08 95       	ret

00002310 <_Z14pacKetReceivedP8CCPACKET>:
    repeater->init(maxHop);
  }

  if (maxHop == 0)
    repeater->stop();
}
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	c0 55       	subi	r28, 0x50	; 80
    231a:	d1 09       	sbc	r29, r1
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	fc 01       	movw	r30, r24
    2328:	20 81       	ld	r18, Z
    232a:	27 30       	cpi	r18, 0x07	; 7
    232c:	08 f4       	brcc	.+2      	; 0x2330 <_Z14pacKetReceivedP8CCPACKET+0x20>
    232e:	a8 c0       	rjmp	.+336    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    2330:	bc 01       	movw	r22, r24
    2332:	ce 01       	movw	r24, r28
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN8SWPACKETC1EP8CCPACKET>
    233a:	2b 96       	adiw	r28, 0x0b	; 11
    233c:	8f ad       	ldd	r24, Y+63	; 0x3f
    233e:	2b 97       	sbiw	r28, 0x0b	; 11
    2340:	81 11       	cpse	r24, r1
    2342:	9e c0       	rjmp	.+316    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    2344:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <swap>
    2348:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <swap+0x1>
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	29 f0       	breq	.+10     	; 0x235a <_Z14pacKetReceivedP8CCPACKET+0x4a>
    2350:	be 01       	movw	r22, r28
    2352:	6f 5f       	subi	r22, 0xFF	; 255
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_ZN8REPEATER13packetHandlerEP8SWPACKET>
    235a:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <swap+0x3>
    235e:	21 ff       	sbrs	r18, 1
    2360:	05 c0       	rjmp	.+10     	; 0x236c <_Z14pacKetReceivedP8CCPACKET+0x5c>
    2362:	28 96       	adiw	r28, 0x08	; 8
    2364:	8f ad       	ldd	r24, Y+63	; 0x3f
    2366:	28 97       	sbiw	r28, 0x08	; 8
    2368:	81 ff       	sbrs	r24, 1
    236a:	8a c0       	rjmp	.+276    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    236c:	2a 96       	adiw	r28, 0x0a	; 10
    236e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2370:	2a 97       	sbiw	r28, 0x0a	; 10
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	89 f5       	brne	.+98     	; 0x23d8 <_Z14pacKetReceivedP8CCPACKET+0xc8>
    2376:	24 96       	adiw	r28, 0x04	; 4
    2378:	2e ad       	ldd	r18, Y+62	; 0x3e
    237a:	3f ad       	ldd	r19, Y+63	; 0x3f
    237c:	24 97       	sbiw	r28, 0x04	; 4
    237e:	21 15       	cp	r18, r1
    2380:	31 05       	cpc	r19, r1
    2382:	31 f4       	brne	.+12     	; 0x2390 <_Z14pacKetReceivedP8CCPACKET+0x80>
    2384:	2d 96       	adiw	r28, 0x0d	; 13
    2386:	8f ad       	ldd	r24, Y+63	; 0x3f
    2388:	2d 97       	sbiw	r28, 0x0d	; 13
    238a:	88 23       	and	r24, r24
    238c:	41 f0       	breq	.+16     	; 0x239e <_Z14pacKetReceivedP8CCPACKET+0x8e>
    238e:	78 c0       	rjmp	.+240    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    2390:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <swap+0x2>
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	28 17       	cp	r18, r24
    2398:	39 07       	cpc	r19, r25
    239a:	09 f0       	breq	.+2      	; 0x239e <_Z14pacKetReceivedP8CCPACKET+0x8e>
    239c:	71 c0       	rjmp	.+226    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    239e:	2c 96       	adiw	r28, 0x0c	; 12
    23a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    23a2:	2c 97       	sbiw	r28, 0x0c	; 12
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	28 17       	cp	r18, r24
    23a8:	39 07       	cpc	r19, r25
    23aa:	09 f0       	breq	.+2      	; 0x23ae <_Z14pacKetReceivedP8CCPACKET+0x9e>
    23ac:	69 c0       	rjmp	.+210    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23ae:	2d 96       	adiw	r28, 0x0d	; 13
    23b0:	ef ad       	ldd	r30, Y+63	; 0x3f
    23b2:	2d 97       	sbiw	r28, 0x0d	; 13
    23b4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <regTableSize>
    23b8:	e8 17       	cp	r30, r24
    23ba:	08 f0       	brcs	.+2      	; 0x23be <_Z14pacKetReceivedP8CCPACKET+0xae>
    23bc:	61 c0       	rjmp	.+194    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	ec 5f       	subi	r30, 0xFC	; 252
    23c6:	fe 4f       	sbci	r31, 0xFE	; 254
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <_Z14pacKetReceivedP8CCPACKET+0xc2>
    23d0:	57 c0       	rjmp	.+174    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23d2:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN8REGISTER7getDataEv>
    23d6:	54 c0       	rjmp	.+168    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	58 f4       	brcc	.+22     	; 0x23f2 <_Z14pacKetReceivedP8CCPACKET+0xe2>
    23dc:	e0 91 83 03 	lds	r30, 0x0383	; 0x800383 <swap+0xa>
    23e0:	f0 91 84 03 	lds	r31, 0x0384	; 0x800384 <swap+0xb>
    23e4:	30 97       	sbiw	r30, 0x00	; 0
    23e6:	09 f4       	brne	.+2      	; 0x23ea <_Z14pacKetReceivedP8CCPACKET+0xda>
    23e8:	4b c0       	rjmp	.+150    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23ea:	ce 01       	movw	r24, r28
    23ec:	01 96       	adiw	r24, 0x01	; 1
    23ee:	09 95       	icall
    23f0:	47 c0       	rjmp	.+142    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23f2:	82 30       	cpi	r24, 0x02	; 2
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <_Z14pacKetReceivedP8CCPACKET+0xe8>
    23f6:	44 c0       	rjmp	.+136    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    23f8:	24 96       	adiw	r28, 0x04	; 4
    23fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    23fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    23fe:	24 97       	sbiw	r28, 0x04	; 4
    2400:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <swap+0x2>
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	48 17       	cp	r20, r24
    2408:	59 07       	cpc	r21, r25
    240a:	d1 f5       	brne	.+116    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    240c:	2c 96       	adiw	r28, 0x0c	; 12
    240e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2410:	2c 97       	sbiw	r28, 0x0c	; 12
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	48 17       	cp	r20, r24
    2416:	59 07       	cpc	r21, r25
    2418:	99 f5       	brne	.+102    	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    241a:	2d 96       	adiw	r28, 0x0d	; 13
    241c:	ef ad       	ldd	r30, Y+63	; 0x3f
    241e:	2d 97       	sbiw	r28, 0x0d	; 13
    2420:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <regTableSize>
    2424:	e3 17       	cp	r30, r19
    2426:	60 f5       	brcc	.+88     	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	ec 5f       	subi	r30, 0xFC	; 252
    2430:	fe 4f       	sbci	r31, 0xFE	; 254
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	19 f1       	breq	.+70     	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    243a:	20 ff       	sbrs	r18, 0
    243c:	11 c0       	rjmp	.+34     	; 0x2460 <_Z14pacKetReceivedP8CCPACKET+0x150>
    243e:	40 91 7d 03 	lds	r20, 0x037D	; 0x80037d <swap+0x4>
    2442:	29 96       	adiw	r28, 0x09	; 9
    2444:	2f ad       	ldd	r18, Y+63	; 0x3f
    2446:	29 97       	sbiw	r28, 0x09	; 9
    2448:	42 17       	cp	r20, r18
    244a:	51 f0       	breq	.+20     	; 0x2460 <_Z14pacKetReceivedP8CCPACKET+0x150>
    244c:	38 30       	cpi	r19, 0x08	; 8
    244e:	28 f0       	brcs	.+10     	; 0x245a <_Z14pacKetReceivedP8CCPACKET+0x14a>
    2450:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <regTable+0xe>
    2454:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <regTable+0xf>
    2458:	11 c0       	rjmp	.+34     	; 0x247c <_Z14pacKetReceivedP8CCPACKET+0x16c>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e c0       	rjmp	.+28     	; 0x247c <_Z14pacKetReceivedP8CCPACKET+0x16c>
    2460:	60 96       	adiw	r28, 0x10	; 16
    2462:	3f ad       	ldd	r19, Y+63	; 0x3f
    2464:	60 97       	sbiw	r28, 0x10	; 16
    2466:	fc 01       	movw	r30, r24
    2468:	27 81       	ldd	r18, Z+7	; 0x07
    246a:	32 13       	cpse	r19, r18
    246c:	07 c0       	rjmp	.+14     	; 0x247c <_Z14pacKetReceivedP8CCPACKET+0x16c>
    246e:	2f 96       	adiw	r28, 0x0f	; 15
    2470:	6e ad       	ldd	r22, Y+62	; 0x3e
    2472:	7f ad       	ldd	r23, Y+63	; 0x3f
    2474:	2f 97       	sbiw	r28, 0x0f	; 15
    2476:	0e 94 43 11 	call	0x2286	; 0x2286 <_ZN8REGISTER7setDataEPh>
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <_Z14pacKetReceivedP8CCPACKET+0x170>
    247c:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN8REGISTER14sendSwapStatusEv>
    2480:	c0 5b       	subi	r28, 0xB0	; 176
    2482:	df 4f       	sbci	r29, 0xFF	; 255
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	08 95       	ret

00002494 <_ZN4SWAP9goToSleepEv>:
 * goToSleep
 *
 * put the MCU in sleep mode during txInterval seconds
 */
void SWAP::goToSleep(void)
{
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	ec 01       	movw	r28, r24
  //enterSystemState(SYSTATE_RXOFF);
  systemState = SYSTATE_RXOFF;
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	8d 83       	std	Y+5, r24	; 0x05
  //delay(500);
  panstamp.sleepSec(txInterval);
    249e:	6e 81       	ldd	r22, Y+6	; 0x06
    24a0:	7f 81       	ldd	r23, Y+7	; 0x07
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	8b e6       	ldi	r24, 0x6B	; 107
    24a6:	93 e0       	ldi	r25, 0x03	; 3
    24a8:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN8PANSTAMP8sleepSecEj6RTCSRC>
  //enterSystemState(SYSTATE_SYNC);
  systemState = SYSTATE_RXON;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	8d 83       	std	Y+5, r24	; 0x05
  //enterSystemState(SYSTATE_RXON);
}
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	08 95       	ret

000024b6 <_ZN4SWAP11goToSleepMSEj>:
 * goToSleep
 *
 * put the MCU in sleep mode during txInterval seconds
 */
void SWAP::goToSleepMS(uint16_t ms)
{
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	ec 01       	movw	r28, r24
  uint8_t time = 0;	
  
  if (ms == 125)
    24bc:	6d 37       	cpi	r22, 0x7D	; 125
    24be:	71 05       	cpc	r23, r1
    24c0:	41 f0       	breq	.+16     	; 0x24d2 <_ZN4SWAP11goToSleepMSEj+0x1c>
   time = RTC_125MS;
  else
  if (ms == 250)
    24c2:	6a 3f       	cpi	r22, 0xFA	; 250
    24c4:	71 05       	cpc	r23, r1
    24c6:	39 f0       	breq	.+14     	; 0x24d6 <_ZN4SWAP11goToSleepMSEj+0x20>
  time = RTC_250MS;
  else
  if (ms == 500)
    24c8:	64 3f       	cpi	r22, 0xF4	; 244
    24ca:	71 40       	sbci	r23, 0x01	; 1
    24cc:	31 f4       	brne	.+12     	; 0x24da <_ZN4SWAP11goToSleepMSEj+0x24>
  time = RTC_500MS;
    24ce:	64 e0       	ldi	r22, 0x04	; 4
    24d0:	05 c0       	rjmp	.+10     	; 0x24dc <_ZN4SWAP11goToSleepMSEj+0x26>
void SWAP::goToSleepMS(uint16_t ms)
{
  uint8_t time = 0;	
  
  if (ms == 125)
   time = RTC_125MS;
    24d2:	62 e0       	ldi	r22, 0x02	; 2
    24d4:	03 c0       	rjmp	.+6      	; 0x24dc <_ZN4SWAP11goToSleepMSEj+0x26>
  else
  if (ms == 250)
  time = RTC_250MS;
    24d6:	63 e0       	ldi	r22, 0x03	; 3
    24d8:	01 c0       	rjmp	.+2      	; 0x24dc <_ZN4SWAP11goToSleepMSEj+0x26>
 *
 * put the MCU in sleep mode during txInterval seconds
 */
void SWAP::goToSleepMS(uint16_t ms)
{
  uint8_t time = 0;	
    24da:	60 e0       	ldi	r22, 0x00	; 0
  if (ms == 250)
  time = RTC_250MS;
  else
  if (ms == 500)
  time = RTC_500MS;
  systemState = SYSTATE_RXOFF;
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	8d 83       	std	Y+5, r24	; 0x05
  panstamp.sleepMSec(time);
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	41 e0       	ldi	r20, 0x01	; 1
    24e4:	8b e6       	ldi	r24, 0x6B	; 107
    24e6:	93 e0       	ldi	r25, 0x03	; 3
    24e8:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN8PANSTAMP9sleepMSecEj6RTCSRC>
  systemState = SYSTATE_RXON;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	8d 83       	std	Y+5, r24	; 0x05
}
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	08 95       	ret

000024f6 <_ZN4SWAP23nvolatToFactoryDefaultsEv>:
 * nvolatToFactoryDefaults
 * 
 * Write default config values in non-volatile memory
 */
void SWAP::nvolatToFactoryDefaults(void)
{
    24f6:	0f 93       	push	r16
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	2a 97       	sbiw	r28, 0x0a	; 10
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
  STORAGE nvMem;

  // Signature
  uint8_t signature[] = {NVOLAT_SIGNATURE_HIGH, NVOLAT_SIGNATURE_LOW};
    250c:	8b ea       	ldi	r24, 0xAB	; 171
    250e:	8f 83       	std	Y+7, r24	; 0x07
    2510:	8d ec       	ldi	r24, 0xCD	; 205
    2512:	88 87       	std	Y+8, r24	; 0x08
  nvMem.write(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    2514:	02 e0       	ldi	r16, 0x02	; 2
    2516:	28 e0       	ldi	r18, 0x08	; 8
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	be 01       	movw	r22, r28
    251c:	69 5f       	subi	r22, 0xF9	; 249
    251e:	7f 4f       	sbci	r23, 0xFF	; 255
    2520:	ce 01       	movw	r24, r28
    2522:	0a 96       	adiw	r24, 0x0a	; 10
    2524:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN7STORAGE5writeEPhhhh>
  
  // Frequency channel
  uint8_t channel[] = {CCDEF_CHANNR};
    2528:	19 86       	std	Y+9, r1	; 0x09
  nvMem.write(channel, DEFAULT_NVOLAT_SECTION, NVOLAT_FREQ_CHANNEL, sizeof(channel));
    252a:	01 e0       	ldi	r16, 0x01	; 1
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	be 01       	movw	r22, r28
    2532:	67 5f       	subi	r22, 0xF7	; 247
    2534:	7f 4f       	sbci	r23, 0xFF	; 255
    2536:	ce 01       	movw	r24, r28
    2538:	0a 96       	adiw	r24, 0x0a	; 10
    253a:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN7STORAGE5writeEPhhhh>
  
  // Sync word
  uint8_t syncW[] = {CCDEF_SYNC1, CCDEF_SYNC0};
    253e:	85 eb       	ldi	r24, 0xB5	; 181
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	87 e4       	ldi	r24, 0x47	; 71
    2544:	8e 83       	std	Y+6, r24	; 0x06
  nvMem.write(syncW, DEFAULT_NVOLAT_SECTION, NVOLAT_SYNC_WORD, sizeof(syncW));
    2546:	02 e0       	ldi	r16, 0x02	; 2
    2548:	22 e0       	ldi	r18, 0x02	; 2
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	be 01       	movw	r22, r28
    254e:	6b 5f       	subi	r22, 0xFB	; 251
    2550:	7f 4f       	sbci	r23, 0xFF	; 255
    2552:	ce 01       	movw	r24, r28
    2554:	0a 96       	adiw	r24, 0x0a	; 10
    2556:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN7STORAGE5writeEPhhhh>
     * 
     * @return pseudo-random number
     */
     inline uint16_t GET_RANDOM(void)
     {
       return OSCCAL;
    255a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

  // SWAP address (pseudo-random number)
  uint16_t random = panstamp.GET_RANDOM();
  uint8_t addr[] = {static_cast<uint8_t>((random >> 8) & 0xFF), static_cast<uint8_t>(random & 0xFF)};
    255e:	1b 82       	std	Y+3, r1	; 0x03
    2560:	8c 83       	std	Y+4, r24	; 0x04
  nvMem.write(addr, DEFAULT_NVOLAT_SECTION, NVOLAT_DEVICE_ADDR, sizeof(addr));
    2562:	24 e0       	ldi	r18, 0x04	; 4
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	be 01       	movw	r22, r28
    2568:	6d 5f       	subi	r22, 0xFD	; 253
    256a:	7f 4f       	sbci	r23, 0xFF	; 255
    256c:	ce 01       	movw	r24, r28
    256e:	0a 96       	adiw	r24, 0x0a	; 10
    2570:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN7STORAGE5writeEPhhhh>
  
  // TX interval
  uint8_t txInt[] = {0x01, 0};
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	1a 82       	std	Y+2, r1	; 0x02
  nvMem.write(txInt, DEFAULT_NVOLAT_SECTION, NVOLAT_TX_INTERVAL, sizeof(txInt));
    257a:	26 e0       	ldi	r18, 0x06	; 6
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	be 01       	movw	r22, r28
    2580:	6f 5f       	subi	r22, 0xFF	; 255
    2582:	7f 4f       	sbci	r23, 0xFF	; 255
    2584:	ce 01       	movw	r24, r28
    2586:	0a 96       	adiw	r24, 0x0a	; 10
    2588:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN7STORAGE5writeEPhhhh>
}
    258c:	2a 96       	adiw	r28, 0x0a	; 10
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	0f 91       	pop	r16
    259e:	08 95       	ret

000025a0 <_ZN4SWAP4initEv>:
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    25a0:	ef 92       	push	r14
    25a2:	ff 92       	push	r15
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <_ZN4SWAP4initEv+0xe>
    25ae:	1f 92       	push	r1
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	7c 01       	movw	r14, r24
  uint8_t i;
  STORAGE nvMem;

  // Read signature from info/eeprom memory
  uint8_t signature[2];
  nvMem.read(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    25b6:	02 e0       	ldi	r16, 0x02	; 2
    25b8:	28 e0       	ldi	r18, 0x08	; 8
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	be 01       	movw	r22, r28
    25be:	6f 5f       	subi	r22, 0xFF	; 255
    25c0:	7f 4f       	sbci	r23, 0xFF	; 255
    25c2:	ce 01       	movw	r24, r28
    25c4:	03 96       	adiw	r24, 0x03	; 3
    25c6:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <_ZN7STORAGE4readEPhhhh>

  // Correct signature in non-volatile memory?
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	8b 3a       	cpi	r24, 0xAB	; 171
    25ce:	19 f4       	brne	.+6      	; 0x25d6 <_ZN4SWAP4initEv+0x36>
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	8d 3c       	cpi	r24, 0xCD	; 205
    25d4:	19 f0       	breq	.+6      	; 0x25dc <_ZN4SWAP4initEv+0x3c>
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
    25d6:	c7 01       	movw	r24, r14
    25d8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <_ZN4SWAP23nvolatToFactoryDefaultsEv>
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    25dc:	10 e0       	ldi	r17, 0x00	; 0
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
  //rcOscCalibrate();
  
  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    25de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <regTableSize>
    25e2:	18 17       	cp	r17, r24
    25e4:	60 f4       	brcc	.+24     	; 0x25fe <_ZN4SWAP4initEv+0x5e>
    regTable[i]->init();
    25e6:	e1 2f       	mov	r30, r17
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	ee 0f       	add	r30, r30
    25ec:	ff 1f       	adc	r31, r31
    25ee:	ec 5f       	subi	r30, 0xFC	; 252
    25f0:	fe 4f       	sbci	r31, 0xFE	; 254
    25f2:	80 81       	ld	r24, Z
    25f4:	91 81       	ldd	r25, Z+1	; 0x01
    25f6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <_ZN8REGISTER4initEv>
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
  //rcOscCalibrate();
  
  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    25fa:	1f 5f       	subi	r17, 0xFF	; 255
    25fc:	f0 cf       	rjmp	.-32     	; 0x25de <_ZN4SWAP4initEv+0x3e>
    regTable[i]->init();
 
  // Config radio settings
  panstamp.radio.devAddress = devAddress & 0xFF; 
    25fe:	f7 01       	movw	r30, r14
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <panstamp+0x9>
  panstamp.init();
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	8b e6       	ldi	r24, 0x6B	; 107
    260c:	93 e0       	ldi	r25, 0x03	; 3
    260e:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <_ZN8PANSTAMP4initEhh>
    2612:	40 ec       	ldi	r20, 0xC0	; 192
    2614:	6e e3       	ldi	r22, 0x3E	; 62
    2616:	8c e6       	ldi	r24, 0x6C	; 108
    2618:	93 e0       	ldi	r25, 0x03	; 3
    261a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN6CC11018writeRegEhh>
     * 
     * @param funct pointer to the custom function
     */
     inline void attachInterrupt(void (*funct)(CCPACKET*))
     {
       ccPacketReceived = funct;
    261e:	88 e8       	ldi	r24, 0x88	; 136
    2620:	91 e1       	ldi	r25, 0x11	; 17
    2622:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <panstamp+0xc>
    2626:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <panstamp+0xb>
  panstamp.setHighTxPower();
  // Attach RF ISR
  panstamp.attachInterrupt(pacKetReceived);
}
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	1f 91       	pop	r17
    2636:	0f 91       	pop	r16
    2638:	ff 90       	pop	r15
    263a:	ef 90       	pop	r14
    263c:	08 95       	ret

0000263e <_GLOBAL__sub_I__Z14pacKetReceivedP8CCPACKET>:
 *
 * Class constructor
 */
SWAP::SWAP(void)
{  
  statusReceived = NULL;
    263e:	e9 e7       	ldi	r30, 0x79	; 121
    2640:	f3 e0       	ldi	r31, 0x03	; 3
    2642:	13 86       	std	Z+11, r1	; 0x0b
    2644:	12 86       	std	Z+10, r1	; 0x0a
  repeater = NULL;
    2646:	11 82       	std	Z+1, r1	; 0x01
    2648:	10 82       	st	Z, r1
  encryptPwd = NULL;
    264a:	11 86       	std	Z+9, r1	; 0x09
    264c:	10 86       	std	Z+8, r1	; 0x08
  security = 0;
    264e:	13 82       	std	Z+3, r1	; 0x03
    2650:	08 95       	ret

00002652 <_ZN8SWPACKETC1Ev>:
/**
 * SWPACKET
 * 
 * Class constructor
 */
SWPACKET::SWPACKET(void) 
    2652:	08 95       	ret

00002654 <_ZN8SWPACKET12smartEncryptEb>:
 *
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
    2654:	af 92       	push	r10
    2656:	bf 92       	push	r11
    2658:	cf 92       	push	r12
    265a:	df 92       	push	r13
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	dc 01       	movw	r26, r24
    266a:	a9 5b       	subi	r26, 0xB9	; 185
    266c:	bf 4f       	sbci	r27, 0xFF	; 255
    266e:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <swap+0x8>
    2672:	f0 91 82 03 	lds	r31, 0x0382	; 0x800382 <swap+0x9>
  byte i, j = 0;
  static uint8_t newData[CCPACKET_DATA_LEN];

  if (decrypt)
    2676:	66 23       	and	r22, r22
    2678:	21 f0       	breq	.+8      	; 0x2682 <_ZN8SWPACKET12smartEncryptEb+0x2e>
    nonce ^= swap.encryptPwd[9];
    267a:	31 85       	ldd	r19, Z+9	; 0x09
    267c:	2c 91       	ld	r18, X
    267e:	23 27       	eor	r18, r19
    2680:	2c 93       	st	X, r18

  function ^= swap.encryptPwd[11] ^ nonce;
    2682:	2c 91       	ld	r18, X
    2684:	ec 01       	movw	r28, r24
    2686:	c8 5b       	subi	r28, 0xB8	; 184
    2688:	df 4f       	sbci	r29, 0xFF	; 255
    268a:	38 81       	ld	r19, Y
    268c:	32 27       	eor	r19, r18
    268e:	43 85       	ldd	r20, Z+11	; 0x0b
    2690:	34 27       	eor	r19, r20
    2692:	38 83       	st	Y, r19
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
    2694:	25 97       	sbiw	r28, 0x05	; 5
    2696:	32 85       	ldd	r19, Z+10	; 0x0a
    2698:	32 27       	eor	r19, r18
    269a:	48 81       	ld	r20, Y
    269c:	59 81       	ldd	r21, Y+1	; 0x01
    269e:	43 27       	eor	r20, r19
    26a0:	59 83       	std	Y+1, r21	; 0x01
    26a2:	48 83       	st	Y, r20
  regAddr ^= swap.encryptPwd[8] ^ nonce;
    26a4:	27 96       	adiw	r28, 0x07	; 7
    26a6:	38 81       	ld	r19, Y
    26a8:	32 27       	eor	r19, r18
    26aa:	40 85       	ldd	r20, Z+8	; 0x08
    26ac:	34 27       	eor	r19, r20
    26ae:	38 83       	st	Y, r19
  regId ^= swap.encryptPwd[7] ^ nonce;
    26b0:	21 96       	adiw	r28, 0x01	; 1
    26b2:	38 81       	ld	r19, Y
    26b4:	32 27       	eor	r19, r18
    26b6:	47 81       	ldd	r20, Z+7	; 0x07
    26b8:	34 27       	eor	r19, r20
    26ba:	38 83       	st	Y, r19

  for(i=0 ; i<value.length ; i++)
    26bc:	23 96       	adiw	r28, 0x03	; 3
    26be:	78 81       	ld	r23, Y
    26c0:	05 e8       	ldi	r16, 0x85	; 133
    26c2:	13 e0       	ldi	r17, 0x03	; 3
    26c4:	a1 2c       	mov	r10, r1
    26c6:	b1 2c       	mov	r11, r1
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
  byte i, j = 0;
    26c8:	30 e0       	ldi	r19, 0x00	; 0
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    26ca:	7c 01       	movw	r14, r24
    26cc:	4c e4       	ldi	r20, 0x4C	; 76
    26ce:	e4 0e       	add	r14, r20
    26d0:	f1 1c       	adc	r15, r1
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    26d2:	a7 16       	cp	r10, r23
    26d4:	c8 f4       	brcc	.+50     	; 0x2708 <_ZN8SWPACKET12smartEncryptEb+0xb4>
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    26d6:	e7 01       	movw	r28, r14
    26d8:	48 81       	ld	r20, Y
    26da:	59 81       	ldd	r21, Y+1	; 0x01
    26dc:	4a 0d       	add	r20, r10
    26de:	5b 1d       	adc	r21, r11
    26e0:	6f 01       	movw	r12, r30
    26e2:	c3 0e       	add	r12, r19
    26e4:	d1 1c       	adc	r13, r1
    26e6:	ea 01       	movw	r28, r20
    26e8:	58 81       	ld	r21, Y
    26ea:	e6 01       	movw	r28, r12
    26ec:	48 81       	ld	r20, Y
    26ee:	45 27       	eor	r20, r21
    26f0:	42 27       	eor	r20, r18
    26f2:	e8 01       	movw	r28, r16
    26f4:	49 93       	st	Y+, r20
    26f6:	8e 01       	movw	r16, r28
    j++;
    26f8:	3f 5f       	subi	r19, 0xFF	; 255
    if (j == 11)  // Don't re-use last byte from password
    26fa:	3b 30       	cpi	r19, 0x0B	; 11
    26fc:	09 f4       	brne	.+2      	; 0x2700 <_ZN8SWPACKET12smartEncryptEb+0xac>
      j = 0;
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	df ef       	ldi	r29, 0xFF	; 255
    2702:	ad 1a       	sub	r10, r29
    2704:	bd 0a       	sbc	r11, r29
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    2706:	e5 cf       	rjmp	.-54     	; 0x26d2 <_ZN8SWPACKET12smartEncryptEb+0x7e>
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    j++;
    if (j == 11)  // Don't re-use last byte from password
      j = 0;
  }
  if (value.length > 0)
    2708:	77 23       	and	r23, r23
    270a:	39 f0       	breq	.+14     	; 0x271a <_ZN8SWPACKET12smartEncryptEb+0xc6>
    value.data = newData;
    270c:	ec 01       	movw	r28, r24
    270e:	c4 5b       	subi	r28, 0xB4	; 180
    2710:	df 4f       	sbci	r29, 0xFF	; 255
    2712:	45 e8       	ldi	r20, 0x85	; 133
    2714:	53 e0       	ldi	r21, 0x03	; 3
    2716:	59 83       	std	Y+1, r21	; 0x01
    2718:	48 83       	st	Y, r20

  if (!decrypt)
    271a:	61 11       	cpse	r22, r1
    271c:	03 c0       	rjmp	.+6      	; 0x2724 <_ZN8SWPACKET12smartEncryptEb+0xd0>
    nonce ^= swap.encryptPwd[9];
    271e:	81 85       	ldd	r24, Z+9	; 0x09
    2720:	28 27       	eor	r18, r24
    2722:	2c 93       	st	X, r18
}
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	1f 91       	pop	r17
    272a:	0f 91       	pop	r16
    272c:	ff 90       	pop	r15
    272e:	ef 90       	pop	r14
    2730:	df 90       	pop	r13
    2732:	cf 90       	pop	r12
    2734:	bf 90       	pop	r11
    2736:	af 90       	pop	r10
    2738:	08 95       	ret

0000273a <_ZN8SWPACKETC1EP8CCPACKET>:
 * 
 * Class constructor
 * 
 * @param packet Pointer to the raw CC1101 packet
 */
SWPACKET::SWPACKET(CCPACKET *packet) 
    273a:	cf 92       	push	r12
    273c:	df 92       	push	r13
    273e:	ef 92       	push	r14
    2740:	ff 92       	push	r15
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	fc 01       	movw	r30, r24
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
    274c:	db 01       	movw	r26, r22
    274e:	8d 91       	ld	r24, X+
    2750:	ef 01       	movw	r28, r30
    2752:	89 93       	st	Y+, r24
  for(i=0 ; i<ccPacket.length ; i++)
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	98 17       	cp	r25, r24
    2758:	21 f0       	breq	.+8      	; 0x2762 <_ZN8SWPACKETC1EP8CCPACKET+0x28>
    ccPacket.data[i] = packet->data[i];
    275a:	2d 91       	ld	r18, X+
    275c:	29 93       	st	Y+, r18
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
  for(i=0 ; i<ccPacket.length ; i++)
    275e:	9f 5f       	subi	r25, 0xFF	; 255
    2760:	fa cf       	rjmp	.-12     	; 0x2756 <_ZN8SWPACKETC1EP8CCPACKET+0x1c>
    ccPacket.data[i] = packet->data[i];
  
  hop = (ccPacket.data[2] >> 4) & 0x0F;
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	df 01       	movw	r26, r30
    2766:	ab 5b       	subi	r26, 0xBB	; 187
    2768:	bf 4f       	sbci	r27, 0xFF	; 255
    276a:	29 2f       	mov	r18, r25
    276c:	22 95       	swap	r18
    276e:	2f 70       	andi	r18, 0x0F	; 15
    2770:	2c 93       	st	X, r18
  security = ccPacket.data[2] & 0x0F;
    2772:	6f 01       	movw	r12, r30
    2774:	26 e4       	ldi	r18, 0x46	; 70
    2776:	c2 0e       	add	r12, r18
    2778:	d1 1c       	adc	r13, r1
    277a:	9f 70       	andi	r25, 0x0F	; 15
    277c:	d6 01       	movw	r26, r12
    277e:	9c 93       	st	X, r25
  // AES-128 encrypted?
  if (security & 0x04)
    aesCrypto();  // Decrypt
  #endif
  
  nonce = ccPacket.data[3];
    2780:	94 81       	ldd	r25, Z+4	; 0x04
    2782:	11 96       	adiw	r26, 0x01	; 1
    2784:	9c 93       	st	X, r25
  function = ccPacket.data[4] & ~SWAP_EXTENDED_ADDRESS_BIT;
    2786:	95 81       	ldd	r25, Z+5	; 0x05
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	29 2f       	mov	r18, r25
    278c:	2f 77       	andi	r18, 0x7F	; 127
    278e:	2c 93       	st	X, r18
    2790:	11 96       	adiw	r26, 0x01	; 1
    2792:	ef 01       	movw	r28, r30
    2794:	cf 5b       	subi	r28, 0xBF	; 191
    2796:	df 4f       	sbci	r29, 0xFF	; 255
    2798:	8f 01       	movw	r16, r30
    279a:	0d 5b       	subi	r16, 0xBD	; 189
    279c:	1f 4f       	sbci	r17, 0xFF	; 255
    279e:	bf 01       	movw	r22, r30
    27a0:	66 5b       	subi	r22, 0xB6	; 182
    27a2:	7f 4f       	sbci	r23, 0xFF	; 255
    27a4:	af 01       	movw	r20, r30
    27a6:	45 5b       	subi	r20, 0xB5	; 181
    27a8:	5f 4f       	sbci	r21, 0xFF	; 255

  if (ccPacket.data[4] & SWAP_EXTENDED_ADDRESS_BIT)
    27aa:	97 ff       	sbrs	r25, 7
    27ac:	16 c0       	rjmp	.+44     	; 0x27da <_ZN8SWPACKETC1EP8CCPACKET+0xa0>
  {
    addrType = SWAPADDR_EXTENDED;
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	9c 93       	st	X, r25
    destAddr = ccPacket.data[0];
    destAddr <<= 8;
    destAddr |= ccPacket.data[1];
    27b2:	21 81       	ldd	r18, Z+1	; 0x01
    27b4:	32 81       	ldd	r19, Z+2	; 0x02
    27b6:	32 27       	eor	r19, r18
    27b8:	23 27       	eor	r18, r19
    27ba:	32 27       	eor	r19, r18
    27bc:	39 83       	std	Y+1, r19	; 0x01
    27be:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[5];
    srcAddr <<= 8;
    srcAddr |= ccPacket.data[6];
    27c0:	26 81       	ldd	r18, Z+6	; 0x06
    27c2:	37 81       	ldd	r19, Z+7	; 0x07
    27c4:	32 27       	eor	r19, r18
    27c6:	23 27       	eor	r18, r19
    27c8:	32 27       	eor	r19, r18
    27ca:	e8 01       	movw	r28, r16
    27cc:	39 83       	std	Y+1, r19	; 0x01
    27ce:	28 83       	st	Y, r18
    regAddr = ccPacket.data[7];
    regAddr <<= 8;
    regAddr |= ccPacket.data[8];
    27d0:	91 85       	ldd	r25, Z+9	; 0x09
    27d2:	eb 01       	movw	r28, r22
    27d4:	98 83       	st	Y, r25
    regId = ccPacket.data[9];
    27d6:	92 85       	ldd	r25, Z+10	; 0x0a
    27d8:	0e c0       	rjmp	.+28     	; 0x27f6 <_ZN8SWPACKETC1EP8CCPACKET+0xbc>
  }
  else
  {
    addrType = SWAPADDR_SIMPLE;
    27da:	1c 92       	st	X, r1
    destAddr = ccPacket.data[0];
    27dc:	21 81       	ldd	r18, Z+1	; 0x01
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	39 83       	std	Y+1, r19	; 0x01
    27e2:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[1];
    27e4:	22 81       	ldd	r18, Z+2	; 0x02
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	e8 01       	movw	r28, r16
    27ea:	39 83       	std	Y+1, r19	; 0x01
    27ec:	28 83       	st	Y, r18
    regAddr = ccPacket.data[5];
    27ee:	96 81       	ldd	r25, Z+6	; 0x06
    27f0:	eb 01       	movw	r28, r22
    27f2:	98 83       	st	Y, r25
    regId = ccPacket.data[6];
    27f4:	97 81       	ldd	r25, Z+7	; 0x07
    27f6:	ea 01       	movw	r28, r20
    27f8:	98 83       	st	Y, r25
  }

  value.data = ccPacket.data + SWAP_DATA_HEAD_LEN + 1;
    27fa:	9f 01       	movw	r18, r30
    27fc:	24 5b       	subi	r18, 0xB4	; 180
    27fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2800:	af 01       	movw	r20, r30
    2802:	48 5f       	subi	r20, 0xF8	; 248
    2804:	5f 4f       	sbci	r21, 0xFF	; 255
    2806:	e9 01       	movw	r28, r18
    2808:	59 83       	std	Y+1, r21	; 0x01
    280a:	48 83       	st	Y, r20
  value.length = ccPacket.length - SWAP_DATA_HEAD_LEN - 1;
    280c:	2e 5f       	subi	r18, 0xFE	; 254
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	87 50       	subi	r24, 0x07	; 7
    2812:	e9 01       	movw	r28, r18
    2814:	88 83       	st	Y, r24

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
    2816:	8c 91       	ld	r24, X
    2818:	81 11       	cpse	r24, r1
    281a:	10 c0       	rjmp	.+32     	; 0x283c <_ZN8SWPACKETC1EP8CCPACKET+0x102>
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
    281c:	d6 01       	movw	r26, r12
    281e:	8c 91       	ld	r24, X
    2820:	81 ff       	sbrs	r24, 1
    2822:	0c c0       	rjmp	.+24     	; 0x283c <_ZN8SWPACKETC1EP8CCPACKET+0x102>
      smartDecrypt();
    2824:	61 e0       	ldi	r22, 0x01	; 1
    2826:	cf 01       	movw	r24, r30
  }
  #endif
}
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	ff 90       	pop	r15
    2832:	ef 90       	pop	r14
    2834:	df 90       	pop	r13
    2836:	cf 90       	pop	r12
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
      smartDecrypt();
    2838:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <_ZN8SWPACKET12smartEncryptEb>
  }
  #endif
}
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	ff 90       	pop	r15
    2846:	ef 90       	pop	r14
    2848:	df 90       	pop	r13
    284a:	cf 90       	pop	r12
    284c:	08 95       	ret

0000284e <_ZN8SWPACKET4sendEv>:
 * @return
 *  True if the transmission succeeds
 *  False otherwise
 */
bool SWPACKET::send(void)
{
    284e:	cf 92       	push	r12
    2850:	df 92       	push	r13
    2852:	ef 92       	push	r14
    2854:	ff 92       	push	r15
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	c1 54       	subi	r28, 0x41	; 65
    2864:	d1 09       	sbc	r29, r1
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	8c 01       	movw	r16, r24
  byte i;
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
    2872:	fc 01       	movw	r30, r24
    2874:	e1 5b       	subi	r30, 0xB1	; 177
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	98 01       	movw	r18, r16
    287c:	22 5b       	subi	r18, 0xB2	; 178
    287e:	3f 4f       	sbci	r19, 0xFF	; 255
    2880:	79 01       	movw	r14, r18
    2882:	e7 54       	subi	r30, 0x47	; 71
    2884:	f1 09       	sbc	r31, r1
    2886:	d9 01       	movw	r26, r18
    2888:	81 11       	cpse	r24, r1
    288a:	10 c0       	rjmp	.+32     	; 0x28ac <_ZN8SWPACKET4sendEv+0x5e>
    288c:	8c 91       	ld	r24, X
    288e:	90 e0       	ldi	r25, 0x00	; 0
  {
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
    2890:	a8 01       	movw	r20, r16
    2892:	44 5b       	subi	r20, 0xB4	; 180
    2894:	5f 4f       	sbci	r21, 0xFF	; 255
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	d8 f0       	brcs	.+54     	; 0x28d0 <_ZN8SWPACKET4sendEv+0x82>
    289a:	da 01       	movw	r26, r20
    289c:	2d 91       	ld	r18, X+
    289e:	3c 91       	ld	r19, X
    28a0:	d9 01       	movw	r26, r18
    28a2:	a8 0f       	add	r26, r24
    28a4:	b9 1f       	adc	r27, r25
    28a6:	2c 91       	ld	r18, X
    28a8:	21 93       	st	Z+, r18
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
  {
    for(i=0 ; i<value.length ; i++)
    28aa:	f5 cf       	rjmp	.-22     	; 0x2896 <_ZN8SWPACKET4sendEv+0x48>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    28ac:	3c 91       	ld	r19, X
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e0       	ldi	r25, 0x00	; 0
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    28b2:	a8 01       	movw	r20, r16
    28b4:	44 5b       	subi	r20, 0xB4	; 180
    28b6:	5f 4f       	sbci	r21, 0xFF	; 255
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    28b8:	83 17       	cp	r24, r19
    28ba:	50 f4       	brcc	.+20     	; 0x28d0 <_ZN8SWPACKET4sendEv+0x82>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    28bc:	da 01       	movw	r26, r20
    28be:	6d 91       	ld	r22, X+
    28c0:	7c 91       	ld	r23, X
    28c2:	db 01       	movw	r26, r22
    28c4:	a8 0f       	add	r26, r24
    28c6:	b9 1f       	adc	r27, r25
    28c8:	2c 91       	ld	r18, X
    28ca:	21 93       	st	Z+, r18
    28cc:	01 96       	adiw	r24, 0x01	; 1
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    28ce:	f4 cf       	rjmp	.-24     	; 0x28b8 <_ZN8SWPACKET4sendEv+0x6a>
  }

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
    // Need to encrypt packet?
    if (security & 0x02)
    28d0:	68 01       	movw	r12, r16
    28d2:	b6 e4       	ldi	r27, 0x46	; 70
    28d4:	cb 0e       	add	r12, r27
    28d6:	d1 1c       	adc	r13, r1
    28d8:	f6 01       	movw	r30, r12
    28da:	80 81       	ld	r24, Z
    28dc:	81 ff       	sbrs	r24, 1
    28de:	04 c0       	rjmp	.+8      	; 0x28e8 <_ZN8SWPACKET4sendEv+0x9a>
      smartEncrypt();
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	c8 01       	movw	r24, r16
    28e4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_ZN8SWPACKET12smartEncryptEb>
  #endif

  ccPacket.length = value.length + SWAP_DATA_HEAD_LEN + 1;
    28e8:	d7 01       	movw	r26, r14
    28ea:	8c 91       	ld	r24, X
    28ec:	89 5f       	subi	r24, 0xF9	; 249
    28ee:	f8 01       	movw	r30, r16
    28f0:	80 83       	st	Z, r24

  ccPacket.data[2] = (hop << 4) & 0xF0;
    28f2:	eb 5b       	subi	r30, 0xBB	; 187
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
  ccPacket.data[2] |= security & 0x0F;
    28f6:	80 81       	ld	r24, Z
    28f8:	f0 e1       	ldi	r31, 0x10	; 16
    28fa:	8f 9f       	mul	r24, r31
    28fc:	c0 01       	movw	r24, r0
    28fe:	11 24       	eor	r1, r1
    2900:	d6 01       	movw	r26, r12
    2902:	9c 91       	ld	r25, X
    2904:	9f 70       	andi	r25, 0x0F	; 15
    2906:	89 2b       	or	r24, r25
    2908:	f8 01       	movw	r30, r16
    290a:	83 83       	std	Z+3, r24	; 0x03
  ccPacket.data[3] = nonce;
    290c:	e9 5b       	subi	r30, 0xB9	; 185
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	d8 01       	movw	r26, r16
    2914:	14 96       	adiw	r26, 0x04	; 4
    2916:	8c 93       	st	X, r24
    2918:	14 97       	sbiw	r26, 0x04	; 4
    ccPacket.data[6] = srcAddr & 0xFF;
    ccPacket.data[7] = (regAddr >> 8) & 0xFF;
    ccPacket.data[8] = regAddr & 0xFF;
    ccPacket.data[9] = regId;
  #else
    addrType = SWAPADDR_SIMPLE;
    291a:	32 96       	adiw	r30, 0x02	; 2
    291c:	10 82       	st	Z, r1
    ccPacket.data[0] = destAddr;
    291e:	38 97       	sbiw	r30, 0x08	; 8
    2920:	80 81       	ld	r24, Z
    2922:	f8 01       	movw	r30, r16
    2924:	81 83       	std	Z+1, r24	; 0x01
    ccPacket.data[1] = srcAddr;
    2926:	ed 5b       	subi	r30, 0xBD	; 189
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 81       	ld	r24, Z
    292c:	12 96       	adiw	r26, 0x02	; 2
    292e:	8c 93       	st	X, r24
    2930:	12 97       	sbiw	r26, 0x02	; 2
    ccPacket.data[4] = function;
    2932:	35 96       	adiw	r30, 0x05	; 5
    2934:	80 81       	ld	r24, Z
    2936:	f8 01       	movw	r30, r16
    2938:	85 83       	std	Z+5, r24	; 0x05
    ccPacket.data[5] = regAddr;
    293a:	e6 5b       	subi	r30, 0xB6	; 182
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 81       	ld	r24, Z
    2940:	16 96       	adiw	r26, 0x06	; 6
    2942:	8c 93       	st	X, r24
    ccPacket.data[6] = regId;
    2944:	31 96       	adiw	r30, 0x01	; 1
    2946:	80 81       	ld	r24, Z
    2948:	f8 01       	movw	r30, r16
    294a:	87 83       	std	Z+7, r24	; 0x07
    294c:	93 e0       	ldi	r25, 0x03	; 3
    294e:	f9 2e       	mov	r15, r25
    2950:	81 e4       	ldi	r24, 0x41	; 65
    2952:	f8 01       	movw	r30, r16
    2954:	de 01       	movw	r26, r28
    2956:	11 96       	adiw	r26, 0x01	; 1
    2958:	01 90       	ld	r0, Z+
    295a:	0d 92       	st	X+, r0
    295c:	8a 95       	dec	r24
    295e:	e1 f7       	brne	.-8      	; 0x2958 <_ZN8SWPACKET4sendEv+0x10a>
     *  True if the transmission succeeds
     *  False otherwise
     */
    inline bool sendData(CCPACKET packet)
    {
      return radio.sendData(packet);
    2960:	2d b7       	in	r18, 0x3d	; 61
    2962:	3e b7       	in	r19, 0x3e	; 62
    2964:	21 54       	subi	r18, 0x41	; 65
    2966:	31 09       	sbc	r19, r1
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	3e bf       	out	0x3e, r19	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	2d bf       	out	0x3d, r18	; 61
    2972:	ad b7       	in	r26, 0x3d	; 61
    2974:	be b7       	in	r27, 0x3e	; 62
    2976:	11 96       	adiw	r26, 0x01	; 1
    2978:	81 e4       	ldi	r24, 0x41	; 65
    297a:	fe 01       	movw	r30, r28
    297c:	31 96       	adiw	r30, 0x01	; 1
    297e:	01 90       	ld	r0, Z+
    2980:	0d 92       	st	X+, r0
    2982:	8a 95       	dec	r24
    2984:	e1 f7       	brne	.-8      	; 0x297e <_ZN8SWPACKET4sendEv+0x130>
    2986:	8c e6       	ldi	r24, 0x6C	; 108
    2988:	93 e0       	ldi	r25, 0x03	; 3
    298a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN6CC11018sendDataE8CCPACKET>
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	81 11       	cpse	r24, r1
    299a:	0f c0       	rjmp	.+30     	; 0x29ba <_ZN8SWPACKET4sendEv+0x16c>
    299c:	fa 94       	dec	r15
    299e:	ff 20       	and	r15, r15
    29a0:	61 f0       	breq	.+24     	; 0x29ba <_ZN8SWPACKET4sendEv+0x16c>
  {
    i--;
    delay(SWAP_TX_DELAY);
    29a2:	60 91 74 03 	lds	r22, 0x0374	; 0x800374 <panstamp+0x9>
    29a6:	70 e0       	ldi	r23, 0x00	; 0
    29a8:	66 0f       	add	r22, r22
    29aa:	77 1f       	adc	r23, r23
    29ac:	07 2e       	mov	r0, r23
    29ae:	00 0c       	add	r0, r0
    29b0:	88 0b       	sbc	r24, r24
    29b2:	99 0b       	sbc	r25, r25
    29b4:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
    ccPacket.data[5] = regAddr;
    ccPacket.data[6] = regId;
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    29b8:	cb cf       	rjmp	.-106    	; 0x2950 <_ZN8SWPACKET4sendEv+0x102>
    i--;
    delay(SWAP_TX_DELAY);
  }
  return res;
  
}
    29ba:	cf 5b       	subi	r28, 0xBF	; 191
    29bc:	df 4f       	sbci	r29, 0xFF	; 255
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	ff 90       	pop	r15
    29d2:	ef 90       	pop	r14
    29d4:	df 90       	pop	r13
    29d6:	cf 90       	pop	r12
    29d8:	08 95       	ret

000029da <_ZN8SWSTATUSC1EhPhh7SWDTYPE>:
 * @param rId Register id
 * @param val	Pointer to new value
 * @param len Buffer length
 * @param type type of data contained
 */
SWSTATUS::SWSTATUS(unsigned char rId, unsigned char *val, unsigned char len, SWDTYPE type) 
    29da:	df 92       	push	r13
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	ec 01       	movw	r28, r24
    29ea:	d6 2e       	mov	r13, r22
    29ec:	7a 01       	movw	r14, r20
    29ee:	12 2f       	mov	r17, r18
    29f0:	0e 94 29 13 	call	0x2652	; 0x2652 <_ZN8SWPACKETC1Ev>
{
  destAddr = SWAP_BCAST_ADDR;
    29f4:	fe 01       	movw	r30, r28
    29f6:	ef 5b       	subi	r30, 0xBF	; 191
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	11 82       	std	Z+1, r1	; 0x01
    29fc:	10 82       	st	Z, r1
  srcAddr = swap.devAddress;
    29fe:	e9 e7       	ldi	r30, 0x79	; 121
    2a00:	f3 e0       	ldi	r31, 0x03	; 3
    2a02:	92 81       	ldd	r25, Z+2	; 0x02
    2a04:	de 01       	movw	r26, r28
    2a06:	ad 5b       	subi	r26, 0xBD	; 189
    2a08:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0a:	29 2f       	mov	r18, r25
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	11 96       	adiw	r26, 0x01	; 1
    2a10:	3c 93       	st	X, r19
    2a12:	2e 93       	st	-X, r18
  hop = 0;
    2a14:	12 96       	adiw	r26, 0x02	; 2
    2a16:	1c 92       	st	X, r1
  security = swap.security & 0x0F;
    2a18:	11 96       	adiw	r26, 0x01	; 1
    2a1a:	83 81       	ldd	r24, Z+3	; 0x03
    2a1c:	8f 70       	andi	r24, 0x0F	; 15
    2a1e:	8c 93       	st	X, r24
  nonce = ++swap.nonce;
    2a20:	84 81       	ldd	r24, Z+4	; 0x04
    2a22:	8f 5f       	subi	r24, 0xFF	; 255
    2a24:	84 83       	std	Z+4, r24	; 0x04
    2a26:	fe 01       	movw	r30, r28
    2a28:	e9 5b       	subi	r30, 0xB9	; 185
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 83       	st	Z, r24
  function = SWAPFUNCT_STA;
    2a2e:	31 96       	adiw	r30, 0x01	; 1
    2a30:	10 82       	st	Z, r1
  regAddr = swap.devAddress;
    2a32:	32 96       	adiw	r30, 0x02	; 2
    2a34:	90 83       	st	Z, r25
  regId = rId;
    2a36:	31 96       	adiw	r30, 0x01	; 1
    2a38:	d0 82       	st	Z, r13
  value.length = len;
    2a3a:	33 96       	adiw	r30, 0x03	; 3
    2a3c:	10 83       	st	Z, r17
  value.data = val;
    2a3e:	32 97       	sbiw	r30, 0x02	; 2
    2a40:	f1 82       	std	Z+1, r15	; 0x01
    2a42:	e0 82       	st	Z, r14
  value.type = type;
    2a44:	c1 5b       	subi	r28, 0xB1	; 177
    2a46:	df 4f       	sbci	r29, 0xFF	; 255
    2a48:	08 83       	st	Y, r16
}
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	08 95       	ret

00002a5a <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	08 95       	ret

00002a60 <_ZN7TwoWire9availableEv>:
    2a60:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2a6a:	82 1b       	sub	r24, r18
    2a6c:	91 09       	sbc	r25, r1
    2a6e:	08 95       	ret

00002a70 <_ZN7TwoWire4readEv>:
    2a70:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2a74:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2a78:	98 17       	cp	r25, r24
    2a7a:	50 f4       	brcc	.+20     	; 0x2a90 <_ZN7TwoWire4readEv+0x20>
    2a7c:	e9 2f       	mov	r30, r25
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	ec 50       	subi	r30, 0x0C	; 12
    2a82:	fc 4f       	sbci	r31, 0xFC	; 252
    2a84:	20 81       	ld	r18, Z
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	9f 5f       	subi	r25, 0xFF	; 255
    2a8a:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <_ZN7TwoWire4readEv+0x24>
    2a90:	2f ef       	ldi	r18, 0xFF	; 255
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	c9 01       	movw	r24, r18
    2a96:	08 95       	ret

00002a98 <_ZN7TwoWire4peekEv>:
    2a98:	e0 91 f3 03 	lds	r30, 0x03F3	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2a9c:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2aa0:	e8 17       	cp	r30, r24
    2aa2:	30 f4       	brcc	.+12     	; 0x2ab0 <_ZN7TwoWire4peekEv+0x18>
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	ec 50       	subi	r30, 0x0C	; 12
    2aa8:	fc 4f       	sbci	r31, 0xFC	; 252
    2aaa:	80 81       	ld	r24, Z
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	08 95       	ret
    2ab0:	8f ef       	ldi	r24, 0xFF	; 255
    2ab2:	9f ef       	ldi	r25, 0xFF	; 255
    2ab4:	08 95       	ret

00002ab6 <_ZN7TwoWire5flushEv>:
    2ab6:	08 95       	ret

00002ab8 <_ZN7TwoWire5writeEPKhj>:
    2ab8:	cf 92       	push	r12
    2aba:	df 92       	push	r13
    2abc:	ef 92       	push	r14
    2abe:	ff 92       	push	r15
    2ac0:	0f 93       	push	r16
    2ac2:	1f 93       	push	r17
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
    2ac8:	7c 01       	movw	r14, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	8a 01       	movw	r16, r20
    2ace:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <_ZN7TwoWire12transmittingE>
    2ad2:	22 23       	and	r18, r18
    2ad4:	89 f0       	breq	.+34     	; 0x2af8 <_ZN7TwoWire5writeEPKhj+0x40>
    2ad6:	eb 01       	movw	r28, r22
    2ad8:	6b 01       	movw	r12, r22
    2ada:	c4 0e       	add	r12, r20
    2adc:	d5 1e       	adc	r13, r21
    2ade:	cc 15       	cp	r28, r12
    2ae0:	dd 05       	cpc	r29, r13
    2ae2:	69 f0       	breq	.+26     	; 0x2afe <_ZN7TwoWire5writeEPKhj+0x46>
    2ae4:	69 91       	ld	r22, Y+
    2ae6:	d7 01       	movw	r26, r14
    2ae8:	ed 91       	ld	r30, X+
    2aea:	fc 91       	ld	r31, X
    2aec:	01 90       	ld	r0, Z+
    2aee:	f0 81       	ld	r31, Z
    2af0:	e0 2d       	mov	r30, r0
    2af2:	c7 01       	movw	r24, r14
    2af4:	09 95       	icall
    2af6:	f3 cf       	rjmp	.-26     	; 0x2ade <_ZN7TwoWire5writeEPKhj+0x26>
    2af8:	64 2f       	mov	r22, r20
    2afa:	0e 94 43 19 	call	0x3286	; 0x3286 <_Z12twi_transmitPKhh>
    2afe:	c8 01       	movw	r24, r16
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	df 90       	pop	r13
    2b0e:	cf 90       	pop	r12
    2b10:	08 95       	ret

00002b12 <_ZN7TwoWire5writeEh>:
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	1f 92       	push	r1
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	69 83       	std	Y+1, r22	; 0x01
    2b1e:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <_ZN7TwoWire12transmittingE>
    2b22:	22 23       	and	r18, r18
    2b24:	d1 f0       	breq	.+52     	; 0x2b5a <_ZN7TwoWire5writeEh+0x48>
    2b26:	20 91 cf 03 	lds	r18, 0x03CF	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2b2a:	20 32       	cpi	r18, 0x20	; 32
    2b2c:	40 f0       	brcs	.+16     	; 0x2b3e <_ZN7TwoWire5writeEh+0x2c>
    2b2e:	21 e0       	ldi	r18, 0x01	; 1
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	fc 01       	movw	r30, r24
    2b34:	33 83       	std	Z+3, r19	; 0x03
    2b36:	22 83       	std	Z+2, r18	; 0x02
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	15 c0       	rjmp	.+42     	; 0x2b68 <_ZN7TwoWire5writeEh+0x56>
    2b3e:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2b42:	e8 2f       	mov	r30, r24
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	ef 52       	subi	r30, 0x2F	; 47
    2b48:	fc 4f       	sbci	r31, 0xFC	; 252
    2b4a:	99 81       	ldd	r25, Y+1	; 0x01
    2b4c:	90 83       	st	Z, r25
    2b4e:	8f 5f       	subi	r24, 0xFF	; 255
    2b50:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2b54:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2b58:	05 c0       	rjmp	.+10     	; 0x2b64 <_ZN7TwoWire5writeEh+0x52>
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	01 96       	adiw	r24, 0x01	; 1
    2b60:	0e 94 43 19 	call	0x3286	; 0x3286 <_Z12twi_transmitPKhh>
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0f 90       	pop	r0
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <_ZN7TwoWireC1Ev>:
    2b70:	fc 01       	movw	r30, r24
    2b72:	13 82       	std	Z+3, r1	; 0x03
    2b74:	12 82       	std	Z+2, r1	; 0x02
    2b76:	88 ee       	ldi	r24, 0xE8	; 232
    2b78:	93 e0       	ldi	r25, 0x03	; 3
    2b7a:	a0 e0       	ldi	r26, 0x00	; 0
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	84 83       	std	Z+4, r24	; 0x04
    2b80:	95 83       	std	Z+5, r25	; 0x05
    2b82:	a6 83       	std	Z+6, r26	; 0x06
    2b84:	b7 83       	std	Z+7, r27	; 0x07
    2b86:	85 e5       	ldi	r24, 0x55	; 85
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	80 83       	st	Z, r24
    2b8e:	08 95       	ret

00002b90 <_ZN7TwoWire5beginEv>:
    2b90:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2b94:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2b98:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2b9c:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2ba0:	0c 94 90 18 	jmp	0x3120	; 0x3120 <_Z8twi_initv>

00002ba4 <_ZN7TwoWire11requestFromEhhh>:
    2ba4:	86 2f       	mov	r24, r22
    2ba6:	41 32       	cpi	r20, 0x21	; 33
    2ba8:	08 f0       	brcs	.+2      	; 0x2bac <_ZN7TwoWire11requestFromEhhh+0x8>
    2baa:	40 e2       	ldi	r20, 0x20	; 32
    2bac:	64 ef       	ldi	r22, 0xF4	; 244
    2bae:	73 e0       	ldi	r23, 0x03	; 3
    2bb0:	0e 94 ae 18 	call	0x315c	; 0x315c <_Z12twi_readFromhPhhh>
    2bb4:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <_ZN7TwoWire13rxBufferIndexE>
    2bb8:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <_ZN7TwoWire14rxBufferLengthE>
    2bbc:	08 95       	ret

00002bbe <_ZN7TwoWire11requestFromEii>:
    2bbe:	21 e0       	ldi	r18, 0x01	; 1
    2bc0:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <_ZN7TwoWire11requestFromEhhh>

00002bc4 <_ZN7TwoWire17beginTransmissionEh>:
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <_ZN7TwoWire12transmittingE>
    2bca:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <_ZN7TwoWire9txAddressE>
    2bce:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2bd2:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2bd6:	08 95       	ret

00002bd8 <_ZN7TwoWire17beginTransmissionEi>:
    2bd8:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <_ZN7TwoWire17beginTransmissionEh>

00002bdc <_ZN7TwoWire15endTransmissionEh>:
    2bdc:	0f 93       	push	r16
    2bde:	06 2f       	mov	r16, r22
    2be0:	21 e0       	ldi	r18, 0x01	; 1
    2be2:	40 91 cf 03 	lds	r20, 0x03CF	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2be6:	61 ed       	ldi	r22, 0xD1	; 209
    2be8:	73 e0       	ldi	r23, 0x03	; 3
    2bea:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <_ZN7TwoWire9txAddressE>
    2bee:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <_Z11twi_writeTohPhhhh>
    2bf2:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_ZN7TwoWire13txBufferIndexE>
    2bf6:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_ZN7TwoWire14txBufferLengthE>
    2bfa:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_ZN7TwoWire12transmittingE>
    2bfe:	0f 91       	pop	r16
    2c00:	08 95       	ret

00002c02 <_ZN7TwoWire15endTransmissionEv>:
    2c02:	61 e0       	ldi	r22, 0x01	; 1
    2c04:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <_ZN7TwoWire15endTransmissionEh>

00002c08 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2c08:	82 ec       	ldi	r24, 0xC2	; 194
    2c0a:	93 e0       	ldi	r25, 0x03	; 3
    2c0c:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <_ZN7TwoWireC1Ev>

00002c10 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2c10:	08 95       	ret

00002c12 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    2c12:	08 95       	ret

00002c14 <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2c14:	82 30       	cpi	r24, 0x02	; 2
    2c16:	e8 f4       	brcc	.+58     	; 0x2c52 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    2c18:	e8 2f       	mov	r30, r24
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	ee 0f       	add	r30, r30
    2c1e:	ff 1f       	adc	r31, r31
    2c20:	e3 5b       	subi	r30, 0xB3	; 179
    2c22:	fe 4f       	sbci	r31, 0xFE	; 254
    2c24:	71 83       	std	Z+1, r23	; 0x01
    2c26:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    2c28:	81 30       	cpi	r24, 0x01	; 1
    2c2a:	41 f0       	breq	.+16     	; 0x2c3c <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    2c2c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2c30:	8c 7f       	andi	r24, 0xFC	; 252
    2c32:	48 2b       	or	r20, r24
    2c34:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    2c38:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    2c3a:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    2c3c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2c40:	83 7f       	andi	r24, 0xF3	; 243
    2c42:	44 0f       	add	r20, r20
    2c44:	55 1f       	adc	r21, r21
    2c46:	44 0f       	add	r20, r20
    2c48:	55 1f       	adc	r21, r21
    2c4a:	48 2b       	or	r20, r24
    2c4c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    2c50:	e9 9a       	sbi	0x1d, 1	; 29
    2c52:	08 95       	ret

00002c54 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2c54:	82 30       	cpi	r24, 0x02	; 2
    2c56:	78 f4       	brcc	.+30     	; 0x2c76 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    2c58:	81 30       	cpi	r24, 0x01	; 1
    2c5a:	11 f0       	breq	.+4      	; 0x2c60 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    2c5c:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    2c60:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2c62:	e8 2f       	mov	r30, r24
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	ee 0f       	add	r30, r30
    2c68:	ff 1f       	adc	r31, r31
    2c6a:	e3 5b       	subi	r30, 0xB3	; 179
    2c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6e:	89 e0       	ldi	r24, 0x09	; 9
    2c70:	96 e1       	ldi	r25, 0x16	; 22
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
    2c76:	08 95       	ret

00002c78 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2c78:	1f 92       	push	r1
    2c7a:	0f 92       	push	r0
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	0f 92       	push	r0
    2c80:	11 24       	eor	r1, r1
    2c82:	2f 93       	push	r18
    2c84:	3f 93       	push	r19
    2c86:	4f 93       	push	r20
    2c88:	5f 93       	push	r21
    2c8a:	6f 93       	push	r22
    2c8c:	7f 93       	push	r23
    2c8e:	8f 93       	push	r24
    2c90:	9f 93       	push	r25
    2c92:	af 93       	push	r26
    2c94:	bf 93       	push	r27
    2c96:	ef 93       	push	r30
    2c98:	ff 93       	push	r31
    2c9a:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <intFunc>
    2c9e:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <intFunc+0x1>
    2ca2:	09 95       	icall
    2ca4:	ff 91       	pop	r31
    2ca6:	ef 91       	pop	r30
    2ca8:	bf 91       	pop	r27
    2caa:	af 91       	pop	r26
    2cac:	9f 91       	pop	r25
    2cae:	8f 91       	pop	r24
    2cb0:	7f 91       	pop	r23
    2cb2:	6f 91       	pop	r22
    2cb4:	5f 91       	pop	r21
    2cb6:	4f 91       	pop	r20
    2cb8:	3f 91       	pop	r19
    2cba:	2f 91       	pop	r18
    2cbc:	0f 90       	pop	r0
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	0f 90       	pop	r0
    2cc2:	1f 90       	pop	r1
    2cc4:	18 95       	reti

00002cc6 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2cc6:	1f 92       	push	r1
    2cc8:	0f 92       	push	r0
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	0f 92       	push	r0
    2cce:	11 24       	eor	r1, r1
    2cd0:	2f 93       	push	r18
    2cd2:	3f 93       	push	r19
    2cd4:	4f 93       	push	r20
    2cd6:	5f 93       	push	r21
    2cd8:	6f 93       	push	r22
    2cda:	7f 93       	push	r23
    2cdc:	8f 93       	push	r24
    2cde:	9f 93       	push	r25
    2ce0:	af 93       	push	r26
    2ce2:	bf 93       	push	r27
    2ce4:	ef 93       	push	r30
    2ce6:	ff 93       	push	r31
    2ce8:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <intFunc+0x2>
    2cec:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <intFunc+0x3>
    2cf0:	09 95       	icall
    2cf2:	ff 91       	pop	r31
    2cf4:	ef 91       	pop	r30
    2cf6:	bf 91       	pop	r27
    2cf8:	af 91       	pop	r26
    2cfa:	9f 91       	pop	r25
    2cfc:	8f 91       	pop	r24
    2cfe:	7f 91       	pop	r23
    2d00:	6f 91       	pop	r22
    2d02:	5f 91       	pop	r21
    2d04:	4f 91       	pop	r20
    2d06:	3f 91       	pop	r19
    2d08:	2f 91       	pop	r18
    2d0a:	0f 90       	pop	r0
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	0f 90       	pop	r0
    2d10:	1f 90       	pop	r1
    2d12:	18 95       	reti

00002d14 <_ZN6AVRRTC6wakeUpEv>:
 * 'rxOn' Enter RX_ON state after waking up
 */
void AVRRTC::wakeUp(void) 
{
  // Exit from sleep
  sleep_disable();
    2d14:	83 b7       	in	r24, 0x33	; 51
    2d16:	8e 7f       	andi	r24, 0xFE	; 254
    2d18:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
    2d1a:	e4 e6       	ldi	r30, 0x64	; 100
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	80 71       	andi	r24, 0x10	; 16
    2d22:	80 83       	st	Z, r24
  //wdt_disable();
  // Re-enable functions
  //clock_prescale_set(clock_div_1);
  power_all_enable();
  // Enable ADC
  ADCSRA |= (1 << ADEN);
    2d24:	ea e7       	ldi	r30, 0x7A	; 122
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	80 68       	ori	r24, 0x80	; 128
    2d2c:	80 83       	st	Z, r24
  
  TIMSK2 = 0x00;
    2d2e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    2d32:	08 95       	ret

00002d34 <__vector_6>:
 * ISR(WDT_vect)
 *
 * Watchdog ISR. Called whenever a watchdog interrupt occurs
 */
ISR(WDT_vect)
{
    2d34:	1f 92       	push	r1
    2d36:	0f 92       	push	r0
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	0f 92       	push	r0
    2d3c:	11 24       	eor	r1, r1
}
    2d3e:	0f 90       	pop	r0
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	0f 90       	pop	r0
    2d44:	1f 90       	pop	r1
    2d46:	18 95       	reti

00002d48 <_ZN6AVRRTC14setup_watchdogEh>:
 */
void AVRRTC::setup_watchdog(uint8_t time) 
{
  uint8_t bb;

  bb = time & 7;
    2d48:	86 2f       	mov	r24, r22
    2d4a:	87 70       	andi	r24, 0x07	; 7
  if (time > 7)
    2d4c:	68 30       	cpi	r22, 0x08	; 8
    2d4e:	08 f0       	brcs	.+2      	; 0x2d52 <_ZN6AVRRTC14setup_watchdogEh+0xa>
    bb|= (1<<5);
    2d50:	80 62       	ori	r24, 0x20	; 32

  bb|= (1<<WDCE);
    2d52:	80 61       	ori	r24, 0x10	; 16

  MCUSR &= ~(1<<WDRF);
    2d54:	94 b7       	in	r25, 0x34	; 52
    2d56:	97 7f       	andi	r25, 0xF7	; 247
    2d58:	94 bf       	out	0x34, r25	; 52
  // start timed sequence
  WDTCSR |= (1<<WDCE) | (1<<WDE);
    2d5a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2d5e:	98 61       	ori	r25, 0x18	; 24
    2d60:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  // set new watchdog timeout value
  WDTCSR = bb;
    2d64:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  WDTCSR |= _BV(WDIE);    // Enable Watchdog interrupt
    2d68:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2d6c:	80 64       	ori	r24, 0x40	; 64
    2d6e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2d72:	08 95       	ret

00002d74 <__vector_9>:

/**
 * Timer 2 (RTC) ISR routine
 */
ISR(TIMER2_OVF_vect)
{
    2d74:	1f 92       	push	r1
    2d76:	0f 92       	push	r0
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	0f 92       	push	r0
    2d7c:	11 24       	eor	r1, r1
    2d7e:	8f 93       	push	r24
    2d80:	9f 93       	push	r25
    2d82:	af 93       	push	r26
    2d84:	bf 93       	push	r27
  AVRRTC::count++;    // Increment counter
    2d86:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <_ZN6AVRRTC5countE>
    2d8a:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <_ZN6AVRRTC5countE+0x1>
    2d8e:	a0 91 16 04 	lds	r26, 0x0416	; 0x800416 <_ZN6AVRRTC5countE+0x2>
    2d92:	b0 91 17 04 	lds	r27, 0x0417	; 0x800417 <_ZN6AVRRTC5countE+0x3>
    2d96:	01 96       	adiw	r24, 0x01	; 1
    2d98:	a1 1d       	adc	r26, r1
    2d9a:	b1 1d       	adc	r27, r1
    2d9c:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <_ZN6AVRRTC5countE>
    2da0:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <_ZN6AVRRTC5countE+0x1>
    2da4:	a0 93 16 04 	sts	0x0416, r26	; 0x800416 <_ZN6AVRRTC5countE+0x2>
    2da8:	b0 93 17 04 	sts	0x0417, r27	; 0x800417 <_ZN6AVRRTC5countE+0x3>
}
    2dac:	bf 91       	pop	r27
    2dae:	af 91       	pop	r26
    2db0:	9f 91       	pop	r25
    2db2:	8f 91       	pop	r24
    2db4:	0f 90       	pop	r0
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	0f 90       	pop	r0
    2dba:	1f 90       	pop	r1
    2dbc:	18 95       	reti

00002dbe <_ZN6AVRRTC9setup_rtcEh>:
 *          RTC_8S = 1024 for 8 sec
 */
void AVRRTC::setup_rtc(uint8_t time)
{
  // Set timer 2 to asyncronous mode (32.768KHz crystal)
  ASSR = (1 << AS2);
    2dbe:	80 e2       	ldi	r24, 0x20	; 32
    2dc0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>

  TCNT2 = 0;      // Reset count
    2dc4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
  TCCR2A = 0x00;  // Normal port operation
    2dc8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  // (256 cycles) * (prescaler) / (32.768KHz clock speed) = N sec
  TCCR2B = time;  // Timer 2 prescaler
    2dcc:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

  while (ASSR & (_BV(TCN2UB) | _BV(TCR2AUB) | _BV(TCR2BUB))) {}    // Wait for the registers to be updated    
    2dd0:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
    2dd4:	83 71       	andi	r24, 0x13	; 19
    2dd6:	e1 f7       	brne	.-8      	; 0x2dd0 <_ZN6AVRRTC9setup_rtcEh+0x12>
  TIFR2 = _BV(OCF2B) | _BV(OCF2A) | _BV(TOV2);                     // Clear the interrupt flags
    2dd8:	87 e0       	ldi	r24, 0x07	; 7
    2dda:	87 bb       	out	0x17, r24	; 23

  TIMSK2 = 0x01;  // Enable timer2A overflow interrupt
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    2de2:	08 95       	ret

00002de4 <_ZN6AVRRTC7sleepWdEh>:
 *  WDTO_2S = 2 s
 *  WDTO_4S = 4 s
 *  WDTO_8S = 8 s
 */
void AVRRTC::sleepWd(uint8_t time) 
{
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	ec 01       	movw	r28, r24
  // Power-down panStamp
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2dea:	83 b7       	in	r24, 0x33	; 51
    2dec:	81 7f       	andi	r24, 0xF1	; 241
    2dee:	84 60       	ori	r24, 0x04	; 4
    2df0:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
    2df2:	83 b7       	in	r24, 0x33	; 51
    2df4:	81 60       	ori	r24, 0x01	; 1
    2df6:	83 bf       	out	0x33, r24	; 51
  setup_watchdog(time);
    2df8:	ce 01       	movw	r24, r28
    2dfa:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZN6AVRRTC14setup_watchdogEh>
  delayMicroseconds(10);
    2dfe:	8a e0       	ldi	r24, 0x0A	; 10
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	0e 94 61 09 	call	0x12c2	; 0x12c2 <delayMicroseconds>
  // Disable ADC
  ADCSRA &= ~(1 << ADEN);
    2e06:	ea e7       	ldi	r30, 0x7A	; 122
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	8f 77       	andi	r24, 0x7F	; 127
    2e0e:	80 83       	st	Z, r24
  // Unpower functions
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1280__)
  PRR0 = 0xFF;
#else
  PRR = 0xFF;
    2e10:	8f ef       	ldi	r24, 0xFF	; 255
    2e12:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
#endif
  //power_all_disable();
  //clock_prescale_set(clock_div_8);
  // Enter sleep mode
  sleep_mode();
    2e16:	83 b7       	in	r24, 0x33	; 51
    2e18:	81 60       	ori	r24, 0x01	; 1
    2e1a:	83 bf       	out	0x33, r24	; 51
    2e1c:	88 95       	sleep
    2e1e:	83 b7       	in	r24, 0x33	; 51
    2e20:	8e 7f       	andi	r24, 0xFE	; 254
    2e22:	83 bf       	out	0x33, r24	; 51

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    2e24:	ce 01       	movw	r24, r28
}
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
  sleep_mode();

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    2e2a:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <_ZN6AVRRTC6wakeUpEv>

00002e2e <_ZN6AVRRTC8sleepRtcEh>:
 *  RTC_1S = 1 s
 *  RTC_2S = 2 s
 *  RTC_8S = 8 s
 */
void AVRRTC::sleepRtc(uint8_t time) 
{
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
    2e32:	ec 01       	movw	r28, r24
  // Power-down panStamp
  set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    2e34:	83 b7       	in	r24, 0x33	; 51
    2e36:	81 7f       	andi	r24, 0xF1	; 241
    2e38:	86 60       	ori	r24, 0x06	; 6
    2e3a:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
    2e3c:	83 b7       	in	r24, 0x33	; 51
    2e3e:	81 60       	ori	r24, 0x01	; 1
    2e40:	83 bf       	out	0x33, r24	; 51
  setup_rtc(time);
    2e42:	ce 01       	movw	r24, r28
    2e44:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_ZN6AVRRTC9setup_rtcEh>
  delayMicroseconds(10);
    2e48:	8a e0       	ldi	r24, 0x0A	; 10
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <delayMicroseconds>
  // Disable ADC
  ADCSRA &= ~(1 << ADEN);
    2e50:	ea e7       	ldi	r30, 0x7A	; 122
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	8f 77       	andi	r24, 0x7F	; 127
    2e58:	80 83       	st	Z, r24
  // Unpower functions
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1280__)
  PRR0 = 0xFF;
#else
  PRR = 0xFF;
    2e5a:	8f ef       	ldi	r24, 0xFF	; 255
    2e5c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
#endif
  // Enter sleep mode
  sleep_mode();
    2e60:	83 b7       	in	r24, 0x33	; 51
    2e62:	81 60       	ori	r24, 0x01	; 1
    2e64:	83 bf       	out	0x33, r24	; 51
    2e66:	88 95       	sleep
    2e68:	83 b7       	in	r24, 0x33	; 51
    2e6a:	8e 7f       	andi	r24, 0xFE	; 254
    2e6c:	83 bf       	out	0x33, r24	; 51

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    2e6e:	ce 01       	movw	r24, r28
}
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
  sleep_mode();

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    2e74:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <_ZN6AVRRTC6wakeUpEv>

00002e78 <_ZN7STORAGE4readEPhhhh>:
 * @pararm length Length to be read
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    2e78:	cf 92       	push	r12
    2e7a:	df 92       	push	r13
    2e7c:	ef 92       	push	r14
    2e7e:	ff 92       	push	r15
    2e80:	0f 93       	push	r16
    2e82:	1f 93       	push	r17
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    2e88:	41 11       	cpse	r20, r1
    2e8a:	1a c0       	rjmp	.+52     	; 0x2ec0 <_ZN7STORAGE4readEPhhhh+0x48>
    2e8c:	7b 01       	movw	r14, r22
  {
    cli();
    2e8e:	f8 94       	cli
    2e90:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    2e92:	10 e0       	ldi	r17, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    2e94:	c2 2f       	mov	r28, r18
    2e96:	d0 e0       	ldi	r29, 0x00	; 0
    2e98:	c6 1b       	sub	r28, r22
    2e9a:	d7 0b       	sbc	r29, r23
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2e9c:	80 2f       	mov	r24, r16
    2e9e:	96 01       	movw	r18, r12
    2ea0:	2e 19       	sub	r18, r14
    2ea2:	3f 09       	sbc	r19, r15
    2ea4:	20 17       	cp	r18, r16
    2ea6:	31 07       	cpc	r19, r17
    2ea8:	48 f4       	brcc	.+18     	; 0x2ebc <_ZN7STORAGE4readEPhhhh+0x44>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    2eaa:	ce 01       	movw	r24, r28
    2eac:	8c 0d       	add	r24, r12
    2eae:	9d 1d       	adc	r25, r13
    2eb0:	0e 94 32 1b 	call	0x3664	; 0x3664 <eeprom_read_byte>
    2eb4:	f6 01       	movw	r30, r12
    2eb6:	81 93       	st	Z+, r24
    2eb8:	6f 01       	movw	r12, r30
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2eba:	f0 cf       	rjmp	.-32     	; 0x2e9c <_ZN7STORAGE4readEPhhhh+0x24>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
    2ebc:	78 94       	sei
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <_ZN7STORAGE4readEPhhhh+0x4a>
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
  }
  
  return i;
}
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ff 90       	pop	r15
    2ecc:	ef 90       	pop	r14
    2ece:	df 90       	pop	r13
    2ed0:	cf 90       	pop	r12
    2ed2:	08 95       	ret

00002ed4 <_ZN7STORAGE5writeEPhhhh>:
 * @pararm length Length to be written
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    2ed4:	cf 92       	push	r12
    2ed6:	df 92       	push	r13
    2ed8:	ef 92       	push	r14
    2eda:	ff 92       	push	r15
    2edc:	0f 93       	push	r16
    2ede:	1f 93       	push	r17
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    2ee4:	41 11       	cpse	r20, r1
    2ee6:	19 c0       	rjmp	.+50     	; 0x2f1a <_ZN7STORAGE5writeEPhhhh+0x46>
  {
    cli();
    2ee8:	f8 94       	cli
    2eea:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    2eec:	e1 2c       	mov	r14, r1
    2eee:	f1 2c       	mov	r15, r1
    2ef0:	10 e0       	ldi	r17, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    2ef2:	c2 2f       	mov	r28, r18
    2ef4:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2ef6:	80 2f       	mov	r24, r16
    2ef8:	e0 16       	cp	r14, r16
    2efa:	f1 06       	cpc	r15, r17
    2efc:	60 f4       	brcc	.+24     	; 0x2f16 <_ZN7STORAGE5writeEPhhhh+0x42>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    2efe:	f6 01       	movw	r30, r12
    2f00:	61 91       	ld	r22, Z+
    2f02:	6f 01       	movw	r12, r30
    2f04:	ce 01       	movw	r24, r28
    2f06:	8e 0d       	add	r24, r14
    2f08:	9f 1d       	adc	r25, r15
    2f0a:	0e 94 3a 1b 	call	0x3674	; 0x3674 <eeprom_write_byte>
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2f0e:	ff ef       	ldi	r31, 0xFF	; 255
    2f10:	ef 1a       	sub	r14, r31
    2f12:	ff 0a       	sbc	r15, r31
    2f14:	f0 cf       	rjmp	.-32     	; 0x2ef6 <_ZN7STORAGE5writeEPhhhh+0x22>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
    2f16:	78 94       	sei
    2f18:	01 c0       	rjmp	.+2      	; 0x2f1c <_ZN7STORAGE5writeEPhhhh+0x48>
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
  }
  
  return i;
}
    2f1c:	df 91       	pop	r29
    2f1e:	cf 91       	pop	r28
    2f20:	1f 91       	pop	r17
    2f22:	0f 91       	pop	r16
    2f24:	ff 90       	pop	r15
    2f26:	ef 90       	pop	r14
    2f28:	df 90       	pop	r13
    2f2a:	cf 90       	pop	r12
    2f2c:	08 95       	ret

00002f2e <_ZN8REPEATER15saveTransactionEP8SWPACKET>:
 * Save transaction in array
 *
 * @param packet SWAP packet being repeated
 */
void REPEATER::saveTransaction(SWPACKET *packet)
{
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	7c 01       	movw	r14, r24
    2f3c:	8b 01       	movw	r16, r22
  static uint8_t transactionIndex = 0;

  // Save current transaction in first position
  transactions[transactionIndex].timeStamp = millis();         // Current time stamp
    2f3e:	c0 91 18 04 	lds	r28, 0x0418	; 0x800418 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    2f42:	d0 e0       	ldi	r29, 0x00	; 0
    2f44:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <millis>
    2f48:	23 e0       	ldi	r18, 0x03	; 3
    2f4a:	cc 0f       	add	r28, r28
    2f4c:	dd 1f       	adc	r29, r29
    2f4e:	2a 95       	dec	r18
    2f50:	e1 f7       	brne	.-8      	; 0x2f4a <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x1c>
    2f52:	ce 0d       	add	r28, r14
    2f54:	df 1d       	adc	r29, r15
    2f56:	69 83       	std	Y+1, r22	; 0x01
    2f58:	7a 83       	std	Y+2, r23	; 0x02
    2f5a:	8b 83       	std	Y+3, r24	; 0x03
    2f5c:	9c 83       	std	Y+4, r25	; 0x04
  transactions[transactionIndex].function = packet->function;  // SWAP function
    2f5e:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    2f62:	f8 01       	movw	r30, r16
    2f64:	e8 5b       	subi	r30, 0xB8	; 184
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	30 81       	ld	r19, Z
    2f6a:	82 2f       	mov	r24, r18
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	f7 01       	movw	r30, r14
    2f70:	48 e0       	ldi	r20, 0x08	; 8
    2f72:	24 9f       	mul	r18, r20
    2f74:	e0 0d       	add	r30, r0
    2f76:	f1 1d       	adc	r31, r1
    2f78:	11 24       	eor	r1, r1
    2f7a:	35 83       	std	Z+5, r19	; 0x05
  transactions[transactionIndex].srcAddr = packet->srcAddr;    // Source address
    2f7c:	d8 01       	movw	r26, r16
    2f7e:	ad 5b       	subi	r26, 0xBD	; 189
    2f80:	bf 4f       	sbci	r27, 0xFF	; 255
    2f82:	2c 91       	ld	r18, X
    2f84:	26 83       	std	Z+6, r18	; 0x06
  transactions[transactionIndex].nonce = packet->nonce;        // Cyclic nonce
    2f86:	14 96       	adiw	r26, 0x04	; 4
    2f88:	2c 91       	ld	r18, X
    2f8a:	27 83       	std	Z+7, r18	; 0x07
  transactions[transactionIndex].regAddr = packet->regAddr;    // Register address
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	e6 5b       	subi	r30, 0xB6	; 182
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	40 81       	ld	r20, Z
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	9c 01       	movw	r18, r24
    2f98:	53 e0       	ldi	r21, 0x03	; 3
    2f9a:	22 0f       	add	r18, r18
    2f9c:	33 1f       	adc	r19, r19
    2f9e:	5a 95       	dec	r21
    2fa0:	e1 f7       	brne	.-8      	; 0x2f9a <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x6c>
    2fa2:	f7 01       	movw	r30, r14
    2fa4:	e2 0f       	add	r30, r18
    2fa6:	f3 1f       	adc	r31, r19
    2fa8:	40 83       	st	Z, r20
   
  transactionIndex = (transactionIndex + 1) % REPEATER_TABLE_DEPTH;
    2faa:	64 e1       	ldi	r22, 0x14	; 20
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__divmodhi4>
    2fb2:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
}
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	1f 91       	pop	r17
    2fbc:	0f 91       	pop	r16
    2fbe:	ff 90       	pop	r15
    2fc0:	ef 90       	pop	r14
    2fc2:	08 95       	ret

00002fc4 <_ZN8REPEATER13packetHandlerEP8SWPACKET>:
 * Handle incoming packet. Repeat if necessary
 *
 * @param packet Pointer to the SWAP packet received
 */
void REPEATER::packetHandler(SWPACKET *packet)
{
    2fc4:	4f 92       	push	r4
    2fc6:	5f 92       	push	r5
    2fc8:	6f 92       	push	r6
    2fca:	7f 92       	push	r7
    2fcc:	8f 92       	push	r8
    2fce:	9f 92       	push	r9
    2fd0:	af 92       	push	r10
    2fd2:	bf 92       	push	r11
    2fd4:	cf 92       	push	r12
    2fd6:	df 92       	push	r13
    2fd8:	ef 92       	push	r14
    2fda:	ff 92       	push	r15
    2fdc:	0f 93       	push	r16
    2fde:	1f 93       	push	r17
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
  bool repeatPacket = true;
  uint32_t currentTime;

  if (enabled)
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	ef 55       	subi	r30, 0x5F	; 95
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	20 81       	ld	r18, Z
    2fec:	22 23       	and	r18, r18
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x2e>
    2ff0:	86 c0       	rjmp	.+268    	; 0x30fe <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
  {
    // Don't repeat packets addressed to our device
    if (packet->destAddr != swap.devAddress)
    2ff2:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <swap+0x2>
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	fb 01       	movw	r30, r22
    2ffa:	ef 5b       	subi	r30, 0xBF	; 191
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	40 81       	ld	r20, Z
    3000:	51 81       	ldd	r21, Z+1	; 0x01
    3002:	42 17       	cp	r20, r18
    3004:	53 07       	cpc	r21, r19
    3006:	09 f4       	brne	.+2      	; 0x300a <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x46>
    3008:	7a c0       	rjmp	.+244    	; 0x30fe <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    {
      // Don't repeat beyond the maximum hop count
      if (packet->hop < maxHopCount)
    300a:	4b 01       	movw	r8, r22
    300c:	25 e4       	ldi	r18, 0x45	; 69
    300e:	82 0e       	add	r8, r18
    3010:	91 1c       	adc	r9, r1
    3012:	f4 01       	movw	r30, r8
    3014:	30 81       	ld	r19, Z
    3016:	fc 01       	movw	r30, r24
    3018:	20 81       	ld	r18, Z
    301a:	32 17       	cp	r19, r18
    301c:	08 f0       	brcs	.+2      	; 0x3020 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x5c>
    301e:	6f c0       	rjmp	.+222    	; 0x30fe <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    3020:	eb 01       	movw	r28, r22
    3022:	8c 01       	movw	r16, r24
    3024:	7c 01       	movw	r14, r24
    3026:	2c 01       	movw	r4, r24
    3028:	f0 ea       	ldi	r31, 0xA0	; 160
    302a:	4f 0e       	add	r4, r31
    302c:	51 1c       	adc	r5, r1

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
    302e:	3b 01       	movw	r6, r22
    3030:	2a e4       	ldi	r18, 0x4A	; 74
    3032:	62 0e       	add	r6, r18
    3034:	71 1c       	adc	r7, r1
          {
            // Same SWAP function?
            if (transactions[i].function == packet->function)
    3036:	6b 01       	movw	r12, r22
    3038:	88 e4       	ldi	r24, 0x48	; 72
    303a:	c8 0e       	add	r12, r24
    303c:	d1 1c       	adc	r13, r1
            {
              // Same cyclic nonce?
              if (transactions[i].nonce == packet->nonce)
    303e:	5b 01       	movw	r10, r22
    3040:	e7 e4       	ldi	r30, 0x47	; 71
    3042:	ae 0e       	add	r10, r30
    3044:	b1 1c       	adc	r11, r1

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
    3046:	f7 01       	movw	r30, r14
    3048:	90 85       	ldd	r25, Z+8	; 0x08
    304a:	f3 01       	movw	r30, r6
    304c:	80 81       	ld	r24, Z
    304e:	98 17       	cp	r25, r24
    3050:	39 f0       	breq	.+14     	; 0x3060 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x9c>
    3052:	f8 e0       	ldi	r31, 0x08	; 8
    3054:	ef 0e       	add	r14, r31
    3056:	f1 1c       	adc	r15, r1
      if (packet->hop < maxHopCount)
      {
        uint8_t i;        

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
    3058:	4e 14       	cp	r4, r14
    305a:	5f 04       	cpc	r5, r15
    305c:	a1 f7       	brne	.-24     	; 0x3046 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x82>
    305e:	1f c0       	rjmp	.+62     	; 0x309e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0xda>
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
          {
            // Same SWAP function?
            if (transactions[i].function == packet->function)
    3060:	f7 01       	movw	r30, r14
    3062:	95 81       	ldd	r25, Z+5	; 0x05
    3064:	f6 01       	movw	r30, r12
    3066:	80 81       	ld	r24, Z
    3068:	98 13       	cpse	r25, r24
    306a:	f3 cf       	rjmp	.-26     	; 0x3052 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
            {
              // Same cyclic nonce?
              if (transactions[i].nonce == packet->nonce)
    306c:	f7 01       	movw	r30, r14
    306e:	97 81       	ldd	r25, Z+7	; 0x07
    3070:	f5 01       	movw	r30, r10
    3072:	80 81       	ld	r24, Z
    3074:	98 13       	cpse	r25, r24
    3076:	ed cf       	rjmp	.-38     	; 0x3052 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
              {
                currentTime = millis();
    3078:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <millis>
                // Time stamp not expired?
                if ((currentTime - transactions[i].timeStamp) < REPEATER_EXPIRATION_TIME)
    307c:	f7 01       	movw	r30, r14
    307e:	21 81       	ldd	r18, Z+1	; 0x01
    3080:	32 81       	ldd	r19, Z+2	; 0x02
    3082:	43 81       	ldd	r20, Z+3	; 0x03
    3084:	54 81       	ldd	r21, Z+4	; 0x04
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	82 1b       	sub	r24, r18
    308c:	93 0b       	sbc	r25, r19
    308e:	a4 0b       	sbc	r26, r20
    3090:	b5 0b       	sbc	r27, r21
    3092:	80 3d       	cpi	r24, 0xD0	; 208
    3094:	97 40       	sbci	r25, 0x07	; 7
    3096:	a1 05       	cpc	r26, r1
    3098:	b1 05       	cpc	r27, r1
    309a:	d8 f6       	brcc	.-74     	; 0x3052 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
    309c:	30 c0       	rjmp	.+96     	; 0x30fe <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
        }

        // Repeat packet?
        if (repeatPacket)
        {
          packet->srcAddr = swap.devAddress;              // Modify source address
    309e:	fe 01       	movw	r30, r28
    30a0:	ed 5b       	subi	r30, 0xBD	; 189
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <swap+0x2>
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	91 83       	std	Z+1, r25	; 0x01
    30ac:	80 83       	st	Z, r24
          packet->hop++;                                  // Increment hop counter
    30ae:	f4 01       	movw	r30, r8
    30b0:	80 81       	ld	r24, Z
    30b2:	8f 5f       	subi	r24, 0xFF	; 255
    30b4:	80 83       	st	Z, r24
          delay(SWAP_TX_DELAY);                           // Delay before sending
    30b6:	60 91 74 03 	lds	r22, 0x0374	; 0x800374 <panstamp+0x9>
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	66 0f       	add	r22, r22
    30be:	77 1f       	adc	r23, r23
    30c0:	07 2e       	mov	r0, r23
    30c2:	00 0c       	add	r0, r0
    30c4:	88 0b       	sbc	r24, r24
    30c6:	99 0b       	sbc	r25, r25
    30c8:	0e 94 25 09 	call	0x124a	; 0x124a <delay>
          if (packet->send())                             // Repeat packet
    30cc:	ce 01       	movw	r24, r28
    30ce:	0e 94 27 14 	call	0x284e	; 0x284e <_ZN8SWPACKET4sendEv>
    30d2:	88 23       	and	r24, r24
    30d4:	a1 f0       	breq	.+40     	; 0x30fe <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
            saveTransaction(packet);                      // Save transaction
    30d6:	be 01       	movw	r22, r28
    30d8:	c8 01       	movw	r24, r16
        }
      }
    }
  }
}
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	0f 91       	pop	r16
    30e2:	ff 90       	pop	r15
    30e4:	ef 90       	pop	r14
    30e6:	df 90       	pop	r13
    30e8:	cf 90       	pop	r12
    30ea:	bf 90       	pop	r11
    30ec:	af 90       	pop	r10
    30ee:	9f 90       	pop	r9
    30f0:	8f 90       	pop	r8
    30f2:	7f 90       	pop	r7
    30f4:	6f 90       	pop	r6
    30f6:	5f 90       	pop	r5
    30f8:	4f 90       	pop	r4
        {
          packet->srcAddr = swap.devAddress;              // Modify source address
          packet->hop++;                                  // Increment hop counter
          delay(SWAP_TX_DELAY);                           // Delay before sending
          if (packet->send())                             // Repeat packet
            saveTransaction(packet);                      // Save transaction
    30fa:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <_ZN8REPEATER15saveTransactionEP8SWPACKET>
        }
      }
    }
  }
}
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	1f 91       	pop	r17
    3104:	0f 91       	pop	r16
    3106:	ff 90       	pop	r15
    3108:	ef 90       	pop	r14
    310a:	df 90       	pop	r13
    310c:	cf 90       	pop	r12
    310e:	bf 90       	pop	r11
    3110:	af 90       	pop	r10
    3112:	9f 90       	pop	r9
    3114:	8f 90       	pop	r8
    3116:	7f 90       	pop	r7
    3118:	6f 90       	pop	r6
    311a:	5f 90       	pop	r5
    311c:	4f 90       	pop	r4
    311e:	08 95       	ret

00003120 <_Z8twi_initv>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3120:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZL9twi_state>
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <_ZL12twi_sendStop>
    312a:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZL14twi_inRepStart>
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	82 e1       	ldi	r24, 0x12	; 18
    3132:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>
    3136:	61 e0       	ldi	r22, 0x01	; 1
    3138:	83 e1       	ldi	r24, 0x13	; 19
    313a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <digitalWrite>
    313e:	e9 eb       	ldi	r30, 0xB9	; 185
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	8e 7f       	andi	r24, 0xFE	; 254
    3146:	80 83       	st	Z, r24
    3148:	80 81       	ld	r24, Z
    314a:	8d 7f       	andi	r24, 0xFD	; 253
    314c:	80 83       	st	Z, r24
    314e:	80 e2       	ldi	r24, 0x20	; 32
    3150:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    3154:	85 e4       	ldi	r24, 0x45	; 69
    3156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    315a:	08 95       	ret

0000315c <_Z12twi_readFromhPhhh>:
    315c:	41 32       	cpi	r20, 0x21	; 33
    315e:	e8 f5       	brcc	.+122    	; 0x31da <_Z12twi_readFromhPhhh+0x7e>
    3160:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZL9twi_state>
    3164:	91 11       	cpse	r25, r1
    3166:	fc cf       	rjmp	.-8      	; 0x3160 <_Z12twi_readFromhPhhh+0x4>
    3168:	91 e0       	ldi	r25, 0x01	; 1
    316a:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZL9twi_state>
    316e:	20 93 84 04 	sts	0x0484, r18	; 0x800484 <_ZL12twi_sendStop>
    3172:	2f ef       	ldi	r18, 0xFF	; 255
    3174:	20 93 19 04 	sts	0x0419, r18	; 0x800419 <_ZL9twi_error>
    3178:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <_ZL21twi_masterBufferIndex>
    317c:	24 0f       	add	r18, r20
    317e:	20 93 5d 04 	sts	0x045D, r18	; 0x80045d <_ZL22twi_masterBufferLength>
    3182:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <_ZL9twi_slarw>
    3186:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <_ZL9twi_slarw>
    318a:	88 0f       	add	r24, r24
    318c:	89 2b       	or	r24, r25
    318e:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZL9twi_slarw>
    3192:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZL14twi_inRepStart>
    3196:	81 30       	cpi	r24, 0x01	; 1
    3198:	41 f4       	brne	.+16     	; 0x31aa <_Z12twi_readFromhPhhh+0x4e>
    319a:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZL14twi_inRepStart>
    319e:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZL9twi_slarw>
    31a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    31a6:	85 ec       	ldi	r24, 0xC5	; 197
    31a8:	01 c0       	rjmp	.+2      	; 0x31ac <_Z12twi_readFromhPhhh+0x50>
    31aa:	85 ee       	ldi	r24, 0xE5	; 229
    31ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    31b0:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZL9twi_state>
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	e1 f3       	breq	.-8      	; 0x31b0 <_Z12twi_readFromhPhhh+0x54>
    31b8:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    31bc:	84 17       	cp	r24, r20
    31be:	10 f4       	brcc	.+4      	; 0x31c4 <_Z12twi_readFromhPhhh+0x68>
    31c0:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    31c4:	af e5       	ldi	r26, 0x5F	; 95
    31c6:	b4 e0       	ldi	r27, 0x04	; 4
    31c8:	96 2f       	mov	r25, r22
    31ca:	fb 01       	movw	r30, r22
    31cc:	8e 2f       	mov	r24, r30
    31ce:	89 1b       	sub	r24, r25
    31d0:	84 17       	cp	r24, r20
    31d2:	28 f4       	brcc	.+10     	; 0x31de <_Z12twi_readFromhPhhh+0x82>
    31d4:	8d 91       	ld	r24, X+
    31d6:	81 93       	st	Z+, r24
    31d8:	f9 cf       	rjmp	.-14     	; 0x31cc <_Z12twi_readFromhPhhh+0x70>
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	08 95       	ret
    31de:	84 2f       	mov	r24, r20
    31e0:	08 95       	ret

000031e2 <_Z11twi_writeTohPhhhh>:
    31e2:	0f 93       	push	r16
    31e4:	41 32       	cpi	r20, 0x21	; 33
    31e6:	c8 f5       	brcc	.+114    	; 0x325a <_Z11twi_writeTohPhhhh+0x78>
    31e8:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZL9twi_state>
    31ec:	91 11       	cpse	r25, r1
    31ee:	fc cf       	rjmp	.-8      	; 0x31e8 <_Z11twi_writeTohPhhhh+0x6>
    31f0:	32 e0       	ldi	r19, 0x02	; 2
    31f2:	30 93 86 04 	sts	0x0486, r19	; 0x800486 <_ZL9twi_state>
    31f6:	00 93 84 04 	sts	0x0484, r16	; 0x800484 <_ZL12twi_sendStop>
    31fa:	3f ef       	ldi	r19, 0xFF	; 255
    31fc:	30 93 19 04 	sts	0x0419, r19	; 0x800419 <_ZL9twi_error>
    3200:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <_ZL21twi_masterBufferIndex>
    3204:	40 93 5d 04 	sts	0x045D, r20	; 0x80045d <_ZL22twi_masterBufferLength>
    3208:	56 2f       	mov	r21, r22
    320a:	af e5       	ldi	r26, 0x5F	; 95
    320c:	b4 e0       	ldi	r27, 0x04	; 4
    320e:	fb 01       	movw	r30, r22
    3210:	3e 2f       	mov	r19, r30
    3212:	35 1b       	sub	r19, r21
    3214:	34 17       	cp	r19, r20
    3216:	18 f4       	brcc	.+6      	; 0x321e <_Z11twi_writeTohPhhhh+0x3c>
    3218:	31 91       	ld	r19, Z+
    321a:	3d 93       	st	X+, r19
    321c:	f9 cf       	rjmp	.-14     	; 0x3210 <_Z11twi_writeTohPhhhh+0x2e>
    321e:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZL9twi_slarw>
    3222:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <_ZL9twi_slarw>
    3226:	88 0f       	add	r24, r24
    3228:	83 2b       	or	r24, r19
    322a:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZL9twi_slarw>
    322e:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZL14twi_inRepStart>
    3232:	81 30       	cpi	r24, 0x01	; 1
    3234:	41 f4       	brne	.+16     	; 0x3246 <_Z11twi_writeTohPhhhh+0x64>
    3236:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZL14twi_inRepStart>
    323a:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZL9twi_slarw>
    323e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3242:	85 ec       	ldi	r24, 0xC5	; 197
    3244:	01 c0       	rjmp	.+2      	; 0x3248 <_Z11twi_writeTohPhhhh+0x66>
    3246:	85 ee       	ldi	r24, 0xE5	; 229
    3248:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    324c:	22 23       	and	r18, r18
    324e:	39 f0       	breq	.+14     	; 0x325e <_Z11twi_writeTohPhhhh+0x7c>
    3250:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZL9twi_state>
    3254:	82 30       	cpi	r24, 0x02	; 2
    3256:	19 f4       	brne	.+6      	; 0x325e <_Z11twi_writeTohPhhhh+0x7c>
    3258:	f9 cf       	rjmp	.-14     	; 0x324c <_Z11twi_writeTohPhhhh+0x6a>
    325a:	91 e0       	ldi	r25, 0x01	; 1
    325c:	11 c0       	rjmp	.+34     	; 0x3280 <_Z11twi_writeTohPhhhh+0x9e>
    325e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZL9twi_error>
    3262:	8f 3f       	cpi	r24, 0xFF	; 255
    3264:	69 f0       	breq	.+26     	; 0x3280 <_Z11twi_writeTohPhhhh+0x9e>
    3266:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZL9twi_error>
    326a:	80 32       	cpi	r24, 0x20	; 32
    326c:	31 f0       	breq	.+12     	; 0x327a <_Z11twi_writeTohPhhhh+0x98>
    326e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZL9twi_error>
    3272:	80 33       	cpi	r24, 0x30	; 48
    3274:	21 f0       	breq	.+8      	; 0x327e <_Z11twi_writeTohPhhhh+0x9c>
    3276:	94 e0       	ldi	r25, 0x04	; 4
    3278:	03 c0       	rjmp	.+6      	; 0x3280 <_Z11twi_writeTohPhhhh+0x9e>
    327a:	92 e0       	ldi	r25, 0x02	; 2
    327c:	01 c0       	rjmp	.+2      	; 0x3280 <_Z11twi_writeTohPhhhh+0x9e>
    327e:	93 e0       	ldi	r25, 0x03	; 3
    3280:	89 2f       	mov	r24, r25
    3282:	0f 91       	pop	r16
    3284:	08 95       	ret

00003286 <_Z12twi_transmitPKhh>:
    3286:	61 32       	cpi	r22, 0x21	; 33
    3288:	88 f4       	brcc	.+34     	; 0x32ac <_Z12twi_transmitPKhh+0x26>
    328a:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZL9twi_state>
    328e:	24 30       	cpi	r18, 0x04	; 4
    3290:	79 f4       	brne	.+30     	; 0x32b0 <_Z12twi_transmitPKhh+0x2a>
    3292:	60 93 3b 04 	sts	0x043B, r22	; 0x80043b <_ZL18twi_txBufferLength>
    3296:	28 2f       	mov	r18, r24
    3298:	ad e3       	ldi	r26, 0x3D	; 61
    329a:	b4 e0       	ldi	r27, 0x04	; 4
    329c:	fc 01       	movw	r30, r24
    329e:	8e 2f       	mov	r24, r30
    32a0:	82 1b       	sub	r24, r18
    32a2:	86 17       	cp	r24, r22
    32a4:	38 f4       	brcc	.+14     	; 0x32b4 <_Z12twi_transmitPKhh+0x2e>
    32a6:	81 91       	ld	r24, Z+
    32a8:	8d 93       	st	X+, r24
    32aa:	f9 cf       	rjmp	.-14     	; 0x329e <_Z12twi_transmitPKhh+0x18>
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	08 95       	ret
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	08 95       	ret
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	08 95       	ret

000032b8 <_Z8twi_stopv>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    32b8:	85 ed       	ldi	r24, 0xD5	; 213
    32ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    32be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    32c2:	84 fd       	sbrc	r24, 4
    32c4:	fc cf       	rjmp	.-8      	; 0x32be <_Z8twi_stopv+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    32c6:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZL9twi_state>
    32ca:	08 95       	ret

000032cc <_Z14twi_releaseBusv>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    32cc:	85 ec       	ldi	r24, 0xC5	; 197
    32ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

  // update twi state
  twi_state = TWI_READY;
    32d2:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZL9twi_state>
    32d6:	08 95       	ret

000032d8 <__vector_24>:
}

ISR(TWI_vect)
{
    32d8:	1f 92       	push	r1
    32da:	0f 92       	push	r0
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	0f 92       	push	r0
    32e0:	11 24       	eor	r1, r1
    32e2:	2f 93       	push	r18
    32e4:	3f 93       	push	r19
    32e6:	4f 93       	push	r20
    32e8:	5f 93       	push	r21
    32ea:	6f 93       	push	r22
    32ec:	7f 93       	push	r23
    32ee:	8f 93       	push	r24
    32f0:	9f 93       	push	r25
    32f2:	af 93       	push	r26
    32f4:	bf 93       	push	r27
    32f6:	ef 93       	push	r30
    32f8:	ff 93       	push	r31
  switch(TW_STATUS){
    32fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    32fe:	88 7f       	andi	r24, 0xF8	; 248
    3300:	80 36       	cpi	r24, 0x60	; 96
    3302:	09 f4       	brne	.+2      	; 0x3306 <__vector_24+0x2e>
    3304:	9c c0       	rjmp	.+312    	; 0x343e <__vector_24+0x166>
    3306:	68 f5       	brcc	.+90     	; 0x3362 <__vector_24+0x8a>
    3308:	88 32       	cpi	r24, 0x28	; 40
    330a:	09 f4       	brne	.+2      	; 0x330e <__vector_24+0x36>
    330c:	5b c0       	rjmp	.+182    	; 0x33c4 <__vector_24+0xec>
    330e:	90 f4       	brcc	.+36     	; 0x3334 <__vector_24+0x5c>
    3310:	80 31       	cpi	r24, 0x10	; 16
    3312:	09 f4       	brne	.+2      	; 0x3316 <__vector_24+0x3e>
    3314:	54 c0       	rjmp	.+168    	; 0x33be <__vector_24+0xe6>
    3316:	38 f4       	brcc	.+14     	; 0x3326 <__vector_24+0x4e>
    3318:	88 23       	and	r24, r24
    331a:	09 f4       	brne	.+2      	; 0x331e <__vector_24+0x46>
    331c:	f5 c0       	rjmp	.+490    	; 0x3508 <__vector_24+0x230>
    331e:	88 30       	cpi	r24, 0x08	; 8
    3320:	09 f4       	brne	.+2      	; 0x3324 <__vector_24+0x4c>
    3322:	4d c0       	rjmp	.+154    	; 0x33be <__vector_24+0xe6>
    3324:	f5 c0       	rjmp	.+490    	; 0x3510 <__vector_24+0x238>
    3326:	88 31       	cpi	r24, 0x18	; 24
    3328:	09 f4       	brne	.+2      	; 0x332c <__vector_24+0x54>
    332a:	4c c0       	rjmp	.+152    	; 0x33c4 <__vector_24+0xec>
    332c:	80 32       	cpi	r24, 0x20	; 32
    332e:	09 f4       	brne	.+2      	; 0x3332 <__vector_24+0x5a>
    3330:	5d c0       	rjmp	.+186    	; 0x33ec <__vector_24+0x114>
    3332:	ee c0       	rjmp	.+476    	; 0x3510 <__vector_24+0x238>
    3334:	80 34       	cpi	r24, 0x40	; 64
    3336:	09 f4       	brne	.+2      	; 0x333a <__vector_24+0x62>
    3338:	68 c0       	rjmp	.+208    	; 0x340a <__vector_24+0x132>
    333a:	48 f4       	brcc	.+18     	; 0x334e <__vector_24+0x76>
    333c:	80 33       	cpi	r24, 0x30	; 48
    333e:	09 f4       	brne	.+2      	; 0x3342 <__vector_24+0x6a>
    3340:	55 c0       	rjmp	.+170    	; 0x33ec <__vector_24+0x114>
    3342:	88 33       	cpi	r24, 0x38	; 56
    3344:	09 f0       	breq	.+2      	; 0x3348 <__vector_24+0x70>
    3346:	e4 c0       	rjmp	.+456    	; 0x3510 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3348:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZL9twi_error>
    334c:	a8 c0       	rjmp	.+336    	; 0x349e <__vector_24+0x1c6>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    334e:	80 35       	cpi	r24, 0x50	; 80
    3350:	09 f4       	brne	.+2      	; 0x3354 <__vector_24+0x7c>
    3352:	4f c0       	rjmp	.+158    	; 0x33f2 <__vector_24+0x11a>
    3354:	88 35       	cpi	r24, 0x58	; 88
    3356:	09 f4       	brne	.+2      	; 0x335a <__vector_24+0x82>
    3358:	5d c0       	rjmp	.+186    	; 0x3414 <__vector_24+0x13c>
    335a:	88 34       	cpi	r24, 0x48	; 72
    335c:	09 f0       	breq	.+2      	; 0x3360 <__vector_24+0x88>
    335e:	d8 c0       	rjmp	.+432    	; 0x3510 <__vector_24+0x238>
    3360:	d5 c0       	rjmp	.+426    	; 0x350c <__vector_24+0x234>
    3362:	88 39       	cpi	r24, 0x98	; 152
    3364:	09 f4       	brne	.+2      	; 0x3368 <__vector_24+0x90>
    3366:	c6 c0       	rjmp	.+396    	; 0x34f4 <__vector_24+0x21c>
    3368:	a8 f4       	brcc	.+42     	; 0x3394 <__vector_24+0xbc>
    336a:	88 37       	cpi	r24, 0x78	; 120
    336c:	09 f4       	brne	.+2      	; 0x3370 <__vector_24+0x98>
    336e:	67 c0       	rjmp	.+206    	; 0x343e <__vector_24+0x166>
    3370:	38 f4       	brcc	.+14     	; 0x3380 <__vector_24+0xa8>
    3372:	88 36       	cpi	r24, 0x68	; 104
    3374:	09 f4       	brne	.+2      	; 0x3378 <__vector_24+0xa0>
    3376:	63 c0       	rjmp	.+198    	; 0x343e <__vector_24+0x166>
    3378:	80 37       	cpi	r24, 0x70	; 112
    337a:	09 f4       	brne	.+2      	; 0x337e <__vector_24+0xa6>
    337c:	60 c0       	rjmp	.+192    	; 0x343e <__vector_24+0x166>
    337e:	c8 c0       	rjmp	.+400    	; 0x3510 <__vector_24+0x238>
    3380:	88 38       	cpi	r24, 0x88	; 136
    3382:	09 f4       	brne	.+2      	; 0x3386 <__vector_24+0xae>
    3384:	b7 c0       	rjmp	.+366    	; 0x34f4 <__vector_24+0x21c>
    3386:	80 39       	cpi	r24, 0x90	; 144
    3388:	09 f4       	brne	.+2      	; 0x338c <__vector_24+0xb4>
    338a:	5f c0       	rjmp	.+190    	; 0x344a <__vector_24+0x172>
    338c:	80 38       	cpi	r24, 0x80	; 128
    338e:	09 f0       	breq	.+2      	; 0x3392 <__vector_24+0xba>
    3390:	bf c0       	rjmp	.+382    	; 0x3510 <__vector_24+0x238>
    3392:	5b c0       	rjmp	.+182    	; 0x344a <__vector_24+0x172>
    3394:	80 3b       	cpi	r24, 0xB0	; 176
    3396:	09 f4       	brne	.+2      	; 0x339a <__vector_24+0xc2>
    3398:	85 c0       	rjmp	.+266    	; 0x34a4 <__vector_24+0x1cc>
    339a:	38 f4       	brcc	.+14     	; 0x33aa <__vector_24+0xd2>
    339c:	80 3a       	cpi	r24, 0xA0	; 160
    339e:	09 f4       	brne	.+2      	; 0x33a2 <__vector_24+0xca>
    33a0:	66 c0       	rjmp	.+204    	; 0x346e <__vector_24+0x196>
    33a2:	88 3a       	cpi	r24, 0xA8	; 168
    33a4:	09 f4       	brne	.+2      	; 0x33a8 <__vector_24+0xd0>
    33a6:	7e c0       	rjmp	.+252    	; 0x34a4 <__vector_24+0x1cc>
    33a8:	b3 c0       	rjmp	.+358    	; 0x3510 <__vector_24+0x238>
    33aa:	80 3c       	cpi	r24, 0xC0	; 192
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <__vector_24+0xd8>
    33ae:	a6 c0       	rjmp	.+332    	; 0x34fc <__vector_24+0x224>
    33b0:	88 3c       	cpi	r24, 0xC8	; 200
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <__vector_24+0xde>
    33b4:	a3 c0       	rjmp	.+326    	; 0x34fc <__vector_24+0x224>
    33b6:	88 3b       	cpi	r24, 0xB8	; 184
    33b8:	09 f4       	brne	.+2      	; 0x33bc <__vector_24+0xe4>
    33ba:	89 c0       	rjmp	.+274    	; 0x34ce <__vector_24+0x1f6>
    33bc:	a9 c0       	rjmp	.+338    	; 0x3510 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    33be:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZL9twi_slarw>
    33c2:	10 c0       	rjmp	.+32     	; 0x33e4 <__vector_24+0x10c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    33c4:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    33c8:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <_ZL22twi_masterBufferLength>
    33cc:	98 17       	cp	r25, r24
    33ce:	70 f5       	brcc	.+92     	; 0x342c <__vector_24+0x154>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    33d0:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	8e 0f       	add	r24, r30
    33d8:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZL21twi_masterBufferIndex>
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	e1 5a       	subi	r30, 0xA1	; 161
    33e0:	fb 4f       	sbci	r31, 0xFB	; 251
    33e2:	80 81       	ld	r24, Z
    33e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    33e8:	85 ec       	ldi	r24, 0xC5	; 197
    33ea:	85 c0       	rjmp	.+266    	; 0x34f6 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    33ec:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZL9twi_error>
    33f0:	8d c0       	rjmp	.+282    	; 0x350c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    33f2:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	8e 0f       	add	r24, r30
    33fa:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZL21twi_masterBufferIndex>
    33fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	e1 5a       	subi	r30, 0xA1	; 161
    3406:	fb 4f       	sbci	r31, 0xFB	; 251
    3408:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    340a:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    340e:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <_ZL22twi_masterBufferLength>
    3412:	6d c0       	rjmp	.+218    	; 0x34ee <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3414:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <_ZL21twi_masterBufferIndex>
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	8e 0f       	add	r24, r30
    341c:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZL21twi_masterBufferIndex>
    3420:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	e1 5a       	subi	r30, 0xA1	; 161
    3428:	fb 4f       	sbci	r31, 0xFB	; 251
    342a:	80 83       	st	Z, r24
	if (twi_sendStop)
    342c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZL12twi_sendStop>
    3430:	81 11       	cpse	r24, r1
    3432:	6c c0       	rjmp	.+216    	; 0x350c <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZL14twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    343a:	84 ea       	ldi	r24, 0xA4	; 164
    343c:	60 c0       	rjmp	.+192    	; 0x34fe <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    343e:	83 e0       	ldi	r24, 0x03	; 3
    3440:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZL9twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3444:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZL17twi_rxBufferIndex>
    3448:	cf cf       	rjmp	.-98     	; 0x33e8 <__vector_24+0x110>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    344a:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    344e:	80 32       	cpi	r24, 0x20	; 32
    3450:	08 f0       	brcs	.+2      	; 0x3454 <__vector_24+0x17c>
    3452:	50 c0       	rjmp	.+160    	; 0x34f4 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3454:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	8e 0f       	add	r24, r30
    345c:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <_ZL17twi_rxBufferIndex>
    3460:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	e5 5e       	subi	r30, 0xE5	; 229
    3468:	fb 4f       	sbci	r31, 0xFB	; 251
    346a:	80 83       	st	Z, r24
    346c:	bd cf       	rjmp	.-134    	; 0x33e8 <__vector_24+0x110>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    346e:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    3472:	80 32       	cpi	r24, 0x20	; 32
    3474:	30 f4       	brcc	.+12     	; 0x3482 <__vector_24+0x1aa>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3476:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	e5 5e       	subi	r30, 0xE5	; 229
    347e:	fb 4f       	sbci	r31, 0xFB	; 251
    3480:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    3482:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z8twi_stopv>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3486:	60 91 1a 04 	lds	r22, 0x041A	; 0x80041a <_ZL17twi_rxBufferIndex>
    348a:	70 e0       	ldi	r23, 0x00	; 0
    348c:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <_ZL18twi_onSlaveReceive>
    3490:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <_ZL18twi_onSlaveReceive+0x1>
    3494:	8b e1       	ldi	r24, 0x1B	; 27
    3496:	94 e0       	ldi	r25, 0x04	; 4
    3498:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    349a:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZL17twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    349e:	0e 94 66 19 	call	0x32cc	; 0x32cc <_Z14twi_releaseBusv>
      break;
    34a2:	36 c0       	rjmp	.+108    	; 0x3510 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    34a4:	84 e0       	ldi	r24, 0x04	; 4
    34a6:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZL9twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    34aa:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZL17twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    34ae:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZL18twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    34b2:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <_ZL19twi_onSlaveTransmit>
    34b6:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <_ZL19twi_onSlaveTransmit+0x1>
    34ba:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    34bc:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZL18twi_txBufferLength>
    34c0:	81 11       	cpse	r24, r1
    34c2:	05 c0       	rjmp	.+10     	; 0x34ce <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZL18twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    34ca:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZL12twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    34ce:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <_ZL17twi_txBufferIndex>
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	8e 0f       	add	r24, r30
    34d6:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL17twi_txBufferIndex>
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	e3 5c       	subi	r30, 0xC3	; 195
    34de:	fb 4f       	sbci	r31, 0xFB	; 251
    34e0:	80 81       	ld	r24, Z
    34e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    34e6:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <_ZL17twi_txBufferIndex>
    34ea:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZL18twi_txBufferLength>
    34ee:	98 17       	cp	r25, r24
    34f0:	08 f4       	brcc	.+2      	; 0x34f4 <__vector_24+0x21c>
    34f2:	7a cf       	rjmp	.-268    	; 0x33e8 <__vector_24+0x110>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    34f4:	85 e8       	ldi	r24, 0x85	; 133
    34f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    34fa:	0a c0       	rjmp	.+20     	; 0x3510 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    34fc:	85 ec       	ldi	r24, 0xC5	; 197
    34fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3502:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZL9twi_state>
      break;
    3506:	04 c0       	rjmp	.+8      	; 0x3510 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3508:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZL9twi_error>
      twi_stop();
    350c:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z8twi_stopv>
      break;
  }
}
    3510:	ff 91       	pop	r31
    3512:	ef 91       	pop	r30
    3514:	bf 91       	pop	r27
    3516:	af 91       	pop	r26
    3518:	9f 91       	pop	r25
    351a:	8f 91       	pop	r24
    351c:	7f 91       	pop	r23
    351e:	6f 91       	pop	r22
    3520:	5f 91       	pop	r21
    3522:	4f 91       	pop	r20
    3524:	3f 91       	pop	r19
    3526:	2f 91       	pop	r18
    3528:	0f 90       	pop	r0
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	0f 90       	pop	r0
    352e:	1f 90       	pop	r1
    3530:	18 95       	reti

00003532 <__mulsi3>:
    3532:	db 01       	movw	r26, r22
    3534:	8f 93       	push	r24
    3536:	9f 93       	push	r25
    3538:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <__muluhisi3>
    353c:	bf 91       	pop	r27
    353e:	af 91       	pop	r26
    3540:	a2 9f       	mul	r26, r18
    3542:	80 0d       	add	r24, r0
    3544:	91 1d       	adc	r25, r1
    3546:	a3 9f       	mul	r26, r19
    3548:	90 0d       	add	r25, r0
    354a:	b2 9f       	mul	r27, r18
    354c:	90 0d       	add	r25, r0
    354e:	11 24       	eor	r1, r1
    3550:	08 95       	ret

00003552 <__divmodhi4>:
    3552:	97 fb       	bst	r25, 7
    3554:	07 2e       	mov	r0, r23
    3556:	16 f4       	brtc	.+4      	; 0x355c <__divmodhi4+0xa>
    3558:	00 94       	com	r0
    355a:	07 d0       	rcall	.+14     	; 0x356a <__divmodhi4_neg1>
    355c:	77 fd       	sbrc	r23, 7
    355e:	09 d0       	rcall	.+18     	; 0x3572 <__divmodhi4_neg2>
    3560:	0e 94 09 1b 	call	0x3612	; 0x3612 <__udivmodhi4>
    3564:	07 fc       	sbrc	r0, 7
    3566:	05 d0       	rcall	.+10     	; 0x3572 <__divmodhi4_neg2>
    3568:	3e f4       	brtc	.+14     	; 0x3578 <__divmodhi4_exit>

0000356a <__divmodhi4_neg1>:
    356a:	90 95       	com	r25
    356c:	81 95       	neg	r24
    356e:	9f 4f       	sbci	r25, 0xFF	; 255
    3570:	08 95       	ret

00003572 <__divmodhi4_neg2>:
    3572:	70 95       	com	r23
    3574:	61 95       	neg	r22
    3576:	7f 4f       	sbci	r23, 0xFF	; 255

00003578 <__divmodhi4_exit>:
    3578:	08 95       	ret

0000357a <__udivmodsi4>:
    357a:	a1 e2       	ldi	r26, 0x21	; 33
    357c:	1a 2e       	mov	r1, r26
    357e:	aa 1b       	sub	r26, r26
    3580:	bb 1b       	sub	r27, r27
    3582:	fd 01       	movw	r30, r26
    3584:	0d c0       	rjmp	.+26     	; 0x35a0 <__udivmodsi4_ep>

00003586 <__udivmodsi4_loop>:
    3586:	aa 1f       	adc	r26, r26
    3588:	bb 1f       	adc	r27, r27
    358a:	ee 1f       	adc	r30, r30
    358c:	ff 1f       	adc	r31, r31
    358e:	a2 17       	cp	r26, r18
    3590:	b3 07       	cpc	r27, r19
    3592:	e4 07       	cpc	r30, r20
    3594:	f5 07       	cpc	r31, r21
    3596:	20 f0       	brcs	.+8      	; 0x35a0 <__udivmodsi4_ep>
    3598:	a2 1b       	sub	r26, r18
    359a:	b3 0b       	sbc	r27, r19
    359c:	e4 0b       	sbc	r30, r20
    359e:	f5 0b       	sbc	r31, r21

000035a0 <__udivmodsi4_ep>:
    35a0:	66 1f       	adc	r22, r22
    35a2:	77 1f       	adc	r23, r23
    35a4:	88 1f       	adc	r24, r24
    35a6:	99 1f       	adc	r25, r25
    35a8:	1a 94       	dec	r1
    35aa:	69 f7       	brne	.-38     	; 0x3586 <__udivmodsi4_loop>
    35ac:	60 95       	com	r22
    35ae:	70 95       	com	r23
    35b0:	80 95       	com	r24
    35b2:	90 95       	com	r25
    35b4:	9b 01       	movw	r18, r22
    35b6:	ac 01       	movw	r20, r24
    35b8:	bd 01       	movw	r22, r26
    35ba:	cf 01       	movw	r24, r30
    35bc:	08 95       	ret

000035be <__divmodsi4>:
    35be:	05 2e       	mov	r0, r21
    35c0:	97 fb       	bst	r25, 7
    35c2:	1e f4       	brtc	.+6      	; 0x35ca <__divmodsi4+0xc>
    35c4:	00 94       	com	r0
    35c6:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__negsi2>
    35ca:	57 fd       	sbrc	r21, 7
    35cc:	07 d0       	rcall	.+14     	; 0x35dc <__divmodsi4_neg2>
    35ce:	0e 94 bd 1a 	call	0x357a	; 0x357a <__udivmodsi4>
    35d2:	07 fc       	sbrc	r0, 7
    35d4:	03 d0       	rcall	.+6      	; 0x35dc <__divmodsi4_neg2>
    35d6:	4e f4       	brtc	.+18     	; 0x35ea <__divmodsi4_exit>
    35d8:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__negsi2>

000035dc <__divmodsi4_neg2>:
    35dc:	50 95       	com	r21
    35de:	40 95       	com	r20
    35e0:	30 95       	com	r19
    35e2:	21 95       	neg	r18
    35e4:	3f 4f       	sbci	r19, 0xFF	; 255
    35e6:	4f 4f       	sbci	r20, 0xFF	; 255
    35e8:	5f 4f       	sbci	r21, 0xFF	; 255

000035ea <__divmodsi4_exit>:
    35ea:	08 95       	ret

000035ec <__negsi2>:
    35ec:	90 95       	com	r25
    35ee:	80 95       	com	r24
    35f0:	70 95       	com	r23
    35f2:	61 95       	neg	r22
    35f4:	7f 4f       	sbci	r23, 0xFF	; 255
    35f6:	8f 4f       	sbci	r24, 0xFF	; 255
    35f8:	9f 4f       	sbci	r25, 0xFF	; 255
    35fa:	08 95       	ret

000035fc <__muluhisi3>:
    35fc:	0e 94 23 1b 	call	0x3646	; 0x3646 <__umulhisi3>
    3600:	a5 9f       	mul	r26, r21
    3602:	90 0d       	add	r25, r0
    3604:	b4 9f       	mul	r27, r20
    3606:	90 0d       	add	r25, r0
    3608:	a4 9f       	mul	r26, r20
    360a:	80 0d       	add	r24, r0
    360c:	91 1d       	adc	r25, r1
    360e:	11 24       	eor	r1, r1
    3610:	08 95       	ret

00003612 <__udivmodhi4>:
    3612:	aa 1b       	sub	r26, r26
    3614:	bb 1b       	sub	r27, r27
    3616:	51 e1       	ldi	r21, 0x11	; 17
    3618:	07 c0       	rjmp	.+14     	; 0x3628 <__udivmodhi4_ep>

0000361a <__udivmodhi4_loop>:
    361a:	aa 1f       	adc	r26, r26
    361c:	bb 1f       	adc	r27, r27
    361e:	a6 17       	cp	r26, r22
    3620:	b7 07       	cpc	r27, r23
    3622:	10 f0       	brcs	.+4      	; 0x3628 <__udivmodhi4_ep>
    3624:	a6 1b       	sub	r26, r22
    3626:	b7 0b       	sbc	r27, r23

00003628 <__udivmodhi4_ep>:
    3628:	88 1f       	adc	r24, r24
    362a:	99 1f       	adc	r25, r25
    362c:	5a 95       	dec	r21
    362e:	a9 f7       	brne	.-22     	; 0x361a <__udivmodhi4_loop>
    3630:	80 95       	com	r24
    3632:	90 95       	com	r25
    3634:	bc 01       	movw	r22, r24
    3636:	cd 01       	movw	r24, r26
    3638:	08 95       	ret

0000363a <__tablejump2__>:
    363a:	ee 0f       	add	r30, r30
    363c:	ff 1f       	adc	r31, r31
    363e:	05 90       	lpm	r0, Z+
    3640:	f4 91       	lpm	r31, Z
    3642:	e0 2d       	mov	r30, r0
    3644:	09 94       	ijmp

00003646 <__umulhisi3>:
    3646:	a2 9f       	mul	r26, r18
    3648:	b0 01       	movw	r22, r0
    364a:	b3 9f       	mul	r27, r19
    364c:	c0 01       	movw	r24, r0
    364e:	a3 9f       	mul	r26, r19
    3650:	70 0d       	add	r23, r0
    3652:	81 1d       	adc	r24, r1
    3654:	11 24       	eor	r1, r1
    3656:	91 1d       	adc	r25, r1
    3658:	b2 9f       	mul	r27, r18
    365a:	70 0d       	add	r23, r0
    365c:	81 1d       	adc	r24, r1
    365e:	11 24       	eor	r1, r1
    3660:	91 1d       	adc	r25, r1
    3662:	08 95       	ret

00003664 <eeprom_read_byte>:
    3664:	f9 99       	sbic	0x1f, 1	; 31
    3666:	fe cf       	rjmp	.-4      	; 0x3664 <eeprom_read_byte>
    3668:	92 bd       	out	0x22, r25	; 34
    366a:	81 bd       	out	0x21, r24	; 33
    366c:	f8 9a       	sbi	0x1f, 0	; 31
    366e:	99 27       	eor	r25, r25
    3670:	80 b5       	in	r24, 0x20	; 32
    3672:	08 95       	ret

00003674 <eeprom_write_byte>:
    3674:	26 2f       	mov	r18, r22

00003676 <eeprom_write_r18>:
    3676:	f9 99       	sbic	0x1f, 1	; 31
    3678:	fe cf       	rjmp	.-4      	; 0x3676 <eeprom_write_r18>
    367a:	1f ba       	out	0x1f, r1	; 31
    367c:	92 bd       	out	0x22, r25	; 34
    367e:	81 bd       	out	0x21, r24	; 33
    3680:	20 bd       	out	0x20, r18	; 32
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	fa 9a       	sbi	0x1f, 2	; 31
    3688:	f9 9a       	sbi	0x1f, 1	; 31
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	01 96       	adiw	r24, 0x01	; 1
    368e:	08 95       	ret

00003690 <_exit>:
    3690:	f8 94       	cli

00003692 <__stop_program>:
    3692:	ff cf       	rjmp	.-2      	; 0x3692 <__stop_program>
