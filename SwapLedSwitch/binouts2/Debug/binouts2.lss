
binouts2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00002476  0000250a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fe  0080015a  0080015a  00002564  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  000025d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012d48  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b1b  00000000  00000000  000159c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000043f2  00000000  00000000  000194e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001304  00000000  00000000  0001d8d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003406  00000000  00000000  0001ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005f57  00000000  00000000  00021fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  00027f39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
       4:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__vector_1>
       8:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__vector_6>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__vector_9>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_18>
      4c:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	1d 02       	muls	r17, r29
      ba:	e5 04       	cpc	r14, r5
      bc:	6c 0b       	sbc	r22, r28
      be:	91 0d       	add	r25, r1

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e6 e7       	ldi	r30, 0x76	; 118
      d4:	f4 e2       	ldi	r31, 0x24	; 36
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	aa 35       	cpi	r26, 0x5A	; 90
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	23 e0       	ldi	r18, 0x03	; 3
      e4:	aa e5       	ldi	r26, 0x5A	; 90
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a8 35       	cpi	r26, 0x58	; 88
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	c0 e6       	ldi	r28, 0x60	; 96
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 1d 12 	call	0x243a	; 0x243a <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 13 05 	call	0xa26	; 0xa26 <main>
     10c:	0c 94 39 12 	jmp	0x2472	; 0x2472 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_ZN4SWAP11getRegisterEh.isra.1>:
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     114:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <regTableSize>
     118:	89 17       	cp	r24, r25
     11a:	48 f4       	brcc	.+18     	; 0x12e <_ZN4SWAP11getRegisterEh.isra.1+0x1a>
        return regTable[regId];
     11c:	e8 2f       	mov	r30, r24
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	ee 0f       	add	r30, r30
     122:	ff 1f       	adc	r31, r31
     124:	ed 5f       	subi	r30, 0xFD	; 253
     126:	fe 4f       	sbci	r31, 0xFE	; 254
     128:	80 81       	ld	r24, Z
     12a:	91 81       	ldd	r25, Z+1	; 0x01
     12c:	08 95       	ret

      return NULL;
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
    }
     132:	08 95       	ret

00000134 <setup>:
 * setup
 *
 * Arduino setup function
 */
void setup()
{
     134:	0f 93       	push	r16
     136:	1f 93       	push	r17
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	1f 92       	push	r1
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
  int i;
  
  INIT_ONBOARD_LED();
     142:	61 e0       	ldi	r22, 0x01	; 1
     144:	84 e0       	ldi	r24, 0x04	; 4
     146:	0e 94 3a 07 	call	0xe74	; 0xe74 <pinMode>
  digitalWrite(LED, LOW);
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	84 e0       	ldi	r24, 0x04	; 4
     14e:	0e 94 76 07 	call	0xeec	; 0xeec <digitalWrite>

  // Configure output pins
  for(i=0 ; i<sizeof(binaryPin) ; i++)
   pinMode(binaryPin[i], OUTPUT);
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	11 e0       	ldi	r17, 0x01	; 1
     156:	61 e0       	ldi	r22, 0x01	; 1
     158:	f8 01       	movw	r30, r16
     15a:	80 81       	ld	r24, Z
     15c:	0e 94 3a 07 	call	0xe74	; 0xe74 <pinMode>
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	f8 01       	movw	r30, r16
     164:	81 81       	ldd	r24, Z+1	; 0x01
     166:	0e 94 3a 07 	call	0xe74	; 0xe74 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     16a:	26 e0       	ldi	r18, 0x06	; 6
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	56 e9       	ldi	r21, 0x96	; 150
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	85 e1       	ldi	r24, 0x15	; 21
     176:	92 e0       	ldi	r25, 0x02	; 2
     178:	0e 94 23 04 	call	0x846	; 0x846 <_ZN14HardwareSerial5beginEmh>
 // for(i=0 ; i<sizeof(pwmPin) ; i++)
  // pinMode(pwmPin[i], OUTPUT);

   Serial.begin(SERIAL_SPEED);
  // Init SWAP stack
  swap.init();
     17c:	8a e0       	ldi	r24, 0x0A	; 10
     17e:	93 e0       	ldi	r25, 0x03	; 3
     180:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN4SWAP4initEv>
     * 
     * @param paLevel amplification value
     */
    inline void setTxPowerAmp(uint8_t paLevel)
    {
      writeReg(CC1101_PATABLE, paLevel);
     184:	40 ec       	ldi	r20, 0xC0	; 192
     186:	6e e3       	ldi	r22, 0x3E	; 62
     188:	8d ef       	ldi	r24, 0xFD	; 253
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  
  // Enable repeater mode
  //swap.enableRepeater(maxRepeaterHop);

  // Transmit product code
  swap.getRegister(REGI_PRODUCTCODE)->getData();
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN4SWAP11getRegisterEh.isra.1>
     196:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN8REGISTER7getDataEv>
  swap.getRegister(REGI_TXINTERVAL)->getData();
     19a:	8a e0       	ldi	r24, 0x0A	; 10
     19c:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN4SWAP11getRegisterEh.isra.1>
     1a0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN8REGISTER7getDataEv>
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	89 83       	std	Y+1, r24	; 0x01
     * @param state New system state
     */
    void __inline__ enterSystemState(SYSTATE state)
    {
      // System state register -> id = 3
      regTable[3]->setData((uint8_t *) &state);
     1a8:	be 01       	movw	r22, r28
     1aa:	6f 5f       	subi	r22, 0xFF	; 255
     1ac:	7f 4f       	sbci	r23, 0xFF	; 255
     1ae:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <regTable+0x6>
     1b2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <regTable+0x7>
     1b6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN8REGISTER7setDataEPh>

  // Enter SYNC state
  swap.enterSystemState(SYSTATE_RXON);

  delay(50);  //   
     1ba:	62 e3       	ldi	r22, 0x32	; 50
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 91 06 	call	0xd22	; 0xd22 <delay>
  // Transmit initial binary states
  //for(i=0 ; i<sizeof(binaryPin) ; i++)
  swap.getRegister(REGI_VOLTSUPPLY)->getData();
     1c6:	8b e0       	ldi	r24, 0x0B	; 11
     1c8:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN4SWAP11getRegisterEh.isra.1>
     1cc:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN8REGISTER7getDataEv>
  swap.getRegister(REGI_LED0)->getData();
     1d0:	8c e0       	ldi	r24, 0x0C	; 12
     1d2:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN4SWAP11getRegisterEh.isra.1>
     1d6:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN8REGISTER7getDataEv>
  swap.getRegister(REGI_LED1)->getData();
     1da:	8d e0       	ldi	r24, 0x0D	; 13
     1dc:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN4SWAP11getRegisterEh.isra.1>
     1e0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN8REGISTER7getDataEv>
  // Transmit initial PWM values
  //for(i=0 ; i<sizeof(pwmPin) ; i++)
  //  swap.getRegister(REGI_PWMOUTPUT0 + i)->getData();
}
     1e4:	0f 90       	pop	r0
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	08 95       	ret

000001f0 <loop>:

void loop()
{
	int i;
	
  digitalWrite(LED, HIGH);
     1f0:	61 e0       	ldi	r22, 0x01	; 1
     1f2:	84 e0       	ldi	r24, 0x04	; 4
     1f4:	0e 94 76 07 	call	0xeec	; 0xeec <digitalWrite>
  delay(300);
     1f8:	6c e2       	ldi	r22, 0x2C	; 44
     1fa:	71 e0       	ldi	r23, 0x01	; 1
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 91 06 	call	0xd22	; 0xd22 <delay>
  digitalWrite(LED, LOW);
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	84 e0       	ldi	r24, 0x04	; 4
     208:	0e 94 76 07 	call	0xeec	; 0xeec <digitalWrite>
   // Transmit initial PWM values
   //for(i=0 ; i<sizeof(pwmPin) ; i++)
   //swap.getRegister(REGI_PWMOUTPUT0 + i)->getData();

   //Serial.println("Modem ready!\n");
   swap.getRegister(REGI_VOLTSUPPLY)->getData();
     20c:	8b e0       	ldi	r24, 0x0B	; 11
     20e:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN4SWAP11getRegisterEh.isra.1>
     212:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN8REGISTER7getDataEv>
   swap.getRegister(REGI_LED0)->getData();
     216:	8c e0       	ldi	r24, 0x0C	; 12
     218:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN4SWAP11getRegisterEh.isra.1>
     21c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN8REGISTER7getDataEv>
   swap.getRegister(REGI_LED1)->getData();
     220:	8d e0       	ldi	r24, 0x0D	; 13
     222:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN4SWAP11getRegisterEh.isra.1>
     226:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN8REGISTER7getDataEv>
   
  delay(700);
     22a:	6c eb       	ldi	r22, 0xBC	; 188
     22c:	72 e0       	ldi	r23, 0x02	; 2
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0c 94 91 06 	jmp	0xd22	; 0xd22 <delay>

00000236 <_Z7setled1hPh>:
 *
 */
const void setled1(byte rId, byte *state)
{
    // Update register
  regTable[rId]->value[0] = state[0];
     236:	e8 2f       	mov	r30, r24
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ee 0f       	add	r30, r30
     23c:	ff 1f       	adc	r31, r31
     23e:	ed 5f       	subi	r30, 0xFD	; 253
     240:	fe 4f       	sbci	r31, 0xFE	; 254
     242:	01 90       	ld	r0, Z+
     244:	f0 81       	ld	r31, Z
     246:	e0 2d       	mov	r30, r0
     248:	05 80       	ldd	r0, Z+5	; 0x05
     24a:	f6 81       	ldd	r31, Z+6	; 0x06
     24c:	e0 2d       	mov	r30, r0
     24e:	db 01       	movw	r26, r22
     250:	8c 91       	ld	r24, X
     252:	80 83       	st	Z, r24
     254:	08 95       	ret

00000256 <_Z7setled0hPh>:
     256:	0c 94 1b 01 	jmp	0x236	; 0x236 <_Z7setled1hPh>

0000025a <_Z13setTxIntervalhPh>:
DECLARE_REGISTERS_END()

/**
 * Definition of common getter/setter callback functions
 */
DEFINE_COMMON_CALLBACKS()
     25a:	85 e8       	ldi	r24, 0x85	; 133
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <_ZN8REGISTER20setValueFromBeBufferEPh>

00000262 <_Z13setDevAddresshPh>:
     262:	cf 92       	push	r12
     264:	df 92       	push	r13
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	c0 55       	subi	r28, 0x50	; 80
     276:	d1 09       	sbc	r29, r1
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	7b 01       	movw	r14, r22
     284:	82 e9       	ldi	r24, 0x92	; 146
     286:	c8 2e       	mov	r12, r24
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	d8 2e       	mov	r13, r24
     28c:	01 e0       	ldi	r16, 0x01	; 1
     28e:	f6 01       	movw	r30, r12
     290:	27 81       	ldd	r18, Z+7	; 0x07
     292:	ab 01       	movw	r20, r22
     294:	64 81       	ldd	r22, Z+4	; 0x04
     296:	ce 01       	movw	r24, r28
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     29e:	ce 01       	movw	r24, r28
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN8SWPACKET4sendEv>
     2a6:	b7 01       	movw	r22, r14
     2a8:	c6 01       	movw	r24, r12
     2aa:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN8REGISTER20setValueFromBeBufferEPh>
     2ae:	f6 01       	movw	r30, r12
     2b0:	87 81       	ldd	r24, Z+7	; 0x07
     2b2:	e8 0e       	add	r14, r24
     2b4:	f1 1c       	adc	r15, r1
     2b6:	f7 01       	movw	r30, r14
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	60 81       	ld	r22, Z
     2bc:	8d ef       	ldi	r24, 0xFD	; 253
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN6CC110113setDevAddressEh>
     2c4:	c0 5b       	subi	r28, 0xB0	; 176
     2c6:	df 4f       	sbci	r29, 0xFF	; 255
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	0f 91       	pop	r16
     2d8:	ff 90       	pop	r15
     2da:	ef 90       	pop	r14
     2dc:	df 90       	pop	r13
     2de:	cf 90       	pop	r12
     2e0:	08 95       	ret

000002e2 <_Z12setNetworkIdhPh>:
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	c0 55       	subi	r28, 0x50	; 80
     2f2:	d1 09       	sbc	r29, r1
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <regNetworkId+0x5>
     302:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <regNetworkId+0x6>
     306:	db 01       	movw	r26, r22
     308:	9c 91       	ld	r25, X
     30a:	80 81       	ld	r24, Z
     30c:	98 13       	cpse	r25, r24
     30e:	05 c0       	rjmp	.+10     	; 0x31a <_Z12setNetworkIdhPh+0x38>
     310:	11 96       	adiw	r26, 0x01	; 1
     312:	9c 91       	ld	r25, X
     314:	81 81       	ldd	r24, Z+1	; 0x01
     316:	98 17       	cp	r25, r24
     318:	a1 f0       	breq	.+40     	; 0x342 <_Z12setNetworkIdhPh+0x60>
     31a:	7b 01       	movw	r14, r22
     31c:	01 e0       	ldi	r16, 0x01	; 1
     31e:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <regNetworkId+0x7>
     322:	ab 01       	movw	r20, r22
     324:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <regNetworkId+0x4>
     328:	ce 01       	movw	r24, r28
     32a:	01 96       	adiw	r24, 0x01	; 1
     32c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     330:	ce 01       	movw	r24, r28
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN8SWPACKET4sendEv>
     338:	b7 01       	movw	r22, r14
     33a:	8d ef       	ldi	r24, 0xFD	; 253
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	0e 94 48 08 	call	0x1090	; 0x1090 <_ZN6CC110111setSyncWordEPh>
     342:	c0 5b       	subi	r28, 0xB0	; 176
     344:	df 4f       	sbci	r29, 0xFF	; 255
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	08 95       	ret

0000035c <_Z14updtVoltSupplyh>:
 * Measure voltage supply and update register
 *
 * 'rId'  Register ID
 */
const void updtVoltSupply(byte rId)
{  
     35c:	cf 93       	push	r28
     35e:	c8 2f       	mov	r28, r24
  unsigned long result = panstamp.getVcc();
     360:	8c ef       	ldi	r24, 0xFC	; 252
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN8PANSTAMP6getVccEv>
  
  // Update register value
  regTable[rId]->value[0] = (result >> 8) & 0xFF;
     368:	ec 2f       	mov	r30, r28
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	ed 5f       	subi	r30, 0xFD	; 253
     372:	fe 4f       	sbci	r31, 0xFE	; 254
     374:	a0 81       	ld	r26, Z
     376:	b1 81       	ldd	r27, Z+1	; 0x01
     378:	15 96       	adiw	r26, 0x05	; 5
     37a:	0d 90       	ld	r0, X+
     37c:	bc 91       	ld	r27, X
     37e:	a0 2d       	mov	r26, r0
     380:	ac 01       	movw	r20, r24
     382:	5c 93       	st	X, r21
  regTable[rId]->value[1] = result & 0xFF;
     384:	01 90       	ld	r0, Z+
     386:	f0 81       	ld	r31, Z
     388:	e0 2d       	mov	r30, r0
     38a:	05 80       	ldd	r0, Z+5	; 0x05
     38c:	f6 81       	ldd	r31, Z+6	; 0x06
     38e:	e0 2d       	mov	r30, r0
     390:	81 83       	std	Z+1, r24	; 0x01
}
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <_Z14setFreqChannelhPh>:
DECLARE_REGISTERS_END()

/**
 * Definition of common getter/setter callback functions
 */
DEFINE_COMMON_CALLBACKS()
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	c0 55       	subi	r28, 0x50	; 80
     3a6:	d1 09       	sbc	r29, r1
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <regFreqChannel+0x5>
     3b6:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <regFreqChannel+0x6>
     3ba:	db 01       	movw	r26, r22
     3bc:	9c 91       	ld	r25, X
     3be:	80 81       	ld	r24, Z
     3c0:	98 17       	cp	r25, r24
     3c2:	a9 f0       	breq	.+42     	; 0x3ee <_Z14setFreqChannelhPh+0x58>
     3c4:	7b 01       	movw	r14, r22
     3c6:	01 e0       	ldi	r16, 0x01	; 1
     3c8:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <regFreqChannel+0x7>
     3cc:	ab 01       	movw	r20, r22
     3ce:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <regFreqChannel+0x4>
     3d2:	ce 01       	movw	r24, r28
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     3da:	ce 01       	movw	r24, r28
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN8SWPACKET4sendEv>
     3e2:	f7 01       	movw	r30, r14
     3e4:	60 81       	ld	r22, Z
     3e6:	8d ef       	ldi	r24, 0xFD	; 253
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN6CC110110setChannelEh>
     3ee:	c0 5b       	subi	r28, 0xB0	; 176
     3f0:	df 4f       	sbci	r29, 0xFF	; 255
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	08 95       	ret

00000408 <_Z11setSysStatehPh>:
     408:	fb 01       	movw	r30, r22
     40a:	80 81       	ld	r24, Z
     40c:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <swap+0x5>
     410:	80 81       	ld	r24, Z
     412:	81 11       	cpse	r24, r1
     414:	11 c0       	rjmp	.+34     	; 0x438 <_Z11setSysStatehPh+0x30>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     416:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <regTableSize>
     41a:	84 30       	cpi	r24, 0x04	; 4
     41c:	28 f0       	brcs	.+10     	; 0x428 <_Z11setSysStatehPh+0x20>
        return regTable[regId];
     41e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <regTable+0x6>
     422:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <regTable+0x7>
     426:	02 c0       	rjmp	.+4      	; 0x42c <_Z11setSysStatehPh+0x24>

      return NULL;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN8REGISTER14sendSwapStatusEv>
     430:	8c ef       	ldi	r24, 0xFC	; 252
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <_ZN8PANSTAMP5resetEv>
     438:	08 95       	ret

0000043a <_GLOBAL__sub_I_regProductCode>:
     * @param typ      Type of SWAP data (SWDTYPE)
     * @param eepromAddr address in EEPROM. Set to -1 if the register value has not to
     * be saved in EEPROM
     * @param bank sector in eeprom or flash
     */
    REGISTER(uint8_t *val, const uint8_t len, const void (*updateValH)(uint8_t rId), const void (*setValH)(uint8_t rId, uint8_t *v), const SWDTYPE typ=SWDTYPE_OTHER, const int eepromAddr=-1, const uint16_t bank=DEFAULT_NVOLAT_SECTION): id(regIndex++), value(val), length(len), updateValue(updateValH), setValue(setValH), type(typ), eepromAddress(eepromAddr), eepromBank(bank) {};
     43a:	e8 e0       	ldi	r30, 0x08	; 8
     43c:	f2 e0       	ldi	r31, 0x02	; 2
     43e:	11 82       	std	Z+1, r1	; 0x01
     440:	10 82       	st	Z, r1
     442:	13 82       	std	Z+3, r1	; 0x03
     444:	12 82       	std	Z+2, r1	; 0x02
     446:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <regIndex>
     44a:	94 83       	std	Z+4, r25	; 0x04
     44c:	27 e2       	ldi	r18, 0x27	; 39
     44e:	31 e0       	ldi	r19, 0x01	; 1
     450:	36 83       	std	Z+6, r19	; 0x06
     452:	25 83       	std	Z+5, r18	; 0x05
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	87 83       	std	Z+7, r24	; 0x07
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 87       	std	Z+8, r24	; 0x08
     45c:	2f ef       	ldi	r18, 0xFF	; 255
     45e:	3f ef       	ldi	r19, 0xFF	; 255
     460:	32 87       	std	Z+10, r19	; 0x0a
     462:	21 87       	std	Z+9, r18	; 0x09
     464:	14 86       	std	Z+12, r1	; 0x0c
     466:	13 86       	std	Z+11, r1	; 0x0b
     468:	eb ef       	ldi	r30, 0xFB	; 251
     46a:	f1 e0       	ldi	r31, 0x01	; 1
     46c:	11 82       	std	Z+1, r1	; 0x01
     46e:	10 82       	st	Z, r1
     470:	13 82       	std	Z+3, r1	; 0x03
     472:	12 82       	std	Z+2, r1	; 0x02
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	49 0f       	add	r20, r25
     478:	44 83       	std	Z+4, r20	; 0x04
     47a:	43 e2       	ldi	r20, 0x23	; 35
     47c:	51 e0       	ldi	r21, 0x01	; 1
     47e:	56 83       	std	Z+6, r21	; 0x06
     480:	45 83       	std	Z+5, r20	; 0x05
     482:	44 e0       	ldi	r20, 0x04	; 4
     484:	47 83       	std	Z+7, r20	; 0x07
     486:	80 87       	std	Z+8, r24	; 0x08
     488:	32 87       	std	Z+10, r19	; 0x0a
     48a:	21 87       	std	Z+9, r18	; 0x09
     48c:	14 86       	std	Z+12, r1	; 0x0c
     48e:	13 86       	std	Z+11, r1	; 0x0b
     490:	ee ee       	ldi	r30, 0xEE	; 238
     492:	f1 e0       	ldi	r31, 0x01	; 1
     494:	11 82       	std	Z+1, r1	; 0x01
     496:	10 82       	st	Z, r1
     498:	13 82       	std	Z+3, r1	; 0x03
     49a:	12 82       	std	Z+2, r1	; 0x02
     49c:	52 e0       	ldi	r21, 0x02	; 2
     49e:	59 0f       	add	r21, r25
     4a0:	54 83       	std	Z+4, r21	; 0x04
     4a2:	6f e1       	ldi	r22, 0x1F	; 31
     4a4:	71 e0       	ldi	r23, 0x01	; 1
     4a6:	76 83       	std	Z+6, r23	; 0x06
     4a8:	65 83       	std	Z+5, r22	; 0x05
     4aa:	47 83       	std	Z+7, r20	; 0x07
     4ac:	80 87       	std	Z+8, r24	; 0x08
     4ae:	32 87       	std	Z+10, r19	; 0x0a
     4b0:	21 87       	std	Z+9, r18	; 0x09
     4b2:	14 86       	std	Z+12, r1	; 0x0c
     4b4:	13 86       	std	Z+11, r1	; 0x0b
     4b6:	e1 ee       	ldi	r30, 0xE1	; 225
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	11 82       	std	Z+1, r1	; 0x01
     4bc:	10 82       	st	Z, r1
     4be:	44 e0       	ldi	r20, 0x04	; 4
     4c0:	52 e0       	ldi	r21, 0x02	; 2
     4c2:	53 83       	std	Z+3, r21	; 0x03
     4c4:	42 83       	std	Z+2, r20	; 0x02
     4c6:	43 e0       	ldi	r20, 0x03	; 3
     4c8:	49 0f       	add	r20, r25
     4ca:	44 83       	std	Z+4, r20	; 0x04
     4cc:	4f e0       	ldi	r20, 0x0F	; 15
     4ce:	53 e0       	ldi	r21, 0x03	; 3
     4d0:	56 83       	std	Z+6, r21	; 0x06
     4d2:	45 83       	std	Z+5, r20	; 0x05
     4d4:	87 83       	std	Z+7, r24	; 0x07
     4d6:	80 87       	std	Z+8, r24	; 0x08
     4d8:	32 87       	std	Z+10, r19	; 0x0a
     4da:	21 87       	std	Z+9, r18	; 0x09
     4dc:	14 86       	std	Z+12, r1	; 0x0c
     4de:	13 86       	std	Z+11, r1	; 0x0b
     4e0:	e4 ed       	ldi	r30, 0xD4	; 212
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	11 82       	std	Z+1, r1	; 0x01
     4e6:	10 82       	st	Z, r1
     4e8:	4b ec       	ldi	r20, 0xCB	; 203
     4ea:	51 e0       	ldi	r21, 0x01	; 1
     4ec:	53 83       	std	Z+3, r21	; 0x03
     4ee:	42 83       	std	Z+2, r20	; 0x02
     4f0:	44 e0       	ldi	r20, 0x04	; 4
     4f2:	49 0f       	add	r20, r25
     4f4:	44 83       	std	Z+4, r20	; 0x04
     4f6:	42 e0       	ldi	r20, 0x02	; 2
     4f8:	53 e0       	ldi	r21, 0x03	; 3
     4fa:	56 83       	std	Z+6, r21	; 0x06
     4fc:	45 83       	std	Z+5, r20	; 0x05
     4fe:	87 83       	std	Z+7, r24	; 0x07
     500:	10 86       	std	Z+8, r1	; 0x08
     502:	12 86       	std	Z+10, r1	; 0x0a
     504:	11 86       	std	Z+9, r1	; 0x09
     506:	14 86       	std	Z+12, r1	; 0x0c
     508:	13 86       	std	Z+11, r1	; 0x0b
     50a:	e7 ec       	ldi	r30, 0xC7	; 199
     50c:	f1 e0       	ldi	r31, 0x01	; 1
     50e:	11 82       	std	Z+1, r1	; 0x01
     510:	10 82       	st	Z, r1
     512:	13 82       	std	Z+3, r1	; 0x03
     514:	12 82       	std	Z+2, r1	; 0x02
     516:	45 e0       	ldi	r20, 0x05	; 5
     518:	49 0f       	add	r20, r25
     51a:	44 83       	std	Z+4, r20	; 0x04
     51c:	4d e0       	ldi	r20, 0x0D	; 13
     51e:	53 e0       	ldi	r21, 0x03	; 3
     520:	56 83       	std	Z+6, r21	; 0x06
     522:	45 83       	std	Z+5, r20	; 0x05
     524:	87 83       	std	Z+7, r24	; 0x07
     526:	80 87       	std	Z+8, r24	; 0x08
     528:	32 87       	std	Z+10, r19	; 0x0a
     52a:	21 87       	std	Z+9, r18	; 0x09
     52c:	14 86       	std	Z+12, r1	; 0x0c
     52e:	13 86       	std	Z+11, r1	; 0x0b
     530:	e9 eb       	ldi	r30, 0xB9	; 185
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	11 82       	std	Z+1, r1	; 0x01
     536:	10 82       	st	Z, r1
     538:	13 82       	std	Z+3, r1	; 0x03
     53a:	12 82       	std	Z+2, r1	; 0x02
     53c:	46 e0       	ldi	r20, 0x06	; 6
     53e:	49 0f       	add	r20, r25
     540:	44 83       	std	Z+4, r20	; 0x04
     542:	46 ec       	ldi	r20, 0xC6	; 198
     544:	51 e0       	ldi	r21, 0x01	; 1
     546:	56 83       	std	Z+6, r21	; 0x06
     548:	45 83       	std	Z+5, r20	; 0x05
     54a:	87 83       	std	Z+7, r24	; 0x07
     54c:	80 87       	std	Z+8, r24	; 0x08
     54e:	32 87       	std	Z+10, r19	; 0x0a
     550:	21 87       	std	Z+9, r18	; 0x09
     552:	14 86       	std	Z+12, r1	; 0x0c
     554:	13 86       	std	Z+11, r1	; 0x0b
     556:	ec ea       	ldi	r30, 0xAC	; 172
     558:	f1 e0       	ldi	r31, 0x01	; 1
     55a:	11 82       	std	Z+1, r1	; 0x01
     55c:	10 82       	st	Z, r1
     55e:	13 82       	std	Z+3, r1	; 0x03
     560:	12 82       	std	Z+2, r1	; 0x02
     562:	47 e0       	ldi	r20, 0x07	; 7
     564:	49 0f       	add	r20, r25
     566:	44 83       	std	Z+4, r20	; 0x04
     568:	4e e0       	ldi	r20, 0x0E	; 14
     56a:	53 e0       	ldi	r21, 0x03	; 3
     56c:	56 83       	std	Z+6, r21	; 0x06
     56e:	45 83       	std	Z+5, r20	; 0x05
     570:	87 83       	std	Z+7, r24	; 0x07
     572:	80 87       	std	Z+8, r24	; 0x08
     574:	32 87       	std	Z+10, r19	; 0x0a
     576:	21 87       	std	Z+9, r18	; 0x09
     578:	14 86       	std	Z+12, r1	; 0x0c
     57a:	13 86       	std	Z+11, r1	; 0x0b
     57c:	ef e9       	ldi	r30, 0x9F	; 159
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	11 82       	std	Z+1, r1	; 0x01
     582:	10 82       	st	Z, r1
     584:	41 e7       	ldi	r20, 0x71	; 113
     586:	51 e0       	ldi	r21, 0x01	; 1
     588:	53 83       	std	Z+3, r21	; 0x03
     58a:	42 83       	std	Z+2, r20	; 0x02
     58c:	48 e0       	ldi	r20, 0x08	; 8
     58e:	49 0f       	add	r20, r25
     590:	44 83       	std	Z+4, r20	; 0x04
     592:	43 e0       	ldi	r20, 0x03	; 3
     594:	53 e0       	ldi	r21, 0x03	; 3
     596:	56 83       	std	Z+6, r21	; 0x06
     598:	45 83       	std	Z+5, r20	; 0x05
     59a:	42 e0       	ldi	r20, 0x02	; 2
     59c:	47 83       	std	Z+7, r20	; 0x07
     59e:	80 87       	std	Z+8, r24	; 0x08
     5a0:	62 e0       	ldi	r22, 0x02	; 2
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	72 87       	std	Z+10, r23	; 0x0a
     5a6:	61 87       	std	Z+9, r22	; 0x09
     5a8:	14 86       	std	Z+12, r1	; 0x0c
     5aa:	13 86       	std	Z+11, r1	; 0x0b
     5ac:	e2 e9       	ldi	r30, 0x92	; 146
     5ae:	f1 e0       	ldi	r31, 0x01	; 1
     5b0:	11 82       	std	Z+1, r1	; 0x01
     5b2:	10 82       	st	Z, r1
     5b4:	61 e3       	ldi	r22, 0x31	; 49
     5b6:	71 e0       	ldi	r23, 0x01	; 1
     5b8:	73 83       	std	Z+3, r23	; 0x03
     5ba:	62 83       	std	Z+2, r22	; 0x02
     5bc:	59 e0       	ldi	r21, 0x09	; 9
     5be:	59 0f       	add	r21, r25
     5c0:	54 83       	std	Z+4, r21	; 0x04
     5c2:	6c e0       	ldi	r22, 0x0C	; 12
     5c4:	73 e0       	ldi	r23, 0x03	; 3
     5c6:	76 83       	std	Z+6, r23	; 0x06
     5c8:	65 83       	std	Z+5, r22	; 0x05
     5ca:	87 83       	std	Z+7, r24	; 0x07
     5cc:	10 86       	std	Z+8, r1	; 0x08
     5ce:	65 e0       	ldi	r22, 0x05	; 5
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	72 87       	std	Z+10, r23	; 0x0a
     5d4:	61 87       	std	Z+9, r22	; 0x09
     5d6:	14 86       	std	Z+12, r1	; 0x0c
     5d8:	13 86       	std	Z+11, r1	; 0x0b
     5da:	e5 e8       	ldi	r30, 0x85	; 133
     5dc:	f1 e0       	ldi	r31, 0x01	; 1
     5de:	11 82       	std	Z+1, r1	; 0x01
     5e0:	10 82       	st	Z, r1
     5e2:	6d e2       	ldi	r22, 0x2D	; 45
     5e4:	71 e0       	ldi	r23, 0x01	; 1
     5e6:	73 83       	std	Z+3, r23	; 0x03
     5e8:	62 83       	std	Z+2, r22	; 0x02
     5ea:	5a e0       	ldi	r21, 0x0A	; 10
     5ec:	59 0f       	add	r21, r25
     5ee:	54 83       	std	Z+4, r21	; 0x04
     5f0:	60 e1       	ldi	r22, 0x10	; 16
     5f2:	73 e0       	ldi	r23, 0x03	; 3
     5f4:	76 83       	std	Z+6, r23	; 0x06
     5f6:	65 83       	std	Z+5, r22	; 0x05
     5f8:	47 83       	std	Z+7, r20	; 0x07
     5fa:	10 86       	std	Z+8, r1	; 0x08
     5fc:	66 e0       	ldi	r22, 0x06	; 6
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	72 87       	std	Z+10, r23	; 0x0a
     602:	61 87       	std	Z+9, r22	; 0x09
     604:	14 86       	std	Z+12, r1	; 0x0c
     606:	13 86       	std	Z+11, r1	; 0x0b
     608:	e6 e7       	ldi	r30, 0x76	; 118
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	6e ea       	ldi	r22, 0xAE	; 174
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	71 83       	std	Z+1, r23	; 0x01
     612:	60 83       	st	Z, r22
     614:	13 82       	std	Z+3, r1	; 0x03
     616:	12 82       	std	Z+2, r1	; 0x02
     618:	5b e0       	ldi	r21, 0x0B	; 11
     61a:	59 0f       	add	r21, r25
     61c:	54 83       	std	Z+4, r21	; 0x04
     61e:	63 e8       	ldi	r22, 0x83	; 131
     620:	71 e0       	ldi	r23, 0x01	; 1
     622:	76 83       	std	Z+6, r23	; 0x06
     624:	65 83       	std	Z+5, r22	; 0x05
     626:	47 83       	std	Z+7, r20	; 0x07
     628:	80 87       	std	Z+8, r24	; 0x08
     62a:	32 87       	std	Z+10, r19	; 0x0a
     62c:	21 87       	std	Z+9, r18	; 0x09
     62e:	14 86       	std	Z+12, r1	; 0x0c
     630:	13 86       	std	Z+11, r1	; 0x0b
     632:	e8 e6       	ldi	r30, 0x68	; 104
     634:	f1 e0       	ldi	r31, 0x01	; 1
     636:	11 82       	std	Z+1, r1	; 0x01
     638:	10 82       	st	Z, r1
     63a:	4b e2       	ldi	r20, 0x2B	; 43
     63c:	51 e0       	ldi	r21, 0x01	; 1
     63e:	53 83       	std	Z+3, r21	; 0x03
     640:	42 83       	std	Z+2, r20	; 0x02
     642:	4c e0       	ldi	r20, 0x0C	; 12
     644:	49 0f       	add	r20, r25
     646:	44 83       	std	Z+4, r20	; 0x04
     648:	45 e7       	ldi	r20, 0x75	; 117
     64a:	51 e0       	ldi	r21, 0x01	; 1
     64c:	56 83       	std	Z+6, r21	; 0x06
     64e:	45 83       	std	Z+5, r20	; 0x05
     650:	87 83       	std	Z+7, r24	; 0x07
     652:	80 87       	std	Z+8, r24	; 0x08
     654:	32 87       	std	Z+10, r19	; 0x0a
     656:	21 87       	std	Z+9, r18	; 0x09
     658:	14 86       	std	Z+12, r1	; 0x0c
     65a:	13 86       	std	Z+11, r1	; 0x0b
     65c:	ea e5       	ldi	r30, 0x5A	; 90
     65e:	f1 e0       	ldi	r31, 0x01	; 1
     660:	11 82       	std	Z+1, r1	; 0x01
     662:	10 82       	st	Z, r1
     664:	4b e1       	ldi	r20, 0x1B	; 27
     666:	51 e0       	ldi	r21, 0x01	; 1
     668:	53 83       	std	Z+3, r21	; 0x03
     66a:	42 83       	std	Z+2, r20	; 0x02
     66c:	4e e0       	ldi	r20, 0x0E	; 14
     66e:	49 0f       	add	r20, r25
     670:	40 93 09 03 	sts	0x0309, r20	; 0x800309 <regIndex>
     674:	93 5f       	subi	r25, 0xF3	; 243
     676:	94 83       	std	Z+4, r25	; 0x04
     678:	47 e6       	ldi	r20, 0x67	; 103
     67a:	51 e0       	ldi	r21, 0x01	; 1
     67c:	56 83       	std	Z+6, r21	; 0x06
     67e:	45 83       	std	Z+5, r20	; 0x05
     680:	87 83       	std	Z+7, r24	; 0x07
     682:	80 87       	std	Z+8, r24	; 0x08
     684:	32 87       	std	Z+10, r19	; 0x0a
     686:	21 87       	std	Z+9, r18	; 0x09
     688:	14 86       	std	Z+12, r1	; 0x0c
     68a:	13 86       	std	Z+11, r1	; 0x0b
     68c:	08 95       	ret

0000068e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     68e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     690:	91 8d       	ldd	r25, Z+25	; 0x19
     692:	22 8d       	ldd	r18, Z+26	; 0x1a
     694:	89 2f       	mov	r24, r25
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	80 5c       	subi	r24, 0xC0	; 192
     69a:	9f 4f       	sbci	r25, 0xFF	; 255
     69c:	82 1b       	sub	r24, r18
     69e:	91 09       	sbc	r25, r1
}
     6a0:	8f 73       	andi	r24, 0x3F	; 63
     6a2:	99 27       	eor	r25, r25
     6a4:	08 95       	ret

000006a6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     6a6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     6a8:	91 8d       	ldd	r25, Z+25	; 0x19
     6aa:	82 8d       	ldd	r24, Z+26	; 0x1a
     6ac:	98 17       	cp	r25, r24
     6ae:	31 f0       	breq	.+12     	; 0x6bc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     6b0:	82 8d       	ldd	r24, Z+26	; 0x1a
     6b2:	e8 0f       	add	r30, r24
     6b4:	f1 1d       	adc	r31, r1
     6b6:	85 8d       	ldd	r24, Z+29	; 0x1d
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     6c0:	08 95       	ret

000006c2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     6c2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     6c4:	91 8d       	ldd	r25, Z+25	; 0x19
     6c6:	82 8d       	ldd	r24, Z+26	; 0x1a
     6c8:	98 17       	cp	r25, r24
     6ca:	61 f0       	breq	.+24     	; 0x6e4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     6cc:	82 8d       	ldd	r24, Z+26	; 0x1a
     6ce:	df 01       	movw	r26, r30
     6d0:	a8 0f       	add	r26, r24
     6d2:	b1 1d       	adc	r27, r1
     6d4:	5d 96       	adiw	r26, 0x1d	; 29
     6d6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     6d8:	92 8d       	ldd	r25, Z+26	; 0x1a
     6da:	9f 5f       	subi	r25, 0xFF	; 255
     6dc:	9f 73       	andi	r25, 0x3F	; 63
     6de:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     6e8:	08 95       	ret

000006ea <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     6ea:	fc 01       	movw	r30, r24
     6ec:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     6ee:	44 8d       	ldd	r20, Z+28	; 0x1c
     6f0:	25 2f       	mov	r18, r21
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	84 2f       	mov	r24, r20
     6f6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     6f8:	82 1b       	sub	r24, r18
     6fa:	93 0b       	sbc	r25, r19
     6fc:	54 17       	cp	r21, r20
     6fe:	10 f0       	brcs	.+4      	; 0x704 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     700:	cf 96       	adiw	r24, 0x3f	; 63
     702:	08 95       	ret
  return tail - head - 1;
     704:	01 97       	sbiw	r24, 0x01	; 1
}
     706:	08 95       	ret

00000708 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     708:	8b ed       	ldi	r24, 0xDB	; 219
     70a:	94 e0       	ldi	r25, 0x04	; 4
     70c:	89 2b       	or	r24, r25
     70e:	49 f0       	breq	.+18     	; 0x722 <_Z14serialEventRunv+0x1a>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	89 2b       	or	r24, r25
     716:	29 f0       	breq	.+10     	; 0x722 <_Z14serialEventRunv+0x1a>
     718:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z17Serial0_availablev>
     71c:	81 11       	cpse	r24, r1
     71e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     722:	08 95       	ret

00000724 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     724:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     726:	84 8d       	ldd	r24, Z+28	; 0x1c
     728:	df 01       	movw	r26, r30
     72a:	a8 0f       	add	r26, r24
     72c:	b1 1d       	adc	r27, r1
     72e:	a3 5a       	subi	r26, 0xA3	; 163
     730:	bf 4f       	sbci	r27, 0xFF	; 255
     732:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     734:	84 8d       	ldd	r24, Z+28	; 0x1c
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	8f 73       	andi	r24, 0x3F	; 63
     73c:	99 27       	eor	r25, r25
     73e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     740:	a6 89       	ldd	r26, Z+22	; 0x16
     742:	b7 89       	ldd	r27, Z+23	; 0x17
     744:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     746:	a0 89       	ldd	r26, Z+16	; 0x10
     748:	b1 89       	ldd	r27, Z+17	; 0x11
     74a:	8c 91       	ld	r24, X
     74c:	83 70       	andi	r24, 0x03	; 3
     74e:	80 64       	ori	r24, 0x40	; 64
     750:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     752:	93 8d       	ldd	r25, Z+27	; 0x1b
     754:	84 8d       	ldd	r24, Z+28	; 0x1c
     756:	98 13       	cpse	r25, r24
     758:	06 c0       	rjmp	.+12     	; 0x766 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     75a:	02 88       	ldd	r0, Z+18	; 0x12
     75c:	f3 89       	ldd	r31, Z+19	; 0x13
     75e:	e0 2d       	mov	r30, r0
     760:	80 81       	ld	r24, Z
     762:	8f 7d       	andi	r24, 0xDF	; 223
     764:	80 83       	st	Z, r24
     766:	08 95       	ret

00000768 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	ec 01       	movw	r28, r24
  _written = true;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     77a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     77c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     77e:	98 13       	cpse	r25, r24
     780:	05 c0       	rjmp	.+10     	; 0x78c <_ZN14HardwareSerial5writeEh+0x24>
     782:	e8 89       	ldd	r30, Y+16	; 0x10
     784:	f9 89       	ldd	r31, Y+17	; 0x11
     786:	80 81       	ld	r24, Z
     788:	85 fd       	sbrc	r24, 5
     78a:	26 c0       	rjmp	.+76     	; 0x7d8 <_ZN14HardwareSerial5writeEh+0x70>
     78c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     78e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	0f 5f       	subi	r16, 0xFF	; 255
     794:	1f 4f       	sbci	r17, 0xFF	; 255
     796:	0f 73       	andi	r16, 0x3F	; 63
     798:	11 27       	eor	r17, r17
     79a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     79c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     79e:	e8 12       	cpse	r14, r24
     7a0:	0c c0       	rjmp	.+24     	; 0x7ba <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	07 fc       	sbrc	r0, 7
     7a6:	fa cf       	rjmp	.-12     	; 0x79c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     7a8:	e8 89       	ldd	r30, Y+16	; 0x10
     7aa:	f9 89       	ldd	r31, Y+17	; 0x11
     7ac:	80 81       	ld	r24, Z
     7ae:	85 ff       	sbrs	r24, 5
     7b0:	f5 cf       	rjmp	.-22     	; 0x79c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     7b2:	ce 01       	movw	r24, r28
     7b4:	0e 94 92 03 	call	0x724	; 0x724 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     7b8:	f1 cf       	rjmp	.-30     	; 0x79c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     7ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7bc:	fe 01       	movw	r30, r28
     7be:	e8 0f       	add	r30, r24
     7c0:	f1 1d       	adc	r31, r1
     7c2:	e3 5a       	subi	r30, 0xA3	; 163
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
     7c6:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7c8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7ca:	f8 94       	cli
    _tx_buffer_head = i;
     7cc:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     7ce:	ea 89       	ldd	r30, Y+18	; 0x12
     7d0:	fb 89       	ldd	r31, Y+19	; 0x13
     7d2:	80 81       	ld	r24, Z
     7d4:	80 62       	ori	r24, 0x20	; 32
     7d6:	0a c0       	rjmp	.+20     	; 0x7ec <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7d8:	9f b7       	in	r25, 0x3f	; 63
     7da:	f8 94       	cli
      *_udr = c;
     7dc:	ee 89       	ldd	r30, Y+22	; 0x16
     7de:	ff 89       	ldd	r31, Y+23	; 0x17
     7e0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     7e2:	e8 89       	ldd	r30, Y+16	; 0x10
     7e4:	f9 89       	ldd	r31, Y+17	; 0x11
     7e6:	80 81       	ld	r24, Z
     7e8:	83 70       	andi	r24, 0x03	; 3
     7ea:	80 64       	ori	r24, 0x40	; 64
     7ec:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7ee:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	08 95       	ret

00000802 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     808:	88 8d       	ldd	r24, Y+24	; 0x18
     80a:	88 23       	and	r24, r24
     80c:	c9 f0       	breq	.+50     	; 0x840 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     80e:	ea 89       	ldd	r30, Y+18	; 0x12
     810:	fb 89       	ldd	r31, Y+19	; 0x13
     812:	80 81       	ld	r24, Z
     814:	85 fd       	sbrc	r24, 5
     816:	05 c0       	rjmp	.+10     	; 0x822 <_ZN14HardwareSerial5flushEv+0x20>
     818:	a8 89       	ldd	r26, Y+16	; 0x10
     81a:	b9 89       	ldd	r27, Y+17	; 0x11
     81c:	8c 91       	ld	r24, X
     81e:	86 fd       	sbrc	r24, 6
     820:	0f c0       	rjmp	.+30     	; 0x840 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	07 fc       	sbrc	r0, 7
     826:	f5 cf       	rjmp	.-22     	; 0x812 <_ZN14HardwareSerial5flushEv+0x10>
     828:	80 81       	ld	r24, Z
     82a:	85 ff       	sbrs	r24, 5
     82c:	f2 cf       	rjmp	.-28     	; 0x812 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     82e:	a8 89       	ldd	r26, Y+16	; 0x10
     830:	b9 89       	ldd	r27, Y+17	; 0x11
     832:	8c 91       	ld	r24, X
     834:	85 ff       	sbrs	r24, 5
     836:	ed cf       	rjmp	.-38     	; 0x812 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     838:	ce 01       	movw	r24, r28
     83a:	0e 94 92 03 	call	0x724	; 0x724 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     83e:	e7 cf       	rjmp	.-50     	; 0x80e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	ec 01       	movw	r28, r24
     856:	6a 01       	movw	r12, r20
     858:	7b 01       	movw	r14, r22
     85a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     85c:	60 e8       	ldi	r22, 0x80	; 128
     85e:	74 e8       	ldi	r23, 0x84	; 132
     860:	8e e1       	ldi	r24, 0x1E	; 30
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	a7 01       	movw	r20, r14
     866:	96 01       	movw	r18, r12
     868:	0e 94 c8 11 	call	0x2390	; 0x2390 <__udivmodsi4>
     86c:	da 01       	movw	r26, r20
     86e:	c9 01       	movw	r24, r18
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	a1 09       	sbc	r26, r1
     874:	b1 09       	sbc	r27, r1
     876:	b6 95       	lsr	r27
     878:	a7 95       	ror	r26
     87a:	97 95       	ror	r25
     87c:	87 95       	ror	r24
     87e:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
     880:	e8 89       	ldd	r30, Y+16	; 0x10
     882:	f9 89       	ldd	r31, Y+17	; 0x11
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     888:	21 15       	cp	r18, r1
     88a:	80 e1       	ldi	r24, 0x10	; 16
     88c:	38 07       	cpc	r19, r24
     88e:	a8 f0       	brcs	.+42     	; 0x8ba <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
     890:	e8 89       	ldd	r30, Y+16	; 0x10
     892:	f9 89       	ldd	r31, Y+17	; 0x11
     894:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     896:	60 e4       	ldi	r22, 0x40	; 64
     898:	72 e4       	ldi	r23, 0x42	; 66
     89a:	8f e0       	ldi	r24, 0x0F	; 15
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a7 01       	movw	r20, r14
     8a0:	96 01       	movw	r18, r12
     8a2:	0e 94 c8 11 	call	0x2390	; 0x2390 <__udivmodsi4>
     8a6:	da 01       	movw	r26, r20
     8a8:	c9 01       	movw	r24, r18
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	a1 09       	sbc	r26, r1
     8ae:	b1 09       	sbc	r27, r1
     8b0:	b6 95       	lsr	r27
     8b2:	a7 95       	ror	r26
     8b4:	97 95       	ror	r25
     8b6:	87 95       	ror	r24
     8b8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     8ba:	ec 85       	ldd	r30, Y+12	; 0x0c
     8bc:	fd 85       	ldd	r31, Y+13	; 0x0d
     8be:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     8c0:	ee 85       	ldd	r30, Y+14	; 0x0e
     8c2:	ff 85       	ldd	r31, Y+15	; 0x0f
     8c4:	20 83       	st	Z, r18

  _written = false;
     8c6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     8c8:	ec 89       	ldd	r30, Y+20	; 0x14
     8ca:	fd 89       	ldd	r31, Y+21	; 0x15
     8cc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     8ce:	ea 89       	ldd	r30, Y+18	; 0x12
     8d0:	fb 89       	ldd	r31, Y+19	; 0x13
     8d2:	80 81       	ld	r24, Z
     8d4:	80 61       	ori	r24, 0x10	; 16
     8d6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     8d8:	ea 89       	ldd	r30, Y+18	; 0x12
     8da:	fb 89       	ldd	r31, Y+19	; 0x13
     8dc:	80 81       	ld	r24, Z
     8de:	88 60       	ori	r24, 0x08	; 8
     8e0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     8e2:	ea 89       	ldd	r30, Y+18	; 0x12
     8e4:	fb 89       	ldd	r31, Y+19	; 0x13
     8e6:	80 81       	ld	r24, Z
     8e8:	80 68       	ori	r24, 0x80	; 128
     8ea:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     8ec:	ea 89       	ldd	r30, Y+18	; 0x12
     8ee:	fb 89       	ldd	r31, Y+19	; 0x13
     8f0:	80 81       	ld	r24, Z
     8f2:	8f 7d       	andi	r24, 0xDF	; 223
     8f4:	80 83       	st	Z, r24
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	08 95       	ret

00000906 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     906:	1f 92       	push	r1
     908:	0f 92       	push	r0
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	2f 93       	push	r18
     912:	8f 93       	push	r24
     914:	9f 93       	push	r25
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     91a:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <Serial+0x10>
     91e:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <Serial+0x11>
     922:	80 81       	ld	r24, Z
     924:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <Serial+0x16>
     928:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <Serial+0x17>
     92c:	82 fd       	sbrc	r24, 2
     92e:	12 c0       	rjmp	.+36     	; 0x954 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     930:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     932:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <Serial+0x19>
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     93a:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <Serial+0x1a>
     93e:	82 17       	cp	r24, r18
     940:	51 f0       	breq	.+20     	; 0x956 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     942:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <Serial+0x19>
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	eb 5e       	subi	r30, 0xEB	; 235
     94a:	fd 4f       	sbci	r31, 0xFD	; 253
     94c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     94e:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <Serial+0x19>
     952:	01 c0       	rjmp	.+2      	; 0x956 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     954:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     956:	ff 91       	pop	r31
     958:	ef 91       	pop	r30
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	2f 91       	pop	r18
     960:	0f 90       	pop	r0
     962:	0f be       	out	0x3f, r0	; 63
     964:	0f 90       	pop	r0
     966:	1f 90       	pop	r1
     968:	18 95       	reti

0000096a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	4f 93       	push	r20
     97a:	5f 93       	push	r21
     97c:	6f 93       	push	r22
     97e:	7f 93       	push	r23
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     98c:	85 e1       	ldi	r24, 0x15	; 21
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 92 03 	call	0x724	; 0x724 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     994:	ff 91       	pop	r31
     996:	ef 91       	pop	r30
     998:	bf 91       	pop	r27
     99a:	af 91       	pop	r26
     99c:	9f 91       	pop	r25
     99e:	8f 91       	pop	r24
     9a0:	7f 91       	pop	r23
     9a2:	6f 91       	pop	r22
     9a4:	5f 91       	pop	r21
     9a6:	4f 91       	pop	r20
     9a8:	3f 91       	pop	r19
     9aa:	2f 91       	pop	r18
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     9b6:	85 e1       	ldi	r24, 0x15	; 21
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN14HardwareSerial9availableEv>
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	89 2b       	or	r24, r25
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <_Z17Serial0_availablev+0x10>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
}
     9c6:	82 2f       	mov	r24, r18
     9c8:	08 95       	ret

000009ca <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     9ca:	e5 e1       	ldi	r30, 0x15	; 21
     9cc:	f2 e0       	ldi	r31, 0x02	; 2
     9ce:	13 82       	std	Z+3, r1	; 0x03
     9d0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     9d2:	88 ee       	ldi	r24, 0xE8	; 232
     9d4:	93 e0       	ldi	r25, 0x03	; 3
     9d6:	a0 e0       	ldi	r26, 0x00	; 0
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	84 83       	std	Z+4, r24	; 0x04
     9dc:	95 83       	std	Z+5, r25	; 0x05
     9de:	a6 83       	std	Z+6, r26	; 0x06
     9e0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     9e2:	87 e3       	ldi	r24, 0x37	; 55
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	91 83       	std	Z+1, r25	; 0x01
     9e8:	80 83       	st	Z, r24
     9ea:	85 ec       	ldi	r24, 0xC5	; 197
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	95 87       	std	Z+13, r25	; 0x0d
     9f0:	84 87       	std	Z+12, r24	; 0x0c
     9f2:	84 ec       	ldi	r24, 0xC4	; 196
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	97 87       	std	Z+15, r25	; 0x0f
     9f8:	86 87       	std	Z+14, r24	; 0x0e
     9fa:	80 ec       	ldi	r24, 0xC0	; 192
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	91 8b       	std	Z+17, r25	; 0x11
     a00:	80 8b       	std	Z+16, r24	; 0x10
     a02:	81 ec       	ldi	r24, 0xC1	; 193
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	93 8b       	std	Z+19, r25	; 0x13
     a08:	82 8b       	std	Z+18, r24	; 0x12
     a0a:	82 ec       	ldi	r24, 0xC2	; 194
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	95 8b       	std	Z+21, r25	; 0x15
     a10:	84 8b       	std	Z+20, r24	; 0x14
     a12:	86 ec       	ldi	r24, 0xC6	; 198
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	97 8b       	std	Z+23, r25	; 0x17
     a18:	86 8b       	std	Z+22, r24	; 0x16
     a1a:	11 8e       	std	Z+25, r1	; 0x19
     a1c:	12 8e       	std	Z+26, r1	; 0x1a
     a1e:	13 8e       	std	Z+27, r1	; 0x1b
     a20:	14 8e       	std	Z+28, r1	; 0x1c
     a22:	08 95       	ret

00000a24 <initVariant>:
     a24:	08 95       	ret

00000a26 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a26:	0e 94 d6 06 	call	0xdac	; 0xdac <init>

	initVariant();
     a2a:	0e 94 12 05 	call	0xa24	; 0xa24 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     a2e:	0e 94 9a 00 	call	0x134	; 0x134 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a32:	c4 e8       	ldi	r28, 0x84	; 132
     a34:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     a36:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <loop>
		if (serialEventRun) serialEventRun();
     a3a:	20 97       	sbiw	r28, 0x00	; 0
     a3c:	e1 f3       	breq	.-8      	; 0xa36 <main+0x10>
     a3e:	0e 94 84 03 	call	0x708	; 0x708 <_Z14serialEventRunv>
     a42:	f9 cf       	rjmp	.-14     	; 0xa36 <main+0x10>

00000a44 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	6c 01       	movw	r12, r24
     a56:	7a 01       	movw	r14, r20
     a58:	8b 01       	movw	r16, r22
     a5a:	c0 e0       	ldi	r28, 0x00	; 0
     a5c:	d0 e0       	ldi	r29, 0x00	; 0
     a5e:	ce 15       	cp	r28, r14
     a60:	df 05       	cpc	r29, r15
     a62:	81 f0       	breq	.+32     	; 0xa84 <_ZN5Print5writeEPKhj+0x40>
     a64:	d8 01       	movw	r26, r16
     a66:	6d 91       	ld	r22, X+
     a68:	8d 01       	movw	r16, r26
     a6a:	d6 01       	movw	r26, r12
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	01 90       	ld	r0, Z+
     a72:	f0 81       	ld	r31, Z
     a74:	e0 2d       	mov	r30, r0
     a76:	c6 01       	movw	r24, r12
     a78:	09 95       	icall
     a7a:	89 2b       	or	r24, r25
     a7c:	11 f0       	breq	.+4      	; 0xa82 <_ZN5Print5writeEPKhj+0x3e>
     a7e:	21 96       	adiw	r28, 0x01	; 1
     a80:	ee cf       	rjmp	.-36     	; 0xa5e <_ZN5Print5writeEPKhj+0x1a>
     a82:	7e 01       	movw	r14, r28
     a84:	c7 01       	movw	r24, r14
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	08 95       	ret

00000a98 <_ZN5Print5writeEPKc>:
     a98:	61 15       	cp	r22, r1
     a9a:	71 05       	cpc	r23, r1
     a9c:	79 f0       	breq	.+30     	; 0xabc <_ZN5Print5writeEPKc+0x24>
     a9e:	fb 01       	movw	r30, r22
     aa0:	01 90       	ld	r0, Z+
     aa2:	00 20       	and	r0, r0
     aa4:	e9 f7       	brne	.-6      	; 0xaa0 <_ZN5Print5writeEPKc+0x8>
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	af 01       	movw	r20, r30
     aaa:	46 1b       	sub	r20, r22
     aac:	57 0b       	sbc	r21, r23
     aae:	dc 01       	movw	r26, r24
     ab0:	ed 91       	ld	r30, X+
     ab2:	fc 91       	ld	r31, X
     ab4:	02 80       	ldd	r0, Z+2	; 0x02
     ab6:	f3 81       	ldd	r31, Z+3	; 0x03
     ab8:	e0 2d       	mov	r30, r0
     aba:	09 94       	ijmp
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	08 95       	ret

00000ac2 <_ZN5Print5printEc>:
     ac2:	dc 01       	movw	r26, r24
     ac4:	ed 91       	ld	r30, X+
     ac6:	fc 91       	ld	r31, X
     ac8:	01 90       	ld	r0, Z+
     aca:	f0 81       	ld	r31, Z
     acc:	e0 2d       	mov	r30, r0
     ace:	09 94       	ijmp

00000ad0 <_ZN5Print7printlnEv>:
     ad0:	65 e4       	ldi	r22, 0x45	; 69
     ad2:	71 e0       	ldi	r23, 0x01	; 1
     ad4:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <_ZN5Print5writeEPKc>

00000ad8 <_ZN5Print7printlnEPKc>:
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN5Print5writeEPKc>
     ae6:	8c 01       	movw	r16, r24
     ae8:	ce 01       	movw	r24, r28
     aea:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN5Print7printlnEv>
     aee:	80 0f       	add	r24, r16
     af0:	91 1f       	adc	r25, r17
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <_ZN5Print11printNumberEmh>:
     afc:	8f 92       	push	r8
     afe:	9f 92       	push	r9
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	a1 97       	sbiw	r28, 0x21	; 33
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	7c 01       	movw	r14, r24
     b22:	fa 01       	movw	r30, r20
     b24:	cb 01       	movw	r24, r22
     b26:	19 a2       	std	Y+33, r1	; 0x21
     b28:	22 30       	cpi	r18, 0x02	; 2
     b2a:	08 f4       	brcc	.+2      	; 0xb2e <_ZN5Print11printNumberEmh+0x32>
     b2c:	2a e0       	ldi	r18, 0x0A	; 10
     b2e:	8e 01       	movw	r16, r28
     b30:	0f 5d       	subi	r16, 0xDF	; 223
     b32:	1f 4f       	sbci	r17, 0xFF	; 255
     b34:	82 2e       	mov	r8, r18
     b36:	91 2c       	mov	r9, r1
     b38:	a1 2c       	mov	r10, r1
     b3a:	b1 2c       	mov	r11, r1
     b3c:	bf 01       	movw	r22, r30
     b3e:	a5 01       	movw	r20, r10
     b40:	94 01       	movw	r18, r8
     b42:	0e 94 c8 11 	call	0x2390	; 0x2390 <__udivmodsi4>
     b46:	f9 01       	movw	r30, r18
     b48:	ca 01       	movw	r24, r20
     b4a:	01 50       	subi	r16, 0x01	; 1
     b4c:	11 09       	sbc	r17, r1
     b4e:	6a 30       	cpi	r22, 0x0A	; 10
     b50:	10 f4       	brcc	.+4      	; 0xb56 <_ZN5Print11printNumberEmh+0x5a>
     b52:	60 5d       	subi	r22, 0xD0	; 208
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <_ZN5Print11printNumberEmh+0x5c>
     b56:	69 5c       	subi	r22, 0xC9	; 201
     b58:	d8 01       	movw	r26, r16
     b5a:	6c 93       	st	X, r22
     b5c:	23 2b       	or	r18, r19
     b5e:	24 2b       	or	r18, r20
     b60:	25 2b       	or	r18, r21
     b62:	61 f7       	brne	.-40     	; 0xb3c <_ZN5Print11printNumberEmh+0x40>
     b64:	b8 01       	movw	r22, r16
     b66:	c7 01       	movw	r24, r14
     b68:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN5Print5writeEPKc>
     b6c:	a1 96       	adiw	r28, 0x21	; 33
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	bf 90       	pop	r11
     b86:	af 90       	pop	r10
     b88:	9f 90       	pop	r9
     b8a:	8f 90       	pop	r8
     b8c:	08 95       	ret

00000b8e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     b8e:	cf 92       	push	r12
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
  if (base == 0) {
     b9e:	21 15       	cp	r18, r1
     ba0:	31 05       	cpc	r19, r1
     ba2:	81 f4       	brne	.+32     	; 0xbc4 <_ZN5Print5printEli+0x36>
    return write(n);
     ba4:	dc 01       	movw	r26, r24
     ba6:	ed 91       	ld	r30, X+
     ba8:	fc 91       	ld	r31, X
     baa:	01 90       	ld	r0, Z+
     bac:	f0 81       	ld	r31, Z
     bae:	e0 2d       	mov	r30, r0
     bb0:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     bc2:	09 94       	ijmp
  } else if (base == 10) {
     bc4:	2a 30       	cpi	r18, 0x0A	; 10
     bc6:	31 05       	cpc	r19, r1
     bc8:	01 f5       	brne	.+64     	; 0xc0a <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     bca:	77 ff       	sbrs	r23, 7
     bcc:	1d c0       	rjmp	.+58     	; 0xc08 <_ZN5Print5printEli+0x7a>
     bce:	6a 01       	movw	r12, r20
     bd0:	7b 01       	movw	r14, r22
     bd2:	ec 01       	movw	r28, r24
      int t = print('-');
     bd4:	6d e2       	ldi	r22, 0x2D	; 45
     bd6:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN5Print5printEc>
     bda:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     bdc:	44 27       	eor	r20, r20
     bde:	55 27       	eor	r21, r21
     be0:	ba 01       	movw	r22, r20
     be2:	4c 19       	sub	r20, r12
     be4:	5d 09       	sbc	r21, r13
     be6:	6e 09       	sbc	r22, r14
     be8:	7f 09       	sbc	r23, r15
     bea:	2a e0       	ldi	r18, 0x0A	; 10
     bec:	ce 01       	movw	r24, r28
     bee:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZN5Print11printNumberEmh>
     bf2:	80 0f       	add	r24, r16
     bf4:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     c08:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     c1a:	0c 94 7e 05 	jmp	0xafc	; 0xafc <_ZN5Print11printNumberEmh>

00000c1e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     c1e:	9a 01       	movw	r18, r20
  return print((long) n, base);
     c20:	ab 01       	movw	r20, r22
     c22:	77 0f       	add	r23, r23
     c24:	66 0b       	sbc	r22, r22
     c26:	77 0b       	sbc	r23, r23
     c28:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <_ZN5Print5printEli>

00000c2c <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	af 93       	push	r26
     c40:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     c42:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <timer0_millis>
     c46:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <timer0_millis+0x1>
     c4a:	a0 91 b5 02 	lds	r26, 0x02B5	; 0x8002b5 <timer0_millis+0x2>
     c4e:	b0 91 b6 02 	lds	r27, 0x02B6	; 0x8002b6 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     c52:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     c56:	26 e0       	ldi	r18, 0x06	; 6
     c58:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     c5a:	2d 37       	cpi	r18, 0x7D	; 125
     c5c:	20 f4       	brcc	.+8      	; 0xc66 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     c5e:	02 96       	adiw	r24, 0x02	; 2
     c60:	a1 1d       	adc	r26, r1
     c62:	b1 1d       	adc	r27, r1
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     c66:	29 e8       	ldi	r18, 0x89	; 137
     c68:	23 0f       	add	r18, r19
		m += 1;
     c6a:	03 96       	adiw	r24, 0x03	; 3
     c6c:	a1 1d       	adc	r26, r1
     c6e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     c70:	20 93 b2 02 	sts	0x02B2, r18	; 0x8002b2 <timer0_fract>
	timer0_millis = m;
     c74:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <timer0_millis>
     c78:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <timer0_millis+0x1>
     c7c:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <timer0_millis+0x2>
     c80:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <timer0_millis+0x3>
	timer0_overflow_count++;
     c84:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <timer0_overflow_count>
     c88:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x1>
     c8c:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x2>
     c90:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <timer0_overflow_count+0x3>
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	a1 1d       	adc	r26, r1
     c98:	b1 1d       	adc	r27, r1
     c9a:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <timer0_overflow_count>
     c9e:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <timer0_overflow_count+0x1>
     ca2:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <timer0_overflow_count+0x2>
     ca6:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <timer0_overflow_count+0x3>
}
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	3f 91       	pop	r19
     cb4:	2f 91       	pop	r18
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     cc0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     cc2:	f8 94       	cli
	m = timer0_millis;
     cc4:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <timer0_millis>
     cc8:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <timer0_millis+0x1>
     ccc:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <timer0_millis+0x2>
     cd0:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <timer0_millis+0x3>
	SREG = oldSREG;
     cd4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     cd6:	08 95       	ret

00000cd8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     cd8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     cda:	f8 94       	cli
	m = timer0_overflow_count;
     cdc:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <timer0_overflow_count>
     ce0:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x1>
     ce4:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x2>
     ce8:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     cec:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     cee:	a8 9b       	sbis	0x15, 0	; 21
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <micros+0x24>
     cf2:	2f 3f       	cpi	r18, 0xFF	; 255
     cf4:	19 f0       	breq	.+6      	; 0xcfc <micros+0x24>
		m++;
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	a1 1d       	adc	r26, r1
     cfa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     cfc:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     cfe:	ba 2f       	mov	r27, r26
     d00:	a9 2f       	mov	r26, r25
     d02:	98 2f       	mov	r25, r24
     d04:	88 27       	eor	r24, r24
     d06:	82 0f       	add	r24, r18
     d08:	91 1d       	adc	r25, r1
     d0a:	a1 1d       	adc	r26, r1
     d0c:	b1 1d       	adc	r27, r1
     d0e:	bc 01       	movw	r22, r24
     d10:	cd 01       	movw	r24, r26
     d12:	43 e0       	ldi	r20, 0x03	; 3
     d14:	66 0f       	add	r22, r22
     d16:	77 1f       	adc	r23, r23
     d18:	88 1f       	adc	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	4a 95       	dec	r20
     d1e:	d1 f7       	brne	.-12     	; 0xd14 <micros+0x3c>
}
     d20:	08 95       	ret

00000d22 <delay>:

void delay(unsigned long ms)
{
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	6b 01       	movw	r12, r22
     d34:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     d36:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <micros>
     d3a:	4b 01       	movw	r8, r22
     d3c:	5c 01       	movw	r10, r24

	while (ms > 0) {
     d3e:	c1 14       	cp	r12, r1
     d40:	d1 04       	cpc	r13, r1
     d42:	e1 04       	cpc	r14, r1
     d44:	f1 04       	cpc	r15, r1
     d46:	01 f1       	breq	.+64     	; 0xd88 <delay+0x66>
		yield();
     d48:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     d4c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <micros>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	88 19       	sub	r24, r8
     d56:	99 09       	sbc	r25, r9
     d58:	aa 09       	sbc	r26, r10
     d5a:	bb 09       	sbc	r27, r11
     d5c:	88 3e       	cpi	r24, 0xE8	; 232
     d5e:	93 40       	sbci	r25, 0x03	; 3
     d60:	a1 05       	cpc	r26, r1
     d62:	b1 05       	cpc	r27, r1
     d64:	60 f3       	brcs	.-40     	; 0xd3e <delay+0x1c>
			ms--;
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	c2 1a       	sub	r12, r18
     d6a:	d1 08       	sbc	r13, r1
     d6c:	e1 08       	sbc	r14, r1
     d6e:	f1 08       	sbc	r15, r1
			start += 1000;
     d70:	88 ee       	ldi	r24, 0xE8	; 232
     d72:	88 0e       	add	r8, r24
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	98 1e       	adc	r9, r24
     d78:	a1 1c       	adc	r10, r1
     d7a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     d7c:	c1 14       	cp	r12, r1
     d7e:	d1 04       	cpc	r13, r1
     d80:	e1 04       	cpc	r14, r1
     d82:	f1 04       	cpc	r15, r1
     d84:	19 f7       	brne	.-58     	; 0xd4c <delay+0x2a>
     d86:	db cf       	rjmp	.-74     	; 0xd3e <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	df 90       	pop	r13
     d8e:	cf 90       	pop	r12
     d90:	bf 90       	pop	r11
     d92:	af 90       	pop	r10
     d94:	9f 90       	pop	r9
     d96:	8f 90       	pop	r8
     d98:	08 95       	ret

00000d9a <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
     d9a:	83 30       	cpi	r24, 0x03	; 3
     d9c:	91 05       	cpc	r25, r1
     d9e:	28 f0       	brcs	.+10     	; 0xdaa <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
     da4:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <delayMicroseconds+0xc>
     daa:	08 95       	ret

00000dac <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     dac:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     dae:	84 b5       	in	r24, 0x24	; 36
     db0:	82 60       	ori	r24, 0x02	; 2
     db2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     db4:	84 b5       	in	r24, 0x24	; 36
     db6:	81 60       	ori	r24, 0x01	; 1
     db8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     dba:	85 b5       	in	r24, 0x25	; 37
     dbc:	82 60       	ori	r24, 0x02	; 2
     dbe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     dc0:	85 b5       	in	r24, 0x25	; 37
     dc2:	81 60       	ori	r24, 0x01	; 1
     dc4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     dc6:	ee e6       	ldi	r30, 0x6E	; 110
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	81 60       	ori	r24, 0x01	; 1
     dce:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     dd0:	e1 e8       	ldi	r30, 0x81	; 129
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     dd6:	80 81       	ld	r24, Z
     dd8:	82 60       	ori	r24, 0x02	; 2
     dda:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ddc:	80 81       	ld	r24, Z
     dde:	81 60       	ori	r24, 0x01	; 1
     de0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     de2:	e0 e8       	ldi	r30, 0x80	; 128
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	81 60       	ori	r24, 0x01	; 1
     dea:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     dec:	e1 eb       	ldi	r30, 0xB1	; 177
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	84 60       	ori	r24, 0x04	; 4
     df4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     df6:	e0 eb       	ldi	r30, 0xB0	; 176
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	81 60       	ori	r24, 0x01	; 1
     dfe:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e00:	ea e7       	ldi	r30, 0x7A	; 122
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	84 60       	ori	r24, 0x04	; 4
     e08:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e0a:	80 81       	ld	r24, Z
     e0c:	82 60       	ori	r24, 0x02	; 2
     e0e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
     e10:	80 81       	ld	r24, Z
     e12:	8e 7f       	andi	r24, 0xFE	; 254
     e14:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e16:	80 81       	ld	r24, Z
     e18:	80 68       	ori	r24, 0x80	; 128
     e1a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e1c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     e20:	08 95       	ret

00000e22 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	81 f0       	breq	.+32     	; 0xe46 <turnOffPWM+0x24>
     e26:	28 f4       	brcc	.+10     	; 0xe32 <turnOffPWM+0x10>
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	99 f0       	breq	.+38     	; 0xe52 <turnOffPWM+0x30>
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	a1 f0       	breq	.+40     	; 0xe58 <turnOffPWM+0x36>
     e30:	08 95       	ret
     e32:	87 30       	cpi	r24, 0x07	; 7
     e34:	a9 f0       	breq	.+42     	; 0xe60 <turnOffPWM+0x3e>
     e36:	88 30       	cpi	r24, 0x08	; 8
     e38:	b9 f0       	breq	.+46     	; 0xe68 <turnOffPWM+0x46>
     e3a:	84 30       	cpi	r24, 0x04	; 4
     e3c:	d1 f4       	brne	.+52     	; 0xe72 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     e3e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     e42:	8f 7d       	andi	r24, 0xDF	; 223
     e44:	03 c0       	rjmp	.+6      	; 0xe4c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     e46:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     e4a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     e4c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     e50:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     e52:	84 b5       	in	r24, 0x24	; 36
     e54:	8f 77       	andi	r24, 0x7F	; 127
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     e58:	84 b5       	in	r24, 0x24	; 36
     e5a:	8f 7d       	andi	r24, 0xDF	; 223
     e5c:	84 bd       	out	0x24, r24	; 36
     e5e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     e60:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     e64:	8f 77       	andi	r24, 0x7F	; 127
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     e68:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     e6c:	8f 7d       	andi	r24, 0xDF	; 223
     e6e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     e72:	08 95       	ret

00000e74 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	fc 01       	movw	r30, r24
     e7c:	e4 58       	subi	r30, 0x84	; 132
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     e82:	fc 01       	movw	r30, r24
     e84:	e0 57       	subi	r30, 0x70	; 112
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     e8a:	88 23       	and	r24, r24
     e8c:	61 f1       	breq	.+88     	; 0xee6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	fc 01       	movw	r30, r24
     e96:	e2 55       	subi	r30, 0x52	; 82
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	c5 91       	lpm	r28, Z+
     e9c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     e9e:	fc 01       	movw	r30, r24
     ea0:	ec 55       	subi	r30, 0x5C	; 92
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	a5 91       	lpm	r26, Z+
     ea6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     ea8:	61 11       	cpse	r22, r1
     eaa:	09 c0       	rjmp	.+18     	; 0xebe <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     eac:	9f b7       	in	r25, 0x3f	; 63
                cli();
     eae:	f8 94       	cli
		*reg &= ~bit;
     eb0:	88 81       	ld	r24, Y
     eb2:	20 95       	com	r18
     eb4:	82 23       	and	r24, r18
     eb6:	88 83       	st	Y, r24
		*out &= ~bit;
     eb8:	ec 91       	ld	r30, X
     eba:	2e 23       	and	r18, r30
     ebc:	0b c0       	rjmp	.+22     	; 0xed4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     ebe:	62 30       	cpi	r22, 0x02	; 2
     ec0:	61 f4       	brne	.+24     	; 0xeda <pinMode+0x66>
		uint8_t oldSREG = SREG;
     ec2:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ec4:	f8 94       	cli
		*reg &= ~bit;
     ec6:	88 81       	ld	r24, Y
     ec8:	32 2f       	mov	r19, r18
     eca:	30 95       	com	r19
     ecc:	83 23       	and	r24, r19
     ece:	88 83       	st	Y, r24
		*out |= bit;
     ed0:	ec 91       	ld	r30, X
     ed2:	2e 2b       	or	r18, r30
     ed4:	2c 93       	st	X, r18
		SREG = oldSREG;
     ed6:	9f bf       	out	0x3f, r25	; 63
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     eda:	8f b7       	in	r24, 0x3f	; 63
                cli();
     edc:	f8 94       	cli
		*reg |= bit;
     ede:	e8 81       	ld	r30, Y
     ee0:	2e 2b       	or	r18, r30
     ee2:	28 83       	st	Y, r18
		SREG = oldSREG;
     ee4:	8f bf       	out	0x3f, r24	; 63
	}
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	f9 01       	movw	r30, r18
     ef8:	e8 59       	subi	r30, 0x98	; 152
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     efe:	f9 01       	movw	r30, r18
     f00:	e4 58       	subi	r30, 0x84	; 132
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f06:	f9 01       	movw	r30, r18
     f08:	e0 57       	subi	r30, 0x70	; 112
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f0e:	cc 23       	and	r28, r28
     f10:	c1 f0       	breq	.+48     	; 0xf42 <digitalWrite+0x56>
     f12:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f14:	81 11       	cpse	r24, r1
     f16:	0e 94 11 07 	call	0xe22	; 0xe22 <turnOffPWM>

	out = portOutputRegister(port);
     f1a:	ec 2f       	mov	r30, r28
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ec 55       	subi	r30, 0x5C	; 92
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	a5 91       	lpm	r26, Z+
     f28:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     f2a:	9f b7       	in	r25, 0x3f	; 63
	cli();
     f2c:	f8 94       	cli

	if (val == LOW) {
     f2e:	11 11       	cpse	r17, r1
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <digitalWrite+0x4e>
		*out &= ~bit;
     f32:	8c 91       	ld	r24, X
     f34:	d0 95       	com	r29
     f36:	d8 23       	and	r29, r24
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <digitalWrite+0x52>
	} else {
		*out |= bit;
     f3a:	ec 91       	ld	r30, X
     f3c:	de 2b       	or	r29, r30
     f3e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     f40:	9f bf       	out	0x3f, r25	; 63
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <_ZN6CC1101C1Ev>:
 */
void CC1101::wakeUp(void)
{
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  cc1101_Deselect();                    // Deselect CC1101
     f4a:	fc 01       	movw	r30, r24
     f4c:	13 82       	std	Z+3, r1	; 0x03
     f4e:	15 82       	std	Z+5, r1	; 0x05
     f50:	85 eb       	ldi	r24, 0xB5	; 181
     f52:	86 83       	std	Z+6, r24	; 0x06
     f54:	87 e4       	ldi	r24, 0x47	; 71
     f56:	87 83       	std	Z+7, r24	; 0x07
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	80 87       	std	Z+8, r24	; 0x08
     f5c:	11 82       	std	Z+1, r1	; 0x01
     f5e:	08 95       	ret

00000f60 <_ZN6CC11018writeRegEhh>:
 * 
 * 'regAddr'	Register address
 * 'value'	Value to be writen
 */
void CC1101::writeReg(byte regAddr, byte value) 
{
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	ec 01       	movw	r28, r24
     f68:	14 2f       	mov	r17, r20
  cc1101_Select();                      // Select CC1101
     f6a:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     f6c:	1c 99       	sbic	0x03, 4	; 3
     f6e:	fe cf       	rjmp	.-4      	; 0xf6c <_ZN6CC11018writeRegEhh+0xc>
  spi.send(regAddr);                    // Send register address
     f70:	ce 01       	movw	r24, r28
     f72:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
  spi.send(value);                      // Send value
     f76:	61 2f       	mov	r22, r17
     f78:	ce 01       	movw	r24, r28
     f7a:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
     f7e:	2a 9a       	sbi	0x05, 2	; 5
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	08 95       	ret

00000f88 <_ZN6CC110113writeBurstRegEhPhh>:
 * 'regAddr'	Register address
 * 'buffer'	Data to be writen
 * 'len'	Data length
 */
void CC1101::writeBurstReg(byte regAddr, byte* buffer, byte len)
{
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	8c 01       	movw	r16, r24
     f98:	d4 2e       	mov	r13, r20
     f9a:	e5 2e       	mov	r14, r21
     f9c:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
     f9e:	60 64       	ori	r22, 0x40	; 64
  cc1101_Select();                      // Select CC1101
     fa0:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     fa2:	1c 99       	sbic	0x03, 4	; 3
     fa4:	fe cf       	rjmp	.-4      	; 0xfa2 <_ZN6CC110113writeBurstRegEhPhh+0x1a>
  spi.send(addr);                       // Send register address
     fa6:	c8 01       	movw	r24, r16
     fa8:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
     fac:	cd 2d       	mov	r28, r13
     fae:	de 2d       	mov	r29, r14
     fb0:	ce 01       	movw	r24, r28
     fb2:	8f 0d       	add	r24, r15
     fb4:	91 1d       	adc	r25, r1
     fb6:	7c 01       	movw	r14, r24
  
  for(i=0 ; i<len ; i++)
     fb8:	ce 15       	cp	r28, r14
     fba:	df 05       	cpc	r29, r15
     fbc:	29 f0       	breq	.+10     	; 0xfc8 <_ZN6CC110113writeBurstRegEhPhh+0x40>
    spi.send(buffer[i]);                // Send value
     fbe:	69 91       	ld	r22, Y+
     fc0:	c8 01       	movw	r24, r16
     fc2:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  
  for(i=0 ; i<len ; i++)
     fc6:	f8 cf       	rjmp	.-16     	; 0xfb8 <_ZN6CC110113writeBurstRegEhPhh+0x30>
    spi.send(buffer[i]);                // Send value

  cc1101_Deselect();                    // Deselect CC1101  
     fc8:	2a 9a       	sbi	0x05, 2	; 5
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	08 95       	ret

00000fda <_ZN6CC11019cmdStrobeEh>:
 * 
 * 'cmd'	Command strobe
 */     
void CC1101::cmdStrobe(byte cmd) 
{
  cc1101_Select();                      // Select CC1101
     fda:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     fdc:	1c 99       	sbic	0x03, 4	; 3
     fde:	fe cf       	rjmp	.-4      	; 0xfdc <_ZN6CC11019cmdStrobeEh+0x2>
  spi.send(cmd);                        // Send strobe command
     fe0:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
     fe4:	2a 9a       	sbi	0x05, 2	; 5
     fe6:	08 95       	ret

00000fe8 <_ZN6CC11017readRegEhh>:
 * 
 * Return:
 * 	Data byte returned by the CC1101 IC
 */
byte CC1101::readReg(byte regAddr, byte regType)
{
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
  byte addr, val;

  addr = regAddr | regType;
     fee:	64 2b       	or	r22, r20
  cc1101_Select();                      // Select CC1101
     ff0:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     ff2:	1c 99       	sbic	0x03, 4	; 3
     ff4:	fe cf       	rjmp	.-4      	; 0xff2 <_ZN6CC11017readRegEhh+0xa>
  spi.send(addr);                       // Send register address
     ff6:	ce 01       	movw	r24, r28
     ff8:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
  val = spi.send(0x00);                 // Read result
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
    1004:	2a 9a       	sbi	0x05, 2	; 5

  return val;
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <_ZN6CC110112readBurstRegEPhhh>:
 * 'buffer'	Buffer where to copy the result to
 * 'regAddr'	Register address
 * 'len'	Data length
 */
void CC1101::readBurstReg(byte * buffer, byte regAddr, byte len) 
{
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	8c 01       	movw	r16, r24
    101c:	d6 2e       	mov	r13, r22
    101e:	e7 2e       	mov	r14, r23
    1020:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | READ_BURST;
    1022:	64 2f       	mov	r22, r20
    1024:	60 6c       	ori	r22, 0xC0	; 192
  cc1101_Select();                      // Select CC1101
    1026:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    1028:	1c 99       	sbic	0x03, 4	; 3
    102a:	fe cf       	rjmp	.-4      	; 0x1028 <_ZN6CC110112readBurstRegEPhhh+0x1c>
  spi.send(addr);                       // Send register address
    102c:	c8 01       	movw	r24, r16
    102e:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
    1032:	cd 2d       	mov	r28, r13
    1034:	de 2d       	mov	r29, r14
    1036:	ce 01       	movw	r24, r28
    1038:	8f 0d       	add	r24, r15
    103a:	91 1d       	adc	r25, r1
    103c:	7c 01       	movw	r14, r24
  for(i=0 ; i<len ; i++)
    103e:	ce 15       	cp	r28, r14
    1040:	df 05       	cpc	r29, r15
    1042:	31 f0       	breq	.+12     	; 0x1050 <_ZN6CC110112readBurstRegEPhhh+0x44>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	c8 01       	movw	r24, r16
    1048:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
    104c:	89 93       	st	Y+, r24
  
  addr = regAddr | READ_BURST;
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  for(i=0 ; i<len ; i++)
    104e:	f7 cf       	rjmp	.-18     	; 0x103e <_ZN6CC110112readBurstRegEPhhh+0x32>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
  cc1101_Deselect();                    // Deselect CC1101
    1050:	2a 9a       	sbi	0x05, 2	; 5
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	08 95       	ret

00001062 <_ZN6CC110111setSyncWordEhh>:
 * 
 * 'syncH'	Synchronization word - High byte
 * 'syncL'	Synchronization word - Low byte
 */
void CC1101::setSyncWord(uint8_t syncH, uint8_t syncL) 
{
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	06 2f       	mov	r16, r22
    106e:	14 2f       	mov	r17, r20
  writeReg(CC1101_SYNC1, syncH);
    1070:	46 2f       	mov	r20, r22
    1072:	64 e0       	ldi	r22, 0x04	; 4
    1074:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_SYNC0, syncL);
    1078:	41 2f       	mov	r20, r17
    107a:	65 e0       	ldi	r22, 0x05	; 5
    107c:	ce 01       	movw	r24, r28
    107e:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  syncWord[0] = syncH;
    1082:	0e 83       	std	Y+6, r16	; 0x06
  syncWord[1] = syncL;
    1084:	1f 83       	std	Y+7, r17	; 0x07
}
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <_ZN6CC110111setSyncWordEPh>:
 * 
 * 'syncH'	Synchronization word - pointer to 2-byte array
 */
void CC1101::setSyncWord(byte *sync) 
{
  CC1101::setSyncWord(sync[0], sync[1]);
    1090:	fb 01       	movw	r30, r22
    1092:	41 81       	ldd	r20, Z+1	; 0x01
    1094:	60 81       	ld	r22, Z
    1096:	0c 94 31 08 	jmp	0x1062	; 0x1062 <_ZN6CC110111setSyncWordEhh>

0000109a <_ZN6CC110113setDevAddressEh>:
 * Set device address
 * 
 * @param addr	Device address
 */
void CC1101::setDevAddress(byte addr) 
{
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	ec 01       	movw	r28, r24
    10a2:	16 2f       	mov	r17, r22
  writeReg(CC1101_ADDR, addr);
    10a4:	46 2f       	mov	r20, r22
    10a6:	69 e0       	ldi	r22, 0x09	; 9
    10a8:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  devAddress = addr;
    10ac:	18 87       	std	Y+8, r17	; 0x08
}
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	08 95       	ret

000010b6 <_ZN6CC110110setChannelEh>:
 * Set frequency channel
 * 
 * 'chnl'	Frequency channel
 */
void CC1101::setChannel(byte chnl) 
{
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	ec 01       	movw	r28, r24
    10be:	16 2f       	mov	r17, r22
  writeReg(CC1101_CHANNR,  chnl);
    10c0:	46 2f       	mov	r20, r22
    10c2:	6a e0       	ldi	r22, 0x0A	; 10
    10c4:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  channel = chnl;
    10c8:	1d 83       	std	Y+5, r17	; 0x05
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	08 95       	ret

000010d2 <_ZN6CC110114setCarrierFreqEh>:
 * Set carrier frequency
 * 
 * 'freq'	New carrier frequency
 */
void CC1101::setCarrierFreq(byte freq)
{
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	ec 01       	movw	r28, r24
    10da:	16 2f       	mov	r17, r22
  switch(freq)
    10dc:	62 30       	cpi	r22, 0x02	; 2
    10de:	79 f0       	breq	.+30     	; 0x10fe <_ZN6CC110114setCarrierFreqEh+0x2c>
    10e0:	63 30       	cpi	r22, 0x03	; 3
    10e2:	c1 f0       	breq	.+48     	; 0x1114 <_ZN6CC110114setCarrierFreqEh+0x42>
    10e4:	61 30       	cpi	r22, 0x01	; 1
    10e6:	09 f5       	brne	.+66     	; 0x112a <_ZN6CC110114setCarrierFreqEh+0x58>
  {
    case CFREQ_915:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_915);
    10e8:	42 e2       	ldi	r20, 0x22	; 34
    10ea:	6d e0       	ldi	r22, 0x0D	; 13
    10ec:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_915);
    10f0:	41 eb       	ldi	r20, 0xB1	; 177
    10f2:	6e e0       	ldi	r22, 0x0E	; 14
    10f4:	ce 01       	movw	r24, r28
    10f6:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_915);
    10fa:	4b e3       	ldi	r20, 0x3B	; 59
    10fc:	20 c0       	rjmp	.+64     	; 0x113e <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_433:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_433);
    10fe:	40 e1       	ldi	r20, 0x10	; 16
    1100:	6d e0       	ldi	r22, 0x0D	; 13
    1102:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_433);
    1106:	47 ea       	ldi	r20, 0xA7	; 167
    1108:	6e e0       	ldi	r22, 0x0E	; 14
    110a:	ce 01       	movw	r24, r28
    110c:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_433);
    1110:	42 e6       	ldi	r20, 0x62	; 98
    1112:	15 c0       	rjmp	.+42     	; 0x113e <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_918:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_918);
    1114:	43 e2       	ldi	r20, 0x23	; 35
    1116:	6d e0       	ldi	r22, 0x0D	; 13
    1118:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_918);
    111c:	4e e4       	ldi	r20, 0x4E	; 78
    111e:	6e e0       	ldi	r22, 0x0E	; 14
    1120:	ce 01       	movw	r24, r28
    1122:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_918);
    1126:	44 ec       	ldi	r20, 0xC4	; 196
    1128:	0a c0       	rjmp	.+20     	; 0x113e <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    default:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_868);
    112a:	41 e2       	ldi	r20, 0x21	; 33
    112c:	6d e0       	ldi	r22, 0x0D	; 13
    112e:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_868);
    1132:	42 e6       	ldi	r20, 0x62	; 98
    1134:	6e e0       	ldi	r22, 0x0E	; 14
    1136:	ce 01       	movw	r24, r28
    1138:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_868);
    113c:	46 e7       	ldi	r20, 0x76	; 118
    113e:	6f e0       	ldi	r22, 0x0F	; 15
    1140:	ce 01       	movw	r24, r28
    1142:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
      break;
  }
   
  carrierFreq = freq;  
    1146:	1b 83       	std	Y+3, r17	; 0x03
}
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	08 95       	ret

00001150 <_ZN6CC11018enablePAEv>:
 *
 * Enable PA and disable LNA on the LD-Board
 */
void CC1101::enablePA(void)
{
 digitalWrite(PA_EN, HIGH);
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	83 e0       	ldi	r24, 0x03	; 3
    1154:	0e 94 76 07 	call	0xeec	; 0xeec <digitalWrite>
 digitalWrite(LNA_EN, LOW);
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	0c 94 76 07 	jmp	0xeec	; 0xeec <digitalWrite>

00001160 <_ZN6CC110110setTxStateEv>:
 * setTxState
 * 
 * Enter Tx state
 */
void CC1101::setTxState(void)
{
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ec 01       	movw	r28, r24
  // Enable PA on LD-board if any
  if (hgmEnabled)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	88 23       	and	r24, r24
    116a:	19 f0       	breq	.+6      	; 0x1172 <_ZN6CC110110setTxStateEv+0x12>
    enablePA();
    116c:	ce 01       	movw	r24, r28
    116e:	0e 94 a8 08 	call	0x1150	; 0x1150 <_ZN6CC11018enablePAEv>

  cmdStrobe(CC1101_STX);
    1172:	65 e3       	ldi	r22, 0x35	; 53
    1174:	ce 01       	movw	r24, r28
    1176:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_TX;
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	8a 83       	std	Y+2, r24	; 0x02
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <_ZN6CC11019enableLNAEv>:
 *
 * Enable LNA and disable PA on the LD-Board
 */
void CC1101::enableLNA(void)
{
 digitalWrite(LNA_EN, HIGH);
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	84 e0       	ldi	r24, 0x04	; 4
    1188:	0e 94 76 07 	call	0xeec	; 0xeec <digitalWrite>
 digitalWrite(PA_EN, LOW);
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	0c 94 76 07 	jmp	0xeec	; 0xeec <digitalWrite>

00001194 <_ZN6CC110110setRxStateEv>:
 * setRxState
 * 
 * Enter Rx state
 */
void CC1101::setRxState(void)
{
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ec 01       	movw	r28, r24
  cmdStrobe(CC1101_SRX);
    119a:	64 e3       	ldi	r22, 0x34	; 52
    119c:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_RX;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	8a 83       	std	Y+2, r24	; 0x02

  // Enable LNA on LD-board if any
  if (hgmEnabled)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	88 23       	and	r24, r24
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <_ZN6CC110110setRxStateEv+0x20>
    enableLNA();
    11aa:	ce 01       	movw	r24, r28
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
  cmdStrobe(CC1101_SRX);
  rfState = RFSTATE_RX;

  // Enable LNA on LD-board if any
  if (hgmEnabled)
    enableLNA();
    11b0:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <_ZN6CC11019enableLNAEv>
}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <_ZN6CC11018sendDataE8CCPACKET>:
 *  Return:
 *    True if the transmission succeeds
 *    False otherwise
 */
bool CC1101::sendData(CCPACKET packet)
{
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	8c 01       	movw	r16, r24
  byte marcState;
  bool res = false;
 
  // Declare to be in Tx state. This will avoid receiving packets whilst
  // transmitting
  rfState = RFSTATE_TX;
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	f8 01       	movw	r30, r16
    11ce:	82 83       	std	Z+2, r24	; 0x02

  // Enter RX state
  setRxState();
    11d0:	c8 01       	movw	r24, r16
    11d2:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN6CC110110setRxStateEv>

  // Check that the RX state has been entered
  while (((marcState = readStatusReg(CC1101_MARCSTATE)) & 0x1F) != 0x0D)
    11d6:	40 ec       	ldi	r20, 0xC0	; 192
    11d8:	65 e3       	ldi	r22, 0x35	; 53
    11da:	c8 01       	movw	r24, r16
    11dc:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6CC11017readRegEhh>
    11e0:	98 2f       	mov	r25, r24
    11e2:	9f 71       	andi	r25, 0x1F	; 31
    11e4:	9d 30       	cpi	r25, 0x0D	; 13
    11e6:	39 f0       	breq	.+14     	; 0x11f6 <_ZN6CC11018sendDataE8CCPACKET+0x3c>
  {
    if (marcState == 0x11)        // RX_OVERFLOW
    11e8:	81 31       	cpi	r24, 0x11	; 17
    11ea:	a9 f7       	brne	.-22     	; 0x11d6 <_ZN6CC11018sendDataE8CCPACKET+0x1c>
      flushRxFifo();              // flush receive queue
    11ec:	6a e3       	ldi	r22, 0x3A	; 58
    11ee:	c8 01       	movw	r24, r16
    11f0:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6CC11019cmdStrobeEh>
    11f4:	f0 cf       	rjmp	.-32     	; 0x11d6 <_ZN6CC11018sendDataE8CCPACKET+0x1c>
  }

  delayMicroseconds(500);
    11f6:	84 ef       	ldi	r24, 0xF4	; 244
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 cd 06 	call	0xd9a	; 0xd9a <delayMicroseconds>

  if (packet.length > 0)
    11fe:	48 85       	ldd	r20, Y+8	; 0x08
    1200:	44 23       	and	r20, r20
    1202:	79 f0       	breq	.+30     	; 0x1222 <_ZN6CC11018sendDataE8CCPACKET+0x68>
  {
    // Set data length at the first position of the TX FIFO
    writeReg(CC1101_TXFIFO,  packet.length);
    1204:	6f e3       	ldi	r22, 0x3F	; 63
    1206:	c8 01       	movw	r24, r16
    1208:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
    // Write data into the TX FIFO
    writeBurstReg(CC1101_TXFIFO, packet.data, packet.length);
    120c:	28 85       	ldd	r18, Y+8	; 0x08
    120e:	ae 01       	movw	r20, r28
    1210:	47 5f       	subi	r20, 0xF7	; 247
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
    1214:	6f e3       	ldi	r22, 0x3F	; 63
    1216:	c8 01       	movw	r24, r16
    1218:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN6CC110113writeBurstRegEhPhh>

    // CCA enabled: will enter TX state only if the channel is clear
    setTxState();
    121c:	c8 01       	movw	r24, r16
    121e:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN6CC110110setTxStateEv>
  }

  // Check that TX state is being entered (state = RXTX_SETTLING)
  marcState = readStatusReg(CC1101_MARCSTATE) & 0x1F;
    1222:	40 ec       	ldi	r20, 0xC0	; 192
    1224:	65 e3       	ldi	r22, 0x35	; 53
    1226:	c8 01       	movw	r24, r16
    1228:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6CC11017readRegEhh>
  if((marcState != 0x13) && (marcState != 0x14) && (marcState != 0x15))
    122c:	8f 71       	andi	r24, 0x1F	; 31
    122e:	83 51       	subi	r24, 0x13	; 19
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	80 f0       	brcs	.+32     	; 0x1254 <_ZN6CC11018sendDataE8CCPACKET+0x9a>
  {
    setIdleState();       // Enter IDLE state
    1234:	66 e3       	ldi	r22, 0x36	; 54
    1236:	c8 01       	movw	r24, r16
    1238:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6CC11019cmdStrobeEh>
    flushTxFifo();        // Flush Tx FIFO
    123c:	6b e3       	ldi	r22, 0x3B	; 59
    123e:	c8 01       	movw	r24, r16
    1240:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6CC11019cmdStrobeEh>
    setRxState();         // Back to RX state
    1244:	c8 01       	movw	r24, r16
    1246:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN6CC110110setRxStateEv>

    // Declare to be in Rx state
    rfState = RFSTATE_RX;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	f8 01       	movw	r30, r16
    124e:	82 83       	std	Z+2, r24	; 0x02
    return false;
    1250:	f1 2c       	mov	r15, r1
    1252:	1c c0       	rjmp	.+56     	; 0x128c <_ZN6CC11018sendDataE8CCPACKET+0xd2>
  }

  // Wait for the sync word to be transmitted
  wait_GDO0_high();
    1254:	4a 9b       	sbis	0x09, 2	; 9
    1256:	fe cf       	rjmp	.-4      	; 0x1254 <_ZN6CC11018sendDataE8CCPACKET+0x9a>

  // Wait until the end of the packet transmission
  wait_GDO0_low();
    1258:	4a 99       	sbic	0x09, 2	; 9
    125a:	fe cf       	rjmp	.-4      	; 0x1258 <_ZN6CC11018sendDataE8CCPACKET+0x9e>

  // Check that the TX FIFO is empty
  if((readStatusReg(CC1101_TXBYTES) & 0x7F) == 0)
    125c:	40 ec       	ldi	r20, 0xC0	; 192
    125e:	6a e3       	ldi	r22, 0x3A	; 58
    1260:	c8 01       	movw	r24, r16
    1262:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6CC11017readRegEhh>
    1266:	8f 77       	andi	r24, 0x7F	; 127
    1268:	ff 24       	eor	r15, r15
    126a:	f3 94       	inc	r15
    126c:	81 11       	cpse	r24, r1
    126e:	f1 2c       	mov	r15, r1
    res = true;

  setIdleState();       // Enter IDLE state
    1270:	66 e3       	ldi	r22, 0x36	; 54
    1272:	c8 01       	movw	r24, r16
    1274:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6CC11019cmdStrobeEh>
  flushTxFifo();        // Flush Tx FIFO
    1278:	6b e3       	ldi	r22, 0x3B	; 59
    127a:	c8 01       	movw	r24, r16
    127c:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6CC11019cmdStrobeEh>

  // Enter back into RX state
  setRxState();
    1280:	c8 01       	movw	r24, r16
    1282:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN6CC110110setRxStateEv>

  // Declare to be in Rx state
  rfState = RFSTATE_RX;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	f8 01       	movw	r30, r16
    128a:	82 83       	std	Z+2, r24	; 0x02

  return res;
}
    128c:	8f 2d       	mov	r24, r15
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	08 95       	ret

0000129a <_ZN6CC11019setCCregsEv>:
 * setCCregs
 * 
 * Configure CC1101 registers
 */
void CC1101::setCCregs(void) 
{
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	c1 54       	subi	r28, 0x41	; 65
    12a8:	d1 09       	sbc	r29, r1
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	8c 01       	movw	r16, r24
  writeReg(CC1101_IOCFG2,  CC1101_DEFVAL_IOCFG2);
    12b6:	4e e2       	ldi	r20, 0x2E	; 46
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG1,  CC1101_DEFVAL_IOCFG1);
    12be:	4e e2       	ldi	r20, 0x2E	; 46
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	c8 01       	movw	r24, r16
    12c4:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG0,  CC1101_DEFVAL_IOCFG0);
    12c8:	46 e0       	ldi	r20, 0x06	; 6
    12ca:	62 e0       	ldi	r22, 0x02	; 2
    12cc:	c8 01       	movw	r24, r16
    12ce:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FIFOTHR,  CC1101_DEFVAL_FIFOTHR);
    12d2:	47 e0       	ldi	r20, 0x07	; 7
    12d4:	63 e0       	ldi	r22, 0x03	; 3
    12d6:	c8 01       	movw	r24, r16
    12d8:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTLEN,  CC1101_DEFVAL_PKTLEN);
    12dc:	4d e3       	ldi	r20, 0x3D	; 61
    12de:	66 e0       	ldi	r22, 0x06	; 6
    12e0:	c8 01       	movw	r24, r16
    12e2:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL1,  CC1101_DEFVAL_PKTCTRL1);
    12e6:	46 e0       	ldi	r20, 0x06	; 6
    12e8:	67 e0       	ldi	r22, 0x07	; 7
    12ea:	c8 01       	movw	r24, r16
    12ec:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL0,  CC1101_DEFVAL_PKTCTRL0);
    12f0:	45 e0       	ldi	r20, 0x05	; 5
    12f2:	68 e0       	ldi	r22, 0x08	; 8
    12f4:	c8 01       	movw	r24, r16
    12f6:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>

  // Set default synchronization word
  setSyncWord(syncWord);
    12fa:	b8 01       	movw	r22, r16
    12fc:	6a 5f       	subi	r22, 0xFA	; 250
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	c8 01       	movw	r24, r16
    1302:	0e 94 48 08 	call	0x1090	; 0x1090 <_ZN6CC110111setSyncWordEPh>

  // Set default device address
  setDevAddress(devAddress);
    1306:	f8 01       	movw	r30, r16
    1308:	60 85       	ldd	r22, Z+8	; 0x08
    130a:	c8 01       	movw	r24, r16
    130c:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN6CC110113setDevAddressEh>

  // Set default frequency channel
  setChannel(channel);
    1310:	f8 01       	movw	r30, r16
    1312:	65 81       	ldd	r22, Z+5	; 0x05
    1314:	c8 01       	movw	r24, r16
    1316:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN6CC110110setChannelEh>
  
  writeReg(CC1101_FSCTRL1,  CC1101_DEFVAL_FSCTRL1);
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	6b e0       	ldi	r22, 0x0B	; 11
    131e:	c8 01       	movw	r24, r16
    1320:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCTRL0,  CC1101_DEFVAL_FSCTRL0);
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	6c e0       	ldi	r22, 0x0C	; 12
    1328:	c8 01       	movw	r24, r16
    132a:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>

  // Set default carrier frequency = 868 MHz
  setCarrierFreq(carrierFreq);
    132e:	f8 01       	movw	r30, r16
    1330:	63 81       	ldd	r22, Z+3	; 0x03
    1332:	c8 01       	movw	r24, r16
    1334:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN6CC110114setCarrierFreqEh>

  // RF speed
  if (workMode == MODE_LOW_SPEED)
    1338:	f8 01       	movw	r30, r16
    133a:	84 81       	ldd	r24, Z+4	; 0x04
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	11 f4       	brne	.+4      	; 0x1344 <_ZN6CC11019setCCregsEv+0xaa>
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_4800);
    1340:	47 ec       	ldi	r20, 0xC7	; 199
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <_ZN6CC11019setCCregsEv+0xac>
  else
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_38400);
    1344:	4a ec       	ldi	r20, 0xCA	; 202
    1346:	60 e1       	ldi	r22, 0x10	; 16
    1348:	c8 01       	movw	r24, r16
    134a:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
    
  writeReg(CC1101_MDMCFG3,  CC1101_DEFVAL_MDMCFG3);
    134e:	43 e8       	ldi	r20, 0x83	; 131
    1350:	61 e1       	ldi	r22, 0x11	; 17
    1352:	c8 01       	movw	r24, r16
    1354:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG2,  CC1101_DEFVAL_MDMCFG2);
    1358:	43 e9       	ldi	r20, 0x93	; 147
    135a:	62 e1       	ldi	r22, 0x12	; 18
    135c:	c8 01       	movw	r24, r16
    135e:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG1,  CC1101_DEFVAL_MDMCFG1);
    1362:	42 e2       	ldi	r20, 0x22	; 34
    1364:	63 e1       	ldi	r22, 0x13	; 19
    1366:	c8 01       	movw	r24, r16
    1368:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG0,  CC1101_DEFVAL_MDMCFG0);
    136c:	48 ef       	ldi	r20, 0xF8	; 248
    136e:	64 e1       	ldi	r22, 0x14	; 20
    1370:	c8 01       	movw	r24, r16
    1372:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_DEVIATN,  CC1101_DEFVAL_DEVIATN);
    1376:	45 e3       	ldi	r20, 0x35	; 53
    1378:	65 e1       	ldi	r22, 0x15	; 21
    137a:	c8 01       	movw	r24, r16
    137c:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM2,  CC1101_DEFVAL_MCSM2);
    1380:	47 e0       	ldi	r20, 0x07	; 7
    1382:	66 e1       	ldi	r22, 0x16	; 22
    1384:	c8 01       	movw	r24, r16
    1386:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM1,  CC1101_DEFVAL_MCSM1);
    138a:	40 e2       	ldi	r20, 0x20	; 32
    138c:	67 e1       	ldi	r22, 0x17	; 23
    138e:	c8 01       	movw	r24, r16
    1390:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM0,  CC1101_DEFVAL_MCSM0);
    1394:	48 e1       	ldi	r20, 0x18	; 24
    1396:	68 e1       	ldi	r22, 0x18	; 24
    1398:	c8 01       	movw	r24, r16
    139a:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FOCCFG,  CC1101_DEFVAL_FOCCFG);
    139e:	46 e1       	ldi	r20, 0x16	; 22
    13a0:	69 e1       	ldi	r22, 0x19	; 25
    13a2:	c8 01       	movw	r24, r16
    13a4:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_BSCFG,  CC1101_DEFVAL_BSCFG);
    13a8:	4c e6       	ldi	r20, 0x6C	; 108
    13aa:	6a e1       	ldi	r22, 0x1A	; 26
    13ac:	c8 01       	movw	r24, r16
    13ae:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL2,  CC1101_DEFVAL_AGCCTRL2);
    13b2:	43 e4       	ldi	r20, 0x43	; 67
    13b4:	6b e1       	ldi	r22, 0x1B	; 27
    13b6:	c8 01       	movw	r24, r16
    13b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL1,  CC1101_DEFVAL_AGCCTRL1);
    13bc:	40 e4       	ldi	r20, 0x40	; 64
    13be:	6c e1       	ldi	r22, 0x1C	; 28
    13c0:	c8 01       	movw	r24, r16
    13c2:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL0,  CC1101_DEFVAL_AGCCTRL0);
    13c6:	41 e9       	ldi	r20, 0x91	; 145
    13c8:	6d e1       	ldi	r22, 0x1D	; 29
    13ca:	c8 01       	movw	r24, r16
    13cc:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT1,  CC1101_DEFVAL_WOREVT1);
    13d0:	47 e8       	ldi	r20, 0x87	; 135
    13d2:	6e e1       	ldi	r22, 0x1E	; 30
    13d4:	c8 01       	movw	r24, r16
    13d6:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT0,  CC1101_DEFVAL_WOREVT0);
    13da:	4b e6       	ldi	r20, 0x6B	; 107
    13dc:	6f e1       	ldi	r22, 0x1F	; 31
    13de:	c8 01       	movw	r24, r16
    13e0:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WORCTRL,  CC1101_DEFVAL_WORCTRL);
    13e4:	4b ef       	ldi	r20, 0xFB	; 251
    13e6:	60 e2       	ldi	r22, 0x20	; 32
    13e8:	c8 01       	movw	r24, r16
    13ea:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND1,  CC1101_DEFVAL_FREND1);
    13ee:	46 e5       	ldi	r20, 0x56	; 86
    13f0:	61 e2       	ldi	r22, 0x21	; 33
    13f2:	c8 01       	movw	r24, r16
    13f4:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND0,  CC1101_DEFVAL_FREND0);
    13f8:	40 e1       	ldi	r20, 0x10	; 16
    13fa:	62 e2       	ldi	r22, 0x22	; 34
    13fc:	c8 01       	movw	r24, r16
    13fe:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL3,  CC1101_DEFVAL_FSCAL3);
    1402:	49 ee       	ldi	r20, 0xE9	; 233
    1404:	63 e2       	ldi	r22, 0x23	; 35
    1406:	c8 01       	movw	r24, r16
    1408:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL2,  CC1101_DEFVAL_FSCAL2);
    140c:	4a e2       	ldi	r20, 0x2A	; 42
    140e:	64 e2       	ldi	r22, 0x24	; 36
    1410:	c8 01       	movw	r24, r16
    1412:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL1,  CC1101_DEFVAL_FSCAL1);
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	65 e2       	ldi	r22, 0x25	; 37
    141a:	c8 01       	movw	r24, r16
    141c:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL0,  CC1101_DEFVAL_FSCAL0);
    1420:	4f e1       	ldi	r20, 0x1F	; 31
    1422:	66 e2       	ldi	r22, 0x26	; 38
    1424:	c8 01       	movw	r24, r16
    1426:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL1,  CC1101_DEFVAL_RCCTRL1);
    142a:	41 e4       	ldi	r20, 0x41	; 65
    142c:	67 e2       	ldi	r22, 0x27	; 39
    142e:	c8 01       	movw	r24, r16
    1430:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL0,  CC1101_DEFVAL_RCCTRL0);
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	68 e2       	ldi	r22, 0x28	; 40
    1438:	c8 01       	movw	r24, r16
    143a:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSTEST,  CC1101_DEFVAL_FSTEST);
    143e:	49 e5       	ldi	r20, 0x59	; 89
    1440:	69 e2       	ldi	r22, 0x29	; 41
    1442:	c8 01       	movw	r24, r16
    1444:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PTEST,  CC1101_DEFVAL_PTEST);
    1448:	4f e7       	ldi	r20, 0x7F	; 127
    144a:	6a e2       	ldi	r22, 0x2A	; 42
    144c:	c8 01       	movw	r24, r16
    144e:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCTEST,  CC1101_DEFVAL_AGCTEST);
    1452:	4f e3       	ldi	r20, 0x3F	; 63
    1454:	6b e2       	ldi	r22, 0x2B	; 43
    1456:	c8 01       	movw	r24, r16
    1458:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST2,  CC1101_DEFVAL_TEST2);
    145c:	41 e8       	ldi	r20, 0x81	; 129
    145e:	6c e2       	ldi	r22, 0x2C	; 44
    1460:	c8 01       	movw	r24, r16
    1462:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST1,  CC1101_DEFVAL_TEST1);
    1466:	45 e3       	ldi	r20, 0x35	; 53
    1468:	6d e2       	ldi	r22, 0x2D	; 45
    146a:	c8 01       	movw	r24, r16
    146c:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST0,  CC1101_DEFVAL_TEST0);
    1470:	49 e0       	ldi	r20, 0x09	; 9
    1472:	6e e2       	ldi	r22, 0x2E	; 46
    1474:	c8 01       	movw	r24, r16
    1476:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  
  // Send empty packet
  CCPACKET packet;
  packet.length = 0;
    147a:	19 82       	std	Y+1, r1	; 0x01
  sendData(packet);
    147c:	8d b7       	in	r24, 0x3d	; 61
    147e:	9e b7       	in	r25, 0x3e	; 62
    1480:	81 54       	subi	r24, 0x41	; 65
    1482:	91 09       	sbc	r25, r1
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	9e bf       	out	0x3e, r25	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	8d bf       	out	0x3d, r24	; 61
    148e:	ad b7       	in	r26, 0x3d	; 61
    1490:	be b7       	in	r27, 0x3e	; 62
    1492:	11 96       	adiw	r26, 0x01	; 1
    1494:	81 e4       	ldi	r24, 0x41	; 65
    1496:	fe 01       	movw	r30, r28
    1498:	31 96       	adiw	r30, 0x01	; 1
    149a:	01 90       	ld	r0, Z+
    149c:	0d 92       	st	X+, r0
    149e:	8a 95       	dec	r24
    14a0:	e1 f7       	brne	.-8      	; 0x149a <_ZN6CC11019setCCregsEv+0x200>
    14a2:	c8 01       	movw	r24, r16
    14a4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN6CC11018sendDataE8CCPACKET>
}
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 5b       	subi	r28, 0xBF	; 191
    14b4:	df 4f       	sbci	r29, 0xFF	; 255
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <_ZN6CC11015resetEv>:
 * reset
 * 
 * Reset CC1101
 */
void CC1101::reset(void) 
{
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	ec 01       	movw	r28, r24
  cc1101_Deselect();                    // Deselect CC1101
    14d0:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(5);
    14d2:	85 e0       	ldi	r24, 0x05	; 5
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    14da:	2a 98       	cbi	0x05, 2	; 5
  delayMicroseconds(10);
    14dc:	8a e0       	ldi	r24, 0x0A	; 10
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <delayMicroseconds>
  cc1101_Deselect();                    // Deselect CC1101
    14e4:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(41);
    14e6:	89 e2       	ldi	r24, 0x29	; 41
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 cd 06 	call	0xd9a	; 0xd9a <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    14ee:	2a 98       	cbi	0x05, 2	; 5

  wait_Miso();                          // Wait until MISO goes low
    14f0:	1c 99       	sbic	0x03, 4	; 3
    14f2:	fe cf       	rjmp	.-4      	; 0x14f0 <_ZN6CC11015resetEv+0x26>
  spi.send(CC1101_SRES);                // Send reset command strobe
    14f4:	60 e3       	ldi	r22, 0x30	; 48
    14f6:	ce 01       	movw	r24, r28
    14f8:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN9SIMPLESPI4sendEh>
  wait_Miso();                          // Wait until MISO goes low
    14fc:	1c 99       	sbic	0x03, 4	; 3
    14fe:	fe cf       	rjmp	.-4      	; 0x14fc <_ZN6CC11015resetEv+0x32>

  cc1101_Deselect();                    // Deselect CC1101
    1500:	2a 9a       	sbi	0x05, 2	; 5

  setCCregs();                          // Reconfigure CC1101
    1502:	ce 01       	movw	r24, r28
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
  spi.send(CC1101_SRES);                // Send reset command strobe
  wait_Miso();                          // Wait until MISO goes low

  cc1101_Deselect();                    // Deselect CC1101

  setCCregs();                          // Reconfigure CC1101
    1508:	0c 94 4d 09 	jmp	0x129a	; 0x129a <_ZN6CC11019setCCregsEv>

0000150c <_ZN6CC11014initEhh>:
 *
 * @param freq Carrier frequency
 * @param mode Working mode (speed, ...)
 */
void CC1101::init(uint8_t freq, uint8_t mode)
{
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	ec 01       	movw	r28, r24
  carrierFreq = freq;
    1512:	6b 83       	std	Y+3, r22	; 0x03
  workMode = mode;
    1514:	4c 83       	std	Y+4, r20	; 0x04
  
  spi.init();                           // Initialize SPI interface
    1516:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_ZN9SIMPLESPI4initEv>
  pinMode(GDO0, INPUT);                 // Config GDO0 as input
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	0e 94 3a 07 	call	0xe74	; 0xe74 <pinMode>

  reset();                              // Reset CC1101
    1522:	ce 01       	movw	r24, r28
    1524:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_ZN6CC11015resetEv>
     * 
     * @param paLevel amplification value
     */
    inline void setTxPowerAmp(uint8_t paLevel)
    {
      writeReg(CC1101_PATABLE, paLevel);
    1528:	40 e6       	ldi	r20, 0x60	; 96
    152a:	6e e3       	ldi	r22, 0x3E	; 62
    152c:	ce 01       	movw	r24, r28

  // Configure PATABLE
  setTxPowerAmp(PA_LowPower);
}
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>

00001536 <_ZN6CC110111receiveDataEP8CCPACKET>:
 * 
 * Return:
 * 	Amount of bytes received
 */
byte CC1101::receiveData(CCPACKET * packet)
{
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	ec 01       	movw	r28, r24
    1540:	8b 01       	movw	r16, r22
  byte val;
  byte rxBytes = readStatusReg(CC1101_RXBYTES);
    1542:	40 ec       	ldi	r20, 0xC0	; 192
    1544:	6b e3       	ldi	r22, 0x3B	; 59
    1546:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6CC11017readRegEhh>

  // Any byte waiting to be read and no overflow?
  if (rxBytes & 0x7F && !(rxBytes & 0x80))
    154a:	98 2f       	mov	r25, r24
    154c:	9f 77       	andi	r25, 0x7F	; 127
    154e:	59 f0       	breq	.+22     	; 0x1566 <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
    1550:	87 fd       	sbrc	r24, 7
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
  {
    // Read data length
    packet->length = readConfigReg(CC1101_RXFIFO);
    1554:	40 e8       	ldi	r20, 0x80	; 128
    1556:	6f e3       	ldi	r22, 0x3F	; 63
    1558:	ce 01       	movw	r24, r28
    155a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6CC11017readRegEhh>
    155e:	f8 01       	movw	r30, r16
    1560:	80 83       	st	Z, r24
    // If packet is too long
    if (packet->length > CCPACKET_DATA_LEN)
    1562:	8e 33       	cpi	r24, 0x3E	; 62
    1564:	18 f0       	brcs	.+6      	; 0x156c <_ZN6CC110111receiveDataEP8CCPACKET+0x36>
      packet->length = 0;   // Discard packet
    1566:	f8 01       	movw	r30, r16
    1568:	10 82       	st	Z, r1
    156a:	1f c0       	rjmp	.+62     	; 0x15aa <_ZN6CC110111receiveDataEP8CCPACKET+0x74>
    else
    {
      // Read data packet
      readBurstReg(packet->data, CC1101_RXFIFO, packet->length);
    156c:	28 2f       	mov	r18, r24
    156e:	4f e3       	ldi	r20, 0x3F	; 63
    1570:	b8 01       	movw	r22, r16
    1572:	6f 5f       	subi	r22, 0xFF	; 255
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	ce 01       	movw	r24, r28
    1578:	0e 94 06 08 	call	0x100c	; 0x100c <_ZN6CC110112readBurstRegEPhhh>
      // Read RSSI
      packet->rssi = readConfigReg(CC1101_RXFIFO);
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	6f e3       	ldi	r22, 0x3F	; 63
    1580:	ce 01       	movw	r24, r28
    1582:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6CC11017readRegEhh>
    1586:	f8 01       	movw	r30, r16
    1588:	87 af       	std	Z+63, r24	; 0x3f
      // Read LQI and CRC_OK
      val = readConfigReg(CC1101_RXFIFO);
    158a:	40 e8       	ldi	r20, 0x80	; 128
    158c:	6f e3       	ldi	r22, 0x3F	; 63
    158e:	ce 01       	movw	r24, r28
    1590:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6CC11017readRegEhh>
      packet->lqi = val & 0x7F;
    1594:	f8 01       	movw	r30, r16
    1596:	e0 5c       	subi	r30, 0xC0	; 192
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	98 2f       	mov	r25, r24
    159c:	9f 77       	andi	r25, 0x7F	; 127
    159e:	90 83       	st	Z, r25
      packet->crc_ok = bitRead(val, 7);
    15a0:	88 1f       	adc	r24, r24
    15a2:	88 27       	eor	r24, r24
    15a4:	88 1f       	adc	r24, r24
    15a6:	f8 01       	movw	r30, r16
    15a8:	86 af       	std	Z+62, r24	; 0x3e
    }
  }
  else
    packet->length = 0;

  setIdleState();       // Enter IDLE state
    15aa:	66 e3       	ldi	r22, 0x36	; 54
    15ac:	ce 01       	movw	r24, r28
    15ae:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6CC11019cmdStrobeEh>
  flushRxFifo();        // Flush Rx FIFO
    15b2:	6a e3       	ldi	r22, 0x3A	; 58
    15b4:	ce 01       	movw	r24, r28
    15b6:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6CC11019cmdStrobeEh>
  //cmdStrobe(CC1101_SCAL);

  // Back to RX state
  setRxState();
    15ba:	ce 01       	movw	r24, r28
    15bc:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN6CC110110setRxStateEv>

  return packet->length;
}
    15c0:	f8 01       	movw	r30, r16
    15c2:	80 81       	ld	r24, Z
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	08 95       	ret

000015ce <_Z8radioISRv>:
  // Reset CC1101 IC
  radio.wakeUp();

  // set system state to RF Rx ON
  state = RXON; 
}
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <detachInterrupt>
    15d4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <panstamp+0x3>
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	a9 f4       	brne	.+42     	; 0x1606 <_Z8radioISRv+0x38>
    15dc:	6b eb       	ldi	r22, 0xBB	; 187
    15de:	72 e0       	ldi	r23, 0x02	; 2
    15e0:	8d ef       	ldi	r24, 0xFD	; 253
    15e2:	92 e0       	ldi	r25, 0x02	; 2
    15e4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN6CC110111receiveDataEP8CCPACKET>
    15e8:	88 23       	and	r24, r24
    15ea:	69 f0       	breq	.+26     	; 0x1606 <_Z8radioISRv+0x38>
    15ec:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <_ZZ8radioISRvE8ccPacket+0x3e>
    15f0:	88 23       	and	r24, r24
    15f2:	49 f0       	breq	.+18     	; 0x1606 <_Z8radioISRv+0x38>
    15f4:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <panstamp+0xb>
    15f8:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <panstamp+0xc>
    15fc:	30 97       	sbiw	r30, 0x00	; 0
    15fe:	19 f0       	breq	.+6      	; 0x1606 <_Z8radioISRv+0x38>
    1600:	8b eb       	ldi	r24, 0xBB	; 187
    1602:	92 e0       	ldi	r25, 0x02	; 2
    1604:	09 95       	icall
    1606:	42 e0       	ldi	r20, 0x02	; 2
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	67 ee       	ldi	r22, 0xE7	; 231
    160c:	7a e0       	ldi	r23, 0x0A	; 10
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <attachInterrupt>

00001614 <_ZN8PANSTAMPC1Ev>:
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN6CC1101C1Ev>
    1620:	1c 86       	std	Y+12, r1	; 0x0c
    1622:	1b 86       	std	Y+11, r1	; 0x0b
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	08 95       	ret

0000162a <_ZN8PANSTAMP4initEhh>:
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	ec 01       	movw	r28, r24
    1634:	8c 01       	movw	r16, r24
    1636:	0f 5f       	subi	r16, 0xFF	; 255
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	c8 01       	movw	r24, r16
    163c:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN6CC11014initEhh>
    1640:	82 e3       	ldi	r24, 0x32	; 50
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 cd 06 	call	0xd9a	; 0xd9a <delayMicroseconds>
    1648:	c8 01       	movw	r24, r16
    164a:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN6CC110110setRxStateEv>
    164e:	42 e0       	ldi	r20, 0x02	; 2
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	67 ee       	ldi	r22, 0xE7	; 231
    1654:	7a e0       	ldi	r23, 0x0A	; 10
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <attachInterrupt>
    165c:	18 82       	st	Y, r1
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	08 95       	ret

00001668 <_ZN8PANSTAMP5resetEv>:
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	a8 95       	wdr
    166e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1672:	88 61       	ori	r24, 0x18	; 24
    1674:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1678:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	98 e0       	ldi	r25, 0x08	; 8
    1680:	88 e1       	ldi	r24, 0x18	; 24
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	a8 95       	wdr
    1688:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1692:	ff cf       	rjmp	.-2      	; 0x1692 <_ZN8PANSTAMP5resetEv+0x2a>

00001694 <_ZN8PANSTAMP6getVccEv>:
uint16_t PANSTAMP::getVcc(void)
{
  uint16_t result;
  
  // Read 1.1V reference against AVcc
  ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    1694:	8e e4       	ldi	r24, 0x4E	; 78
    1696:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  delay(2); // Wait for Vref to settle
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 91 06 	call	0xd22	; 0xd22 <delay>
  ADCSRA |= _BV(ADSC); // Convert
    16a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    16aa:	80 64       	ori	r24, 0x40	; 64
    16ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  while (bit_is_set(ADCSRA,ADSC));
    16b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    16b4:	86 fd       	sbrc	r24, 6
    16b6:	fc cf       	rjmp	.-8      	; 0x16b0 <_ZN8PANSTAMP6getVccEv+0x1c>
  result = ADCL;
    16b8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  result |= ADCH << 8;
    16bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  result = 1126400L / result; // Back-calculate AVcc in mV
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	38 2b       	or	r19, r24
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	70 e3       	ldi	r23, 0x30	; 48
    16cc:	81 e1       	ldi	r24, 0x11	; 17
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__divmodsi4>
  
  return result;
}
    16d4:	c9 01       	movw	r24, r18
    16d6:	08 95       	ret

000016d8 <_GLOBAL__sub_I__Z8radioISRv>:

/**
 * Pre-instantiate PANSTAMP object
 */
PANSTAMP panstamp;
    16d8:	8c ef       	ldi	r24, 0xFC	; 252
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <_ZN8PANSTAMPC1Ev>

000016e0 <_ZN9SIMPLESPI4initEv>:
 * SPI initialization
 */
void SIMPLESPI::init() 
{
	
  digitalWrite(SPI_SS, HIGH);
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	8a e0       	ldi	r24, 0x0A	; 10
    16e4:	0e 94 76 07 	call	0xeec	; 0xeec <digitalWrite>
 
  // Configure SPI pins
  pinMode(SPI_SS, OUTPUT);
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	8a e0       	ldi	r24, 0x0A	; 10
    16ec:	0e 94 3a 07 	call	0xe74	; 0xe74 <pinMode>
 
  pinMode(SPI_MOSI, OUTPUT);
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	8b e0       	ldi	r24, 0x0B	; 11
    16f4:	0e 94 3a 07 	call	0xe74	; 0xe74 <pinMode>
  pinMode(SPI_MISO, INPUT);  
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	8c e0       	ldi	r24, 0x0C	; 12
    16fc:	0e 94 3a 07 	call	0xe74	; 0xe74 <pinMode>
  pinMode(SPI_SCK, OUTPUT);
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	8d e0       	ldi	r24, 0x0D	; 13
    1704:	0e 94 3a 07 	call	0xe74	; 0xe74 <pinMode>
  
  digitalWrite(SPI_SCK, HIGH);
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	8d e0       	ldi	r24, 0x0D	; 13
    170c:	0e 94 76 07 	call	0xeec	; 0xeec <digitalWrite>
  digitalWrite(SPI_MOSI, LOW);
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	8b e0       	ldi	r24, 0x0B	; 11
    1714:	0e 94 76 07 	call	0xeec	; 0xeec <digitalWrite>

  // SPI speed = clk/4
  SPCR = _BV(SPE) | _BV(MSTR);
    1718:	80 e5       	ldi	r24, 0x50	; 80
    171a:	8c bd       	out	0x2c, r24	; 44
    171c:	08 95       	ret

0000171e <_ZN9SIMPLESPI4sendEh>:
 * Return:
 * 	Response received from SPI slave
 */
byte SIMPLESPI::send(byte value) 
{
  SPDR = value;                          // Transfer byte via SPI
    171e:	6e bd       	out	0x2e, r22	; 46
  while(!(SPSR & _BV(SPIF)));            // Wait until SPI operation is terminated
    1720:	0d b4       	in	r0, 0x2d	; 45
    1722:	07 fe       	sbrs	r0, 7
    1724:	fd cf       	rjmp	.-6      	; 0x1720 <_ZN9SIMPLESPI4sendEh+0x2>

  return SPDR;
    1726:	8e b5       	in	r24, 0x2e	; 46
}
    1728:	08 95       	ret

0000172a <_ZN8REGISTER4initEv>:
 * init
 *
 * Initialize register
 */
void REGISTER::init(void)
{
    172a:	0f 93       	push	r16
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	1f 92       	push	r1
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
  // Does the value need to be read from EEPROM?
  if (eepromAddress >= 0)
    1736:	fc 01       	movw	r30, r24
    1738:	21 85       	ldd	r18, Z+9	; 0x09
    173a:	32 85       	ldd	r19, Z+10	; 0x0a
    173c:	37 fd       	sbrc	r19, 7
    173e:	08 c0       	rjmp	.+16     	; 0x1750 <_ZN8REGISTER4initEv+0x26>
  {
    STORAGE nvMem;
    
    // Read from info memory
    nvMem.read(value, eepromBank, eepromAddress, length);
    1740:	65 81       	ldd	r22, Z+5	; 0x05
    1742:	76 81       	ldd	r23, Z+6	; 0x06
    1744:	07 81       	ldd	r16, Z+7	; 0x07
    1746:	43 85       	ldd	r20, Z+11	; 0x0b
    1748:	ce 01       	movw	r24, r28
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN7STORAGE4readEPhhhh>
  }
}
    1750:	0f 90       	pop	r0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	0f 91       	pop	r16
    1758:	08 95       	ret

0000175a <_ZN8REGISTER14sendSwapStatusEv>:
 * sendSwapStatus
 * 
 * Send SWAP status message
 */
void REGISTER::sendSwapStatus(void) 
{
    175a:	0f 93       	push	r16
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	c0 55       	subi	r28, 0x50	; 80
    1766:	d1 09       	sbc	r29, r1
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	fc 01       	movw	r30, r24
  SWSTATUS packet = SWSTATUS(id, value, length, type);
    1774:	45 81       	ldd	r20, Z+5	; 0x05
    1776:	56 81       	ldd	r21, Z+6	; 0x06
    1778:	00 85       	ldd	r16, Z+8	; 0x08
    177a:	27 81       	ldd	r18, Z+7	; 0x07
    177c:	64 81       	ldd	r22, Z+4	; 0x04
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
  packet.send();
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN8SWPACKET4sendEv>
}
    178e:	c0 5b       	subi	r28, 0xB0	; 176
    1790:	df 4f       	sbci	r29, 0xFF	; 255
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <_ZN8REGISTER7getDataEv>:
 * getData
 * 
 * Update and get register value
 */
void REGISTER::getData(void) 
{
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	ec 01       	movw	r28, r24
  // Update register value
  if (updateValue != NULL)
    17aa:	e8 81       	ld	r30, Y
    17ac:	f9 81       	ldd	r31, Y+1	; 0x01
    17ae:	30 97       	sbiw	r30, 0x00	; 0
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <_ZN8REGISTER7getDataEv+0x12>
    updateValue(id);
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	09 95       	icall

  // Send SWAP status message about the new value
  sendSwapStatus();
    17b6:	ce 01       	movw	r24, r28
}
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
  // Update register value
  if (updateValue != NULL)
    updateValue(id);

  // Send SWAP status message about the new value
  sendSwapStatus();
    17bc:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <_ZN8REGISTER14sendSwapStatusEv>

000017c0 <_ZN8REGISTER7setDataEPh>:
 * Set register value
 * 
 * @param data New register value
 */
void REGISTER::setData(unsigned char *data) 
{
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	1f 92       	push	r1
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	7c 01       	movw	r14, r24
  // Update register value
  if (setValue != NULL)
    17d2:	dc 01       	movw	r26, r24
    17d4:	12 96       	adiw	r26, 0x02	; 2
    17d6:	ed 91       	ld	r30, X+
    17d8:	fc 91       	ld	r31, X
    17da:	13 97       	sbiw	r26, 0x03	; 3
    17dc:	30 97       	sbiw	r30, 0x00	; 0
    17de:	19 f0       	breq	.+6      	; 0x17e6 <_ZN8REGISTER7setDataEPh+0x26>
    setValue(id, data);
    17e0:	14 96       	adiw	r26, 0x04	; 4
    17e2:	8c 91       	ld	r24, X
    17e4:	09 95       	icall

  // Send SWAP status message
  sendSwapStatus();
    17e6:	c7 01       	movw	r24, r14
    17e8:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN8REGISTER14sendSwapStatusEv>

  // Does the value need to be saved in info memory (flash)?
  if (eepromAddress >= 0)
    17ec:	f7 01       	movw	r30, r14
    17ee:	21 85       	ldd	r18, Z+9	; 0x09
    17f0:	32 85       	ldd	r19, Z+10	; 0x0a
    17f2:	37 fd       	sbrc	r19, 7
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <_ZN8REGISTER7setDataEPh+0x46>
  {
    STORAGE nvMem;   
    // Write info memory
    nvMem.write(value, eepromBank, eepromAddress, length);
    17f6:	65 81       	ldd	r22, Z+5	; 0x05
    17f8:	76 81       	ldd	r23, Z+6	; 0x06
    17fa:	07 81       	ldd	r16, Z+7	; 0x07
    17fc:	43 85       	ldd	r20, Z+11	; 0x0b
    17fe:	ce 01       	movw	r24, r28
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN7STORAGE5writeEPhhhh>
  }
}
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	08 95       	ret

00001814 <_ZN8REGISTER20setValueFromBeBufferEPh>:
 * Set curent value from a Big Endian buffer passed as argument
 *
 * @param beBuffer Big Endian buffer
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
    1814:	dc 01       	movw	r26, r24
  unsigned char i;

  for(i=0 ; i<length ; i++)
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	17 96       	adiw	r26, 0x07	; 7
    181a:	ec 91       	ld	r30, X
    181c:	17 97       	sbiw	r26, 0x07	; 7
    181e:	9e 17       	cp	r25, r30
    1820:	98 f4       	brcc	.+38     	; 0x1848 <_ZN8REGISTER20setValueFromBeBufferEPh+0x34>
    value[i] = beBuffer[length-1-i];
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	29 2f       	mov	r18, r25
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	31 97       	sbiw	r30, 0x01	; 1
    182a:	e2 1b       	sub	r30, r18
    182c:	f3 0b       	sbc	r31, r19
    182e:	e6 0f       	add	r30, r22
    1830:	f7 1f       	adc	r31, r23
    1832:	80 81       	ld	r24, Z
    1834:	15 96       	adiw	r26, 0x05	; 5
    1836:	4d 91       	ld	r20, X+
    1838:	5c 91       	ld	r21, X
    183a:	16 97       	sbiw	r26, 0x06	; 6
    183c:	fa 01       	movw	r30, r20
    183e:	e2 0f       	add	r30, r18
    1840:	f3 1f       	adc	r31, r19
    1842:	80 83       	st	Z, r24
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
  unsigned char i;

  for(i=0 ; i<length ; i++)
    1844:	9f 5f       	subi	r25, 0xFF	; 255
    1846:	e8 cf       	rjmp	.-48     	; 0x1818 <_ZN8REGISTER20setValueFromBeBufferEPh+0x4>
    1848:	08 95       	ret

0000184a <_Z14pacKetReceivedP8CCPACKET>:
void SWAP::goToSleep(void)
{
  systemState = SYSTATE_RXOFF;
  panstamp.sleepSec(txInterval);
  systemState = SYSTATE_RXON;
}
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	c0 55       	subi	r28, 0x50	; 80
    1854:	d1 09       	sbc	r29, r1
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	fc 01       	movw	r30, r24
    1862:	20 81       	ld	r18, Z
    1864:	27 30       	cpi	r18, 0x07	; 7
    1866:	08 f4       	brcc	.+2      	; 0x186a <_Z14pacKetReceivedP8CCPACKET+0x20>
    1868:	a8 c0       	rjmp	.+336    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    186a:	bc 01       	movw	r22, r24
    186c:	ce 01       	movw	r24, r28
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN8SWPACKETC1EP8CCPACKET>
    1874:	2b 96       	adiw	r28, 0x0b	; 11
    1876:	8f ad       	ldd	r24, Y+63	; 0x3f
    1878:	2b 97       	sbiw	r28, 0x0b	; 11
    187a:	81 11       	cpse	r24, r1
    187c:	9e c0       	rjmp	.+316    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    187e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <swap>
    1882:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <swap+0x1>
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	29 f0       	breq	.+10     	; 0x1894 <_Z14pacKetReceivedP8CCPACKET+0x4a>
    188a:	be 01       	movw	r22, r28
    188c:	6f 5f       	subi	r22, 0xFF	; 255
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	0e 94 06 11 	call	0x220c	; 0x220c <_ZN8REPEATER13packetHandlerEP8SWPACKET>
    1894:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <swap+0x3>
    1898:	21 ff       	sbrs	r18, 1
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <_Z14pacKetReceivedP8CCPACKET+0x5c>
    189c:	28 96       	adiw	r28, 0x08	; 8
    189e:	8f ad       	ldd	r24, Y+63	; 0x3f
    18a0:	28 97       	sbiw	r28, 0x08	; 8
    18a2:	81 ff       	sbrs	r24, 1
    18a4:	8a c0       	rjmp	.+276    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    18a6:	2a 96       	adiw	r28, 0x0a	; 10
    18a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    18aa:	2a 97       	sbiw	r28, 0x0a	; 10
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	89 f5       	brne	.+98     	; 0x1912 <_Z14pacKetReceivedP8CCPACKET+0xc8>
    18b0:	24 96       	adiw	r28, 0x04	; 4
    18b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    18b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    18b6:	24 97       	sbiw	r28, 0x04	; 4
    18b8:	21 15       	cp	r18, r1
    18ba:	31 05       	cpc	r19, r1
    18bc:	31 f4       	brne	.+12     	; 0x18ca <_Z14pacKetReceivedP8CCPACKET+0x80>
    18be:	2d 96       	adiw	r28, 0x0d	; 13
    18c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    18c2:	2d 97       	sbiw	r28, 0x0d	; 13
    18c4:	88 23       	and	r24, r24
    18c6:	41 f0       	breq	.+16     	; 0x18d8 <_Z14pacKetReceivedP8CCPACKET+0x8e>
    18c8:	78 c0       	rjmp	.+240    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    18ca:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <swap+0x2>
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	28 17       	cp	r18, r24
    18d2:	39 07       	cpc	r19, r25
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <_Z14pacKetReceivedP8CCPACKET+0x8e>
    18d6:	71 c0       	rjmp	.+226    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    18d8:	2c 96       	adiw	r28, 0x0c	; 12
    18da:	8f ad       	ldd	r24, Y+63	; 0x3f
    18dc:	2c 97       	sbiw	r28, 0x0c	; 12
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	28 17       	cp	r18, r24
    18e2:	39 07       	cpc	r19, r25
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <_Z14pacKetReceivedP8CCPACKET+0x9e>
    18e6:	69 c0       	rjmp	.+210    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    18e8:	2d 96       	adiw	r28, 0x0d	; 13
    18ea:	ef ad       	ldd	r30, Y+63	; 0x3f
    18ec:	2d 97       	sbiw	r28, 0x0d	; 13
    18ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <regTableSize>
    18f2:	e8 17       	cp	r30, r24
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <_Z14pacKetReceivedP8CCPACKET+0xae>
    18f6:	61 c0       	rjmp	.+194    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	ed 5f       	subi	r30, 0xFD	; 253
    1900:	fe 4f       	sbci	r31, 0xFE	; 254
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	09 f4       	brne	.+2      	; 0x190c <_Z14pacKetReceivedP8CCPACKET+0xc2>
    190a:	57 c0       	rjmp	.+174    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    190c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN8REGISTER7getDataEv>
    1910:	54 c0       	rjmp	.+168    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	58 f4       	brcc	.+22     	; 0x192c <_Z14pacKetReceivedP8CCPACKET+0xe2>
    1916:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <swap+0xa>
    191a:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <swap+0xb>
    191e:	30 97       	sbiw	r30, 0x00	; 0
    1920:	09 f4       	brne	.+2      	; 0x1924 <_Z14pacKetReceivedP8CCPACKET+0xda>
    1922:	4b c0       	rjmp	.+150    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    1924:	ce 01       	movw	r24, r28
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	09 95       	icall
    192a:	47 c0       	rjmp	.+142    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	09 f0       	breq	.+2      	; 0x1932 <_Z14pacKetReceivedP8CCPACKET+0xe8>
    1930:	44 c0       	rjmp	.+136    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    1932:	24 96       	adiw	r28, 0x04	; 4
    1934:	4e ad       	ldd	r20, Y+62	; 0x3e
    1936:	5f ad       	ldd	r21, Y+63	; 0x3f
    1938:	24 97       	sbiw	r28, 0x04	; 4
    193a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <swap+0x2>
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	48 17       	cp	r20, r24
    1942:	59 07       	cpc	r21, r25
    1944:	d1 f5       	brne	.+116    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    1946:	2c 96       	adiw	r28, 0x0c	; 12
    1948:	8f ad       	ldd	r24, Y+63	; 0x3f
    194a:	2c 97       	sbiw	r28, 0x0c	; 12
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	48 17       	cp	r20, r24
    1950:	59 07       	cpc	r21, r25
    1952:	99 f5       	brne	.+102    	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    1954:	2d 96       	adiw	r28, 0x0d	; 13
    1956:	ef ad       	ldd	r30, Y+63	; 0x3f
    1958:	2d 97       	sbiw	r28, 0x0d	; 13
    195a:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <regTableSize>
    195e:	e3 17       	cp	r30, r19
    1960:	60 f5       	brcc	.+88     	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	ee 0f       	add	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	ed 5f       	subi	r30, 0xFD	; 253
    196a:	fe 4f       	sbci	r31, 0xFE	; 254
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	19 f1       	breq	.+70     	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    1974:	20 ff       	sbrs	r18, 0
    1976:	11 c0       	rjmp	.+34     	; 0x199a <_Z14pacKetReceivedP8CCPACKET+0x150>
    1978:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <swap+0x4>
    197c:	29 96       	adiw	r28, 0x09	; 9
    197e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1980:	29 97       	sbiw	r28, 0x09	; 9
    1982:	42 17       	cp	r20, r18
    1984:	51 f0       	breq	.+20     	; 0x199a <_Z14pacKetReceivedP8CCPACKET+0x150>
    1986:	38 30       	cpi	r19, 0x08	; 8
    1988:	28 f0       	brcs	.+10     	; 0x1994 <_Z14pacKetReceivedP8CCPACKET+0x14a>
    198a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <regTable+0xe>
    198e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <regTable+0xf>
    1992:	11 c0       	rjmp	.+34     	; 0x19b6 <_Z14pacKetReceivedP8CCPACKET+0x16c>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e c0       	rjmp	.+28     	; 0x19b6 <_Z14pacKetReceivedP8CCPACKET+0x16c>
    199a:	60 96       	adiw	r28, 0x10	; 16
    199c:	3f ad       	ldd	r19, Y+63	; 0x3f
    199e:	60 97       	sbiw	r28, 0x10	; 16
    19a0:	fc 01       	movw	r30, r24
    19a2:	27 81       	ldd	r18, Z+7	; 0x07
    19a4:	32 13       	cpse	r19, r18
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <_Z14pacKetReceivedP8CCPACKET+0x16c>
    19a8:	2f 96       	adiw	r28, 0x0f	; 15
    19aa:	6e ad       	ldd	r22, Y+62	; 0x3e
    19ac:	7f ad       	ldd	r23, Y+63	; 0x3f
    19ae:	2f 97       	sbiw	r28, 0x0f	; 15
    19b0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN8REGISTER7setDataEPh>
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <_Z14pacKetReceivedP8CCPACKET+0x170>
    19b6:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN8REGISTER14sendSwapStatusEv>
    19ba:	c0 5b       	subi	r28, 0xB0	; 176
    19bc:	df 4f       	sbci	r29, 0xFF	; 255
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <_ZN4SWAP23nvolatToFactoryDefaultsEv>:
 * nvolatToFactoryDefaults
 * 
 * Write default config values in non-volatile memory
 */
void SWAP::nvolatToFactoryDefaults(void)
{
    19ce:	0f 93       	push	r16
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	2a 97       	sbiw	r28, 0x0a	; 10
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
  STORAGE nvMem;

  // Signature
  uint8_t signature[] = {NVOLAT_SIGNATURE_HIGH, NVOLAT_SIGNATURE_LOW};
    19e4:	8b ea       	ldi	r24, 0xAB	; 171
    19e6:	8f 83       	std	Y+7, r24	; 0x07
    19e8:	8d ec       	ldi	r24, 0xCD	; 205
    19ea:	88 87       	std	Y+8, r24	; 0x08
  nvMem.write(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    19ec:	02 e0       	ldi	r16, 0x02	; 2
    19ee:	28 e0       	ldi	r18, 0x08	; 8
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	be 01       	movw	r22, r28
    19f4:	69 5f       	subi	r22, 0xF9	; 249
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	ce 01       	movw	r24, r28
    19fa:	0a 96       	adiw	r24, 0x0a	; 10
    19fc:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN7STORAGE5writeEPhhhh>
  
  // Frequency channel
  uint8_t channel[] = {CCDEF_CHANNR};
    1a00:	19 86       	std	Y+9, r1	; 0x09
  nvMem.write(channel, DEFAULT_NVOLAT_SECTION, NVOLAT_FREQ_CHANNEL, sizeof(channel));
    1a02:	01 e0       	ldi	r16, 0x01	; 1
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	be 01       	movw	r22, r28
    1a0a:	67 5f       	subi	r22, 0xF7	; 247
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	ce 01       	movw	r24, r28
    1a10:	0a 96       	adiw	r24, 0x0a	; 10
    1a12:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN7STORAGE5writeEPhhhh>
  
  // Sync word
  uint8_t syncW[] = {CCDEF_SYNC1, CCDEF_SYNC0};
    1a16:	85 eb       	ldi	r24, 0xB5	; 181
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	87 e4       	ldi	r24, 0x47	; 71
    1a1c:	8e 83       	std	Y+6, r24	; 0x06
  nvMem.write(syncW, DEFAULT_NVOLAT_SECTION, NVOLAT_SYNC_WORD, sizeof(syncW));
    1a1e:	02 e0       	ldi	r16, 0x02	; 2
    1a20:	22 e0       	ldi	r18, 0x02	; 2
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	be 01       	movw	r22, r28
    1a26:	6b 5f       	subi	r22, 0xFB	; 251
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	0a 96       	adiw	r24, 0x0a	; 10
    1a2e:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN7STORAGE5writeEPhhhh>
     * 
     * @return pseudo-random number
     */
     inline uint16_t GET_RANDOM(void)
     {
       return OSCCAL;
    1a32:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

  // SWAP address (pseudo-random number)
  uint16_t random = panstamp.GET_RANDOM();
  uint8_t addr[] = {static_cast<uint8_t>((random >> 8) & 0xFF), static_cast<uint8_t>(random & 0xFF)};
    1a36:	1b 82       	std	Y+3, r1	; 0x03
    1a38:	8c 83       	std	Y+4, r24	; 0x04
  nvMem.write(addr, DEFAULT_NVOLAT_SECTION, NVOLAT_DEVICE_ADDR, sizeof(addr));
    1a3a:	24 e0       	ldi	r18, 0x04	; 4
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	be 01       	movw	r22, r28
    1a40:	6d 5f       	subi	r22, 0xFD	; 253
    1a42:	7f 4f       	sbci	r23, 0xFF	; 255
    1a44:	ce 01       	movw	r24, r28
    1a46:	0a 96       	adiw	r24, 0x0a	; 10
    1a48:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN7STORAGE5writeEPhhhh>
  
  // TX interval
  uint8_t txInt[] = {0xFF, 0};
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	1a 82       	std	Y+2, r1	; 0x02
  nvMem.write(txInt, DEFAULT_NVOLAT_SECTION, NVOLAT_TX_INTERVAL, sizeof(txInt));
    1a52:	26 e0       	ldi	r18, 0x06	; 6
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	be 01       	movw	r22, r28
    1a58:	6f 5f       	subi	r22, 0xFF	; 255
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	0a 96       	adiw	r24, 0x0a	; 10
    1a60:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN7STORAGE5writeEPhhhh>
}
    1a64:	2a 96       	adiw	r28, 0x0a	; 10
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	0f 91       	pop	r16
    1a76:	08 95       	ret

00001a78 <_ZN4SWAP4initEv>:
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <_ZN4SWAP4initEv+0xe>
    1a86:	1f 92       	push	r1
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	7c 01       	movw	r14, r24
  uint8_t i;
  STORAGE nvMem;

  // Read signature from info/eeprom memory
  uint8_t signature[2];
  nvMem.read(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    1a8e:	02 e0       	ldi	r16, 0x02	; 2
    1a90:	28 e0       	ldi	r18, 0x08	; 8
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	be 01       	movw	r22, r28
    1a96:	6f 5f       	subi	r22, 0xFF	; 255
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	03 96       	adiw	r24, 0x03	; 3
    1a9e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN7STORAGE4readEPhhhh>

  // Correct signature in non-volatile memory?
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	8b 3a       	cpi	r24, 0xAB	; 171
    1aa6:	19 f4       	brne	.+6      	; 0x1aae <_ZN4SWAP4initEv+0x36>
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	8d 3c       	cpi	r24, 0xCD	; 205
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <_ZN4SWAP4initEv+0x3c>
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
    1aae:	c7 01       	movw	r24, r14
    1ab0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN4SWAP23nvolatToFactoryDefaultsEv>
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
  //rcOscCalibrate();
  
  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    1ab6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <regTableSize>
    1aba:	18 17       	cp	r17, r24
    1abc:	60 f4       	brcc	.+24     	; 0x1ad6 <_ZN4SWAP4initEv+0x5e>
    regTable[i]->init();
    1abe:	e1 2f       	mov	r30, r17
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	ee 0f       	add	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	ed 5f       	subi	r30, 0xFD	; 253
    1ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	0e 94 95 0b 	call	0x172a	; 0x172a <_ZN8REGISTER4initEv>
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
  //rcOscCalibrate();
  
  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    1ad2:	1f 5f       	subi	r17, 0xFF	; 255
    1ad4:	f0 cf       	rjmp	.-32     	; 0x1ab6 <_ZN4SWAP4initEv+0x3e>
    regTable[i]->init();
 
  // Config radio settings
  panstamp.radio.devAddress = devAddress & 0xFF; 
    1ad6:	f7 01       	movw	r30, r14
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <panstamp+0x9>
  panstamp.init();
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	8c ef       	ldi	r24, 0xFC	; 252
    1ae4:	92 e0       	ldi	r25, 0x02	; 2
    1ae6:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN8PANSTAMP4initEhh>
    1aea:	40 ec       	ldi	r20, 0xC0	; 192
    1aec:	6e e3       	ldi	r22, 0x3E	; 62
    1aee:	8d ef       	ldi	r24, 0xFD	; 253
    1af0:	92 e0       	ldi	r25, 0x02	; 2
    1af2:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6CC11018writeRegEhh>
  panstamp.setHighTxPower();
   Serial.println("hier\n");
    1af6:	64 e5       	ldi	r22, 0x54	; 84
    1af8:	71 e0       	ldi	r23, 0x01	; 1
    1afa:	85 e1       	ldi	r24, 0x15	; 21
    1afc:	92 e0       	ldi	r25, 0x02	; 2
    1afe:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN5Print7printlnEPKc>
     * 
     * @param funct pointer to the custom function
     */
     inline void attachInterrupt(void (*funct)(CCPACKET*))
     {
       ccPacketReceived = funct;
    1b02:	85 e2       	ldi	r24, 0x25	; 37
    1b04:	9c e0       	ldi	r25, 0x0C	; 12
    1b06:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <panstamp+0xc>
    1b0a:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <panstamp+0xb>
  // Attach RF ISR
  panstamp.attachInterrupt(pacKetReceived);
}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	08 95       	ret

00001b22 <_GLOBAL__sub_I__Z14pacKetReceivedP8CCPACKET>:
 *
 * Class constructor
 */
SWAP::SWAP(void)
{  
  statusReceived = NULL;
    1b22:	ea e0       	ldi	r30, 0x0A	; 10
    1b24:	f3 e0       	ldi	r31, 0x03	; 3
    1b26:	13 86       	std	Z+11, r1	; 0x0b
    1b28:	12 86       	std	Z+10, r1	; 0x0a
  repeater = NULL;
    1b2a:	11 82       	std	Z+1, r1	; 0x01
    1b2c:	10 82       	st	Z, r1
  encryptPwd = NULL;
    1b2e:	11 86       	std	Z+9, r1	; 0x09
    1b30:	10 86       	std	Z+8, r1	; 0x08
  security = 0;
    1b32:	13 82       	std	Z+3, r1	; 0x03
    1b34:	08 95       	ret

00001b36 <_ZN8SWPACKETC1Ev>:
/**
 * SWPACKET
 * 
 * Class constructor
 */
SWPACKET::SWPACKET(void) 
    1b36:	08 95       	ret

00001b38 <_ZN8SWPACKET12smartEncryptEb>:
 *
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
    1b38:	af 92       	push	r10
    1b3a:	bf 92       	push	r11
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	a9 5b       	subi	r26, 0xB9	; 185
    1b50:	bf 4f       	sbci	r27, 0xFF	; 255
    1b52:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <swap+0x8>
    1b56:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <swap+0x9>
  byte i, j = 0;
  static uint8_t newData[CCPACKET_DATA_LEN];

  if (decrypt)
    1b5a:	66 23       	and	r22, r22
    1b5c:	21 f0       	breq	.+8      	; 0x1b66 <_ZN8SWPACKET12smartEncryptEb+0x2e>
    nonce ^= swap.encryptPwd[9];
    1b5e:	31 85       	ldd	r19, Z+9	; 0x09
    1b60:	2c 91       	ld	r18, X
    1b62:	23 27       	eor	r18, r19
    1b64:	2c 93       	st	X, r18

  function ^= swap.encryptPwd[11] ^ nonce;
    1b66:	2c 91       	ld	r18, X
    1b68:	ec 01       	movw	r28, r24
    1b6a:	c8 5b       	subi	r28, 0xB8	; 184
    1b6c:	df 4f       	sbci	r29, 0xFF	; 255
    1b6e:	38 81       	ld	r19, Y
    1b70:	32 27       	eor	r19, r18
    1b72:	43 85       	ldd	r20, Z+11	; 0x0b
    1b74:	34 27       	eor	r19, r20
    1b76:	38 83       	st	Y, r19
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
    1b78:	25 97       	sbiw	r28, 0x05	; 5
    1b7a:	32 85       	ldd	r19, Z+10	; 0x0a
    1b7c:	32 27       	eor	r19, r18
    1b7e:	48 81       	ld	r20, Y
    1b80:	59 81       	ldd	r21, Y+1	; 0x01
    1b82:	43 27       	eor	r20, r19
    1b84:	59 83       	std	Y+1, r21	; 0x01
    1b86:	48 83       	st	Y, r20
  regAddr ^= swap.encryptPwd[8] ^ nonce;
    1b88:	27 96       	adiw	r28, 0x07	; 7
    1b8a:	38 81       	ld	r19, Y
    1b8c:	32 27       	eor	r19, r18
    1b8e:	40 85       	ldd	r20, Z+8	; 0x08
    1b90:	34 27       	eor	r19, r20
    1b92:	38 83       	st	Y, r19
  regId ^= swap.encryptPwd[7] ^ nonce;
    1b94:	21 96       	adiw	r28, 0x01	; 1
    1b96:	38 81       	ld	r19, Y
    1b98:	32 27       	eor	r19, r18
    1b9a:	47 81       	ldd	r20, Z+7	; 0x07
    1b9c:	34 27       	eor	r19, r20
    1b9e:	38 83       	st	Y, r19

  for(i=0 ; i<value.length ; i++)
    1ba0:	23 96       	adiw	r28, 0x03	; 3
    1ba2:	78 81       	ld	r23, Y
    1ba4:	06 e1       	ldi	r16, 0x16	; 22
    1ba6:	13 e0       	ldi	r17, 0x03	; 3
    1ba8:	a1 2c       	mov	r10, r1
    1baa:	b1 2c       	mov	r11, r1
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
  byte i, j = 0;
    1bac:	30 e0       	ldi	r19, 0x00	; 0
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    1bae:	7c 01       	movw	r14, r24
    1bb0:	4c e4       	ldi	r20, 0x4C	; 76
    1bb2:	e4 0e       	add	r14, r20
    1bb4:	f1 1c       	adc	r15, r1
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    1bb6:	a7 16       	cp	r10, r23
    1bb8:	c8 f4       	brcc	.+50     	; 0x1bec <_ZN8SWPACKET12smartEncryptEb+0xb4>
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    1bba:	e7 01       	movw	r28, r14
    1bbc:	48 81       	ld	r20, Y
    1bbe:	59 81       	ldd	r21, Y+1	; 0x01
    1bc0:	4a 0d       	add	r20, r10
    1bc2:	5b 1d       	adc	r21, r11
    1bc4:	6f 01       	movw	r12, r30
    1bc6:	c3 0e       	add	r12, r19
    1bc8:	d1 1c       	adc	r13, r1
    1bca:	ea 01       	movw	r28, r20
    1bcc:	58 81       	ld	r21, Y
    1bce:	e6 01       	movw	r28, r12
    1bd0:	48 81       	ld	r20, Y
    1bd2:	45 27       	eor	r20, r21
    1bd4:	42 27       	eor	r20, r18
    1bd6:	e8 01       	movw	r28, r16
    1bd8:	49 93       	st	Y+, r20
    1bda:	8e 01       	movw	r16, r28
    j++;
    1bdc:	3f 5f       	subi	r19, 0xFF	; 255
    if (j == 11)  // Don't re-use last byte from password
    1bde:	3b 30       	cpi	r19, 0x0B	; 11
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <_ZN8SWPACKET12smartEncryptEb+0xac>
      j = 0;
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	df ef       	ldi	r29, 0xFF	; 255
    1be6:	ad 1a       	sub	r10, r29
    1be8:	bd 0a       	sbc	r11, r29
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    1bea:	e5 cf       	rjmp	.-54     	; 0x1bb6 <_ZN8SWPACKET12smartEncryptEb+0x7e>
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    j++;
    if (j == 11)  // Don't re-use last byte from password
      j = 0;
  }
  if (value.length > 0)
    1bec:	77 23       	and	r23, r23
    1bee:	39 f0       	breq	.+14     	; 0x1bfe <_ZN8SWPACKET12smartEncryptEb+0xc6>
    value.data = newData;
    1bf0:	ec 01       	movw	r28, r24
    1bf2:	c4 5b       	subi	r28, 0xB4	; 180
    1bf4:	df 4f       	sbci	r29, 0xFF	; 255
    1bf6:	46 e1       	ldi	r20, 0x16	; 22
    1bf8:	53 e0       	ldi	r21, 0x03	; 3
    1bfa:	59 83       	std	Y+1, r21	; 0x01
    1bfc:	48 83       	st	Y, r20

  if (!decrypt)
    1bfe:	61 11       	cpse	r22, r1
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <_ZN8SWPACKET12smartEncryptEb+0xd0>
    nonce ^= swap.encryptPwd[9];
    1c02:	81 85       	ldd	r24, Z+9	; 0x09
    1c04:	28 27       	eor	r18, r24
    1c06:	2c 93       	st	X, r18
}
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	bf 90       	pop	r11
    1c1a:	af 90       	pop	r10
    1c1c:	08 95       	ret

00001c1e <_ZN8SWPACKETC1EP8CCPACKET>:
 * 
 * Class constructor
 * 
 * @param packet Pointer to the raw CC1101 packet
 */
SWPACKET::SWPACKET(CCPACKET *packet) 
    1c1e:	cf 92       	push	r12
    1c20:	df 92       	push	r13
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	fc 01       	movw	r30, r24
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
    1c30:	db 01       	movw	r26, r22
    1c32:	8d 91       	ld	r24, X+
    1c34:	ef 01       	movw	r28, r30
    1c36:	89 93       	st	Y+, r24
  for(i=0 ; i<ccPacket.length ; i++)
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	98 17       	cp	r25, r24
    1c3c:	21 f0       	breq	.+8      	; 0x1c46 <_ZN8SWPACKETC1EP8CCPACKET+0x28>
    ccPacket.data[i] = packet->data[i];
    1c3e:	2d 91       	ld	r18, X+
    1c40:	29 93       	st	Y+, r18
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
  for(i=0 ; i<ccPacket.length ; i++)
    1c42:	9f 5f       	subi	r25, 0xFF	; 255
    1c44:	fa cf       	rjmp	.-12     	; 0x1c3a <_ZN8SWPACKETC1EP8CCPACKET+0x1c>
    ccPacket.data[i] = packet->data[i];
  
  hop = (ccPacket.data[2] >> 4) & 0x0F;
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	df 01       	movw	r26, r30
    1c4a:	ab 5b       	subi	r26, 0xBB	; 187
    1c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4e:	29 2f       	mov	r18, r25
    1c50:	22 95       	swap	r18
    1c52:	2f 70       	andi	r18, 0x0F	; 15
    1c54:	2c 93       	st	X, r18
  security = ccPacket.data[2] & 0x0F;
    1c56:	6f 01       	movw	r12, r30
    1c58:	26 e4       	ldi	r18, 0x46	; 70
    1c5a:	c2 0e       	add	r12, r18
    1c5c:	d1 1c       	adc	r13, r1
    1c5e:	9f 70       	andi	r25, 0x0F	; 15
    1c60:	d6 01       	movw	r26, r12
    1c62:	9c 93       	st	X, r25
  // AES-128 encrypted?
  if (security & 0x04)
    aesCrypto();  // Decrypt
  #endif
  
  nonce = ccPacket.data[3];
    1c64:	94 81       	ldd	r25, Z+4	; 0x04
    1c66:	11 96       	adiw	r26, 0x01	; 1
    1c68:	9c 93       	st	X, r25
  function = ccPacket.data[4] & ~SWAP_EXTENDED_ADDRESS_BIT;
    1c6a:	95 81       	ldd	r25, Z+5	; 0x05
    1c6c:	11 96       	adiw	r26, 0x01	; 1
    1c6e:	29 2f       	mov	r18, r25
    1c70:	2f 77       	andi	r18, 0x7F	; 127
    1c72:	2c 93       	st	X, r18
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	ef 01       	movw	r28, r30
    1c78:	cf 5b       	subi	r28, 0xBF	; 191
    1c7a:	df 4f       	sbci	r29, 0xFF	; 255
    1c7c:	8f 01       	movw	r16, r30
    1c7e:	0d 5b       	subi	r16, 0xBD	; 189
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	bf 01       	movw	r22, r30
    1c84:	66 5b       	subi	r22, 0xB6	; 182
    1c86:	7f 4f       	sbci	r23, 0xFF	; 255
    1c88:	af 01       	movw	r20, r30
    1c8a:	45 5b       	subi	r20, 0xB5	; 181
    1c8c:	5f 4f       	sbci	r21, 0xFF	; 255

  if (ccPacket.data[4] & SWAP_EXTENDED_ADDRESS_BIT)
    1c8e:	97 ff       	sbrs	r25, 7
    1c90:	16 c0       	rjmp	.+44     	; 0x1cbe <_ZN8SWPACKETC1EP8CCPACKET+0xa0>
  {
    addrType = SWAPADDR_EXTENDED;
    1c92:	91 e0       	ldi	r25, 0x01	; 1
    1c94:	9c 93       	st	X, r25
    destAddr = ccPacket.data[0];
    destAddr <<= 8;
    destAddr |= ccPacket.data[1];
    1c96:	21 81       	ldd	r18, Z+1	; 0x01
    1c98:	32 81       	ldd	r19, Z+2	; 0x02
    1c9a:	32 27       	eor	r19, r18
    1c9c:	23 27       	eor	r18, r19
    1c9e:	32 27       	eor	r19, r18
    1ca0:	39 83       	std	Y+1, r19	; 0x01
    1ca2:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[5];
    srcAddr <<= 8;
    srcAddr |= ccPacket.data[6];
    1ca4:	26 81       	ldd	r18, Z+6	; 0x06
    1ca6:	37 81       	ldd	r19, Z+7	; 0x07
    1ca8:	32 27       	eor	r19, r18
    1caa:	23 27       	eor	r18, r19
    1cac:	32 27       	eor	r19, r18
    1cae:	e8 01       	movw	r28, r16
    1cb0:	39 83       	std	Y+1, r19	; 0x01
    1cb2:	28 83       	st	Y, r18
    regAddr = ccPacket.data[7];
    regAddr <<= 8;
    regAddr |= ccPacket.data[8];
    1cb4:	91 85       	ldd	r25, Z+9	; 0x09
    1cb6:	eb 01       	movw	r28, r22
    1cb8:	98 83       	st	Y, r25
    regId = ccPacket.data[9];
    1cba:	92 85       	ldd	r25, Z+10	; 0x0a
    1cbc:	0e c0       	rjmp	.+28     	; 0x1cda <_ZN8SWPACKETC1EP8CCPACKET+0xbc>
  }
  else
  {
    addrType = SWAPADDR_SIMPLE;
    1cbe:	1c 92       	st	X, r1
    destAddr = ccPacket.data[0];
    1cc0:	21 81       	ldd	r18, Z+1	; 0x01
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	39 83       	std	Y+1, r19	; 0x01
    1cc6:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[1];
    1cc8:	22 81       	ldd	r18, Z+2	; 0x02
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	e8 01       	movw	r28, r16
    1cce:	39 83       	std	Y+1, r19	; 0x01
    1cd0:	28 83       	st	Y, r18
    regAddr = ccPacket.data[5];
    1cd2:	96 81       	ldd	r25, Z+6	; 0x06
    1cd4:	eb 01       	movw	r28, r22
    1cd6:	98 83       	st	Y, r25
    regId = ccPacket.data[6];
    1cd8:	97 81       	ldd	r25, Z+7	; 0x07
    1cda:	ea 01       	movw	r28, r20
    1cdc:	98 83       	st	Y, r25
  }

  value.data = ccPacket.data + SWAP_DATA_HEAD_LEN + 1;
    1cde:	9f 01       	movw	r18, r30
    1ce0:	24 5b       	subi	r18, 0xB4	; 180
    1ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce4:	af 01       	movw	r20, r30
    1ce6:	48 5f       	subi	r20, 0xF8	; 248
    1ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cea:	e9 01       	movw	r28, r18
    1cec:	59 83       	std	Y+1, r21	; 0x01
    1cee:	48 83       	st	Y, r20
  value.length = ccPacket.length - SWAP_DATA_HEAD_LEN - 1;
    1cf0:	2e 5f       	subi	r18, 0xFE	; 254
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf4:	87 50       	subi	r24, 0x07	; 7
    1cf6:	e9 01       	movw	r28, r18
    1cf8:	88 83       	st	Y, r24

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
    1cfa:	8c 91       	ld	r24, X
    1cfc:	81 11       	cpse	r24, r1
    1cfe:	10 c0       	rjmp	.+32     	; 0x1d20 <_ZN8SWPACKETC1EP8CCPACKET+0x102>
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
    1d00:	d6 01       	movw	r26, r12
    1d02:	8c 91       	ld	r24, X
    1d04:	81 ff       	sbrs	r24, 1
    1d06:	0c c0       	rjmp	.+24     	; 0x1d20 <_ZN8SWPACKETC1EP8CCPACKET+0x102>
      smartDecrypt();
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	cf 01       	movw	r24, r30
  }
  #endif
}
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	cf 90       	pop	r12
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
      smartDecrypt();
    1d1c:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <_ZN8SWPACKET12smartEncryptEb>
  }
  #endif
}
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	df 90       	pop	r13
    1d2e:	cf 90       	pop	r12
    1d30:	08 95       	ret

00001d32 <_ZN8SWPACKET4sendEv>:
 * @return
 *  True if the transmission succeeds
 *  False otherwise
 */
bool SWPACKET::send(void)
{
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	c1 54       	subi	r28, 0x41	; 65
    1d48:	d1 09       	sbc	r29, r1
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	8c 01       	movw	r16, r24
  byte i;
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
    1d56:	fc 01       	movw	r30, r24
    1d58:	e1 5b       	subi	r30, 0xB1	; 177
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	98 01       	movw	r18, r16
    1d60:	22 5b       	subi	r18, 0xB2	; 178
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	79 01       	movw	r14, r18
    1d66:	e7 54       	subi	r30, 0x47	; 71
    1d68:	f1 09       	sbc	r31, r1
    1d6a:	d9 01       	movw	r26, r18
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	10 c0       	rjmp	.+32     	; 0x1d90 <_ZN8SWPACKET4sendEv+0x5e>
    1d70:	8c 91       	ld	r24, X
    1d72:	90 e0       	ldi	r25, 0x00	; 0
  {
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
    1d74:	a8 01       	movw	r20, r16
    1d76:	44 5b       	subi	r20, 0xB4	; 180
    1d78:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	d8 f0       	brcs	.+54     	; 0x1db4 <_ZN8SWPACKET4sendEv+0x82>
    1d7e:	da 01       	movw	r26, r20
    1d80:	2d 91       	ld	r18, X+
    1d82:	3c 91       	ld	r19, X
    1d84:	d9 01       	movw	r26, r18
    1d86:	a8 0f       	add	r26, r24
    1d88:	b9 1f       	adc	r27, r25
    1d8a:	2c 91       	ld	r18, X
    1d8c:	21 93       	st	Z+, r18
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
  {
    for(i=0 ; i<value.length ; i++)
    1d8e:	f5 cf       	rjmp	.-22     	; 0x1d7a <_ZN8SWPACKET4sendEv+0x48>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    1d90:	3c 91       	ld	r19, X
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    1d96:	a8 01       	movw	r20, r16
    1d98:	44 5b       	subi	r20, 0xB4	; 180
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    1d9c:	83 17       	cp	r24, r19
    1d9e:	50 f4       	brcc	.+20     	; 0x1db4 <_ZN8SWPACKET4sendEv+0x82>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    1da0:	da 01       	movw	r26, r20
    1da2:	6d 91       	ld	r22, X+
    1da4:	7c 91       	ld	r23, X
    1da6:	db 01       	movw	r26, r22
    1da8:	a8 0f       	add	r26, r24
    1daa:	b9 1f       	adc	r27, r25
    1dac:	2c 91       	ld	r18, X
    1dae:	21 93       	st	Z+, r18
    1db0:	01 96       	adiw	r24, 0x01	; 1
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    1db2:	f4 cf       	rjmp	.-24     	; 0x1d9c <_ZN8SWPACKET4sendEv+0x6a>
  }

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
    // Need to encrypt packet?
    if (security & 0x02)
    1db4:	68 01       	movw	r12, r16
    1db6:	b6 e4       	ldi	r27, 0x46	; 70
    1db8:	cb 0e       	add	r12, r27
    1dba:	d1 1c       	adc	r13, r1
    1dbc:	f6 01       	movw	r30, r12
    1dbe:	80 81       	ld	r24, Z
    1dc0:	81 ff       	sbrs	r24, 1
    1dc2:	04 c0       	rjmp	.+8      	; 0x1dcc <_ZN8SWPACKET4sendEv+0x9a>
      smartEncrypt();
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	c8 01       	movw	r24, r16
    1dc8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <_ZN8SWPACKET12smartEncryptEb>
  #endif

  ccPacket.length = value.length + SWAP_DATA_HEAD_LEN + 1;
    1dcc:	d7 01       	movw	r26, r14
    1dce:	8c 91       	ld	r24, X
    1dd0:	89 5f       	subi	r24, 0xF9	; 249
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	80 83       	st	Z, r24

  ccPacket.data[2] = (hop << 4) & 0xF0;
    1dd6:	eb 5b       	subi	r30, 0xBB	; 187
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
  ccPacket.data[2] |= security & 0x0F;
    1dda:	80 81       	ld	r24, Z
    1ddc:	f0 e1       	ldi	r31, 0x10	; 16
    1dde:	8f 9f       	mul	r24, r31
    1de0:	c0 01       	movw	r24, r0
    1de2:	11 24       	eor	r1, r1
    1de4:	d6 01       	movw	r26, r12
    1de6:	9c 91       	ld	r25, X
    1de8:	9f 70       	andi	r25, 0x0F	; 15
    1dea:	89 2b       	or	r24, r25
    1dec:	f8 01       	movw	r30, r16
    1dee:	83 83       	std	Z+3, r24	; 0x03
  ccPacket.data[3] = nonce;
    1df0:	e9 5b       	subi	r30, 0xB9	; 185
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 81       	ld	r24, Z
    1df6:	d8 01       	movw	r26, r16
    1df8:	14 96       	adiw	r26, 0x04	; 4
    1dfa:	8c 93       	st	X, r24
    1dfc:	14 97       	sbiw	r26, 0x04	; 4
    ccPacket.data[6] = srcAddr & 0xFF;
    ccPacket.data[7] = (regAddr >> 8) & 0xFF;
    ccPacket.data[8] = regAddr & 0xFF;
    ccPacket.data[9] = regId;
  #else
    addrType = SWAPADDR_SIMPLE;
    1dfe:	32 96       	adiw	r30, 0x02	; 2
    1e00:	10 82       	st	Z, r1
    ccPacket.data[0] = destAddr;
    1e02:	38 97       	sbiw	r30, 0x08	; 8
    1e04:	80 81       	ld	r24, Z
    1e06:	f8 01       	movw	r30, r16
    1e08:	81 83       	std	Z+1, r24	; 0x01
    ccPacket.data[1] = srcAddr;
    1e0a:	ed 5b       	subi	r30, 0xBD	; 189
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	12 96       	adiw	r26, 0x02	; 2
    1e12:	8c 93       	st	X, r24
    1e14:	12 97       	sbiw	r26, 0x02	; 2
    ccPacket.data[4] = function;
    1e16:	35 96       	adiw	r30, 0x05	; 5
    1e18:	80 81       	ld	r24, Z
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	85 83       	std	Z+5, r24	; 0x05
    ccPacket.data[5] = regAddr;
    1e1e:	e6 5b       	subi	r30, 0xB6	; 182
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 81       	ld	r24, Z
    1e24:	16 96       	adiw	r26, 0x06	; 6
    1e26:	8c 93       	st	X, r24
    ccPacket.data[6] = regId;
    1e28:	31 96       	adiw	r30, 0x01	; 1
    1e2a:	80 81       	ld	r24, Z
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	87 83       	std	Z+7, r24	; 0x07
    1e30:	93 e0       	ldi	r25, 0x03	; 3
    1e32:	e9 2e       	mov	r14, r25
    1e34:	81 e4       	ldi	r24, 0x41	; 65
    1e36:	f8 01       	movw	r30, r16
    1e38:	de 01       	movw	r26, r28
    1e3a:	11 96       	adiw	r26, 0x01	; 1
    1e3c:	01 90       	ld	r0, Z+
    1e3e:	0d 92       	st	X+, r0
    1e40:	8a 95       	dec	r24
    1e42:	e1 f7       	brne	.-8      	; 0x1e3c <_ZN8SWPACKET4sendEv+0x10a>
     *  True if the transmission succeeds
     *  False otherwise
     */
    inline bool sendData(CCPACKET packet)
    {
      return radio.sendData(packet);
    1e44:	2d b7       	in	r18, 0x3d	; 61
    1e46:	3e b7       	in	r19, 0x3e	; 62
    1e48:	21 54       	subi	r18, 0x41	; 65
    1e4a:	31 09       	sbc	r19, r1
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	3e bf       	out	0x3e, r19	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	2d bf       	out	0x3d, r18	; 61
    1e56:	ad b7       	in	r26, 0x3d	; 61
    1e58:	be b7       	in	r27, 0x3e	; 62
    1e5a:	11 96       	adiw	r26, 0x01	; 1
    1e5c:	81 e4       	ldi	r24, 0x41	; 65
    1e5e:	fe 01       	movw	r30, r28
    1e60:	31 96       	adiw	r30, 0x01	; 1
    1e62:	01 90       	ld	r0, Z+
    1e64:	0d 92       	st	X+, r0
    1e66:	8a 95       	dec	r24
    1e68:	e1 f7       	brne	.-8      	; 0x1e62 <_ZN8SWPACKET4sendEv+0x130>
    1e6a:	8d ef       	ldi	r24, 0xFD	; 253
    1e6c:	92 e0       	ldi	r25, 0x02	; 2
    1e6e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN6CC11018sendDataE8CCPACKET>
    1e72:	f8 2e       	mov	r15, r24
  if (security & 0x04)
    aesCrypto();  // Encrypt
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	81 11       	cpse	r24, r1
    1e80:	0f c0       	rjmp	.+30     	; 0x1ea0 <_ZN8SWPACKET4sendEv+0x16e>
    1e82:	ea 94       	dec	r14
    1e84:	ee 20       	and	r14, r14
    1e86:	61 f0       	breq	.+24     	; 0x1ea0 <_ZN8SWPACKET4sendEv+0x16e>
  {
    i--;
    delay(SWAP_TX_DELAY);
    1e88:	60 91 05 03 	lds	r22, 0x0305	; 0x800305 <panstamp+0x9>
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	66 0f       	add	r22, r22
    1e90:	77 1f       	adc	r23, r23
    1e92:	07 2e       	mov	r0, r23
    1e94:	00 0c       	add	r0, r0
    1e96:	88 0b       	sbc	r24, r24
    1e98:	99 0b       	sbc	r25, r25
    1e9a:	0e 94 91 06 	call	0xd22	; 0xd22 <delay>
  if (security & 0x04)
    aesCrypto();  // Encrypt
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    1e9e:	ca cf       	rjmp	.-108    	; 0x1e34 <_ZN8SWPACKET4sendEv+0x102>
  {
    i--;
    delay(SWAP_TX_DELAY);
  }
 Serial.print(res);
    1ea0:	6f 2d       	mov	r22, r15
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	4a e0       	ldi	r20, 0x0A	; 10
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	85 e1       	ldi	r24, 0x15	; 21
    1eaa:	92 e0       	ldi	r25, 0x02	; 2
    1eac:	0e 94 0f 06 	call	0xc1e	; 0xc1e <_ZN5Print5printEii>
 Serial.println("\n");
    1eb0:	66 e4       	ldi	r22, 0x46	; 70
    1eb2:	71 e0       	ldi	r23, 0x01	; 1
    1eb4:	85 e1       	ldi	r24, 0x15	; 21
    1eb6:	92 e0       	ldi	r25, 0x02	; 2
    1eb8:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN5Print7printlnEPKc>
  return res;
  
}
    1ebc:	8f 2d       	mov	r24, r15
    1ebe:	cf 5b       	subi	r28, 0xBF	; 191
    1ec0:	df 4f       	sbci	r29, 0xFF	; 255
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	1f 91       	pop	r17
    1ed2:	0f 91       	pop	r16
    1ed4:	ff 90       	pop	r15
    1ed6:	ef 90       	pop	r14
    1ed8:	df 90       	pop	r13
    1eda:	cf 90       	pop	r12
    1edc:	08 95       	ret

00001ede <_ZN8SWSTATUSC1EhPhh7SWDTYPE>:
 * @param rId Register id
 * @param val	Pointer to new value
 * @param len Buffer length
 * @param type type of data contained
 */
SWSTATUS::SWSTATUS(unsigned char rId, unsigned char *val, unsigned char len, SWDTYPE type) 
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	ec 01       	movw	r28, r24
    1eee:	d6 2e       	mov	r13, r22
    1ef0:	7a 01       	movw	r14, r20
    1ef2:	12 2f       	mov	r17, r18
    1ef4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <_ZN8SWPACKETC1Ev>
{
  destAddr = SWAP_BCAST_ADDR;
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ef 5b       	subi	r30, 0xBF	; 191
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	11 82       	std	Z+1, r1	; 0x01
    1f00:	10 82       	st	Z, r1
  srcAddr = swap.devAddress;
    1f02:	ea e0       	ldi	r30, 0x0A	; 10
    1f04:	f3 e0       	ldi	r31, 0x03	; 3
    1f06:	92 81       	ldd	r25, Z+2	; 0x02
    1f08:	de 01       	movw	r26, r28
    1f0a:	ad 5b       	subi	r26, 0xBD	; 189
    1f0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f0e:	29 2f       	mov	r18, r25
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	11 96       	adiw	r26, 0x01	; 1
    1f14:	3c 93       	st	X, r19
    1f16:	2e 93       	st	-X, r18
  hop = 0;
    1f18:	12 96       	adiw	r26, 0x02	; 2
    1f1a:	1c 92       	st	X, r1
  security = swap.security & 0x0F;
    1f1c:	11 96       	adiw	r26, 0x01	; 1
    1f1e:	83 81       	ldd	r24, Z+3	; 0x03
    1f20:	8f 70       	andi	r24, 0x0F	; 15
    1f22:	8c 93       	st	X, r24
  nonce = ++swap.nonce;
    1f24:	84 81       	ldd	r24, Z+4	; 0x04
    1f26:	8f 5f       	subi	r24, 0xFF	; 255
    1f28:	84 83       	std	Z+4, r24	; 0x04
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e9 5b       	subi	r30, 0xB9	; 185
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 83       	st	Z, r24
  function = SWAPFUNCT_STA;
    1f32:	31 96       	adiw	r30, 0x01	; 1
    1f34:	10 82       	st	Z, r1
  regAddr = swap.devAddress;
    1f36:	32 96       	adiw	r30, 0x02	; 2
    1f38:	90 83       	st	Z, r25
  regId = rId;
    1f3a:	31 96       	adiw	r30, 0x01	; 1
    1f3c:	d0 82       	st	Z, r13
  value.length = len;
    1f3e:	33 96       	adiw	r30, 0x03	; 3
    1f40:	10 83       	st	Z, r17
  value.data = val;
    1f42:	32 97       	sbiw	r30, 0x02	; 2
    1f44:	f1 82       	std	Z+1, r15	; 0x01
    1f46:	e0 82       	st	Z, r14
  value.type = type;
    1f48:	c1 5b       	subi	r28, 0xB1	; 177
    1f4a:	df 4f       	sbci	r29, 0xFF	; 255
    1f4c:	08 83       	st	Y, r16
}
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	df 90       	pop	r13
    1f5c:	08 95       	ret

00001f5e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1f5e:	08 95       	ret

00001f60 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    1f60:	08 95       	ret

00001f62 <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1f62:	82 30       	cpi	r24, 0x02	; 2
    1f64:	e8 f4       	brcc	.+58     	; 0x1fa0 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    1f66:	e8 2f       	mov	r30, r24
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	ff 1f       	adc	r31, r31
    1f6e:	e1 5d       	subi	r30, 0xD1	; 209
    1f70:	fe 4f       	sbci	r31, 0xFE	; 254
    1f72:	71 83       	std	Z+1, r23	; 0x01
    1f74:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	41 f0       	breq	.+16     	; 0x1f8a <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1f7a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    1f7e:	8c 7f       	andi	r24, 0xFC	; 252
    1f80:	48 2b       	or	r20, r24
    1f82:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    1f86:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1f88:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1f8a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    1f8e:	83 7f       	andi	r24, 0xF3	; 243
    1f90:	44 0f       	add	r20, r20
    1f92:	55 1f       	adc	r21, r21
    1f94:	44 0f       	add	r20, r20
    1f96:	55 1f       	adc	r21, r21
    1f98:	48 2b       	or	r20, r24
    1f9a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    1f9e:	e9 9a       	sbi	0x1d, 1	; 29
    1fa0:	08 95       	ret

00001fa2 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1fa2:	82 30       	cpi	r24, 0x02	; 2
    1fa4:	78 f4       	brcc	.+30     	; 0x1fc4 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	11 f0       	breq	.+4      	; 0x1fae <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    1faa:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    1fae:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1fb0:	e8 2f       	mov	r30, r24
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	ee 0f       	add	r30, r30
    1fb6:	ff 1f       	adc	r31, r31
    1fb8:	e1 5d       	subi	r30, 0xD1	; 209
    1fba:	fe 4f       	sbci	r31, 0xFE	; 254
    1fbc:	80 eb       	ldi	r24, 0xB0	; 176
    1fbe:	9f e0       	ldi	r25, 0x0F	; 15
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
    1fc4:	08 95       	ret

00001fc6 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1fc6:	1f 92       	push	r1
    1fc8:	0f 92       	push	r0
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	0f 92       	push	r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	2f 93       	push	r18
    1fd2:	3f 93       	push	r19
    1fd4:	4f 93       	push	r20
    1fd6:	5f 93       	push	r21
    1fd8:	6f 93       	push	r22
    1fda:	7f 93       	push	r23
    1fdc:	8f 93       	push	r24
    1fde:	9f 93       	push	r25
    1fe0:	af 93       	push	r26
    1fe2:	bf 93       	push	r27
    1fe4:	ef 93       	push	r30
    1fe6:	ff 93       	push	r31
    1fe8:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <intFunc>
    1fec:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <intFunc+0x1>
    1ff0:	09 95       	icall
    1ff2:	ff 91       	pop	r31
    1ff4:	ef 91       	pop	r30
    1ff6:	bf 91       	pop	r27
    1ff8:	af 91       	pop	r26
    1ffa:	9f 91       	pop	r25
    1ffc:	8f 91       	pop	r24
    1ffe:	7f 91       	pop	r23
    2000:	6f 91       	pop	r22
    2002:	5f 91       	pop	r21
    2004:	4f 91       	pop	r20
    2006:	3f 91       	pop	r19
    2008:	2f 91       	pop	r18
    200a:	0f 90       	pop	r0
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	0f 90       	pop	r0
    2010:	1f 90       	pop	r1
    2012:	18 95       	reti

00002014 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2014:	1f 92       	push	r1
    2016:	0f 92       	push	r0
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	0f 92       	push	r0
    201c:	11 24       	eor	r1, r1
    201e:	2f 93       	push	r18
    2020:	3f 93       	push	r19
    2022:	4f 93       	push	r20
    2024:	5f 93       	push	r21
    2026:	6f 93       	push	r22
    2028:	7f 93       	push	r23
    202a:	8f 93       	push	r24
    202c:	9f 93       	push	r25
    202e:	af 93       	push	r26
    2030:	bf 93       	push	r27
    2032:	ef 93       	push	r30
    2034:	ff 93       	push	r31
    2036:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <intFunc+0x2>
    203a:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <intFunc+0x3>
    203e:	09 95       	icall
    2040:	ff 91       	pop	r31
    2042:	ef 91       	pop	r30
    2044:	bf 91       	pop	r27
    2046:	af 91       	pop	r26
    2048:	9f 91       	pop	r25
    204a:	8f 91       	pop	r24
    204c:	7f 91       	pop	r23
    204e:	6f 91       	pop	r22
    2050:	5f 91       	pop	r21
    2052:	4f 91       	pop	r20
    2054:	3f 91       	pop	r19
    2056:	2f 91       	pop	r18
    2058:	0f 90       	pop	r0
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	0f 90       	pop	r0
    205e:	1f 90       	pop	r1
    2060:	18 95       	reti

00002062 <__vector_6>:
  MCUSR &= ~(1<<WDRF);
  // start timed sequence
  WDTCSR |= (1<<WDCE) | (1<<WDE);
  // set new watchdog timeout value
  WDTCSR = bb;
  WDTCSR |= _BV(WDIE);    // Enable Watchdog interrupt
    2062:	1f 92       	push	r1
    2064:	0f 92       	push	r0
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	0f 92       	push	r0
    206a:	11 24       	eor	r1, r1
    206c:	0f 90       	pop	r0
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	0f 90       	pop	r0
    2072:	1f 90       	pop	r1
    2074:	18 95       	reti

00002076 <__vector_9>:

/**
 * Timer 2 (RTC) ISR routine
 */
ISR(TIMER2_OVF_vect)
{
    2076:	1f 92       	push	r1
    2078:	0f 92       	push	r0
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	0f 92       	push	r0
    207e:	11 24       	eor	r1, r1
    2080:	8f 93       	push	r24
    2082:	9f 93       	push	r25
    2084:	af 93       	push	r26
    2086:	bf 93       	push	r27
  AVRRTC::count++;    // Increment counter
    2088:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZN6AVRRTC5countE>
    208c:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <_ZN6AVRRTC5countE+0x1>
    2090:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <_ZN6AVRRTC5countE+0x2>
    2094:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <_ZN6AVRRTC5countE+0x3>
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	a1 1d       	adc	r26, r1
    209c:	b1 1d       	adc	r27, r1
    209e:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <_ZN6AVRRTC5countE>
    20a2:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <_ZN6AVRRTC5countE+0x1>
    20a6:	a0 93 55 03 	sts	0x0355, r26	; 0x800355 <_ZN6AVRRTC5countE+0x2>
    20aa:	b0 93 56 03 	sts	0x0356, r27	; 0x800356 <_ZN6AVRRTC5countE+0x3>
}
    20ae:	bf 91       	pop	r27
    20b0:	af 91       	pop	r26
    20b2:	9f 91       	pop	r25
    20b4:	8f 91       	pop	r24
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <_ZN7STORAGE4readEPhhhh>:
 * @pararm length Length to be read
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    20c0:	cf 92       	push	r12
    20c2:	df 92       	push	r13
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    20d0:	41 11       	cpse	r20, r1
    20d2:	1a c0       	rjmp	.+52     	; 0x2108 <_ZN7STORAGE4readEPhhhh+0x48>
    20d4:	7b 01       	movw	r14, r22
  {
    cli();
    20d6:	f8 94       	cli
    20d8:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    20da:	10 e0       	ldi	r17, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    20dc:	c2 2f       	mov	r28, r18
    20de:	d0 e0       	ldi	r29, 0x00	; 0
    20e0:	c6 1b       	sub	r28, r22
    20e2:	d7 0b       	sbc	r29, r23
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    20e4:	80 2f       	mov	r24, r16
    20e6:	96 01       	movw	r18, r12
    20e8:	2e 19       	sub	r18, r14
    20ea:	3f 09       	sbc	r19, r15
    20ec:	20 17       	cp	r18, r16
    20ee:	31 07       	cpc	r19, r17
    20f0:	48 f4       	brcc	.+18     	; 0x2104 <_ZN7STORAGE4readEPhhhh+0x44>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    20f2:	ce 01       	movw	r24, r28
    20f4:	8c 0d       	add	r24, r12
    20f6:	9d 1d       	adc	r25, r13
    20f8:	0e 94 23 12 	call	0x2446	; 0x2446 <eeprom_read_byte>
    20fc:	f6 01       	movw	r30, r12
    20fe:	81 93       	st	Z+, r24
    2100:	6f 01       	movw	r12, r30
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2102:	f0 cf       	rjmp	.-32     	; 0x20e4 <_ZN7STORAGE4readEPhhhh+0x24>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
    2104:	78 94       	sei
    2106:	01 c0       	rjmp	.+2      	; 0x210a <_ZN7STORAGE4readEPhhhh+0x4a>
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    2108:	80 e0       	ldi	r24, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
  }
  
  return i;
}
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	ff 90       	pop	r15
    2114:	ef 90       	pop	r14
    2116:	df 90       	pop	r13
    2118:	cf 90       	pop	r12
    211a:	08 95       	ret

0000211c <_ZN7STORAGE5writeEPhhhh>:
 * @pararm length Length to be written
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    212c:	41 11       	cpse	r20, r1
    212e:	19 c0       	rjmp	.+50     	; 0x2162 <_ZN7STORAGE5writeEPhhhh+0x46>
  {
    cli();
    2130:	f8 94       	cli
    2132:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    2134:	e1 2c       	mov	r14, r1
    2136:	f1 2c       	mov	r15, r1
    2138:	10 e0       	ldi	r17, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    213a:	c2 2f       	mov	r28, r18
    213c:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    213e:	80 2f       	mov	r24, r16
    2140:	e0 16       	cp	r14, r16
    2142:	f1 06       	cpc	r15, r17
    2144:	60 f4       	brcc	.+24     	; 0x215e <_ZN7STORAGE5writeEPhhhh+0x42>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    2146:	f6 01       	movw	r30, r12
    2148:	61 91       	ld	r22, Z+
    214a:	6f 01       	movw	r12, r30
    214c:	ce 01       	movw	r24, r28
    214e:	8e 0d       	add	r24, r14
    2150:	9f 1d       	adc	r25, r15
    2152:	0e 94 2b 12 	call	0x2456	; 0x2456 <eeprom_write_byte>
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2156:	ff ef       	ldi	r31, 0xFF	; 255
    2158:	ef 1a       	sub	r14, r31
    215a:	ff 0a       	sbc	r15, r31
    215c:	f0 cf       	rjmp	.-32     	; 0x213e <_ZN7STORAGE5writeEPhhhh+0x22>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
    215e:	78 94       	sei
    2160:	01 c0       	rjmp	.+2      	; 0x2164 <_ZN7STORAGE5writeEPhhhh+0x48>
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    2162:	80 e0       	ldi	r24, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
  }
  
  return i;
}
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	df 90       	pop	r13
    2172:	cf 90       	pop	r12
    2174:	08 95       	ret

00002176 <_ZN8REPEATER15saveTransactionEP8SWPACKET>:
 * Save transaction in array
 *
 * @param packet SWAP packet being repeated
 */
void REPEATER::saveTransaction(SWPACKET *packet)
{
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	7c 01       	movw	r14, r24
    2184:	8b 01       	movw	r16, r22
  static uint8_t transactionIndex = 0;

  // Save current transaction in first position
  transactions[transactionIndex].timeStamp = millis();         // Current time stamp
    2186:	c0 91 57 03 	lds	r28, 0x0357	; 0x800357 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    218a:	d0 e0       	ldi	r29, 0x00	; 0
    218c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <millis>
    2190:	23 e0       	ldi	r18, 0x03	; 3
    2192:	cc 0f       	add	r28, r28
    2194:	dd 1f       	adc	r29, r29
    2196:	2a 95       	dec	r18
    2198:	e1 f7       	brne	.-8      	; 0x2192 <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x1c>
    219a:	ce 0d       	add	r28, r14
    219c:	df 1d       	adc	r29, r15
    219e:	69 83       	std	Y+1, r22	; 0x01
    21a0:	7a 83       	std	Y+2, r23	; 0x02
    21a2:	8b 83       	std	Y+3, r24	; 0x03
    21a4:	9c 83       	std	Y+4, r25	; 0x04
  transactions[transactionIndex].function = packet->function;  // SWAP function
    21a6:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    21aa:	f8 01       	movw	r30, r16
    21ac:	e8 5b       	subi	r30, 0xB8	; 184
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	30 81       	ld	r19, Z
    21b2:	82 2f       	mov	r24, r18
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	f7 01       	movw	r30, r14
    21b8:	48 e0       	ldi	r20, 0x08	; 8
    21ba:	24 9f       	mul	r18, r20
    21bc:	e0 0d       	add	r30, r0
    21be:	f1 1d       	adc	r31, r1
    21c0:	11 24       	eor	r1, r1
    21c2:	35 83       	std	Z+5, r19	; 0x05
  transactions[transactionIndex].srcAddr = packet->srcAddr;    // Source address
    21c4:	d8 01       	movw	r26, r16
    21c6:	ad 5b       	subi	r26, 0xBD	; 189
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	2c 91       	ld	r18, X
    21cc:	26 83       	std	Z+6, r18	; 0x06
  transactions[transactionIndex].nonce = packet->nonce;        // Cyclic nonce
    21ce:	14 96       	adiw	r26, 0x04	; 4
    21d0:	2c 91       	ld	r18, X
    21d2:	27 83       	std	Z+7, r18	; 0x07
  transactions[transactionIndex].regAddr = packet->regAddr;    // Register address
    21d4:	f8 01       	movw	r30, r16
    21d6:	e6 5b       	subi	r30, 0xB6	; 182
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	40 81       	ld	r20, Z
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	9c 01       	movw	r18, r24
    21e0:	53 e0       	ldi	r21, 0x03	; 3
    21e2:	22 0f       	add	r18, r18
    21e4:	33 1f       	adc	r19, r19
    21e6:	5a 95       	dec	r21
    21e8:	e1 f7       	brne	.-8      	; 0x21e2 <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x6c>
    21ea:	f7 01       	movw	r30, r14
    21ec:	e2 0f       	add	r30, r18
    21ee:	f3 1f       	adc	r31, r19
    21f0:	40 83       	st	Z, r20
   
  transactionIndex = (transactionIndex + 1) % REPEATER_TABLE_DEPTH;
    21f2:	64 e1       	ldi	r22, 0x14	; 20
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	0e 94 b4 11 	call	0x2368	; 0x2368 <__divmodhi4>
    21fa:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
}
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	0f 91       	pop	r16
    2206:	ff 90       	pop	r15
    2208:	ef 90       	pop	r14
    220a:	08 95       	ret

0000220c <_ZN8REPEATER13packetHandlerEP8SWPACKET>:
 * Handle incoming packet. Repeat if necessary
 *
 * @param packet Pointer to the SWAP packet received
 */
void REPEATER::packetHandler(SWPACKET *packet)
{
    220c:	4f 92       	push	r4
    220e:	5f 92       	push	r5
    2210:	6f 92       	push	r6
    2212:	7f 92       	push	r7
    2214:	8f 92       	push	r8
    2216:	9f 92       	push	r9
    2218:	af 92       	push	r10
    221a:	bf 92       	push	r11
    221c:	cf 92       	push	r12
    221e:	df 92       	push	r13
    2220:	ef 92       	push	r14
    2222:	ff 92       	push	r15
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
  bool repeatPacket = true;
  uint32_t currentTime;

  if (enabled)
    222c:	fc 01       	movw	r30, r24
    222e:	ef 55       	subi	r30, 0x5F	; 95
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	20 81       	ld	r18, Z
    2234:	22 23       	and	r18, r18
    2236:	09 f4       	brne	.+2      	; 0x223a <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x2e>
    2238:	86 c0       	rjmp	.+268    	; 0x2346 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
  {
    // Don't repeat packets addressed to our device
    if (packet->destAddr != swap.devAddress)
    223a:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <swap+0x2>
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	fb 01       	movw	r30, r22
    2242:	ef 5b       	subi	r30, 0xBF	; 191
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	40 81       	ld	r20, Z
    2248:	51 81       	ldd	r21, Z+1	; 0x01
    224a:	42 17       	cp	r20, r18
    224c:	53 07       	cpc	r21, r19
    224e:	09 f4       	brne	.+2      	; 0x2252 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x46>
    2250:	7a c0       	rjmp	.+244    	; 0x2346 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    {
      // Don't repeat beyond the maximum hop count
      if (packet->hop < maxHopCount)
    2252:	4b 01       	movw	r8, r22
    2254:	25 e4       	ldi	r18, 0x45	; 69
    2256:	82 0e       	add	r8, r18
    2258:	91 1c       	adc	r9, r1
    225a:	f4 01       	movw	r30, r8
    225c:	30 81       	ld	r19, Z
    225e:	fc 01       	movw	r30, r24
    2260:	20 81       	ld	r18, Z
    2262:	32 17       	cp	r19, r18
    2264:	08 f0       	brcs	.+2      	; 0x2268 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x5c>
    2266:	6f c0       	rjmp	.+222    	; 0x2346 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    2268:	eb 01       	movw	r28, r22
    226a:	8c 01       	movw	r16, r24
    226c:	7c 01       	movw	r14, r24
    226e:	2c 01       	movw	r4, r24
    2270:	f0 ea       	ldi	r31, 0xA0	; 160
    2272:	4f 0e       	add	r4, r31
    2274:	51 1c       	adc	r5, r1

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
    2276:	3b 01       	movw	r6, r22
    2278:	2a e4       	ldi	r18, 0x4A	; 74
    227a:	62 0e       	add	r6, r18
    227c:	71 1c       	adc	r7, r1
          {
            // Same SWAP function?
            if (transactions[i].function == packet->function)
    227e:	6b 01       	movw	r12, r22
    2280:	88 e4       	ldi	r24, 0x48	; 72
    2282:	c8 0e       	add	r12, r24
    2284:	d1 1c       	adc	r13, r1
            {
              // Same cyclic nonce?
              if (transactions[i].nonce == packet->nonce)
    2286:	5b 01       	movw	r10, r22
    2288:	e7 e4       	ldi	r30, 0x47	; 71
    228a:	ae 0e       	add	r10, r30
    228c:	b1 1c       	adc	r11, r1

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
    228e:	f7 01       	movw	r30, r14
    2290:	90 85       	ldd	r25, Z+8	; 0x08
    2292:	f3 01       	movw	r30, r6
    2294:	80 81       	ld	r24, Z
    2296:	98 17       	cp	r25, r24
    2298:	39 f0       	breq	.+14     	; 0x22a8 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x9c>
    229a:	f8 e0       	ldi	r31, 0x08	; 8
    229c:	ef 0e       	add	r14, r31
    229e:	f1 1c       	adc	r15, r1
      if (packet->hop < maxHopCount)
      {
        uint8_t i;        

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
    22a0:	4e 14       	cp	r4, r14
    22a2:	5f 04       	cpc	r5, r15
    22a4:	a1 f7       	brne	.-24     	; 0x228e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x82>
    22a6:	1f c0       	rjmp	.+62     	; 0x22e6 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0xda>
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
          {
            // Same SWAP function?
            if (transactions[i].function == packet->function)
    22a8:	f7 01       	movw	r30, r14
    22aa:	95 81       	ldd	r25, Z+5	; 0x05
    22ac:	f6 01       	movw	r30, r12
    22ae:	80 81       	ld	r24, Z
    22b0:	98 13       	cpse	r25, r24
    22b2:	f3 cf       	rjmp	.-26     	; 0x229a <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
            {
              // Same cyclic nonce?
              if (transactions[i].nonce == packet->nonce)
    22b4:	f7 01       	movw	r30, r14
    22b6:	97 81       	ldd	r25, Z+7	; 0x07
    22b8:	f5 01       	movw	r30, r10
    22ba:	80 81       	ld	r24, Z
    22bc:	98 13       	cpse	r25, r24
    22be:	ed cf       	rjmp	.-38     	; 0x229a <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
              {
                currentTime = millis();
    22c0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <millis>
                // Time stamp not expired?
                if ((currentTime - transactions[i].timeStamp) < REPEATER_EXPIRATION_TIME)
    22c4:	f7 01       	movw	r30, r14
    22c6:	21 81       	ldd	r18, Z+1	; 0x01
    22c8:	32 81       	ldd	r19, Z+2	; 0x02
    22ca:	43 81       	ldd	r20, Z+3	; 0x03
    22cc:	54 81       	ldd	r21, Z+4	; 0x04
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	82 1b       	sub	r24, r18
    22d4:	93 0b       	sbc	r25, r19
    22d6:	a4 0b       	sbc	r26, r20
    22d8:	b5 0b       	sbc	r27, r21
    22da:	80 3d       	cpi	r24, 0xD0	; 208
    22dc:	97 40       	sbci	r25, 0x07	; 7
    22de:	a1 05       	cpc	r26, r1
    22e0:	b1 05       	cpc	r27, r1
    22e2:	d8 f6       	brcc	.-74     	; 0x229a <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
    22e4:	30 c0       	rjmp	.+96     	; 0x2346 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
        }

        // Repeat packet?
        if (repeatPacket)
        {
          packet->srcAddr = swap.devAddress;              // Modify source address
    22e6:	fe 01       	movw	r30, r28
    22e8:	ed 5b       	subi	r30, 0xBD	; 189
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <swap+0x2>
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
          packet->hop++;                                  // Increment hop counter
    22f6:	f4 01       	movw	r30, r8
    22f8:	80 81       	ld	r24, Z
    22fa:	8f 5f       	subi	r24, 0xFF	; 255
    22fc:	80 83       	st	Z, r24
          delay(SWAP_TX_DELAY);                           // Delay before sending
    22fe:	60 91 05 03 	lds	r22, 0x0305	; 0x800305 <panstamp+0x9>
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	66 0f       	add	r22, r22
    2306:	77 1f       	adc	r23, r23
    2308:	07 2e       	mov	r0, r23
    230a:	00 0c       	add	r0, r0
    230c:	88 0b       	sbc	r24, r24
    230e:	99 0b       	sbc	r25, r25
    2310:	0e 94 91 06 	call	0xd22	; 0xd22 <delay>
          if (packet->send())                             // Repeat packet
    2314:	ce 01       	movw	r24, r28
    2316:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN8SWPACKET4sendEv>
    231a:	88 23       	and	r24, r24
    231c:	a1 f0       	breq	.+40     	; 0x2346 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
            saveTransaction(packet);                      // Save transaction
    231e:	be 01       	movw	r22, r28
    2320:	c8 01       	movw	r24, r16
        }
      }
    }
  }
}
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	bf 90       	pop	r11
    2334:	af 90       	pop	r10
    2336:	9f 90       	pop	r9
    2338:	8f 90       	pop	r8
    233a:	7f 90       	pop	r7
    233c:	6f 90       	pop	r6
    233e:	5f 90       	pop	r5
    2340:	4f 90       	pop	r4
        {
          packet->srcAddr = swap.devAddress;              // Modify source address
          packet->hop++;                                  // Increment hop counter
          delay(SWAP_TX_DELAY);                           // Delay before sending
          if (packet->send())                             // Repeat packet
            saveTransaction(packet);                      // Save transaction
    2342:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <_ZN8REPEATER15saveTransactionEP8SWPACKET>
        }
      }
    }
  }
}
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	ff 90       	pop	r15
    2350:	ef 90       	pop	r14
    2352:	df 90       	pop	r13
    2354:	cf 90       	pop	r12
    2356:	bf 90       	pop	r11
    2358:	af 90       	pop	r10
    235a:	9f 90       	pop	r9
    235c:	8f 90       	pop	r8
    235e:	7f 90       	pop	r7
    2360:	6f 90       	pop	r6
    2362:	5f 90       	pop	r5
    2364:	4f 90       	pop	r4
    2366:	08 95       	ret

00002368 <__divmodhi4>:
    2368:	97 fb       	bst	r25, 7
    236a:	07 2e       	mov	r0, r23
    236c:	16 f4       	brtc	.+4      	; 0x2372 <__divmodhi4+0xa>
    236e:	00 94       	com	r0
    2370:	07 d0       	rcall	.+14     	; 0x2380 <__divmodhi4_neg1>
    2372:	77 fd       	sbrc	r23, 7
    2374:	09 d0       	rcall	.+18     	; 0x2388 <__divmodhi4_neg2>
    2376:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodhi4>
    237a:	07 fc       	sbrc	r0, 7
    237c:	05 d0       	rcall	.+10     	; 0x2388 <__divmodhi4_neg2>
    237e:	3e f4       	brtc	.+14     	; 0x238e <__divmodhi4_exit>

00002380 <__divmodhi4_neg1>:
    2380:	90 95       	com	r25
    2382:	81 95       	neg	r24
    2384:	9f 4f       	sbci	r25, 0xFF	; 255
    2386:	08 95       	ret

00002388 <__divmodhi4_neg2>:
    2388:	70 95       	com	r23
    238a:	61 95       	neg	r22
    238c:	7f 4f       	sbci	r23, 0xFF	; 255

0000238e <__divmodhi4_exit>:
    238e:	08 95       	ret

00002390 <__udivmodsi4>:
    2390:	a1 e2       	ldi	r26, 0x21	; 33
    2392:	1a 2e       	mov	r1, r26
    2394:	aa 1b       	sub	r26, r26
    2396:	bb 1b       	sub	r27, r27
    2398:	fd 01       	movw	r30, r26
    239a:	0d c0       	rjmp	.+26     	; 0x23b6 <__udivmodsi4_ep>

0000239c <__udivmodsi4_loop>:
    239c:	aa 1f       	adc	r26, r26
    239e:	bb 1f       	adc	r27, r27
    23a0:	ee 1f       	adc	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	a2 17       	cp	r26, r18
    23a6:	b3 07       	cpc	r27, r19
    23a8:	e4 07       	cpc	r30, r20
    23aa:	f5 07       	cpc	r31, r21
    23ac:	20 f0       	brcs	.+8      	; 0x23b6 <__udivmodsi4_ep>
    23ae:	a2 1b       	sub	r26, r18
    23b0:	b3 0b       	sbc	r27, r19
    23b2:	e4 0b       	sbc	r30, r20
    23b4:	f5 0b       	sbc	r31, r21

000023b6 <__udivmodsi4_ep>:
    23b6:	66 1f       	adc	r22, r22
    23b8:	77 1f       	adc	r23, r23
    23ba:	88 1f       	adc	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	1a 94       	dec	r1
    23c0:	69 f7       	brne	.-38     	; 0x239c <__udivmodsi4_loop>
    23c2:	60 95       	com	r22
    23c4:	70 95       	com	r23
    23c6:	80 95       	com	r24
    23c8:	90 95       	com	r25
    23ca:	9b 01       	movw	r18, r22
    23cc:	ac 01       	movw	r20, r24
    23ce:	bd 01       	movw	r22, r26
    23d0:	cf 01       	movw	r24, r30
    23d2:	08 95       	ret

000023d4 <__divmodsi4>:
    23d4:	05 2e       	mov	r0, r21
    23d6:	97 fb       	bst	r25, 7
    23d8:	1e f4       	brtc	.+6      	; 0x23e0 <__divmodsi4+0xc>
    23da:	00 94       	com	r0
    23dc:	0e 94 01 12 	call	0x2402	; 0x2402 <__negsi2>
    23e0:	57 fd       	sbrc	r21, 7
    23e2:	07 d0       	rcall	.+14     	; 0x23f2 <__divmodsi4_neg2>
    23e4:	0e 94 c8 11 	call	0x2390	; 0x2390 <__udivmodsi4>
    23e8:	07 fc       	sbrc	r0, 7
    23ea:	03 d0       	rcall	.+6      	; 0x23f2 <__divmodsi4_neg2>
    23ec:	4e f4       	brtc	.+18     	; 0x2400 <__divmodsi4_exit>
    23ee:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__negsi2>

000023f2 <__divmodsi4_neg2>:
    23f2:	50 95       	com	r21
    23f4:	40 95       	com	r20
    23f6:	30 95       	com	r19
    23f8:	21 95       	neg	r18
    23fa:	3f 4f       	sbci	r19, 0xFF	; 255
    23fc:	4f 4f       	sbci	r20, 0xFF	; 255
    23fe:	5f 4f       	sbci	r21, 0xFF	; 255

00002400 <__divmodsi4_exit>:
    2400:	08 95       	ret

00002402 <__negsi2>:
    2402:	90 95       	com	r25
    2404:	80 95       	com	r24
    2406:	70 95       	com	r23
    2408:	61 95       	neg	r22
    240a:	7f 4f       	sbci	r23, 0xFF	; 255
    240c:	8f 4f       	sbci	r24, 0xFF	; 255
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	08 95       	ret

00002412 <__udivmodhi4>:
    2412:	aa 1b       	sub	r26, r26
    2414:	bb 1b       	sub	r27, r27
    2416:	51 e1       	ldi	r21, 0x11	; 17
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <__udivmodhi4_ep>

0000241a <__udivmodhi4_loop>:
    241a:	aa 1f       	adc	r26, r26
    241c:	bb 1f       	adc	r27, r27
    241e:	a6 17       	cp	r26, r22
    2420:	b7 07       	cpc	r27, r23
    2422:	10 f0       	brcs	.+4      	; 0x2428 <__udivmodhi4_ep>
    2424:	a6 1b       	sub	r26, r22
    2426:	b7 0b       	sbc	r27, r23

00002428 <__udivmodhi4_ep>:
    2428:	88 1f       	adc	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	5a 95       	dec	r21
    242e:	a9 f7       	brne	.-22     	; 0x241a <__udivmodhi4_loop>
    2430:	80 95       	com	r24
    2432:	90 95       	com	r25
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	08 95       	ret

0000243a <__tablejump2__>:
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	05 90       	lpm	r0, Z+
    2440:	f4 91       	lpm	r31, Z
    2442:	e0 2d       	mov	r30, r0
    2444:	09 94       	ijmp

00002446 <eeprom_read_byte>:
    2446:	f9 99       	sbic	0x1f, 1	; 31
    2448:	fe cf       	rjmp	.-4      	; 0x2446 <eeprom_read_byte>
    244a:	92 bd       	out	0x22, r25	; 34
    244c:	81 bd       	out	0x21, r24	; 33
    244e:	f8 9a       	sbi	0x1f, 0	; 31
    2450:	99 27       	eor	r25, r25
    2452:	80 b5       	in	r24, 0x20	; 32
    2454:	08 95       	ret

00002456 <eeprom_write_byte>:
    2456:	26 2f       	mov	r18, r22

00002458 <eeprom_write_r18>:
    2458:	f9 99       	sbic	0x1f, 1	; 31
    245a:	fe cf       	rjmp	.-4      	; 0x2458 <eeprom_write_r18>
    245c:	1f ba       	out	0x1f, r1	; 31
    245e:	92 bd       	out	0x22, r25	; 34
    2460:	81 bd       	out	0x21, r24	; 33
    2462:	20 bd       	out	0x20, r18	; 32
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	fa 9a       	sbi	0x1f, 2	; 31
    246a:	f9 9a       	sbi	0x1f, 1	; 31
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	08 95       	ret

00002472 <_exit>:
    2472:	f8 94       	cli

00002474 <__stop_program>:
    2474:	ff cf       	rjmp	.-2      	; 0x2474 <__stop_program>
