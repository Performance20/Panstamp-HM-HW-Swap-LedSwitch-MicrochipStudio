
binouts2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  0000276e  00002802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000276e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fe  00800158  00800158  0000285a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000285a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  000028d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012e28  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b0c  00000000  00000000  00015da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000449a  00000000  00000000  000198ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000130c  00000000  00000000  0001dd48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003404  00000000  00000000  0001f054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000617c  00000000  00000000  00022458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  000285d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
       4:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__vector_1>
       8:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__vector_6>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__vector_9>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 b9 04 	jmp	0x972	; 0x972 <__vector_18>
      4c:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	53 02       	muls	r21, r19
      ba:	1b 05       	cpc	r17, r11
      bc:	34 0c       	add	r3, r4
      be:	8a 0e       	add	r8, r26

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	ee e6       	ldi	r30, 0x6E	; 110
      d4:	f7 e2       	ldi	r31, 0x27	; 39
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a8 35       	cpi	r26, 0x58	; 88
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	23 e0       	ldi	r18, 0x03	; 3
      e4:	a8 e5       	ldi	r26, 0x58	; 88
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a6 35       	cpi	r26, 0x56	; 86
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	c0 e6       	ldi	r28, 0x60	; 96
      f6:	d0 e0       	ldi	r29, 0x00	; 0
      f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_global_ctors+0x10>
      fa:	21 97       	sbiw	r28, 0x01	; 1
      fc:	fe 01       	movw	r30, r28
      fe:	0e 94 99 13 	call	0x2732	; 0x2732 <__tablejump2__>
     102:	cc 35       	cpi	r28, 0x5C	; 92
     104:	d1 07       	cpc	r29, r17
     106:	c9 f7       	brne	.-14     	; 0xfa <__do_global_ctors+0x8>
     108:	0e 94 49 05 	call	0xa92	; 0xa92 <main>
     10c:	0c 94 b5 13 	jmp	0x276a	; 0x276a <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <setup>:
 * setup
 *
 * Arduino setup function
 */
void setup()
{
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	00 d0       	rcall	.+0      	; 0x11e <setup+0xa>
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
  int i;
  
  INIT_ONBOARD_LED();
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	84 e0       	ldi	r24, 0x04	; 4
     126:	0e 94 6f 07 	call	0xede	; 0xede <pinMode>
  digitalWrite(LED, LOW);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	0e 94 ab 07 	call	0xf56	; 0xf56 <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     132:	26 e0       	ldi	r18, 0x06	; 6
     134:	40 e0       	ldi	r20, 0x00	; 0
     136:	56 e9       	ldi	r21, 0x96	; 150
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	70 e0       	ldi	r23, 0x00	; 0
     13c:	83 e1       	ldi	r24, 0x13	; 19
     13e:	92 e0       	ldi	r25, 0x02	; 2
     140:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN14HardwareSerial5beginEmh>

  Serial.begin(SERIAL_SPEED);
  // Init SWAP stack
  swap.init();
     144:	88 e0       	ldi	r24, 0x08	; 8
     146:	93 e0       	ldi	r25, 0x03	; 3
     148:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <_ZN4SWAP4initEv>
     * 
     * @param paLevel amplification value
     */
    inline void setTxPowerAmp(uint8_t paLevel)
    {
      writeReg(CC1101_PATABLE, paLevel);
     14c:	40 ec       	ldi	r20, 0xC0	; 192
     14e:	6e e3       	ldi	r22, 0x3E	; 62
     150:	8b ef       	ldi	r24, 0xFB	; 251
     152:	92 e0       	ldi	r25, 0x02	; 2
     154:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     15c:	88 23       	and	r24, r24
     15e:	29 f0       	breq	.+10     	; 0x16a <setup+0x56>
        return regTable[regId];
     160:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <regTable>
     164:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <regTable+0x1>
     168:	02 c0       	rjmp	.+4      	; 0x16e <setup+0x5a>

      return NULL;
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	90 e0       	ldi	r25, 0x00	; 0
  // Optionally set transmission amplifier to its maximum level (10dB)
  panstamp.setHighTxPower();
  
  // Transmit product code
  swap.getRegister(REGI_PRODUCTCODE)->getData();
     16e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN8REGISTER7getDataEv>
     172:	83 e0       	ldi	r24, 0x03	; 3
     174:	8a 83       	std	Y+2, r24	; 0x02
     * @param state New system state
     */
    void __inline__ enterSystemState(SYSTATE state)
    {
      // System state register -> id = 3
      regTable[3]->setData((uint8_t *) &state);
     176:	be 01       	movw	r22, r28
     178:	6e 5f       	subi	r22, 0xFE	; 254
     17a:	7f 4f       	sbci	r23, 0xFF	; 255
     17c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <regTable+0x6>
     180:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <regTable+0x7>
     184:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN8REGISTER7setDataEPh>
     188:	06 e0       	ldi	r16, 0x06	; 6
     18a:	10 e0       	ldi	r17, 0x00	; 0
  swap.enterSystemState(SYSTATE_SYNC);
   
// During 3 seconds, listen the network for possible commands whilst the LED blinks
  for(i=0 ; i<6 ; i++)
  {
	digitalWrite(LED, HIGH);
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	0e 94 ab 07 	call	0xf56	; 0xf56 <digitalWrite>
	delay(50);
     194:	62 e3       	ldi	r22, 0x32	; 50
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <delay>
	digitalWrite(LED, LOW);
     1a0:	60 e0       	ldi	r22, 0x00	; 0
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	0e 94 ab 07 	call	0xf56	; 0xf56 <digitalWrite>
	delay(450);
     1a8:	62 ec       	ldi	r22, 0xC2	; 194
     1aa:	71 e0       	ldi	r23, 0x01	; 1
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <delay>
     1b4:	01 50       	subi	r16, 0x01	; 1
     1b6:	11 09       	sbc	r17, r1
  
  // Enter SYNC state
  swap.enterSystemState(SYSTATE_SYNC);
   
// During 3 seconds, listen the network for possible commands whilst the LED blinks
  for(i=0 ; i<6 ; i++)
     1b8:	49 f7       	brne	.-46     	; 0x18c <setup+0x78>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1be:	8b 30       	cpi	r24, 0x0B	; 11
     1c0:	28 f0       	brcs	.+10     	; 0x1cc <setup+0xb8>
        return regTable[regId];
     1c2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <regTable+0x14>
     1c6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <regTable+0x15>
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <setup+0xbc>

      return NULL;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
	digitalWrite(LED, HIGH);
	delay(50);
	digitalWrite(LED, LOW);
	delay(450);
  }
  swap.getRegister(REGI_TXINTERVAL)->getData();
     1d0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN8REGISTER7getDataEv>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1d8:	8c 30       	cpi	r24, 0x0C	; 12
     1da:	28 f0       	brcs	.+10     	; 0x1e6 <setup+0xd2>
        return regTable[regId];
     1dc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <regTable+0x16>
     1e0:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <regTable+0x17>
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <setup+0xd6>

      return NULL;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0

  // Transmit initial custom register
  swap.getRegister(REGI_VOLTSUPPLY)->getData();
     1ea:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN8REGISTER7getDataEv>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1f2:	8d 30       	cpi	r24, 0x0D	; 13
     1f4:	28 f0       	brcs	.+10     	; 0x200 <setup+0xec>
        return regTable[regId];
     1f6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <regTable+0x18>
     1fa:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <regTable+0x19>
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <setup+0xf0>

      return NULL;
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
  swap.getRegister(REGI_LED0)->getData();
     204:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN8REGISTER7getDataEv>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     20c:	8e 30       	cpi	r24, 0x0E	; 14
     20e:	28 f0       	brcs	.+10     	; 0x21a <setup+0x106>
        return regTable[regId];
     210:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <regTable+0x1a>
     214:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <regTable+0x1b>
     218:	02 c0       	rjmp	.+4      	; 0x21e <setup+0x10a>

      return NULL;
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
  swap.getRegister(REGI_LED1)->getData();
     21e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN8REGISTER7getDataEv>
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	89 83       	std	Y+1, r24	; 0x01
     * @param state New system state
     */
    void __inline__ enterSystemState(SYSTATE state)
    {
      // System state register -> id = 3
      regTable[3]->setData((uint8_t *) &state);
     226:	be 01       	movw	r22, r28
     228:	6f 5f       	subi	r22, 0xFF	; 255
     22a:	7f 4f       	sbci	r23, 0xFF	; 255
     22c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <regTable+0x6>
     230:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <regTable+0x7>
     234:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN8REGISTER7setDataEPh>
  
  swap.enterSystemState(SYSTATE_RXOFF);
  //Serial.println("Modul ready!\n");
}
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	08 95       	ret

00000246 <loop>:
void loop()
{
  int i;

   // Sleep
  swap.goToSleep();
     246:	88 e0       	ldi	r24, 0x08	; 8
     248:	93 e0       	ldi	r25, 0x03	; 3
     24a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <_ZN4SWAP9goToSleepEv>
   
  // receive possible set commands
  delay(1000);
     24e:	68 ee       	ldi	r22, 0xE8	; 232
     250:	73 e0       	ldi	r23, 0x03	; 3
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 c7 06 	call	0xd8e	; 0xd8e <delay>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     25e:	8c 30       	cpi	r24, 0x0C	; 12
     260:	28 f0       	brcs	.+10     	; 0x26c <loop+0x26>
        return regTable[regId];
     262:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <regTable+0x16>
     266:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <regTable+0x17>
     26a:	02 c0       	rjmp	.+4      	; 0x270 <loop+0x2a>

      return NULL;
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
  // update Processor Voltage
  swap.getRegister(REGI_VOLTSUPPLY)->getData();
     270:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <_ZN8REGISTER7getDataEv>

00000274 <_Z7setled1hPh>:
 *
 */
const void setled1(byte rId, byte *state)
{
    // Update register
  regTable[rId]->value[0] = state[0];
     274:	e8 2f       	mov	r30, r24
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	ee 0f       	add	r30, r30
     27a:	ff 1f       	adc	r31, r31
     27c:	ef 5f       	subi	r30, 0xFF	; 255
     27e:	fe 4f       	sbci	r31, 0xFE	; 254
     280:	01 90       	ld	r0, Z+
     282:	f0 81       	ld	r31, Z
     284:	e0 2d       	mov	r30, r0
     286:	05 80       	ldd	r0, Z+5	; 0x05
     288:	f6 81       	ldd	r31, Z+6	; 0x06
     28a:	e0 2d       	mov	r30, r0
     28c:	db 01       	movw	r26, r22
     28e:	8c 91       	ld	r24, X
     290:	80 83       	st	Z, r24
     292:	08 95       	ret

00000294 <_Z13setTxIntervalhPh>:
DECLARE_REGISTERS_END()

/**
 * Definition of common getter/setter callback functions
 */
DEFINE_COMMON_CALLBACKS()
     294:	83 e8       	ldi	r24, 0x83	; 131
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <_ZN8REGISTER20setValueFromBeBufferEPh>

0000029c <_Z13setDevAddresshPh>:
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	c0 55       	subi	r28, 0x50	; 80
     2b0:	d1 09       	sbc	r29, r1
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	7b 01       	movw	r14, r22
     2be:	80 e9       	ldi	r24, 0x90	; 144
     2c0:	c8 2e       	mov	r12, r24
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	d8 2e       	mov	r13, r24
     2c6:	01 e0       	ldi	r16, 0x01	; 1
     2c8:	f6 01       	movw	r30, r12
     2ca:	27 81       	ldd	r18, Z+7	; 0x07
     2cc:	ab 01       	movw	r20, r22
     2ce:	64 81       	ldd	r22, Z+4	; 0x04
     2d0:	ce 01       	movw	r24, r28
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     2d8:	ce 01       	movw	r24, r28
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN8SWPACKET4sendEv>
     2e0:	b7 01       	movw	r22, r14
     2e2:	c6 01       	movw	r24, r12
     2e4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZN8REGISTER20setValueFromBeBufferEPh>
     2e8:	f6 01       	movw	r30, r12
     2ea:	87 81       	ldd	r24, Z+7	; 0x07
     2ec:	e8 0e       	add	r14, r24
     2ee:	f1 1c       	adc	r15, r1
     2f0:	f7 01       	movw	r30, r14
     2f2:	31 97       	sbiw	r30, 0x01	; 1
     2f4:	60 81       	ld	r22, Z
     2f6:	8b ef       	ldi	r24, 0xFB	; 251
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN6CC110113setDevAddressEh>
     2fe:	c0 5b       	subi	r28, 0xB0	; 176
     300:	df 4f       	sbci	r29, 0xFF	; 255
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	0f 91       	pop	r16
     312:	ff 90       	pop	r15
     314:	ef 90       	pop	r14
     316:	df 90       	pop	r13
     318:	cf 90       	pop	r12
     31a:	08 95       	ret

0000031c <_Z12setNetworkIdhPh>:
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	c0 55       	subi	r28, 0x50	; 80
     32c:	d1 09       	sbc	r29, r1
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
     338:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <regNetworkId+0x5>
     33c:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <regNetworkId+0x6>
     340:	db 01       	movw	r26, r22
     342:	9c 91       	ld	r25, X
     344:	80 81       	ld	r24, Z
     346:	98 13       	cpse	r25, r24
     348:	05 c0       	rjmp	.+10     	; 0x354 <_Z12setNetworkIdhPh+0x38>
     34a:	11 96       	adiw	r26, 0x01	; 1
     34c:	9c 91       	ld	r25, X
     34e:	81 81       	ldd	r24, Z+1	; 0x01
     350:	98 17       	cp	r25, r24
     352:	a1 f0       	breq	.+40     	; 0x37c <_Z12setNetworkIdhPh+0x60>
     354:	7b 01       	movw	r14, r22
     356:	01 e0       	ldi	r16, 0x01	; 1
     358:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <regNetworkId+0x7>
     35c:	ab 01       	movw	r20, r22
     35e:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <regNetworkId+0x4>
     362:	ce 01       	movw	r24, r28
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     36a:	ce 01       	movw	r24, r28
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN8SWPACKET4sendEv>
     372:	b7 01       	movw	r22, r14
     374:	8b ef       	ldi	r24, 0xFB	; 251
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	0e 94 82 08 	call	0x1104	; 0x1104 <_ZN6CC110111setSyncWordEPh>
     37c:	c0 5b       	subi	r28, 0xB0	; 176
     37e:	df 4f       	sbci	r29, 0xFF	; 255
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	08 95       	ret

00000396 <_Z18updtProcVoltSupplyh>:
 * Measure voltage supply and update register
 *
 * 'rId'  Register ID
 */
const void updtProcVoltSupply(byte rId)
{  
     396:	cf 93       	push	r28
     398:	c8 2f       	mov	r28, r24
  unsigned long result = panstamp.getVcc();
     39a:	8a ef       	ldi	r24, 0xFA	; 250
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN8PANSTAMP6getVccEv>
  
  // Update register value
  regTable[rId]->value[0] = (result >> 8) & 0xFF;
     3a2:	ec 2f       	mov	r30, r28
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	ef 5f       	subi	r30, 0xFF	; 255
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	a0 81       	ld	r26, Z
     3b0:	b1 81       	ldd	r27, Z+1	; 0x01
     3b2:	15 96       	adiw	r26, 0x05	; 5
     3b4:	0d 90       	ld	r0, X+
     3b6:	bc 91       	ld	r27, X
     3b8:	a0 2d       	mov	r26, r0
     3ba:	ac 01       	movw	r20, r24
     3bc:	5c 93       	st	X, r21
  regTable[rId]->value[1] = result & 0xFF;
     3be:	01 90       	ld	r0, Z+
     3c0:	f0 81       	ld	r31, Z
     3c2:	e0 2d       	mov	r30, r0
     3c4:	05 80       	ldd	r0, Z+5	; 0x05
     3c6:	f6 81       	ldd	r31, Z+6	; 0x06
     3c8:	e0 2d       	mov	r30, r0
     3ca:	81 83       	std	Z+1, r24	; 0x01
}
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <_Z14setFreqChannelhPh>:
DECLARE_REGISTERS_END()

/**
 * Definition of common getter/setter callback functions
 */
DEFINE_COMMON_CALLBACKS()
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	c0 55       	subi	r28, 0x50	; 80
     3e0:	d1 09       	sbc	r29, r1
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <regFreqChannel+0x5>
     3f0:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <regFreqChannel+0x6>
     3f4:	db 01       	movw	r26, r22
     3f6:	9c 91       	ld	r25, X
     3f8:	80 81       	ld	r24, Z
     3fa:	98 17       	cp	r25, r24
     3fc:	a9 f0       	breq	.+42     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     3fe:	7b 01       	movw	r14, r22
     400:	01 e0       	ldi	r16, 0x01	; 1
     402:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <regFreqChannel+0x7>
     406:	ab 01       	movw	r20, r22
     408:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <regFreqChannel+0x4>
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     414:	ce 01       	movw	r24, r28
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN8SWPACKET4sendEv>
     41c:	f7 01       	movw	r30, r14
     41e:	60 81       	ld	r22, Z
     420:	8b ef       	ldi	r24, 0xFB	; 251
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN6CC110110setChannelEh>
     428:	c0 5b       	subi	r28, 0xB0	; 176
     42a:	df 4f       	sbci	r29, 0xFF	; 255
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	08 95       	ret

00000442 <_Z7setled0hPh>:
 */
const void setled0(byte rId, byte *state)
{
    // Update register
	
   regTable[rId]->value[0] = state[0];
     442:	e8 2f       	mov	r30, r24
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	ee 0f       	add	r30, r30
     448:	ff 1f       	adc	r31, r31
     44a:	ef 5f       	subi	r30, 0xFF	; 255
     44c:	fe 4f       	sbci	r31, 0xFE	; 254
     44e:	01 90       	ld	r0, Z+
     450:	f0 81       	ld	r31, Z
     452:	e0 2d       	mov	r30, r0
     454:	05 80       	ldd	r0, Z+5	; 0x05
     456:	f6 81       	ldd	r31, Z+6	; 0x06
     458:	e0 2d       	mov	r30, r0
     45a:	db 01       	movw	r26, r22
     45c:	8c 91       	ld	r24, X
     45e:	80 83       	st	Z, r24
   if (led0[0] == 0)
     460:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <led0>
     464:	81 11       	cpse	r24, r1
     466:	02 c0       	rjmp	.+4      	; 0x46c <_Z7setled0hPh+0x2a>
		digitalWrite(LED, LOW);
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	01 c0       	rjmp	.+2      	; 0x46e <_Z7setled0hPh+0x2c>
   else
		digitalWrite(LED, HIGH);
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <digitalWrite>

00000474 <_Z11setSysStatehPh>:
DECLARE_REGISTERS_END()

/**
 * Definition of common getter/setter callback functions
 */
DEFINE_COMMON_CALLBACKS()
     474:	fb 01       	movw	r30, r22
     476:	80 81       	ld	r24, Z
     478:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <swap+0x5>
     47c:	80 81       	ld	r24, Z
     47e:	81 11       	cpse	r24, r1
     480:	11 c0       	rjmp	.+34     	; 0x4a4 <_Z11setSysStatehPh+0x30>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     482:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     486:	84 30       	cpi	r24, 0x04	; 4
     488:	28 f0       	brcs	.+10     	; 0x494 <_Z11setSysStatehPh+0x20>
        return regTable[regId];
     48a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <regTable+0x6>
     48e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <regTable+0x7>
     492:	02 c0       	rjmp	.+4      	; 0x498 <_Z11setSysStatehPh+0x24>

      return NULL;
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZN8REGISTER14sendSwapStatusEv>
     49c:	8a ef       	ldi	r24, 0xFA	; 250
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <_ZN8PANSTAMP5resetEv>
     4a4:	08 95       	ret

000004a6 <_GLOBAL__sub_I_regProductCode>:
     * @param typ      Type of SWAP data (SWDTYPE)
     * @param eepromAddr address in EEPROM. Set to -1 if the register value has not to
     * be saved in EEPROM
     * @param bank sector in eeprom or flash
     */
    REGISTER(uint8_t *val, const uint8_t len, const void (*updateValH)(uint8_t rId), const void (*setValH)(uint8_t rId, uint8_t *v), const SWDTYPE typ=SWDTYPE_OTHER, const int eepromAddr=-1, const uint16_t bank=DEFAULT_NVOLAT_SECTION): id(regIndex++), value(val), length(len), updateValue(updateValH), setValue(setValH), type(typ), eepromAddress(eepromAddr), eepromBank(bank) {};
     4a6:	e6 e0       	ldi	r30, 0x06	; 6
     4a8:	f2 e0       	ldi	r31, 0x02	; 2
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	10 82       	st	Z, r1
     4ae:	13 82       	std	Z+3, r1	; 0x03
     4b0:	12 82       	std	Z+2, r1	; 0x02
     4b2:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <regIndex>
     4b6:	94 83       	std	Z+4, r25	; 0x04
     4b8:	25 e2       	ldi	r18, 0x25	; 37
     4ba:	31 e0       	ldi	r19, 0x01	; 1
     4bc:	36 83       	std	Z+6, r19	; 0x06
     4be:	25 83       	std	Z+5, r18	; 0x05
     4c0:	88 e0       	ldi	r24, 0x08	; 8
     4c2:	87 83       	std	Z+7, r24	; 0x07
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 87       	std	Z+8, r24	; 0x08
     4c8:	2f ef       	ldi	r18, 0xFF	; 255
     4ca:	3f ef       	ldi	r19, 0xFF	; 255
     4cc:	32 87       	std	Z+10, r19	; 0x0a
     4ce:	21 87       	std	Z+9, r18	; 0x09
     4d0:	14 86       	std	Z+12, r1	; 0x0c
     4d2:	13 86       	std	Z+11, r1	; 0x0b
     4d4:	e9 ef       	ldi	r30, 0xF9	; 249
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	11 82       	std	Z+1, r1	; 0x01
     4da:	10 82       	st	Z, r1
     4dc:	13 82       	std	Z+3, r1	; 0x03
     4de:	12 82       	std	Z+2, r1	; 0x02
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	49 0f       	add	r20, r25
     4e4:	44 83       	std	Z+4, r20	; 0x04
     4e6:	41 e2       	ldi	r20, 0x21	; 33
     4e8:	51 e0       	ldi	r21, 0x01	; 1
     4ea:	56 83       	std	Z+6, r21	; 0x06
     4ec:	45 83       	std	Z+5, r20	; 0x05
     4ee:	44 e0       	ldi	r20, 0x04	; 4
     4f0:	47 83       	std	Z+7, r20	; 0x07
     4f2:	80 87       	std	Z+8, r24	; 0x08
     4f4:	32 87       	std	Z+10, r19	; 0x0a
     4f6:	21 87       	std	Z+9, r18	; 0x09
     4f8:	14 86       	std	Z+12, r1	; 0x0c
     4fa:	13 86       	std	Z+11, r1	; 0x0b
     4fc:	ec ee       	ldi	r30, 0xEC	; 236
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	11 82       	std	Z+1, r1	; 0x01
     502:	10 82       	st	Z, r1
     504:	13 82       	std	Z+3, r1	; 0x03
     506:	12 82       	std	Z+2, r1	; 0x02
     508:	52 e0       	ldi	r21, 0x02	; 2
     50a:	59 0f       	add	r21, r25
     50c:	54 83       	std	Z+4, r21	; 0x04
     50e:	6d e1       	ldi	r22, 0x1D	; 29
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	76 83       	std	Z+6, r23	; 0x06
     514:	65 83       	std	Z+5, r22	; 0x05
     516:	47 83       	std	Z+7, r20	; 0x07
     518:	80 87       	std	Z+8, r24	; 0x08
     51a:	32 87       	std	Z+10, r19	; 0x0a
     51c:	21 87       	std	Z+9, r18	; 0x09
     51e:	14 86       	std	Z+12, r1	; 0x0c
     520:	13 86       	std	Z+11, r1	; 0x0b
     522:	ef ed       	ldi	r30, 0xDF	; 223
     524:	f1 e0       	ldi	r31, 0x01	; 1
     526:	11 82       	std	Z+1, r1	; 0x01
     528:	10 82       	st	Z, r1
     52a:	4a e3       	ldi	r20, 0x3A	; 58
     52c:	52 e0       	ldi	r21, 0x02	; 2
     52e:	53 83       	std	Z+3, r21	; 0x03
     530:	42 83       	std	Z+2, r20	; 0x02
     532:	43 e0       	ldi	r20, 0x03	; 3
     534:	49 0f       	add	r20, r25
     536:	44 83       	std	Z+4, r20	; 0x04
     538:	4d e0       	ldi	r20, 0x0D	; 13
     53a:	53 e0       	ldi	r21, 0x03	; 3
     53c:	56 83       	std	Z+6, r21	; 0x06
     53e:	45 83       	std	Z+5, r20	; 0x05
     540:	87 83       	std	Z+7, r24	; 0x07
     542:	80 87       	std	Z+8, r24	; 0x08
     544:	32 87       	std	Z+10, r19	; 0x0a
     546:	21 87       	std	Z+9, r18	; 0x09
     548:	14 86       	std	Z+12, r1	; 0x0c
     54a:	13 86       	std	Z+11, r1	; 0x0b
     54c:	e2 ed       	ldi	r30, 0xD2	; 210
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	11 82       	std	Z+1, r1	; 0x01
     552:	10 82       	st	Z, r1
     554:	48 ee       	ldi	r20, 0xE8	; 232
     556:	51 e0       	ldi	r21, 0x01	; 1
     558:	53 83       	std	Z+3, r21	; 0x03
     55a:	42 83       	std	Z+2, r20	; 0x02
     55c:	44 e0       	ldi	r20, 0x04	; 4
     55e:	49 0f       	add	r20, r25
     560:	44 83       	std	Z+4, r20	; 0x04
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	53 e0       	ldi	r21, 0x03	; 3
     566:	56 83       	std	Z+6, r21	; 0x06
     568:	45 83       	std	Z+5, r20	; 0x05
     56a:	87 83       	std	Z+7, r24	; 0x07
     56c:	10 86       	std	Z+8, r1	; 0x08
     56e:	12 86       	std	Z+10, r1	; 0x0a
     570:	11 86       	std	Z+9, r1	; 0x09
     572:	14 86       	std	Z+12, r1	; 0x0c
     574:	13 86       	std	Z+11, r1	; 0x0b
     576:	e5 ec       	ldi	r30, 0xC5	; 197
     578:	f1 e0       	ldi	r31, 0x01	; 1
     57a:	11 82       	std	Z+1, r1	; 0x01
     57c:	10 82       	st	Z, r1
     57e:	13 82       	std	Z+3, r1	; 0x03
     580:	12 82       	std	Z+2, r1	; 0x02
     582:	45 e0       	ldi	r20, 0x05	; 5
     584:	49 0f       	add	r20, r25
     586:	44 83       	std	Z+4, r20	; 0x04
     588:	4b e0       	ldi	r20, 0x0B	; 11
     58a:	53 e0       	ldi	r21, 0x03	; 3
     58c:	56 83       	std	Z+6, r21	; 0x06
     58e:	45 83       	std	Z+5, r20	; 0x05
     590:	87 83       	std	Z+7, r24	; 0x07
     592:	80 87       	std	Z+8, r24	; 0x08
     594:	32 87       	std	Z+10, r19	; 0x0a
     596:	21 87       	std	Z+9, r18	; 0x09
     598:	14 86       	std	Z+12, r1	; 0x0c
     59a:	13 86       	std	Z+11, r1	; 0x0b
     59c:	e7 eb       	ldi	r30, 0xB7	; 183
     59e:	f1 e0       	ldi	r31, 0x01	; 1
     5a0:	11 82       	std	Z+1, r1	; 0x01
     5a2:	10 82       	st	Z, r1
     5a4:	13 82       	std	Z+3, r1	; 0x03
     5a6:	12 82       	std	Z+2, r1	; 0x02
     5a8:	46 e0       	ldi	r20, 0x06	; 6
     5aa:	49 0f       	add	r20, r25
     5ac:	44 83       	std	Z+4, r20	; 0x04
     5ae:	44 ec       	ldi	r20, 0xC4	; 196
     5b0:	51 e0       	ldi	r21, 0x01	; 1
     5b2:	56 83       	std	Z+6, r21	; 0x06
     5b4:	45 83       	std	Z+5, r20	; 0x05
     5b6:	87 83       	std	Z+7, r24	; 0x07
     5b8:	80 87       	std	Z+8, r24	; 0x08
     5ba:	32 87       	std	Z+10, r19	; 0x0a
     5bc:	21 87       	std	Z+9, r18	; 0x09
     5be:	14 86       	std	Z+12, r1	; 0x0c
     5c0:	13 86       	std	Z+11, r1	; 0x0b
     5c2:	ea ea       	ldi	r30, 0xAA	; 170
     5c4:	f1 e0       	ldi	r31, 0x01	; 1
     5c6:	11 82       	std	Z+1, r1	; 0x01
     5c8:	10 82       	st	Z, r1
     5ca:	13 82       	std	Z+3, r1	; 0x03
     5cc:	12 82       	std	Z+2, r1	; 0x02
     5ce:	47 e0       	ldi	r20, 0x07	; 7
     5d0:	49 0f       	add	r20, r25
     5d2:	44 83       	std	Z+4, r20	; 0x04
     5d4:	4c e0       	ldi	r20, 0x0C	; 12
     5d6:	53 e0       	ldi	r21, 0x03	; 3
     5d8:	56 83       	std	Z+6, r21	; 0x06
     5da:	45 83       	std	Z+5, r20	; 0x05
     5dc:	87 83       	std	Z+7, r24	; 0x07
     5de:	80 87       	std	Z+8, r24	; 0x08
     5e0:	32 87       	std	Z+10, r19	; 0x0a
     5e2:	21 87       	std	Z+9, r18	; 0x09
     5e4:	14 86       	std	Z+12, r1	; 0x0c
     5e6:	13 86       	std	Z+11, r1	; 0x0b
     5e8:	ed e9       	ldi	r30, 0x9D	; 157
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	11 82       	std	Z+1, r1	; 0x01
     5ee:	10 82       	st	Z, r1
     5f0:	4e e8       	ldi	r20, 0x8E	; 142
     5f2:	51 e0       	ldi	r21, 0x01	; 1
     5f4:	53 83       	std	Z+3, r21	; 0x03
     5f6:	42 83       	std	Z+2, r20	; 0x02
     5f8:	48 e0       	ldi	r20, 0x08	; 8
     5fa:	49 0f       	add	r20, r25
     5fc:	44 83       	std	Z+4, r20	; 0x04
     5fe:	41 e0       	ldi	r20, 0x01	; 1
     600:	53 e0       	ldi	r21, 0x03	; 3
     602:	56 83       	std	Z+6, r21	; 0x06
     604:	45 83       	std	Z+5, r20	; 0x05
     606:	42 e0       	ldi	r20, 0x02	; 2
     608:	47 83       	std	Z+7, r20	; 0x07
     60a:	80 87       	std	Z+8, r24	; 0x08
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	72 87       	std	Z+10, r23	; 0x0a
     612:	61 87       	std	Z+9, r22	; 0x09
     614:	14 86       	std	Z+12, r1	; 0x0c
     616:	13 86       	std	Z+11, r1	; 0x0b
     618:	e0 e9       	ldi	r30, 0x90	; 144
     61a:	f1 e0       	ldi	r31, 0x01	; 1
     61c:	11 82       	std	Z+1, r1	; 0x01
     61e:	10 82       	st	Z, r1
     620:	6e e4       	ldi	r22, 0x4E	; 78
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	73 83       	std	Z+3, r23	; 0x03
     626:	62 83       	std	Z+2, r22	; 0x02
     628:	59 e0       	ldi	r21, 0x09	; 9
     62a:	59 0f       	add	r21, r25
     62c:	54 83       	std	Z+4, r21	; 0x04
     62e:	6a e0       	ldi	r22, 0x0A	; 10
     630:	73 e0       	ldi	r23, 0x03	; 3
     632:	76 83       	std	Z+6, r23	; 0x06
     634:	65 83       	std	Z+5, r22	; 0x05
     636:	87 83       	std	Z+7, r24	; 0x07
     638:	10 86       	std	Z+8, r1	; 0x08
     63a:	65 e0       	ldi	r22, 0x05	; 5
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	72 87       	std	Z+10, r23	; 0x0a
     640:	61 87       	std	Z+9, r22	; 0x09
     642:	14 86       	std	Z+12, r1	; 0x0c
     644:	13 86       	std	Z+11, r1	; 0x0b
     646:	e3 e8       	ldi	r30, 0x83	; 131
     648:	f1 e0       	ldi	r31, 0x01	; 1
     64a:	11 82       	std	Z+1, r1	; 0x01
     64c:	10 82       	st	Z, r1
     64e:	6a e4       	ldi	r22, 0x4A	; 74
     650:	71 e0       	ldi	r23, 0x01	; 1
     652:	73 83       	std	Z+3, r23	; 0x03
     654:	62 83       	std	Z+2, r22	; 0x02
     656:	5a e0       	ldi	r21, 0x0A	; 10
     658:	59 0f       	add	r21, r25
     65a:	54 83       	std	Z+4, r21	; 0x04
     65c:	6e e0       	ldi	r22, 0x0E	; 14
     65e:	73 e0       	ldi	r23, 0x03	; 3
     660:	76 83       	std	Z+6, r23	; 0x06
     662:	65 83       	std	Z+5, r22	; 0x05
     664:	47 83       	std	Z+7, r20	; 0x07
     666:	10 86       	std	Z+8, r1	; 0x08
     668:	66 e0       	ldi	r22, 0x06	; 6
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	72 87       	std	Z+10, r23	; 0x0a
     66e:	61 87       	std	Z+9, r22	; 0x09
     670:	14 86       	std	Z+12, r1	; 0x0c
     672:	13 86       	std	Z+11, r1	; 0x0b
     674:	e4 e7       	ldi	r30, 0x74	; 116
     676:	f1 e0       	ldi	r31, 0x01	; 1
     678:	6b ec       	ldi	r22, 0xCB	; 203
     67a:	71 e0       	ldi	r23, 0x01	; 1
     67c:	71 83       	std	Z+1, r23	; 0x01
     67e:	60 83       	st	Z, r22
     680:	13 82       	std	Z+3, r1	; 0x03
     682:	12 82       	std	Z+2, r1	; 0x02
     684:	5b e0       	ldi	r21, 0x0B	; 11
     686:	59 0f       	add	r21, r25
     688:	54 83       	std	Z+4, r21	; 0x04
     68a:	61 e8       	ldi	r22, 0x81	; 129
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	76 83       	std	Z+6, r23	; 0x06
     690:	65 83       	std	Z+5, r22	; 0x05
     692:	47 83       	std	Z+7, r20	; 0x07
     694:	80 87       	std	Z+8, r24	; 0x08
     696:	32 87       	std	Z+10, r19	; 0x0a
     698:	21 87       	std	Z+9, r18	; 0x09
     69a:	14 86       	std	Z+12, r1	; 0x0c
     69c:	13 86       	std	Z+11, r1	; 0x0b
     69e:	e6 e6       	ldi	r30, 0x66	; 102
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	11 82       	std	Z+1, r1	; 0x01
     6a4:	10 82       	st	Z, r1
     6a6:	41 e2       	ldi	r20, 0x21	; 33
     6a8:	52 e0       	ldi	r21, 0x02	; 2
     6aa:	53 83       	std	Z+3, r21	; 0x03
     6ac:	42 83       	std	Z+2, r20	; 0x02
     6ae:	4c e0       	ldi	r20, 0x0C	; 12
     6b0:	49 0f       	add	r20, r25
     6b2:	44 83       	std	Z+4, r20	; 0x04
     6b4:	43 e7       	ldi	r20, 0x73	; 115
     6b6:	51 e0       	ldi	r21, 0x01	; 1
     6b8:	56 83       	std	Z+6, r21	; 0x06
     6ba:	45 83       	std	Z+5, r20	; 0x05
     6bc:	87 83       	std	Z+7, r24	; 0x07
     6be:	80 87       	std	Z+8, r24	; 0x08
     6c0:	32 87       	std	Z+10, r19	; 0x0a
     6c2:	21 87       	std	Z+9, r18	; 0x09
     6c4:	14 86       	std	Z+12, r1	; 0x0c
     6c6:	13 86       	std	Z+11, r1	; 0x0b
     6c8:	e8 e5       	ldi	r30, 0x58	; 88
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	11 82       	std	Z+1, r1	; 0x01
     6ce:	10 82       	st	Z, r1
     6d0:	4a e3       	ldi	r20, 0x3A	; 58
     6d2:	51 e0       	ldi	r21, 0x01	; 1
     6d4:	53 83       	std	Z+3, r21	; 0x03
     6d6:	42 83       	std	Z+2, r20	; 0x02
     6d8:	4e e0       	ldi	r20, 0x0E	; 14
     6da:	49 0f       	add	r20, r25
     6dc:	40 93 07 03 	sts	0x0307, r20	; 0x800307 <regIndex>
     6e0:	93 5f       	subi	r25, 0xF3	; 243
     6e2:	94 83       	std	Z+4, r25	; 0x04
     6e4:	45 e6       	ldi	r20, 0x65	; 101
     6e6:	51 e0       	ldi	r21, 0x01	; 1
     6e8:	56 83       	std	Z+6, r21	; 0x06
     6ea:	45 83       	std	Z+5, r20	; 0x05
     6ec:	87 83       	std	Z+7, r24	; 0x07
     6ee:	80 87       	std	Z+8, r24	; 0x08
     6f0:	32 87       	std	Z+10, r19	; 0x0a
     6f2:	21 87       	std	Z+9, r18	; 0x09
     6f4:	14 86       	std	Z+12, r1	; 0x0c
     6f6:	13 86       	std	Z+11, r1	; 0x0b
     6f8:	08 95       	ret

000006fa <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     6fa:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     6fc:	91 8d       	ldd	r25, Z+25	; 0x19
     6fe:	22 8d       	ldd	r18, Z+26	; 0x1a
     700:	89 2f       	mov	r24, r25
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	80 5c       	subi	r24, 0xC0	; 192
     706:	9f 4f       	sbci	r25, 0xFF	; 255
     708:	82 1b       	sub	r24, r18
     70a:	91 09       	sbc	r25, r1
}
     70c:	8f 73       	andi	r24, 0x3F	; 63
     70e:	99 27       	eor	r25, r25
     710:	08 95       	ret

00000712 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     712:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     714:	91 8d       	ldd	r25, Z+25	; 0x19
     716:	82 8d       	ldd	r24, Z+26	; 0x1a
     718:	98 17       	cp	r25, r24
     71a:	31 f0       	breq	.+12     	; 0x728 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     71c:	82 8d       	ldd	r24, Z+26	; 0x1a
     71e:	e8 0f       	add	r30, r24
     720:	f1 1d       	adc	r31, r1
     722:	85 8d       	ldd	r24, Z+29	; 0x1d
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     72c:	08 95       	ret

0000072e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     72e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     730:	91 8d       	ldd	r25, Z+25	; 0x19
     732:	82 8d       	ldd	r24, Z+26	; 0x1a
     734:	98 17       	cp	r25, r24
     736:	61 f0       	breq	.+24     	; 0x750 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     738:	82 8d       	ldd	r24, Z+26	; 0x1a
     73a:	df 01       	movw	r26, r30
     73c:	a8 0f       	add	r26, r24
     73e:	b1 1d       	adc	r27, r1
     740:	5d 96       	adiw	r26, 0x1d	; 29
     742:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     744:	92 8d       	ldd	r25, Z+26	; 0x1a
     746:	9f 5f       	subi	r25, 0xFF	; 255
     748:	9f 73       	andi	r25, 0x3F	; 63
     74a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     754:	08 95       	ret

00000756 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     756:	fc 01       	movw	r30, r24
     758:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     75a:	44 8d       	ldd	r20, Z+28	; 0x1c
     75c:	25 2f       	mov	r18, r21
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	84 2f       	mov	r24, r20
     762:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     764:	82 1b       	sub	r24, r18
     766:	93 0b       	sbc	r25, r19
     768:	54 17       	cp	r21, r20
     76a:	10 f0       	brcs	.+4      	; 0x770 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     76c:	cf 96       	adiw	r24, 0x3f	; 63
     76e:	08 95       	ret
  return tail - head - 1;
     770:	01 97       	sbiw	r24, 0x01	; 1
}
     772:	08 95       	ret

00000774 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     774:	81 e1       	ldi	r24, 0x11	; 17
     776:	95 e0       	ldi	r25, 0x05	; 5
     778:	89 2b       	or	r24, r25
     77a:	49 f0       	breq	.+18     	; 0x78e <_Z14serialEventRunv+0x1a>
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	89 2b       	or	r24, r25
     782:	29 f0       	breq	.+10     	; 0x78e <_Z14serialEventRunv+0x1a>
     784:	0e 94 11 05 	call	0xa22	; 0xa22 <_Z17Serial0_availablev>
     788:	81 11       	cpse	r24, r1
     78a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     78e:	08 95       	ret

00000790 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     790:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     792:	84 8d       	ldd	r24, Z+28	; 0x1c
     794:	df 01       	movw	r26, r30
     796:	a8 0f       	add	r26, r24
     798:	b1 1d       	adc	r27, r1
     79a:	a3 5a       	subi	r26, 0xA3	; 163
     79c:	bf 4f       	sbci	r27, 0xFF	; 255
     79e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     7a0:	84 8d       	ldd	r24, Z+28	; 0x1c
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	8f 73       	andi	r24, 0x3F	; 63
     7a8:	99 27       	eor	r25, r25
     7aa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     7ac:	a6 89       	ldd	r26, Z+22	; 0x16
     7ae:	b7 89       	ldd	r27, Z+23	; 0x17
     7b0:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     7b2:	a0 89       	ldd	r26, Z+16	; 0x10
     7b4:	b1 89       	ldd	r27, Z+17	; 0x11
     7b6:	8c 91       	ld	r24, X
     7b8:	83 70       	andi	r24, 0x03	; 3
     7ba:	80 64       	ori	r24, 0x40	; 64
     7bc:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     7be:	93 8d       	ldd	r25, Z+27	; 0x1b
     7c0:	84 8d       	ldd	r24, Z+28	; 0x1c
     7c2:	98 13       	cpse	r25, r24
     7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     7c6:	02 88       	ldd	r0, Z+18	; 0x12
     7c8:	f3 89       	ldd	r31, Z+19	; 0x13
     7ca:	e0 2d       	mov	r30, r0
     7cc:	80 81       	ld	r24, Z
     7ce:	8f 7d       	andi	r24, 0xDF	; 223
     7d0:	80 83       	st	Z, r24
     7d2:	08 95       	ret

000007d4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	ec 01       	movw	r28, r24
  _written = true;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     7e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7ea:	98 13       	cpse	r25, r24
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <_ZN14HardwareSerial5writeEh+0x24>
     7ee:	e8 89       	ldd	r30, Y+16	; 0x10
     7f0:	f9 89       	ldd	r31, Y+17	; 0x11
     7f2:	80 81       	ld	r24, Z
     7f4:	85 fd       	sbrc	r24, 5
     7f6:	26 c0       	rjmp	.+76     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     7f8:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     7fa:	0b 8d       	ldd	r16, Y+27	; 0x1b
     7fc:	10 e0       	ldi	r17, 0x00	; 0
     7fe:	0f 5f       	subi	r16, 0xFF	; 255
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	0f 73       	andi	r16, 0x3F	; 63
     804:	11 27       	eor	r17, r17
     806:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     808:	8c 8d       	ldd	r24, Y+28	; 0x1c
     80a:	e8 12       	cpse	r14, r24
     80c:	0c c0       	rjmp	.+24     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
    if (bit_is_clear(SREG, SREG_I)) {
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	07 fc       	sbrc	r0, 7
     812:	fa cf       	rjmp	.-12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     814:	e8 89       	ldd	r30, Y+16	; 0x10
     816:	f9 89       	ldd	r31, Y+17	; 0x11
     818:	80 81       	ld	r24, Z
     81a:	85 ff       	sbrs	r24, 5
     81c:	f5 cf       	rjmp	.-22     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	_tx_udr_empty_irq();
     81e:	ce 01       	movw	r24, r28
     820:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     824:	f1 cf       	rjmp	.-30     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     826:	8b 8d       	ldd	r24, Y+27	; 0x1b
     828:	fe 01       	movw	r30, r28
     82a:	e8 0f       	add	r30, r24
     82c:	f1 1d       	adc	r31, r1
     82e:	e3 5a       	subi	r30, 0xA3	; 163
     830:	ff 4f       	sbci	r31, 0xFF	; 255
     832:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     834:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     836:	f8 94       	cli
    _tx_buffer_head = i;
     838:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     83a:	ea 89       	ldd	r30, Y+18	; 0x12
     83c:	fb 89       	ldd	r31, Y+19	; 0x13
     83e:	80 81       	ld	r24, Z
     840:	80 62       	ori	r24, 0x20	; 32
     842:	0a c0       	rjmp	.+20     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     844:	9f b7       	in	r25, 0x3f	; 63
     846:	f8 94       	cli
      *_udr = c;
     848:	ee 89       	ldd	r30, Y+22	; 0x16
     84a:	ff 89       	ldd	r31, Y+23	; 0x17
     84c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     84e:	e8 89       	ldd	r30, Y+16	; 0x10
     850:	f9 89       	ldd	r31, Y+17	; 0x11
     852:	80 81       	ld	r24, Z
     854:	83 70       	andi	r24, 0x03	; 3
     856:	80 64       	ori	r24, 0x40	; 64
     858:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     85a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	ff 90       	pop	r15
     86a:	ef 90       	pop	r14
     86c:	08 95       	ret

0000086e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     874:	88 8d       	ldd	r24, Y+24	; 0x18
     876:	88 23       	and	r24, r24
     878:	c9 f0       	breq	.+50     	; 0x8ac <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     87a:	ea 89       	ldd	r30, Y+18	; 0x12
     87c:	fb 89       	ldd	r31, Y+19	; 0x13
     87e:	80 81       	ld	r24, Z
     880:	85 fd       	sbrc	r24, 5
     882:	05 c0       	rjmp	.+10     	; 0x88e <_ZN14HardwareSerial5flushEv+0x20>
     884:	a8 89       	ldd	r26, Y+16	; 0x10
     886:	b9 89       	ldd	r27, Y+17	; 0x11
     888:	8c 91       	ld	r24, X
     88a:	86 fd       	sbrc	r24, 6
     88c:	0f c0       	rjmp	.+30     	; 0x8ac <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	07 fc       	sbrc	r0, 7
     892:	f5 cf       	rjmp	.-22     	; 0x87e <_ZN14HardwareSerial5flushEv+0x10>
     894:	80 81       	ld	r24, Z
     896:	85 ff       	sbrs	r24, 5
     898:	f2 cf       	rjmp	.-28     	; 0x87e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     89a:	a8 89       	ldd	r26, Y+16	; 0x10
     89c:	b9 89       	ldd	r27, Y+17	; 0x11
     89e:	8c 91       	ld	r24, X
     8a0:	85 ff       	sbrs	r24, 5
     8a2:	ed cf       	rjmp	.-38     	; 0x87e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     8a4:	ce 01       	movw	r24, r28
     8a6:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     8aa:	e7 cf       	rjmp	.-50     	; 0x87a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
     8c2:	6a 01       	movw	r12, r20
     8c4:	7b 01       	movw	r14, r22
     8c6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     8c8:	60 e9       	ldi	r22, 0x90	; 144
     8ca:	70 ed       	ldi	r23, 0xD0	; 208
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	a7 01       	movw	r20, r14
     8d2:	96 01       	movw	r18, r12
     8d4:	0e 94 44 13 	call	0x2688	; 0x2688 <__udivmodsi4>
     8d8:	da 01       	movw	r26, r20
     8da:	c9 01       	movw	r24, r18
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	a1 09       	sbc	r26, r1
     8e0:	b1 09       	sbc	r27, r1
     8e2:	b6 95       	lsr	r27
     8e4:	a7 95       	ror	r26
     8e6:	97 95       	ror	r25
     8e8:	87 95       	ror	r24
     8ea:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
     8ec:	e8 89       	ldd	r30, Y+16	; 0x10
     8ee:	f9 89       	ldd	r31, Y+17	; 0x11
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8f4:	21 15       	cp	r18, r1
     8f6:	80 e1       	ldi	r24, 0x10	; 16
     8f8:	38 07       	cpc	r19, r24
     8fa:	a8 f0       	brcs	.+42     	; 0x926 <__stack+0x27>
  {
    *_ucsra = 0;
     8fc:	e8 89       	ldd	r30, Y+16	; 0x10
     8fe:	f9 89       	ldd	r31, Y+17	; 0x11
     900:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     902:	68 e4       	ldi	r22, 0x48	; 72
     904:	78 ee       	ldi	r23, 0xE8	; 232
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	a7 01       	movw	r20, r14
     90c:	96 01       	movw	r18, r12
     90e:	0e 94 44 13 	call	0x2688	; 0x2688 <__udivmodsi4>
     912:	da 01       	movw	r26, r20
     914:	c9 01       	movw	r24, r18
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	a1 09       	sbc	r26, r1
     91a:	b1 09       	sbc	r27, r1
     91c:	b6 95       	lsr	r27
     91e:	a7 95       	ror	r26
     920:	97 95       	ror	r25
     922:	87 95       	ror	r24
     924:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     926:	ec 85       	ldd	r30, Y+12	; 0x0c
     928:	fd 85       	ldd	r31, Y+13	; 0x0d
     92a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     92c:	ee 85       	ldd	r30, Y+14	; 0x0e
     92e:	ff 85       	ldd	r31, Y+15	; 0x0f
     930:	20 83       	st	Z, r18

  _written = false;
     932:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     934:	ec 89       	ldd	r30, Y+20	; 0x14
     936:	fd 89       	ldd	r31, Y+21	; 0x15
     938:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     93a:	ea 89       	ldd	r30, Y+18	; 0x12
     93c:	fb 89       	ldd	r31, Y+19	; 0x13
     93e:	80 81       	ld	r24, Z
     940:	80 61       	ori	r24, 0x10	; 16
     942:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     944:	ea 89       	ldd	r30, Y+18	; 0x12
     946:	fb 89       	ldd	r31, Y+19	; 0x13
     948:	80 81       	ld	r24, Z
     94a:	88 60       	ori	r24, 0x08	; 8
     94c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     94e:	ea 89       	ldd	r30, Y+18	; 0x12
     950:	fb 89       	ldd	r31, Y+19	; 0x13
     952:	80 81       	ld	r24, Z
     954:	80 68       	ori	r24, 0x80	; 128
     956:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     958:	ea 89       	ldd	r30, Y+18	; 0x12
     95a:	fb 89       	ldd	r31, Y+19	; 0x13
     95c:	80 81       	ld	r24, Z
     95e:	8f 7d       	andi	r24, 0xDF	; 223
     960:	80 83       	st	Z, r24
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	08 95       	ret

00000972 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     972:	1f 92       	push	r1
     974:	0f 92       	push	r0
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	0f 92       	push	r0
     97a:	11 24       	eor	r1, r1
     97c:	2f 93       	push	r18
     97e:	8f 93       	push	r24
     980:	9f 93       	push	r25
     982:	ef 93       	push	r30
     984:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     986:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <Serial+0x10>
     98a:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <Serial+0x11>
     98e:	80 81       	ld	r24, Z
     990:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <Serial+0x16>
     994:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <Serial+0x17>
     998:	82 fd       	sbrc	r24, 2
     99a:	12 c0       	rjmp	.+36     	; 0x9c0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     99c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     99e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <Serial+0x19>
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
     9a4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9a6:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <Serial+0x1a>
     9aa:	82 17       	cp	r24, r18
     9ac:	51 f0       	breq	.+20     	; 0x9c2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     9ae:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <Serial+0x19>
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	ed 5e       	subi	r30, 0xED	; 237
     9b6:	fd 4f       	sbci	r31, 0xFD	; 253
     9b8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     9ba:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <Serial+0x19>
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9c0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	2f 91       	pop	r18
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	1f 90       	pop	r1
     9d4:	18 95       	reti

000009d6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     9d6:	1f 92       	push	r1
     9d8:	0f 92       	push	r0
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	0f 92       	push	r0
     9de:	11 24       	eor	r1, r1
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     9f8:	83 e1       	ldi	r24, 0x13	; 19
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	0f 90       	pop	r0
     a1e:	1f 90       	pop	r1
     a20:	18 95       	reti

00000a22 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a22:	83 e1       	ldi	r24, 0x13	; 19
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN14HardwareSerial9availableEv>
     a2a:	21 e0       	ldi	r18, 0x01	; 1
     a2c:	89 2b       	or	r24, r25
     a2e:	09 f4       	brne	.+2      	; 0xa32 <_Z17Serial0_availablev+0x10>
     a30:	20 e0       	ldi	r18, 0x00	; 0
}
     a32:	82 2f       	mov	r24, r18
     a34:	08 95       	ret

00000a36 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a36:	e3 e1       	ldi	r30, 0x13	; 19
     a38:	f2 e0       	ldi	r31, 0x02	; 2
     a3a:	13 82       	std	Z+3, r1	; 0x03
     a3c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a3e:	88 ee       	ldi	r24, 0xE8	; 232
     a40:	93 e0       	ldi	r25, 0x03	; 3
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	84 83       	std	Z+4, r24	; 0x04
     a48:	95 83       	std	Z+5, r25	; 0x05
     a4a:	a6 83       	std	Z+6, r26	; 0x06
     a4c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a4e:	85 e3       	ldi	r24, 0x35	; 53
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	91 83       	std	Z+1, r25	; 0x01
     a54:	80 83       	st	Z, r24
     a56:	85 ec       	ldi	r24, 0xC5	; 197
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	95 87       	std	Z+13, r25	; 0x0d
     a5c:	84 87       	std	Z+12, r24	; 0x0c
     a5e:	84 ec       	ldi	r24, 0xC4	; 196
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	97 87       	std	Z+15, r25	; 0x0f
     a64:	86 87       	std	Z+14, r24	; 0x0e
     a66:	80 ec       	ldi	r24, 0xC0	; 192
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	91 8b       	std	Z+17, r25	; 0x11
     a6c:	80 8b       	std	Z+16, r24	; 0x10
     a6e:	81 ec       	ldi	r24, 0xC1	; 193
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	93 8b       	std	Z+19, r25	; 0x13
     a74:	82 8b       	std	Z+18, r24	; 0x12
     a76:	82 ec       	ldi	r24, 0xC2	; 194
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	95 8b       	std	Z+21, r25	; 0x15
     a7c:	84 8b       	std	Z+20, r24	; 0x14
     a7e:	86 ec       	ldi	r24, 0xC6	; 198
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	97 8b       	std	Z+23, r25	; 0x17
     a84:	86 8b       	std	Z+22, r24	; 0x16
     a86:	11 8e       	std	Z+25, r1	; 0x19
     a88:	12 8e       	std	Z+26, r1	; 0x1a
     a8a:	13 8e       	std	Z+27, r1	; 0x1b
     a8c:	14 8e       	std	Z+28, r1	; 0x1c
     a8e:	08 95       	ret

00000a90 <initVariant>:
     a90:	08 95       	ret

00000a92 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a92:	0e 94 0e 07 	call	0xe1c	; 0xe1c <init>

	initVariant();
     a96:	0e 94 48 05 	call	0xa90	; 0xa90 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     a9a:	0e 94 8a 00 	call	0x114	; 0x114 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a9e:	ca eb       	ldi	r28, 0xBA	; 186
     aa0:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     aa2:	0e 94 23 01 	call	0x246	; 0x246 <loop>
		if (serialEventRun) serialEventRun();
     aa6:	20 97       	sbiw	r28, 0x00	; 0
     aa8:	e1 f3       	breq	.-8      	; 0xaa2 <main+0x10>
     aaa:	0e 94 ba 03 	call	0x774	; 0x774 <_Z14serialEventRunv>
     aae:	f9 cf       	rjmp	.-14     	; 0xaa2 <main+0x10>

00000ab0 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	6c 01       	movw	r12, r24
     ac2:	7a 01       	movw	r14, r20
     ac4:	8b 01       	movw	r16, r22
     ac6:	c0 e0       	ldi	r28, 0x00	; 0
     ac8:	d0 e0       	ldi	r29, 0x00	; 0
     aca:	ce 15       	cp	r28, r14
     acc:	df 05       	cpc	r29, r15
     ace:	81 f0       	breq	.+32     	; 0xaf0 <_ZN5Print5writeEPKhj+0x40>
     ad0:	d8 01       	movw	r26, r16
     ad2:	6d 91       	ld	r22, X+
     ad4:	8d 01       	movw	r16, r26
     ad6:	d6 01       	movw	r26, r12
     ad8:	ed 91       	ld	r30, X+
     ada:	fc 91       	ld	r31, X
     adc:	01 90       	ld	r0, Z+
     ade:	f0 81       	ld	r31, Z
     ae0:	e0 2d       	mov	r30, r0
     ae2:	c6 01       	movw	r24, r12
     ae4:	09 95       	icall
     ae6:	89 2b       	or	r24, r25
     ae8:	11 f0       	breq	.+4      	; 0xaee <_ZN5Print5writeEPKhj+0x3e>
     aea:	21 96       	adiw	r28, 0x01	; 1
     aec:	ee cf       	rjmp	.-36     	; 0xaca <_ZN5Print5writeEPKhj+0x1a>
     aee:	7e 01       	movw	r14, r28
     af0:	c7 01       	movw	r24, r14
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	08 95       	ret

00000b04 <_ZN5Print5writeEPKc>:
     b04:	61 15       	cp	r22, r1
     b06:	71 05       	cpc	r23, r1
     b08:	79 f0       	breq	.+30     	; 0xb28 <_ZN5Print5writeEPKc+0x24>
     b0a:	fb 01       	movw	r30, r22
     b0c:	01 90       	ld	r0, Z+
     b0e:	00 20       	and	r0, r0
     b10:	e9 f7       	brne	.-6      	; 0xb0c <_ZN5Print5writeEPKc+0x8>
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	af 01       	movw	r20, r30
     b16:	46 1b       	sub	r20, r22
     b18:	57 0b       	sbc	r21, r23
     b1a:	dc 01       	movw	r26, r24
     b1c:	ed 91       	ld	r30, X+
     b1e:	fc 91       	ld	r31, X
     b20:	02 80       	ldd	r0, Z+2	; 0x02
     b22:	f3 81       	ldd	r31, Z+3	; 0x03
     b24:	e0 2d       	mov	r30, r0
     b26:	09 94       	ijmp
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	08 95       	ret

00000b2e <_ZN5Print5printEc>:
     b2e:	dc 01       	movw	r26, r24
     b30:	ed 91       	ld	r30, X+
     b32:	fc 91       	ld	r31, X
     b34:	01 90       	ld	r0, Z+
     b36:	f0 81       	ld	r31, Z
     b38:	e0 2d       	mov	r30, r0
     b3a:	09 94       	ijmp

00000b3c <_ZN5Print7printlnEv>:
     b3c:	63 e4       	ldi	r22, 0x43	; 67
     b3e:	71 e0       	ldi	r23, 0x01	; 1
     b40:	0c 94 82 05 	jmp	0xb04	; 0xb04 <_ZN5Print5writeEPKc>

00000b44 <_ZN5Print7printlnEPKc>:
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	ec 01       	movw	r28, r24
     b4e:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN5Print5writeEPKc>
     b52:	8c 01       	movw	r16, r24
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN5Print7printlnEv>
     b5a:	80 0f       	add	r24, r16
     b5c:	91 1f       	adc	r25, r17
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	08 95       	ret

00000b68 <_ZN5Print11printNumberEmh>:
     b68:	8f 92       	push	r8
     b6a:	9f 92       	push	r9
     b6c:	af 92       	push	r10
     b6e:	bf 92       	push	r11
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	a1 97       	sbiw	r28, 0x21	; 33
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	7c 01       	movw	r14, r24
     b8e:	fa 01       	movw	r30, r20
     b90:	cb 01       	movw	r24, r22
     b92:	19 a2       	std	Y+33, r1	; 0x21
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	08 f4       	brcc	.+2      	; 0xb9a <_ZN5Print11printNumberEmh+0x32>
     b98:	2a e0       	ldi	r18, 0x0A	; 10
     b9a:	8e 01       	movw	r16, r28
     b9c:	0f 5d       	subi	r16, 0xDF	; 223
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	82 2e       	mov	r8, r18
     ba2:	91 2c       	mov	r9, r1
     ba4:	a1 2c       	mov	r10, r1
     ba6:	b1 2c       	mov	r11, r1
     ba8:	bf 01       	movw	r22, r30
     baa:	a5 01       	movw	r20, r10
     bac:	94 01       	movw	r18, r8
     bae:	0e 94 44 13 	call	0x2688	; 0x2688 <__udivmodsi4>
     bb2:	f9 01       	movw	r30, r18
     bb4:	ca 01       	movw	r24, r20
     bb6:	01 50       	subi	r16, 0x01	; 1
     bb8:	11 09       	sbc	r17, r1
     bba:	6a 30       	cpi	r22, 0x0A	; 10
     bbc:	10 f4       	brcc	.+4      	; 0xbc2 <_ZN5Print11printNumberEmh+0x5a>
     bbe:	60 5d       	subi	r22, 0xD0	; 208
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <_ZN5Print11printNumberEmh+0x5c>
     bc2:	69 5c       	subi	r22, 0xC9	; 201
     bc4:	d8 01       	movw	r26, r16
     bc6:	6c 93       	st	X, r22
     bc8:	23 2b       	or	r18, r19
     bca:	24 2b       	or	r18, r20
     bcc:	25 2b       	or	r18, r21
     bce:	61 f7       	brne	.-40     	; 0xba8 <_ZN5Print11printNumberEmh+0x40>
     bd0:	b8 01       	movw	r22, r16
     bd2:	c7 01       	movw	r24, r14
     bd4:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN5Print5writeEPKc>
     bd8:	a1 96       	adiw	r28, 0x21	; 33
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	08 95       	ret

00000bfa <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
  if (base == 0) {
     c0a:	21 15       	cp	r18, r1
     c0c:	31 05       	cpc	r19, r1
     c0e:	81 f4       	brne	.+32     	; 0xc30 <_ZN5Print5printEli+0x36>
    return write(n);
     c10:	dc 01       	movw	r26, r24
     c12:	ed 91       	ld	r30, X+
     c14:	fc 91       	ld	r31, X
     c16:	01 90       	ld	r0, Z+
     c18:	f0 81       	ld	r31, Z
     c1a:	e0 2d       	mov	r30, r0
     c1c:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     c2e:	09 94       	ijmp
  } else if (base == 10) {
     c30:	2a 30       	cpi	r18, 0x0A	; 10
     c32:	31 05       	cpc	r19, r1
     c34:	01 f5       	brne	.+64     	; 0xc76 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     c36:	77 ff       	sbrs	r23, 7
     c38:	1d c0       	rjmp	.+58     	; 0xc74 <_ZN5Print5printEli+0x7a>
     c3a:	6a 01       	movw	r12, r20
     c3c:	7b 01       	movw	r14, r22
     c3e:	ec 01       	movw	r28, r24
      int t = print('-');
     c40:	6d e2       	ldi	r22, 0x2D	; 45
     c42:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEc>
     c46:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     c48:	44 27       	eor	r20, r20
     c4a:	55 27       	eor	r21, r21
     c4c:	ba 01       	movw	r22, r20
     c4e:	4c 19       	sub	r20, r12
     c50:	5d 09       	sbc	r21, r13
     c52:	6e 09       	sbc	r22, r14
     c54:	7f 09       	sbc	r23, r15
     c56:	2a e0       	ldi	r18, 0x0A	; 10
     c58:	ce 01       	movw	r24, r28
     c5a:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN5Print11printNumberEmh>
     c5e:	80 0f       	add	r24, r16
     c60:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     c74:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     c86:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <_ZN5Print11printNumberEmh>

00000c8a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     c8a:	9a 01       	movw	r18, r20
  return print((long) n, base);
     c8c:	ab 01       	movw	r20, r22
     c8e:	77 0f       	add	r23, r23
     c90:	66 0b       	sbc	r22, r22
     c92:	77 0b       	sbc	r23, r23
     c94:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <_ZN5Print5printEli>

00000c98 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     cae:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <timer0_millis>
     cb2:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <timer0_millis+0x1>
     cb6:	a0 91 b3 02 	lds	r26, 0x02B3	; 0x8002b3 <timer0_millis+0x2>
     cba:	b0 91 b4 02 	lds	r27, 0x02B4	; 0x8002b4 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     cbe:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     cc2:	20 e3       	ldi	r18, 0x30	; 48
     cc4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     cc6:	2d 37       	cpi	r18, 0x7D	; 125
     cc8:	20 f4       	brcc	.+8      	; 0xcd2 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     cca:	40 96       	adiw	r24, 0x10	; 16
     ccc:	a1 1d       	adc	r26, r1
     cce:	b1 1d       	adc	r27, r1
     cd0:	05 c0       	rjmp	.+10     	; 0xcdc <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     cd2:	23 eb       	ldi	r18, 0xB3	; 179
     cd4:	23 0f       	add	r18, r19
		m += 1;
     cd6:	41 96       	adiw	r24, 0x11	; 17
     cd8:	a1 1d       	adc	r26, r1
     cda:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     cdc:	20 93 b0 02 	sts	0x02B0, r18	; 0x8002b0 <timer0_fract>
	timer0_millis = m;
     ce0:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <timer0_millis>
     ce4:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <timer0_millis+0x1>
     ce8:	a0 93 b3 02 	sts	0x02B3, r26	; 0x8002b3 <timer0_millis+0x2>
     cec:	b0 93 b4 02 	sts	0x02B4, r27	; 0x8002b4 <timer0_millis+0x3>
	timer0_overflow_count++;
     cf0:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <timer0_overflow_count>
     cf4:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <timer0_overflow_count+0x1>
     cf8:	a0 91 b7 02 	lds	r26, 0x02B7	; 0x8002b7 <timer0_overflow_count+0x2>
     cfc:	b0 91 b8 02 	lds	r27, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x3>
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	a1 1d       	adc	r26, r1
     d04:	b1 1d       	adc	r27, r1
     d06:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <timer0_overflow_count>
     d0a:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <timer0_overflow_count+0x1>
     d0e:	a0 93 b7 02 	sts	0x02B7, r26	; 0x8002b7 <timer0_overflow_count+0x2>
     d12:	b0 93 b8 02 	sts	0x02B8, r27	; 0x8002b8 <timer0_overflow_count+0x3>
}
     d16:	bf 91       	pop	r27
     d18:	af 91       	pop	r26
     d1a:	9f 91       	pop	r25
     d1c:	8f 91       	pop	r24
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     d2c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     d2e:	f8 94       	cli
	m = timer0_millis;
     d30:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <timer0_millis>
     d34:	70 91 b2 02 	lds	r23, 0x02B2	; 0x8002b2 <timer0_millis+0x1>
     d38:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <timer0_millis+0x2>
     d3c:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <timer0_millis+0x3>
	SREG = oldSREG;
     d40:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     d42:	08 95       	ret

00000d44 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     d44:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     d46:	f8 94       	cli
	m = timer0_overflow_count;
     d48:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <timer0_overflow_count>
     d4c:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <timer0_overflow_count+0x1>
     d50:	a0 91 b7 02 	lds	r26, 0x02B7	; 0x8002b7 <timer0_overflow_count+0x2>
     d54:	b0 91 b8 02 	lds	r27, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     d58:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     d5a:	a8 9b       	sbis	0x15, 0	; 21
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <micros+0x24>
     d5e:	2f 3f       	cpi	r18, 0xFF	; 255
     d60:	19 f0       	breq	.+6      	; 0xd68 <micros+0x24>
		m++;
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	a1 1d       	adc	r26, r1
     d66:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     d68:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     d6a:	ba 2f       	mov	r27, r26
     d6c:	a9 2f       	mov	r26, r25
     d6e:	98 2f       	mov	r25, r24
     d70:	88 27       	eor	r24, r24
     d72:	82 0f       	add	r24, r18
     d74:	91 1d       	adc	r25, r1
     d76:	a1 1d       	adc	r26, r1
     d78:	b1 1d       	adc	r27, r1
     d7a:	bc 01       	movw	r22, r24
     d7c:	cd 01       	movw	r24, r26
     d7e:	46 e0       	ldi	r20, 0x06	; 6
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	88 1f       	adc	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	4a 95       	dec	r20
     d8a:	d1 f7       	brne	.-12     	; 0xd80 <micros+0x3c>
}
     d8c:	08 95       	ret

00000d8e <delay>:

void delay(unsigned long ms)
{
     d8e:	8f 92       	push	r8
     d90:	9f 92       	push	r9
     d92:	af 92       	push	r10
     d94:	bf 92       	push	r11
     d96:	cf 92       	push	r12
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	6b 01       	movw	r12, r22
     da0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     da2:	0e 94 a2 06 	call	0xd44	; 0xd44 <micros>
     da6:	4b 01       	movw	r8, r22
     da8:	5c 01       	movw	r10, r24

	while (ms > 0) {
     daa:	c1 14       	cp	r12, r1
     dac:	d1 04       	cpc	r13, r1
     dae:	e1 04       	cpc	r14, r1
     db0:	f1 04       	cpc	r15, r1
     db2:	01 f1       	breq	.+64     	; 0xdf4 <delay+0x66>
		yield();
     db4:	0e 94 a8 10 	call	0x2150	; 0x2150 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     db8:	0e 94 a2 06 	call	0xd44	; 0xd44 <micros>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	88 19       	sub	r24, r8
     dc2:	99 09       	sbc	r25, r9
     dc4:	aa 09       	sbc	r26, r10
     dc6:	bb 09       	sbc	r27, r11
     dc8:	88 3e       	cpi	r24, 0xE8	; 232
     dca:	93 40       	sbci	r25, 0x03	; 3
     dcc:	a1 05       	cpc	r26, r1
     dce:	b1 05       	cpc	r27, r1
     dd0:	60 f3       	brcs	.-40     	; 0xdaa <delay+0x1c>
			ms--;
     dd2:	21 e0       	ldi	r18, 0x01	; 1
     dd4:	c2 1a       	sub	r12, r18
     dd6:	d1 08       	sbc	r13, r1
     dd8:	e1 08       	sbc	r14, r1
     dda:	f1 08       	sbc	r15, r1
			start += 1000;
     ddc:	88 ee       	ldi	r24, 0xE8	; 232
     dde:	88 0e       	add	r8, r24
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	98 1e       	adc	r9, r24
     de4:	a1 1c       	adc	r10, r1
     de6:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     de8:	c1 14       	cp	r12, r1
     dea:	d1 04       	cpc	r13, r1
     dec:	e1 04       	cpc	r14, r1
     dee:	f1 04       	cpc	r15, r1
     df0:	19 f7       	brne	.-58     	; 0xdb8 <delay+0x2a>
     df2:	db cf       	rjmp	.-74     	; 0xdaa <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
     dfc:	bf 90       	pop	r11
     dfe:	af 90       	pop	r10
     e00:	9f 90       	pop	r9
     e02:	8f 90       	pop	r8
     e04:	08 95       	ret

00000e06 <delayMicroseconds>:
#else
	// for the 1 MHz internal clock (default settings for common Atmega microcontrollers)

	// the overhead of the function calls is 14 (16) cycles
	if (us <= 16) return; //= 3 cycles, (4 when true)
	if (us <= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to substract 22)
     e06:	8a 31       	cpi	r24, 0x1A	; 26
     e08:	91 05       	cpc	r25, r1
     e0a:	38 f0       	brcs	.+14     	; 0xe1a <delayMicroseconds+0x14>

	// compensate for the time taken by the preceeding and next commands (about 22 cycles)
	us -= 22; // = 2 cycles
     e0c:	46 97       	sbiw	r24, 0x16	; 22
	// the following loop takes 4 microseconds (4 cycles)
	// per iteration, so execute it us/4 times
	// us is at least 4, divided by 4 gives us 1 (no zero delay bug)
	us >>= 2; // us div 4, = 4 cycles
     e0e:	96 95       	lsr	r25
     e10:	87 95       	ror	r24
     e12:	96 95       	lsr	r25
     e14:	87 95       	ror	r24
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <delayMicroseconds+0x10>
     e1a:	08 95       	ret

00000e1c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e1c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e1e:	84 b5       	in	r24, 0x24	; 36
     e20:	82 60       	ori	r24, 0x02	; 2
     e22:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e24:	84 b5       	in	r24, 0x24	; 36
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e2a:	85 b5       	in	r24, 0x25	; 37
     e2c:	82 60       	ori	r24, 0x02	; 2
     e2e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e30:	85 b5       	in	r24, 0x25	; 37
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e36:	ee e6       	ldi	r30, 0x6E	; 110
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	81 60       	ori	r24, 0x01	; 1
     e3e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e40:	e1 e8       	ldi	r30, 0x81	; 129
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e46:	80 81       	ld	r24, Z
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e4c:	e0 e8       	ldi	r30, 0x80	; 128
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	81 60       	ori	r24, 0x01	; 1
     e54:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e56:	e1 eb       	ldi	r30, 0xB1	; 177
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	84 60       	ori	r24, 0x04	; 4
     e5e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e60:	e0 eb       	ldi	r30, 0xB0	; 176
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	80 83       	st	Z, r24
	#elif F_CPU >= 2000000 // 2 MHz / 16 = 125 KHz
		sbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		cbi(ADCSRA, ADPS0);
	#elif F_CPU >= 1000000 // 1 MHz / 8 = 125 KHz
		cbi(ADCSRA, ADPS2);
     e6a:	ea e7       	ldi	r30, 0x7A	; 122
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8b 7f       	andi	r24, 0xFB	; 251
     e72:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e74:	80 81       	ld	r24, Z
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e7a:	80 81       	ld	r24, Z
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e80:	80 81       	ld	r24, Z
     e82:	80 68       	ori	r24, 0x80	; 128
     e84:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e86:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     e8a:	08 95       	ret

00000e8c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	81 f0       	breq	.+32     	; 0xeb0 <turnOffPWM+0x24>
     e90:	28 f4       	brcc	.+10     	; 0xe9c <turnOffPWM+0x10>
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	99 f0       	breq	.+38     	; 0xebc <turnOffPWM+0x30>
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	a1 f0       	breq	.+40     	; 0xec2 <turnOffPWM+0x36>
     e9a:	08 95       	ret
     e9c:	87 30       	cpi	r24, 0x07	; 7
     e9e:	a9 f0       	breq	.+42     	; 0xeca <turnOffPWM+0x3e>
     ea0:	88 30       	cpi	r24, 0x08	; 8
     ea2:	b9 f0       	breq	.+46     	; 0xed2 <turnOffPWM+0x46>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	d1 f4       	brne	.+52     	; 0xedc <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ea8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     eac:	8f 7d       	andi	r24, 0xDF	; 223
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     eb0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     eb4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     eb6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     eba:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     ebc:	84 b5       	in	r24, 0x24	; 36
     ebe:	8f 77       	andi	r24, 0x7F	; 127
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     ec2:	84 b5       	in	r24, 0x24	; 36
     ec4:	8f 7d       	andi	r24, 0xDF	; 223
     ec6:	84 bd       	out	0x24, r24	; 36
     ec8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     eca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     ece:	8f 77       	andi	r24, 0x7F	; 127
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     ed2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     ed6:	8f 7d       	andi	r24, 0xDF	; 223
     ed8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     edc:	08 95       	ret

00000ede <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	fc 01       	movw	r30, r24
     ee6:	e4 58       	subi	r30, 0x84	; 132
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     eec:	fc 01       	movw	r30, r24
     eee:	e0 57       	subi	r30, 0x70	; 112
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     ef4:	88 23       	and	r24, r24
     ef6:	61 f1       	breq	.+88     	; 0xf50 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	fc 01       	movw	r30, r24
     f00:	e2 55       	subi	r30, 0x52	; 82
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	c5 91       	lpm	r28, Z+
     f06:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     f08:	fc 01       	movw	r30, r24
     f0a:	ec 55       	subi	r30, 0x5C	; 92
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	a5 91       	lpm	r26, Z+
     f10:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f12:	61 11       	cpse	r22, r1
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     f16:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f18:	f8 94       	cli
		*reg &= ~bit;
     f1a:	88 81       	ld	r24, Y
     f1c:	20 95       	com	r18
     f1e:	82 23       	and	r24, r18
     f20:	88 83       	st	Y, r24
		*out &= ~bit;
     f22:	ec 91       	ld	r30, X
     f24:	2e 23       	and	r18, r30
     f26:	0b c0       	rjmp	.+22     	; 0xf3e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     f28:	62 30       	cpi	r22, 0x02	; 2
     f2a:	61 f4       	brne	.+24     	; 0xf44 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     f2c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f2e:	f8 94       	cli
		*reg &= ~bit;
     f30:	88 81       	ld	r24, Y
     f32:	32 2f       	mov	r19, r18
     f34:	30 95       	com	r19
     f36:	83 23       	and	r24, r19
     f38:	88 83       	st	Y, r24
		*out |= bit;
     f3a:	ec 91       	ld	r30, X
     f3c:	2e 2b       	or	r18, r30
     f3e:	2c 93       	st	X, r18
		SREG = oldSREG;
     f40:	9f bf       	out	0x3f, r25	; 63
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     f44:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f46:	f8 94       	cli
		*reg |= bit;
     f48:	e8 81       	ld	r30, Y
     f4a:	2e 2b       	or	r18, r30
     f4c:	28 83       	st	Y, r18
		SREG = oldSREG;
     f4e:	8f bf       	out	0x3f, r24	; 63
	}
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	f9 01       	movw	r30, r18
     f62:	e8 59       	subi	r30, 0x98	; 152
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f68:	f9 01       	movw	r30, r18
     f6a:	e4 58       	subi	r30, 0x84	; 132
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f70:	f9 01       	movw	r30, r18
     f72:	e0 57       	subi	r30, 0x70	; 112
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f78:	cc 23       	and	r28, r28
     f7a:	c1 f0       	breq	.+48     	; 0xfac <digitalWrite+0x56>
     f7c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f7e:	81 11       	cpse	r24, r1
     f80:	0e 94 46 07 	call	0xe8c	; 0xe8c <turnOffPWM>

	out = portOutputRegister(port);
     f84:	ec 2f       	mov	r30, r28
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	ec 55       	subi	r30, 0x5C	; 92
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	a5 91       	lpm	r26, Z+
     f92:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     f94:	9f b7       	in	r25, 0x3f	; 63
	cli();
     f96:	f8 94       	cli

	if (val == LOW) {
     f98:	11 11       	cpse	r17, r1
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <digitalWrite+0x4e>
		*out &= ~bit;
     f9c:	8c 91       	ld	r24, X
     f9e:	d0 95       	com	r29
     fa0:	d8 23       	and	r29, r24
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <digitalWrite+0x52>
	} else {
		*out |= bit;
     fa4:	ec 91       	ld	r30, X
     fa6:	de 2b       	or	r29, r30
     fa8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     faa:	9f bf       	out	0x3f, r25	; 63
}
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	08 95       	ret

00000fb4 <_ZN6CC1101C1Ev>:
/**
 * CC1101
 * 
 * Class constructor
 */
CC1101::CC1101(void)
     fb4:	fc 01       	movw	r30, r24
{
  carrierFreq = CFREQ_868;
     fb6:	13 82       	std	Z+3, r1	; 0x03
  channel = CC1101_DEFVAL_CHANNR;
     fb8:	15 82       	std	Z+5, r1	; 0x05
  syncWord[0] = CC1101_DEFVAL_SYNC1;
     fba:	85 eb       	ldi	r24, 0xB5	; 181
     fbc:	86 83       	std	Z+6, r24	; 0x06
  syncWord[1] = CC1101_DEFVAL_SYNC0;
     fbe:	87 e4       	ldi	r24, 0x47	; 71
     fc0:	87 83       	std	Z+7, r24	; 0x07
  devAddress = CC1101_DEFVAL_ADDR;
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	80 87       	std	Z+8, r24	; 0x08

  hgmEnabled = false;
     fc6:	11 82       	std	Z+1, r1	; 0x01
     fc8:	08 95       	ret

00000fca <_ZN6CC11016wakeUpEv>:
 * 
 * Wake up CC1101 from Power Down state
 */
void CC1101::wakeUp(void)
{
  cc1101_Select();                      // Select CC1101
     fca:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     fcc:	1c 99       	sbic	0x03, 4	; 3
     fce:	fe cf       	rjmp	.-4      	; 0xfcc <_ZN6CC11016wakeUpEv+0x2>
  cc1101_Deselect();                    // Deselect CC1101
     fd0:	2a 9a       	sbi	0x05, 2	; 5
     fd2:	08 95       	ret

00000fd4 <_ZN6CC11018writeRegEhh>:
 * 
 * 'regAddr'	Register address
 * 'value'	Value to be writen
 */
void CC1101::writeReg(byte regAddr, byte value) 
{
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
     fdc:	14 2f       	mov	r17, r20
  cc1101_Select();                      // Select CC1101
     fde:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
     fe0:	1c 99       	sbic	0x03, 4	; 3
     fe2:	fe cf       	rjmp	.-4      	; 0xfe0 <_ZN6CC11018writeRegEhh+0xc>
  spi.send(regAddr);                    // Send register address
     fe4:	ce 01       	movw	r24, r28
     fe6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
  spi.send(value);                      // Send value
     fea:	61 2f       	mov	r22, r17
     fec:	ce 01       	movw	r24, r28
     fee:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
     ff2:	2a 9a       	sbi	0x05, 2	; 5
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	08 95       	ret

00000ffc <_ZN6CC110113writeBurstRegEhPhh>:
 * 'regAddr'	Register address
 * 'buffer'	Data to be writen
 * 'len'	Data length
 */
void CC1101::writeBurstReg(byte regAddr, byte* buffer, byte len)
{
     ffc:	df 92       	push	r13
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	8c 01       	movw	r16, r24
    100c:	d4 2e       	mov	r13, r20
    100e:	e5 2e       	mov	r14, r21
    1010:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
    1012:	60 64       	ori	r22, 0x40	; 64
  cc1101_Select();                      // Select CC1101
    1014:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    1016:	1c 99       	sbic	0x03, 4	; 3
    1018:	fe cf       	rjmp	.-4      	; 0x1016 <_ZN6CC110113writeBurstRegEhPhh+0x1a>
  spi.send(addr);                       // Send register address
    101a:	c8 01       	movw	r24, r16
    101c:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
    1020:	cd 2d       	mov	r28, r13
    1022:	de 2d       	mov	r29, r14
    1024:	ce 01       	movw	r24, r28
    1026:	8f 0d       	add	r24, r15
    1028:	91 1d       	adc	r25, r1
    102a:	7c 01       	movw	r14, r24
  
  for(i=0 ; i<len ; i++)
    102c:	ce 15       	cp	r28, r14
    102e:	df 05       	cpc	r29, r15
    1030:	29 f0       	breq	.+10     	; 0x103c <_ZN6CC110113writeBurstRegEhPhh+0x40>
    spi.send(buffer[i]);                // Send value
    1032:	69 91       	ld	r22, Y+
    1034:	c8 01       	movw	r24, r16
    1036:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
  addr = regAddr | WRITE_BURST;         // Enable burst transfer
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  
  for(i=0 ; i<len ; i++)
    103a:	f8 cf       	rjmp	.-16     	; 0x102c <_ZN6CC110113writeBurstRegEhPhh+0x30>
    spi.send(buffer[i]);                // Send value

  cc1101_Deselect();                    // Deselect CC1101  
    103c:	2a 9a       	sbi	0x05, 2	; 5
}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	08 95       	ret

0000104e <_ZN6CC11019cmdStrobeEh>:
 * 
 * 'cmd'	Command strobe
 */     
void CC1101::cmdStrobe(byte cmd) 
{
  cc1101_Select();                      // Select CC1101
    104e:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    1050:	1c 99       	sbic	0x03, 4	; 3
    1052:	fe cf       	rjmp	.-4      	; 0x1050 <_ZN6CC11019cmdStrobeEh+0x2>
  spi.send(cmd);                        // Send strobe command
    1054:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
    1058:	2a 9a       	sbi	0x05, 2	; 5
    105a:	08 95       	ret

0000105c <_ZN6CC11017readRegEhh>:
 * 
 * Return:
 * 	Data byte returned by the CC1101 IC
 */
byte CC1101::readReg(byte regAddr, byte regType)
{
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	ec 01       	movw	r28, r24
  byte addr, val;

  addr = regAddr | regType;
    1062:	64 2b       	or	r22, r20
  cc1101_Select();                      // Select CC1101
    1064:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    1066:	1c 99       	sbic	0x03, 4	; 3
    1068:	fe cf       	rjmp	.-4      	; 0x1066 <_ZN6CC11017readRegEhh+0xa>
  spi.send(addr);                       // Send register address
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
  val = spi.send(0x00);                 // Read result
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	ce 01       	movw	r24, r28
    1074:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
  cc1101_Deselect();                    // Deselect CC1101
    1078:	2a 9a       	sbi	0x05, 2	; 5

  return val;
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <_ZN6CC110112readBurstRegEPhhh>:
 * 'buffer'	Buffer where to copy the result to
 * 'regAddr'	Register address
 * 'len'	Data length
 */
void CC1101::readBurstReg(byte * buffer, byte regAddr, byte len) 
{
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	8c 01       	movw	r16, r24
    1090:	d6 2e       	mov	r13, r22
    1092:	e7 2e       	mov	r14, r23
    1094:	f2 2e       	mov	r15, r18
  byte addr, i;
  
  addr = regAddr | READ_BURST;
    1096:	64 2f       	mov	r22, r20
    1098:	60 6c       	ori	r22, 0xC0	; 192
  cc1101_Select();                      // Select CC1101
    109a:	2a 98       	cbi	0x05, 2	; 5
  wait_Miso();                          // Wait until MISO goes low
    109c:	1c 99       	sbic	0x03, 4	; 3
    109e:	fe cf       	rjmp	.-4      	; 0x109c <_ZN6CC110112readBurstRegEPhhh+0x1c>
  spi.send(addr);                       // Send register address
    10a0:	c8 01       	movw	r24, r16
    10a2:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
    10a6:	cd 2d       	mov	r28, r13
    10a8:	de 2d       	mov	r29, r14
    10aa:	ce 01       	movw	r24, r28
    10ac:	8f 0d       	add	r24, r15
    10ae:	91 1d       	adc	r25, r1
    10b0:	7c 01       	movw	r14, r24
  for(i=0 ; i<len ; i++)
    10b2:	ce 15       	cp	r28, r14
    10b4:	df 05       	cpc	r29, r15
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <_ZN6CC110112readBurstRegEPhhh+0x44>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	c8 01       	movw	r24, r16
    10bc:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
    10c0:	89 93       	st	Y+, r24
  
  addr = regAddr | READ_BURST;
  cc1101_Select();                      // Select CC1101
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  for(i=0 ; i<len ; i++)
    10c2:	f7 cf       	rjmp	.-18     	; 0x10b2 <_ZN6CC110112readBurstRegEPhhh+0x32>
    buffer[i] = spi.send(0x00);         // Read result byte by byte
  cc1101_Deselect();                    // Deselect CC1101
    10c4:	2a 9a       	sbi	0x05, 2	; 5
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	08 95       	ret

000010d6 <_ZN6CC110111setSyncWordEhh>:
 * 
 * 'syncH'	Synchronization word - High byte
 * 'syncL'	Synchronization word - Low byte
 */
void CC1101::setSyncWord(uint8_t syncH, uint8_t syncL) 
{
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	ec 01       	movw	r28, r24
    10e0:	06 2f       	mov	r16, r22
    10e2:	14 2f       	mov	r17, r20
  writeReg(CC1101_SYNC1, syncH);
    10e4:	46 2f       	mov	r20, r22
    10e6:	64 e0       	ldi	r22, 0x04	; 4
    10e8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_SYNC0, syncL);
    10ec:	41 2f       	mov	r20, r17
    10ee:	65 e0       	ldi	r22, 0x05	; 5
    10f0:	ce 01       	movw	r24, r28
    10f2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  syncWord[0] = syncH;
    10f6:	0e 83       	std	Y+6, r16	; 0x06
  syncWord[1] = syncL;
    10f8:	1f 83       	std	Y+7, r17	; 0x07
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	08 95       	ret

00001104 <_ZN6CC110111setSyncWordEPh>:
 * 
 * 'syncH'	Synchronization word - pointer to 2-byte array
 */
void CC1101::setSyncWord(byte *sync) 
{
  CC1101::setSyncWord(sync[0], sync[1]);
    1104:	fb 01       	movw	r30, r22
    1106:	41 81       	ldd	r20, Z+1	; 0x01
    1108:	60 81       	ld	r22, Z
    110a:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <_ZN6CC110111setSyncWordEhh>

0000110e <_ZN6CC110113setDevAddressEh>:
 * Set device address
 * 
 * @param addr	Device address
 */
void CC1101::setDevAddress(byte addr) 
{
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ec 01       	movw	r28, r24
    1116:	16 2f       	mov	r17, r22
  writeReg(CC1101_ADDR, addr);
    1118:	46 2f       	mov	r20, r22
    111a:	69 e0       	ldi	r22, 0x09	; 9
    111c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  devAddress = addr;
    1120:	18 87       	std	Y+8, r17	; 0x08
}
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	08 95       	ret

0000112a <_ZN6CC110110setChannelEh>:
 * Set frequency channel
 * 
 * 'chnl'	Frequency channel
 */
void CC1101::setChannel(byte chnl) 
{
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
    1132:	16 2f       	mov	r17, r22
  writeReg(CC1101_CHANNR,  chnl);
    1134:	46 2f       	mov	r20, r22
    1136:	6a e0       	ldi	r22, 0x0A	; 10
    1138:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  channel = chnl;
    113c:	1d 83       	std	Y+5, r17	; 0x05
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	08 95       	ret

00001146 <_ZN6CC110114setCarrierFreqEh>:
 * Set carrier frequency
 * 
 * 'freq'	New carrier frequency
 */
void CC1101::setCarrierFreq(byte freq)
{
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	ec 01       	movw	r28, r24
    114e:	16 2f       	mov	r17, r22
  switch(freq)
    1150:	62 30       	cpi	r22, 0x02	; 2
    1152:	79 f0       	breq	.+30     	; 0x1172 <_ZN6CC110114setCarrierFreqEh+0x2c>
    1154:	63 30       	cpi	r22, 0x03	; 3
    1156:	c1 f0       	breq	.+48     	; 0x1188 <_ZN6CC110114setCarrierFreqEh+0x42>
    1158:	61 30       	cpi	r22, 0x01	; 1
    115a:	09 f5       	brne	.+66     	; 0x119e <_ZN6CC110114setCarrierFreqEh+0x58>
  {
    case CFREQ_915:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_915);
    115c:	42 e2       	ldi	r20, 0x22	; 34
    115e:	6d e0       	ldi	r22, 0x0D	; 13
    1160:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_915);
    1164:	41 eb       	ldi	r20, 0xB1	; 177
    1166:	6e e0       	ldi	r22, 0x0E	; 14
    1168:	ce 01       	movw	r24, r28
    116a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_915);
    116e:	4b e3       	ldi	r20, 0x3B	; 59
    1170:	20 c0       	rjmp	.+64     	; 0x11b2 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_433:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_433);
    1172:	40 e1       	ldi	r20, 0x10	; 16
    1174:	6d e0       	ldi	r22, 0x0D	; 13
    1176:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_433);
    117a:	47 ea       	ldi	r20, 0xA7	; 167
    117c:	6e e0       	ldi	r22, 0x0E	; 14
    117e:	ce 01       	movw	r24, r28
    1180:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_433);
    1184:	42 e6       	ldi	r20, 0x62	; 98
    1186:	15 c0       	rjmp	.+42     	; 0x11b2 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_918:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_918);
    1188:	43 e2       	ldi	r20, 0x23	; 35
    118a:	6d e0       	ldi	r22, 0x0D	; 13
    118c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_918);
    1190:	4e e4       	ldi	r20, 0x4E	; 78
    1192:	6e e0       	ldi	r22, 0x0E	; 14
    1194:	ce 01       	movw	r24, r28
    1196:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_918);
    119a:	44 ec       	ldi	r20, 0xC4	; 196
    119c:	0a c0       	rjmp	.+20     	; 0x11b2 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    default:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_868);
    119e:	41 e2       	ldi	r20, 0x21	; 33
    11a0:	6d e0       	ldi	r22, 0x0D	; 13
    11a2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_868);
    11a6:	42 e6       	ldi	r20, 0x62	; 98
    11a8:	6e e0       	ldi	r22, 0x0E	; 14
    11aa:	ce 01       	movw	r24, r28
    11ac:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_868);
    11b0:	46 e7       	ldi	r20, 0x76	; 118
    11b2:	6f e0       	ldi	r22, 0x0F	; 15
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
      break;
  }
   
  carrierFreq = freq;  
    11ba:	1b 83       	std	Y+3, r17	; 0x03
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	08 95       	ret

000011c4 <_ZN6CC11018enablePAEv>:
 *
 * Enable PA and disable LNA on the LD-Board
 */
void CC1101::enablePA(void)
{
 digitalWrite(PA_EN, HIGH);
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	0e 94 ab 07 	call	0xf56	; 0xf56 <digitalWrite>
 digitalWrite(LNA_EN, LOW);
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	84 e0       	ldi	r24, 0x04	; 4
    11d0:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <digitalWrite>

000011d4 <_ZN6CC110110setTxStateEv>:
 * setTxState
 * 
 * Enter Tx state
 */
void CC1101::setTxState(void)
{
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	ec 01       	movw	r28, r24
  // Enable PA on LD-board if any
  if (hgmEnabled)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	88 23       	and	r24, r24
    11de:	19 f0       	breq	.+6      	; 0x11e6 <_ZN6CC110110setTxStateEv+0x12>
    enablePA();
    11e0:	ce 01       	movw	r24, r28
    11e2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN6CC11018enablePAEv>

  cmdStrobe(CC1101_STX);
    11e6:	65 e3       	ldi	r22, 0x35	; 53
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_TX;
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	8a 83       	std	Y+2, r24	; 0x02
}
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	08 95       	ret

000011f8 <_ZN6CC11019enableLNAEv>:
 *
 * Enable LNA and disable PA on the LD-Board
 */
void CC1101::enableLNA(void)
{
 digitalWrite(LNA_EN, HIGH);
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	84 e0       	ldi	r24, 0x04	; 4
    11fc:	0e 94 ab 07 	call	0xf56	; 0xf56 <digitalWrite>
 digitalWrite(PA_EN, LOW);
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	83 e0       	ldi	r24, 0x03	; 3
    1204:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <digitalWrite>

00001208 <_ZN6CC110110setRxStateEv>:
 * setRxState
 * 
 * Enter Rx state
 */
void CC1101::setRxState(void)
{
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	ec 01       	movw	r28, r24
  cmdStrobe(CC1101_SRX);
    120e:	64 e3       	ldi	r22, 0x34	; 52
    1210:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_RX;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	8a 83       	std	Y+2, r24	; 0x02

  // Enable LNA on LD-board if any
  if (hgmEnabled)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	88 23       	and	r24, r24
    121c:	29 f0       	breq	.+10     	; 0x1228 <_ZN6CC110110setRxStateEv+0x20>
    enableLNA();
    121e:	ce 01       	movw	r24, r28
}
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
  cmdStrobe(CC1101_SRX);
  rfState = RFSTATE_RX;

  // Enable LNA on LD-board if any
  if (hgmEnabled)
    enableLNA();
    1224:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <_ZN6CC11019enableLNAEv>
}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <_ZN6CC11018sendDataE8CCPACKET>:
 *  Return:
 *    True if the transmission succeeds
 *    False otherwise
 */
bool CC1101::sendData(CCPACKET packet)
{
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	8c 01       	movw	r16, r24
  byte marcState;
  bool res = false;
 
  // Declare to be in Tx state. This will avoid receiving packets whilst
  // transmitting
  rfState = RFSTATE_TX;
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	f8 01       	movw	r30, r16
    1242:	82 83       	std	Z+2, r24	; 0x02

  // Enter RX state
  setRxState();
    1244:	c8 01       	movw	r24, r16
    1246:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN6CC110110setRxStateEv>

  // Check that the RX state has been entered
  while (((marcState = readStatusReg(CC1101_MARCSTATE)) & 0x1F) != 0x0D)
    124a:	40 ec       	ldi	r20, 0xC0	; 192
    124c:	65 e3       	ldi	r22, 0x35	; 53
    124e:	c8 01       	movw	r24, r16
    1250:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN6CC11017readRegEhh>
    1254:	98 2f       	mov	r25, r24
    1256:	9f 71       	andi	r25, 0x1F	; 31
    1258:	9d 30       	cpi	r25, 0x0D	; 13
    125a:	39 f0       	breq	.+14     	; 0x126a <_ZN6CC11018sendDataE8CCPACKET+0x3c>
  {
    if (marcState == 0x11)        // RX_OVERFLOW
    125c:	81 31       	cpi	r24, 0x11	; 17
    125e:	a9 f7       	brne	.-22     	; 0x124a <_ZN6CC11018sendDataE8CCPACKET+0x1c>
      flushRxFifo();              // flush receive queue
    1260:	6a e3       	ldi	r22, 0x3A	; 58
    1262:	c8 01       	movw	r24, r16
    1264:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>
    1268:	f0 cf       	rjmp	.-32     	; 0x124a <_ZN6CC11018sendDataE8CCPACKET+0x1c>
  }

  delayMicroseconds(500);
    126a:	84 ef       	ldi	r24, 0xF4	; 244
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>

  if (packet.length > 0)
    1272:	48 85       	ldd	r20, Y+8	; 0x08
    1274:	44 23       	and	r20, r20
    1276:	79 f0       	breq	.+30     	; 0x1296 <_ZN6CC11018sendDataE8CCPACKET+0x68>
  {
    // Set data length at the first position of the TX FIFO
    writeReg(CC1101_TXFIFO,  packet.length);
    1278:	6f e3       	ldi	r22, 0x3F	; 63
    127a:	c8 01       	movw	r24, r16
    127c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
    // Write data into the TX FIFO
    writeBurstReg(CC1101_TXFIFO, packet.data, packet.length);
    1280:	28 85       	ldd	r18, Y+8	; 0x08
    1282:	ae 01       	movw	r20, r28
    1284:	47 5f       	subi	r20, 0xF7	; 247
    1286:	5f 4f       	sbci	r21, 0xFF	; 255
    1288:	6f e3       	ldi	r22, 0x3F	; 63
    128a:	c8 01       	movw	r24, r16
    128c:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN6CC110113writeBurstRegEhPhh>

    // CCA enabled: will enter TX state only if the channel is clear
    setTxState();
    1290:	c8 01       	movw	r24, r16
    1292:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_ZN6CC110110setTxStateEv>
  }

  // Check that TX state is being entered (state = RXTX_SETTLING)
  marcState = readStatusReg(CC1101_MARCSTATE) & 0x1F;
    1296:	40 ec       	ldi	r20, 0xC0	; 192
    1298:	65 e3       	ldi	r22, 0x35	; 53
    129a:	c8 01       	movw	r24, r16
    129c:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN6CC11017readRegEhh>
  if((marcState != 0x13) && (marcState != 0x14) && (marcState != 0x15))
    12a0:	8f 71       	andi	r24, 0x1F	; 31
    12a2:	83 51       	subi	r24, 0x13	; 19
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	80 f0       	brcs	.+32     	; 0x12c8 <_ZN6CC11018sendDataE8CCPACKET+0x9a>
  {
    setIdleState();       // Enter IDLE state
    12a8:	66 e3       	ldi	r22, 0x36	; 54
    12aa:	c8 01       	movw	r24, r16
    12ac:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>
    flushTxFifo();        // Flush Tx FIFO
    12b0:	6b e3       	ldi	r22, 0x3B	; 59
    12b2:	c8 01       	movw	r24, r16
    12b4:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>
    setRxState();         // Back to RX state
    12b8:	c8 01       	movw	r24, r16
    12ba:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN6CC110110setRxStateEv>

    // Declare to be in Rx state
    rfState = RFSTATE_RX;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	f8 01       	movw	r30, r16
    12c2:	82 83       	std	Z+2, r24	; 0x02
    return false;
    12c4:	f1 2c       	mov	r15, r1
    12c6:	1c c0       	rjmp	.+56     	; 0x1300 <_ZN6CC11018sendDataE8CCPACKET+0xd2>
  }

  // Wait for the sync word to be transmitted
  wait_GDO0_high();
    12c8:	4a 9b       	sbis	0x09, 2	; 9
    12ca:	fe cf       	rjmp	.-4      	; 0x12c8 <_ZN6CC11018sendDataE8CCPACKET+0x9a>

  // Wait until the end of the packet transmission
  wait_GDO0_low();
    12cc:	4a 99       	sbic	0x09, 2	; 9
    12ce:	fe cf       	rjmp	.-4      	; 0x12cc <_ZN6CC11018sendDataE8CCPACKET+0x9e>

  // Check that the TX FIFO is empty
  if((readStatusReg(CC1101_TXBYTES) & 0x7F) == 0)
    12d0:	40 ec       	ldi	r20, 0xC0	; 192
    12d2:	6a e3       	ldi	r22, 0x3A	; 58
    12d4:	c8 01       	movw	r24, r16
    12d6:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN6CC11017readRegEhh>
    12da:	8f 77       	andi	r24, 0x7F	; 127
    12dc:	ff 24       	eor	r15, r15
    12de:	f3 94       	inc	r15
    12e0:	81 11       	cpse	r24, r1
    12e2:	f1 2c       	mov	r15, r1
    res = true;

  setIdleState();       // Enter IDLE state
    12e4:	66 e3       	ldi	r22, 0x36	; 54
    12e6:	c8 01       	movw	r24, r16
    12e8:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>
  flushTxFifo();        // Flush Tx FIFO
    12ec:	6b e3       	ldi	r22, 0x3B	; 59
    12ee:	c8 01       	movw	r24, r16
    12f0:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>

  // Enter back into RX state
  setRxState();
    12f4:	c8 01       	movw	r24, r16
    12f6:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN6CC110110setRxStateEv>

  // Declare to be in Rx state
  rfState = RFSTATE_RX;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	f8 01       	movw	r30, r16
    12fe:	82 83       	std	Z+2, r24	; 0x02

  return res;
}
    1300:	8f 2d       	mov	r24, r15
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	08 95       	ret

0000130e <_ZN6CC11019setCCregsEv>:
 * setCCregs
 * 
 * Configure CC1101 registers
 */
void CC1101::setCCregs(void) 
{
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	c1 54       	subi	r28, 0x41	; 65
    131c:	d1 09       	sbc	r29, r1
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	8c 01       	movw	r16, r24
  writeReg(CC1101_IOCFG2,  CC1101_DEFVAL_IOCFG2);
    132a:	4e e2       	ldi	r20, 0x2E	; 46
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG1,  CC1101_DEFVAL_IOCFG1);
    1332:	4e e2       	ldi	r20, 0x2E	; 46
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	c8 01       	movw	r24, r16
    1338:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG0,  CC1101_DEFVAL_IOCFG0);
    133c:	46 e0       	ldi	r20, 0x06	; 6
    133e:	62 e0       	ldi	r22, 0x02	; 2
    1340:	c8 01       	movw	r24, r16
    1342:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FIFOTHR,  CC1101_DEFVAL_FIFOTHR);
    1346:	47 e0       	ldi	r20, 0x07	; 7
    1348:	63 e0       	ldi	r22, 0x03	; 3
    134a:	c8 01       	movw	r24, r16
    134c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTLEN,  CC1101_DEFVAL_PKTLEN);
    1350:	4d e3       	ldi	r20, 0x3D	; 61
    1352:	66 e0       	ldi	r22, 0x06	; 6
    1354:	c8 01       	movw	r24, r16
    1356:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL1,  CC1101_DEFVAL_PKTCTRL1);
    135a:	46 e0       	ldi	r20, 0x06	; 6
    135c:	67 e0       	ldi	r22, 0x07	; 7
    135e:	c8 01       	movw	r24, r16
    1360:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL0,  CC1101_DEFVAL_PKTCTRL0);
    1364:	45 e0       	ldi	r20, 0x05	; 5
    1366:	68 e0       	ldi	r22, 0x08	; 8
    1368:	c8 01       	movw	r24, r16
    136a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>

  // Set default synchronization word
  setSyncWord(syncWord);
    136e:	b8 01       	movw	r22, r16
    1370:	6a 5f       	subi	r22, 0xFA	; 250
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	c8 01       	movw	r24, r16
    1376:	0e 94 82 08 	call	0x1104	; 0x1104 <_ZN6CC110111setSyncWordEPh>

  // Set default device address
  setDevAddress(devAddress);
    137a:	f8 01       	movw	r30, r16
    137c:	60 85       	ldd	r22, Z+8	; 0x08
    137e:	c8 01       	movw	r24, r16
    1380:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN6CC110113setDevAddressEh>

  // Set default frequency channel
  setChannel(channel);
    1384:	f8 01       	movw	r30, r16
    1386:	65 81       	ldd	r22, Z+5	; 0x05
    1388:	c8 01       	movw	r24, r16
    138a:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN6CC110110setChannelEh>
  
  writeReg(CC1101_FSCTRL1,  CC1101_DEFVAL_FSCTRL1);
    138e:	48 e0       	ldi	r20, 0x08	; 8
    1390:	6b e0       	ldi	r22, 0x0B	; 11
    1392:	c8 01       	movw	r24, r16
    1394:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCTRL0,  CC1101_DEFVAL_FSCTRL0);
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	6c e0       	ldi	r22, 0x0C	; 12
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>

  // Set default carrier frequency = 868 MHz
  setCarrierFreq(carrierFreq);
    13a2:	f8 01       	movw	r30, r16
    13a4:	63 81       	ldd	r22, Z+3	; 0x03
    13a6:	c8 01       	movw	r24, r16
    13a8:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN6CC110114setCarrierFreqEh>

  // RF speed
  if (workMode == MODE_LOW_SPEED)
    13ac:	f8 01       	movw	r30, r16
    13ae:	84 81       	ldd	r24, Z+4	; 0x04
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	11 f4       	brne	.+4      	; 0x13b8 <_ZN6CC11019setCCregsEv+0xaa>
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_4800);
    13b4:	47 ec       	ldi	r20, 0xC7	; 199
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <_ZN6CC11019setCCregsEv+0xac>
  else
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_38400);
    13b8:	4a ec       	ldi	r20, 0xCA	; 202
    13ba:	60 e1       	ldi	r22, 0x10	; 16
    13bc:	c8 01       	movw	r24, r16
    13be:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
    
  writeReg(CC1101_MDMCFG3,  CC1101_DEFVAL_MDMCFG3);
    13c2:	43 e8       	ldi	r20, 0x83	; 131
    13c4:	61 e1       	ldi	r22, 0x11	; 17
    13c6:	c8 01       	movw	r24, r16
    13c8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG2,  CC1101_DEFVAL_MDMCFG2);
    13cc:	43 e9       	ldi	r20, 0x93	; 147
    13ce:	62 e1       	ldi	r22, 0x12	; 18
    13d0:	c8 01       	movw	r24, r16
    13d2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG1,  CC1101_DEFVAL_MDMCFG1);
    13d6:	42 e2       	ldi	r20, 0x22	; 34
    13d8:	63 e1       	ldi	r22, 0x13	; 19
    13da:	c8 01       	movw	r24, r16
    13dc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG0,  CC1101_DEFVAL_MDMCFG0);
    13e0:	48 ef       	ldi	r20, 0xF8	; 248
    13e2:	64 e1       	ldi	r22, 0x14	; 20
    13e4:	c8 01       	movw	r24, r16
    13e6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_DEVIATN,  CC1101_DEFVAL_DEVIATN);
    13ea:	45 e3       	ldi	r20, 0x35	; 53
    13ec:	65 e1       	ldi	r22, 0x15	; 21
    13ee:	c8 01       	movw	r24, r16
    13f0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM2,  CC1101_DEFVAL_MCSM2);
    13f4:	47 e0       	ldi	r20, 0x07	; 7
    13f6:	66 e1       	ldi	r22, 0x16	; 22
    13f8:	c8 01       	movw	r24, r16
    13fa:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM1,  CC1101_DEFVAL_MCSM1);
    13fe:	40 e2       	ldi	r20, 0x20	; 32
    1400:	67 e1       	ldi	r22, 0x17	; 23
    1402:	c8 01       	movw	r24, r16
    1404:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM0,  CC1101_DEFVAL_MCSM0);
    1408:	48 e1       	ldi	r20, 0x18	; 24
    140a:	68 e1       	ldi	r22, 0x18	; 24
    140c:	c8 01       	movw	r24, r16
    140e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FOCCFG,  CC1101_DEFVAL_FOCCFG);
    1412:	46 e1       	ldi	r20, 0x16	; 22
    1414:	69 e1       	ldi	r22, 0x19	; 25
    1416:	c8 01       	movw	r24, r16
    1418:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_BSCFG,  CC1101_DEFVAL_BSCFG);
    141c:	4c e6       	ldi	r20, 0x6C	; 108
    141e:	6a e1       	ldi	r22, 0x1A	; 26
    1420:	c8 01       	movw	r24, r16
    1422:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL2,  CC1101_DEFVAL_AGCCTRL2);
    1426:	43 e4       	ldi	r20, 0x43	; 67
    1428:	6b e1       	ldi	r22, 0x1B	; 27
    142a:	c8 01       	movw	r24, r16
    142c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL1,  CC1101_DEFVAL_AGCCTRL1);
    1430:	40 e4       	ldi	r20, 0x40	; 64
    1432:	6c e1       	ldi	r22, 0x1C	; 28
    1434:	c8 01       	movw	r24, r16
    1436:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL0,  CC1101_DEFVAL_AGCCTRL0);
    143a:	41 e9       	ldi	r20, 0x91	; 145
    143c:	6d e1       	ldi	r22, 0x1D	; 29
    143e:	c8 01       	movw	r24, r16
    1440:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT1,  CC1101_DEFVAL_WOREVT1);
    1444:	47 e8       	ldi	r20, 0x87	; 135
    1446:	6e e1       	ldi	r22, 0x1E	; 30
    1448:	c8 01       	movw	r24, r16
    144a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT0,  CC1101_DEFVAL_WOREVT0);
    144e:	4b e6       	ldi	r20, 0x6B	; 107
    1450:	6f e1       	ldi	r22, 0x1F	; 31
    1452:	c8 01       	movw	r24, r16
    1454:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WORCTRL,  CC1101_DEFVAL_WORCTRL);
    1458:	4b ef       	ldi	r20, 0xFB	; 251
    145a:	60 e2       	ldi	r22, 0x20	; 32
    145c:	c8 01       	movw	r24, r16
    145e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND1,  CC1101_DEFVAL_FREND1);
    1462:	46 e5       	ldi	r20, 0x56	; 86
    1464:	61 e2       	ldi	r22, 0x21	; 33
    1466:	c8 01       	movw	r24, r16
    1468:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND0,  CC1101_DEFVAL_FREND0);
    146c:	40 e1       	ldi	r20, 0x10	; 16
    146e:	62 e2       	ldi	r22, 0x22	; 34
    1470:	c8 01       	movw	r24, r16
    1472:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL3,  CC1101_DEFVAL_FSCAL3);
    1476:	49 ee       	ldi	r20, 0xE9	; 233
    1478:	63 e2       	ldi	r22, 0x23	; 35
    147a:	c8 01       	movw	r24, r16
    147c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL2,  CC1101_DEFVAL_FSCAL2);
    1480:	4a e2       	ldi	r20, 0x2A	; 42
    1482:	64 e2       	ldi	r22, 0x24	; 36
    1484:	c8 01       	movw	r24, r16
    1486:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL1,  CC1101_DEFVAL_FSCAL1);
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	65 e2       	ldi	r22, 0x25	; 37
    148e:	c8 01       	movw	r24, r16
    1490:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL0,  CC1101_DEFVAL_FSCAL0);
    1494:	4f e1       	ldi	r20, 0x1F	; 31
    1496:	66 e2       	ldi	r22, 0x26	; 38
    1498:	c8 01       	movw	r24, r16
    149a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL1,  CC1101_DEFVAL_RCCTRL1);
    149e:	41 e4       	ldi	r20, 0x41	; 65
    14a0:	67 e2       	ldi	r22, 0x27	; 39
    14a2:	c8 01       	movw	r24, r16
    14a4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL0,  CC1101_DEFVAL_RCCTRL0);
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	68 e2       	ldi	r22, 0x28	; 40
    14ac:	c8 01       	movw	r24, r16
    14ae:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSTEST,  CC1101_DEFVAL_FSTEST);
    14b2:	49 e5       	ldi	r20, 0x59	; 89
    14b4:	69 e2       	ldi	r22, 0x29	; 41
    14b6:	c8 01       	movw	r24, r16
    14b8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PTEST,  CC1101_DEFVAL_PTEST);
    14bc:	4f e7       	ldi	r20, 0x7F	; 127
    14be:	6a e2       	ldi	r22, 0x2A	; 42
    14c0:	c8 01       	movw	r24, r16
    14c2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCTEST,  CC1101_DEFVAL_AGCTEST);
    14c6:	4f e3       	ldi	r20, 0x3F	; 63
    14c8:	6b e2       	ldi	r22, 0x2B	; 43
    14ca:	c8 01       	movw	r24, r16
    14cc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST2,  CC1101_DEFVAL_TEST2);
    14d0:	41 e8       	ldi	r20, 0x81	; 129
    14d2:	6c e2       	ldi	r22, 0x2C	; 44
    14d4:	c8 01       	movw	r24, r16
    14d6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST1,  CC1101_DEFVAL_TEST1);
    14da:	45 e3       	ldi	r20, 0x35	; 53
    14dc:	6d e2       	ldi	r22, 0x2D	; 45
    14de:	c8 01       	movw	r24, r16
    14e0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST0,  CC1101_DEFVAL_TEST0);
    14e4:	49 e0       	ldi	r20, 0x09	; 9
    14e6:	6e e2       	ldi	r22, 0x2E	; 46
    14e8:	c8 01       	movw	r24, r16
    14ea:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  
  // Send empty packet
  CCPACKET packet;
  packet.length = 0;
    14ee:	19 82       	std	Y+1, r1	; 0x01
  sendData(packet);
    14f0:	8d b7       	in	r24, 0x3d	; 61
    14f2:	9e b7       	in	r25, 0x3e	; 62
    14f4:	81 54       	subi	r24, 0x41	; 65
    14f6:	91 09       	sbc	r25, r1
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	9e bf       	out	0x3e, r25	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	8d bf       	out	0x3d, r24	; 61
    1502:	ad b7       	in	r26, 0x3d	; 61
    1504:	be b7       	in	r27, 0x3e	; 62
    1506:	11 96       	adiw	r26, 0x01	; 1
    1508:	81 e4       	ldi	r24, 0x41	; 65
    150a:	fe 01       	movw	r30, r28
    150c:	31 96       	adiw	r30, 0x01	; 1
    150e:	01 90       	ld	r0, Z+
    1510:	0d 92       	st	X+, r0
    1512:	8a 95       	dec	r24
    1514:	e1 f7       	brne	.-8      	; 0x150e <_ZN6CC11019setCCregsEv+0x200>
    1516:	c8 01       	movw	r24, r16
    1518:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN6CC11018sendDataE8CCPACKET>
}
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	cf 5b       	subi	r28, 0xBF	; 191
    1528:	df 4f       	sbci	r29, 0xFF	; 255
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <_ZN6CC11015resetEv>:
 * reset
 * 
 * Reset CC1101
 */
void CC1101::reset(void) 
{
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	ec 01       	movw	r28, r24
  cc1101_Deselect();                    // Deselect CC1101
    1544:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(5);
    1546:	85 e0       	ldi	r24, 0x05	; 5
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    154e:	2a 98       	cbi	0x05, 2	; 5
  delayMicroseconds(10);
    1550:	8a e0       	ldi	r24, 0x0A	; 10
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
  cc1101_Deselect();                    // Deselect CC1101
    1558:	2a 9a       	sbi	0x05, 2	; 5
  delayMicroseconds(41);
    155a:	89 e2       	ldi	r24, 0x29	; 41
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
  cc1101_Select();                      // Select CC1101
    1562:	2a 98       	cbi	0x05, 2	; 5

  wait_Miso();                          // Wait until MISO goes low
    1564:	1c 99       	sbic	0x03, 4	; 3
    1566:	fe cf       	rjmp	.-4      	; 0x1564 <_ZN6CC11015resetEv+0x26>
  spi.send(CC1101_SRES);                // Send reset command strobe
    1568:	60 e3       	ldi	r22, 0x30	; 48
    156a:	ce 01       	movw	r24, r28
    156c:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN9SIMPLESPI4sendEh>
  wait_Miso();                          // Wait until MISO goes low
    1570:	1c 99       	sbic	0x03, 4	; 3
    1572:	fe cf       	rjmp	.-4      	; 0x1570 <_ZN6CC11015resetEv+0x32>

  cc1101_Deselect();                    // Deselect CC1101
    1574:	2a 9a       	sbi	0x05, 2	; 5

  setCCregs();                          // Reconfigure CC1101
    1576:	ce 01       	movw	r24, r28
}
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
  spi.send(CC1101_SRES);                // Send reset command strobe
  wait_Miso();                          // Wait until MISO goes low

  cc1101_Deselect();                    // Deselect CC1101

  setCCregs();                          // Reconfigure CC1101
    157c:	0c 94 87 09 	jmp	0x130e	; 0x130e <_ZN6CC11019setCCregsEv>

00001580 <_ZN6CC11014initEhh>:
 *
 * @param freq Carrier frequency
 * @param mode Working mode (speed, ...)
 */
void CC1101::init(uint8_t freq, uint8_t mode)
{
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ec 01       	movw	r28, r24
  carrierFreq = freq;
    1586:	6b 83       	std	Y+3, r22	; 0x03
  workMode = mode;
    1588:	4c 83       	std	Y+4, r20	; 0x04
  
  spi.init();                           // Initialize SPI interface
    158a:	0e 94 38 0c 	call	0x1870	; 0x1870 <_ZN9SIMPLESPI4initEv>
  pinMode(GDO0, INPUT);                 // Config GDO0 as input
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	0e 94 6f 07 	call	0xede	; 0xede <pinMode>

  reset();                              // Reset CC1101
    1596:	ce 01       	movw	r24, r28
    1598:	0e 94 9f 0a 	call	0x153e	; 0x153e <_ZN6CC11015resetEv>
     * 
     * @param paLevel amplification value
     */
    inline void setTxPowerAmp(uint8_t paLevel)
    {
      writeReg(CC1101_PATABLE, paLevel);
    159c:	40 e6       	ldi	r20, 0x60	; 96
    159e:	6e e3       	ldi	r22, 0x3E	; 62
    15a0:	ce 01       	movw	r24, r28

  // Configure PATABLE
  setTxPowerAmp(PA_LowPower);
}
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>

000015aa <_ZN6CC110111receiveDataEP8CCPACKET>:
 * 
 * Return:
 * 	Amount of bytes received
 */
byte CC1101::receiveData(CCPACKET * packet)
{
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	ec 01       	movw	r28, r24
    15b4:	8b 01       	movw	r16, r22
  byte val;
  byte rxBytes = readStatusReg(CC1101_RXBYTES);
    15b6:	40 ec       	ldi	r20, 0xC0	; 192
    15b8:	6b e3       	ldi	r22, 0x3B	; 59
    15ba:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN6CC11017readRegEhh>

  // Any byte waiting to be read and no overflow?
  if (rxBytes & 0x7F && !(rxBytes & 0x80))
    15be:	98 2f       	mov	r25, r24
    15c0:	9f 77       	andi	r25, 0x7F	; 127
    15c2:	59 f0       	breq	.+22     	; 0x15da <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
    15c4:	87 fd       	sbrc	r24, 7
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <_ZN6CC110111receiveDataEP8CCPACKET+0x30>
  {
    // Read data length
    packet->length = readConfigReg(CC1101_RXFIFO);
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	6f e3       	ldi	r22, 0x3F	; 63
    15cc:	ce 01       	movw	r24, r28
    15ce:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN6CC11017readRegEhh>
    15d2:	f8 01       	movw	r30, r16
    15d4:	80 83       	st	Z, r24
    // If packet is too long
    if (packet->length > CCPACKET_DATA_LEN)
    15d6:	8e 33       	cpi	r24, 0x3E	; 62
    15d8:	18 f0       	brcs	.+6      	; 0x15e0 <_ZN6CC110111receiveDataEP8CCPACKET+0x36>
      packet->length = 0;   // Discard packet
    15da:	f8 01       	movw	r30, r16
    15dc:	10 82       	st	Z, r1
    15de:	1f c0       	rjmp	.+62     	; 0x161e <_ZN6CC110111receiveDataEP8CCPACKET+0x74>
    else
    {
      // Read data packet
      readBurstReg(packet->data, CC1101_RXFIFO, packet->length);
    15e0:	28 2f       	mov	r18, r24
    15e2:	4f e3       	ldi	r20, 0x3F	; 63
    15e4:	b8 01       	movw	r22, r16
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	ce 01       	movw	r24, r28
    15ec:	0e 94 40 08 	call	0x1080	; 0x1080 <_ZN6CC110112readBurstRegEPhhh>
      // Read RSSI
      packet->rssi = readConfigReg(CC1101_RXFIFO);
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	6f e3       	ldi	r22, 0x3F	; 63
    15f4:	ce 01       	movw	r24, r28
    15f6:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN6CC11017readRegEhh>
    15fa:	f8 01       	movw	r30, r16
    15fc:	87 af       	std	Z+63, r24	; 0x3f
      // Read LQI and CRC_OK
      val = readConfigReg(CC1101_RXFIFO);
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	6f e3       	ldi	r22, 0x3F	; 63
    1602:	ce 01       	movw	r24, r28
    1604:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN6CC11017readRegEhh>
      packet->lqi = val & 0x7F;
    1608:	f8 01       	movw	r30, r16
    160a:	e0 5c       	subi	r30, 0xC0	; 192
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	98 2f       	mov	r25, r24
    1610:	9f 77       	andi	r25, 0x7F	; 127
    1612:	90 83       	st	Z, r25
      packet->crc_ok = bitRead(val, 7);
    1614:	88 1f       	adc	r24, r24
    1616:	88 27       	eor	r24, r24
    1618:	88 1f       	adc	r24, r24
    161a:	f8 01       	movw	r30, r16
    161c:	86 af       	std	Z+62, r24	; 0x3e
    }
  }
  else
    packet->length = 0;

  setIdleState();       // Enter IDLE state
    161e:	66 e3       	ldi	r22, 0x36	; 54
    1620:	ce 01       	movw	r24, r28
    1622:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>
  flushRxFifo();        // Flush Rx FIFO
    1626:	6a e3       	ldi	r22, 0x3A	; 58
    1628:	ce 01       	movw	r24, r28
    162a:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>
  //cmdStrobe(CC1101_SCAL);

  // Back to RX state
  setRxState();
    162e:	ce 01       	movw	r24, r28
    1630:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN6CC110110setRxStateEv>

  return packet->length;
}
    1634:	f8 01       	movw	r30, r16
    1636:	80 81       	ld	r24, Z
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret

00001642 <_ZN6CC110110disableLNAEv>:
 *
 * Disable LNA and PA on the LD-Board
 */
void CC1101::disableLNA(void)
{
 digitalWrite(LNA_EN, LOW);
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	84 e0       	ldi	r24, 0x04	; 4
    1646:	0e 94 ab 07 	call	0xf56	; 0xf56 <digitalWrite>
 digitalWrite(PA_EN, LOW);
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <digitalWrite>

00001652 <_ZN6CC110117setPowerDownStateEv>:
 * setPowerDownState
 * 
 * Put CC1101 into power-down state
 */
void CC1101::setPowerDownState() 
{
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
  // Disable LNA on LD-board if any
  if (hgmEnabled)
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	88 23       	and	r24, r24
    165c:	19 f0       	breq	.+6      	; 0x1664 <_ZN6CC110117setPowerDownStateEv+0x12>
    disableLNA();
    165e:	ce 01       	movw	r24, r28
    1660:	0e 94 21 0b 	call	0x1642	; 0x1642 <_ZN6CC110110disableLNAEv>

  // Comming from RX state, we need to enter the IDLE state first
  cmdStrobe(CC1101_SIDLE);
    1664:	66 e3       	ldi	r22, 0x36	; 54
    1666:	ce 01       	movw	r24, r28
    1668:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>
  // Enter Power-down state
  cmdStrobe(CC1101_SPWD);
    166c:	69 e3       	ldi	r22, 0x39	; 57
    166e:	ce 01       	movw	r24, r28
}
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    disableLNA();

  // Comming from RX state, we need to enter the IDLE state first
  cmdStrobe(CC1101_SIDLE);
  // Enter Power-down state
  cmdStrobe(CC1101_SPWD);
    1674:	0c 94 27 08 	jmp	0x104e	; 0x104e <_ZN6CC11019cmdStrobeEh>

00001678 <_Z8radioISRv>:
  sleep_mode();

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	0e 94 ca 10 	call	0x2194	; 0x2194 <detachInterrupt>
    167e:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <panstamp+0x3>
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	a9 f4       	brne	.+42     	; 0x16b0 <_Z8radioISRv+0x38>
    1686:	69 eb       	ldi	r22, 0xB9	; 185
    1688:	72 e0       	ldi	r23, 0x02	; 2
    168a:	8b ef       	ldi	r24, 0xFB	; 251
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6CC110111receiveDataEP8CCPACKET>
    1692:	88 23       	and	r24, r24
    1694:	69 f0       	breq	.+26     	; 0x16b0 <_Z8radioISRv+0x38>
    1696:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <_ZZ8radioISRvE8ccPacket+0x3e>
    169a:	88 23       	and	r24, r24
    169c:	49 f0       	breq	.+18     	; 0x16b0 <_Z8radioISRv+0x38>
    169e:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <panstamp+0xb>
    16a2:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <panstamp+0xc>
    16a6:	30 97       	sbiw	r30, 0x00	; 0
    16a8:	19 f0       	breq	.+6      	; 0x16b0 <_Z8radioISRv+0x38>
    16aa:	89 eb       	ldi	r24, 0xB9	; 185
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	09 95       	icall
    16b0:	42 e0       	ldi	r20, 0x02	; 2
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	6c e3       	ldi	r22, 0x3C	; 60
    16b6:	7b e0       	ldi	r23, 0x0B	; 11
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <attachInterrupt>

000016be <_ZN8PANSTAMPC1Ev>:
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	ec 01       	movw	r28, r24
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_ZN6CC1101C1Ev>
    16ca:	1c 86       	std	Y+12, r1	; 0x0c
    16cc:	1b 86       	std	Y+11, r1	; 0x0b
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <_ZN8PANSTAMP4initEhh>:
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	ec 01       	movw	r28, r24
    16de:	8c 01       	movw	r16, r24
    16e0:	0f 5f       	subi	r16, 0xFF	; 255
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	c8 01       	movw	r24, r16
    16e6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <_ZN6CC11014initEhh>
    16ea:	82 e3       	ldi	r24, 0x32	; 50
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
    16f2:	c8 01       	movw	r24, r16
    16f4:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN6CC110110setRxStateEv>
    16f8:	42 e0       	ldi	r20, 0x02	; 2
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	6c e3       	ldi	r22, 0x3C	; 60
    16fe:	7b e0       	ldi	r23, 0x0B	; 11
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	0e 94 aa 10 	call	0x2154	; 0x2154 <attachInterrupt>
    1706:	18 82       	st	Y, r1
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret

00001712 <_ZN8PANSTAMP5resetEv>:
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	a8 95       	wdr
    1718:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    171c:	88 61       	ori	r24, 0x18	; 24
    171e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1722:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	98 e0       	ldi	r25, 0x08	; 8
    172a:	88 e1       	ldi	r24, 0x18	; 24
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	a8 95       	wdr
    1732:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    173c:	ff cf       	rjmp	.-2      	; 0x173c <_ZN8PANSTAMP5resetEv+0x2a>

0000173e <_ZN8PANSTAMP8sleepSecEj6RTCSRC>:
 *
 * @param time Sleep time in seconds
 * @param source Source of interruption (RTCSRC_WDT or RTCSRC_XT2)
 */
void PANSTAMP::sleepSec(uint16_t time, RTCSRC source)
{
    173e:	8f 92       	push	r8
    1740:	9f 92       	push	r9
    1742:	af 92       	push	r10
    1744:	bf 92       	push	r11
    1746:	cf 92       	push	r12
    1748:	df 92       	push	r13
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
  int i, loops;
  byte minTime;
  
  // No interval? Then return
  if (time == 0)
    1756:	61 15       	cp	r22, r1
    1758:	71 05       	cpc	r23, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x20>
    175c:	56 c0       	rjmp	.+172    	; 0x180a <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xcc>
    return;

  // Search the maximum sleep time passed as argument to sleepWd that best
  // suits our desired interval
  if (time % 8 == 0)
    175e:	9b 01       	movw	r18, r22
    1760:	27 70       	andi	r18, 0x07	; 7
    1762:	33 27       	eor	r19, r19
    1764:	23 2b       	or	r18, r19
    1766:	51 f4       	brne	.+20     	; 0x177c <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x3e>
  {
    loops = time / 8;
    1768:	8b 01       	movw	r16, r22
    176a:	63 e0       	ldi	r22, 0x03	; 3
    176c:	16 95       	lsr	r17
    176e:	07 95       	ror	r16
    1770:	6a 95       	dec	r22
    1772:	e1 f7       	brne	.-8      	; 0x176c <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x2e>
    
    if (source == RTCSRC_XT2)
    1774:	41 30       	cpi	r20, 0x01	; 1
    1776:	e9 f0       	breq	.+58     	; 0x17b2 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x74>
      minTime = RTC_8S;
    else
      minTime = WDTO_8S;
    1778:	c9 e0       	ldi	r28, 0x09	; 9
    177a:	20 c0       	rjmp	.+64     	; 0x17bc <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
  }
  else if (time % 4 == 0)
    177c:	9b 01       	movw	r18, r22
    177e:	23 70       	andi	r18, 0x03	; 3
    1780:	33 27       	eor	r19, r19
  {
    if (source == RTCSRC_XT2)
    {
      loops = time / 2;
    1782:	8b 01       	movw	r16, r22
    if (source == RTCSRC_XT2)
      minTime = RTC_8S;
    else
      minTime = WDTO_8S;
  }
  else if (time % 4 == 0)
    1784:	23 2b       	or	r18, r19
    1786:	59 f4       	brne	.+22     	; 0x179e <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x60>
  {
    if (source == RTCSRC_XT2)
    1788:	41 30       	cpi	r20, 0x01	; 1
    178a:	19 f4       	brne	.+6      	; 0x1792 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x54>
    {
      loops = time / 2;
    178c:	16 95       	lsr	r17
    178e:	07 95       	ror	r16
    1790:	12 c0       	rjmp	.+36     	; 0x17b6 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x78>
      minTime = RTC_2S;
    }
    else
    {
      loops = time / 4;
    1792:	16 95       	lsr	r17
    1794:	07 95       	ror	r16
    1796:	16 95       	lsr	r17
    1798:	07 95       	ror	r16
      minTime = WDTO_4S;
    179a:	c8 e0       	ldi	r28, 0x08	; 8
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
    }
  }
  else if (time % 2 == 0)
    179e:	60 fd       	sbrc	r22, 0
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x6e>
  {
    loops = time / 2;
    17a2:	16 95       	lsr	r17
    17a4:	07 95       	ror	r16
    if (source == RTCSRC_XT2)    
    17a6:	41 30       	cpi	r20, 0x01	; 1
    17a8:	21 f4       	brne	.+8      	; 0x17b2 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x74>
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x78>
      minTime = WDTO_2S;
  }
  else
  {
    loops = time;
    if (source == RTCSRC_XT2)
    17ac:	41 30       	cpi	r20, 0x01	; 1
    17ae:	19 f4       	brne	.+6      	; 0x17b6 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x78>
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7c>
  if (time % 8 == 0)
  {
    loops = time / 8;
    
    if (source == RTCSRC_XT2)
      minTime = RTC_8S;
    17b2:	c7 e0       	ldi	r28, 0x07	; 7
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
  }
  else if (time % 2 == 0)
  {
    loops = time / 2;
    if (source == RTCSRC_XT2)    
      minTime = RTC_2S;
    17b6:	c6 e0       	ldi	r28, 0x06	; 6
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x7e>
  }
  else
  {
    loops = time;
    if (source == RTCSRC_XT2)
      minTime = RTC_1S;
    17ba:	c5 e0       	ldi	r28, 0x05	; 5
    17bc:	d4 2f       	mov	r29, r20
    17be:	7c 01       	movw	r14, r24
    else
      minTime = WDTO_1S;
  }

  state = RXOFF;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	f7 01       	movw	r30, r14
    17c4:	81 93       	st	Z+, r24
    17c6:	6f 01       	movw	r12, r30

  // Power-down CC1101
  radio.setPowerDownState();
    17c8:	cf 01       	movw	r24, r30
    17ca:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN6CC110117setPowerDownStateEv>

  // Sleep
  for (i=0 ; i<loops ; i++)
    17ce:	a1 2c       	mov	r10, r1
    17d0:	b1 2c       	mov	r11, r1
    17d2:	c7 01       	movw	r24, r14
    17d4:	0a 96       	adiw	r24, 0x0a	; 10
    17d6:	4c 01       	movw	r8, r24
    17d8:	a0 16       	cp	r10, r16
    17da:	b1 06       	cpc	r11, r17
    17dc:	8c f4       	brge	.+34     	; 0x1800 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xc2>
  {
    // Exit sleeping loop?
    if (state == RXON)
    17de:	f7 01       	movw	r30, r14
    17e0:	80 81       	ld	r24, Z
    17e2:	88 23       	and	r24, r24
    17e4:	69 f0       	breq	.+26     	; 0x1800 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xc2>
      break;

    if (source == RTCSRC_XT2)
      rtc.sleepRtc(minTime);
    17e6:	6c 2f       	mov	r22, r28
    17e8:	c4 01       	movw	r24, r8
  {
    // Exit sleeping loop?
    if (state == RXON)
      break;

    if (source == RTCSRC_XT2)
    17ea:	d1 30       	cpi	r29, 0x01	; 1
    17ec:	19 f4       	brne	.+6      	; 0x17f4 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xb6>
      rtc.sleepRtc(minTime);
    17ee:	0e 94 b7 11 	call	0x236e	; 0x236e <_ZN6AVRRTC8sleepRtcEh>
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0xba>
    else
      rtc.sleepWd(minTime);
    17f4:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN6AVRRTC7sleepWdEh>

  // Power-down CC1101
  radio.setPowerDownState();

  // Sleep
  for (i=0 ; i<loops ; i++)
    17f8:	ff ef       	ldi	r31, 0xFF	; 255
    17fa:	af 1a       	sub	r10, r31
    17fc:	bf 0a       	sbc	r11, r31
    17fe:	ec cf       	rjmp	.-40     	; 0x17d8 <_ZN8PANSTAMP8sleepSecEj6RTCSRC+0x9a>
    else
      rtc.sleepWd(minTime);
  }

  // Reset CC1101 IC
  radio.wakeUp();
    1800:	c6 01       	movw	r24, r12
    1802:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN6CC11016wakeUpEv>

  // set system state to RF Rx ON
  state = RXON; 
    1806:	f7 01       	movw	r30, r14
    1808:	10 82       	st	Z, r1
}
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	df 90       	pop	r13
    1818:	cf 90       	pop	r12
    181a:	bf 90       	pop	r11
    181c:	af 90       	pop	r10
    181e:	9f 90       	pop	r9
    1820:	8f 90       	pop	r8
    1822:	08 95       	ret

00001824 <_ZN8PANSTAMP6getVccEv>:
uint16_t PANSTAMP::getVcc(void)
{
  uint16_t result;
  
  // Read 1.1V reference against AVcc
  ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    1824:	8e e4       	ldi	r24, 0x4E	; 78
    1826:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  delay(2); // Wait for Vref to settle
    182a:	62 e0       	ldi	r22, 0x02	; 2
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 c7 06 	call	0xd8e	; 0xd8e <delay>
  ADCSRA |= _BV(ADSC); // Convert
    1836:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    183a:	80 64       	ori	r24, 0x40	; 64
    183c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  while (bit_is_set(ADCSRA,ADSC));
    1840:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1844:	86 fd       	sbrc	r24, 6
    1846:	fc cf       	rjmp	.-8      	; 0x1840 <_ZN8PANSTAMP6getVccEv+0x1c>
  result = ADCL;
    1848:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  result |= ADCH << 8;
    184c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  result = 1126400L / result; // Back-calculate AVcc in mV
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	38 2b       	or	r19, r24
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	70 e3       	ldi	r23, 0x30	; 48
    185c:	81 e1       	ldi	r24, 0x11	; 17
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodsi4>
  
  return result;
}
    1864:	c9 01       	movw	r24, r18
    1866:	08 95       	ret

00001868 <_GLOBAL__sub_I__Z8radioISRv>:

/**
 * Pre-instantiate PANSTAMP object
 */
PANSTAMP panstamp;
    1868:	8a ef       	ldi	r24, 0xFA	; 250
    186a:	92 e0       	ldi	r25, 0x02	; 2
    186c:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <_ZN8PANSTAMPC1Ev>

00001870 <_ZN9SIMPLESPI4initEv>:
 * SPI initialization
 */
void SIMPLESPI::init() 
{
	
  digitalWrite(SPI_SS, HIGH);
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	8a e0       	ldi	r24, 0x0A	; 10
    1874:	0e 94 ab 07 	call	0xf56	; 0xf56 <digitalWrite>
 
  // Configure SPI pins
  pinMode(SPI_SS, OUTPUT);
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	8a e0       	ldi	r24, 0x0A	; 10
    187c:	0e 94 6f 07 	call	0xede	; 0xede <pinMode>
 
  pinMode(SPI_MOSI, OUTPUT);
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	8b e0       	ldi	r24, 0x0B	; 11
    1884:	0e 94 6f 07 	call	0xede	; 0xede <pinMode>
  pinMode(SPI_MISO, INPUT);  
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	8c e0       	ldi	r24, 0x0C	; 12
    188c:	0e 94 6f 07 	call	0xede	; 0xede <pinMode>
  pinMode(SPI_SCK, OUTPUT);
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	8d e0       	ldi	r24, 0x0D	; 13
    1894:	0e 94 6f 07 	call	0xede	; 0xede <pinMode>
  
  digitalWrite(SPI_SCK, HIGH);
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	8d e0       	ldi	r24, 0x0D	; 13
    189c:	0e 94 ab 07 	call	0xf56	; 0xf56 <digitalWrite>
  digitalWrite(SPI_MOSI, LOW);
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	8b e0       	ldi	r24, 0x0B	; 11
    18a4:	0e 94 ab 07 	call	0xf56	; 0xf56 <digitalWrite>

  // SPI speed = clk/4
  SPCR = _BV(SPE) | _BV(MSTR);
    18a8:	80 e5       	ldi	r24, 0x50	; 80
    18aa:	8c bd       	out	0x2c, r24	; 44
    18ac:	08 95       	ret

000018ae <_ZN9SIMPLESPI4sendEh>:
 * Return:
 * 	Response received from SPI slave
 */
byte SIMPLESPI::send(byte value) 
{
  SPDR = value;                          // Transfer byte via SPI
    18ae:	6e bd       	out	0x2e, r22	; 46
  while(!(SPSR & _BV(SPIF)));            // Wait until SPI operation is terminated
    18b0:	0d b4       	in	r0, 0x2d	; 45
    18b2:	07 fe       	sbrs	r0, 7
    18b4:	fd cf       	rjmp	.-6      	; 0x18b0 <_ZN9SIMPLESPI4sendEh+0x2>

  return SPDR;
    18b6:	8e b5       	in	r24, 0x2e	; 46
}
    18b8:	08 95       	ret

000018ba <_ZN8REGISTER4initEv>:
 * init
 *
 * Initialize register
 */
void REGISTER::init(void)
{
    18ba:	0f 93       	push	r16
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	1f 92       	push	r1
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
  // Does the value need to be read from EEPROM?
  if (eepromAddress >= 0)
    18c6:	fc 01       	movw	r30, r24
    18c8:	21 85       	ldd	r18, Z+9	; 0x09
    18ca:	32 85       	ldd	r19, Z+10	; 0x0a
    18cc:	37 fd       	sbrc	r19, 7
    18ce:	08 c0       	rjmp	.+16     	; 0x18e0 <_ZN8REGISTER4initEv+0x26>
  {
    STORAGE nvMem;
    
    // Read from info memory
    nvMem.read(value, eepromBank, eepromAddress, length);
    18d0:	65 81       	ldd	r22, Z+5	; 0x05
    18d2:	76 81       	ldd	r23, Z+6	; 0x06
    18d4:	07 81       	ldd	r16, Z+7	; 0x07
    18d6:	43 85       	ldd	r20, Z+11	; 0x0b
    18d8:	ce 01       	movw	r24, r28
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN7STORAGE4readEPhhhh>
  }
}
    18e0:	0f 90       	pop	r0
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	0f 91       	pop	r16
    18e8:	08 95       	ret

000018ea <_ZN8REGISTER14sendSwapStatusEv>:
 * sendSwapStatus
 * 
 * Send SWAP status message
 */
void REGISTER::sendSwapStatus(void) 
{
    18ea:	0f 93       	push	r16
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	c0 55       	subi	r28, 0x50	; 80
    18f6:	d1 09       	sbc	r29, r1
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	fc 01       	movw	r30, r24
  SWSTATUS packet = SWSTATUS(id, value, length, type);
    1904:	45 81       	ldd	r20, Z+5	; 0x05
    1906:	56 81       	ldd	r21, Z+6	; 0x06
    1908:	00 85       	ldd	r16, Z+8	; 0x08
    190a:	27 81       	ldd	r18, Z+7	; 0x07
    190c:	64 81       	ldd	r22, Z+4	; 0x04
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
  packet.send();
    1916:	ce 01       	movw	r24, r28
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN8SWPACKET4sendEv>
}
    191e:	c0 5b       	subi	r28, 0xB0	; 176
    1920:	df 4f       	sbci	r29, 0xFF	; 255
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	0f 91       	pop	r16
    1932:	08 95       	ret

00001934 <_ZN8REGISTER7getDataEv>:
 * getData
 * 
 * Update and get register value
 */
void REGISTER::getData(void) 
{
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ec 01       	movw	r28, r24
  // Update register value
  if (updateValue != NULL)
    193a:	e8 81       	ld	r30, Y
    193c:	f9 81       	ldd	r31, Y+1	; 0x01
    193e:	30 97       	sbiw	r30, 0x00	; 0
    1940:	11 f0       	breq	.+4      	; 0x1946 <_ZN8REGISTER7getDataEv+0x12>
    updateValue(id);
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	09 95       	icall

  // Send SWAP status message about the new value
  sendSwapStatus();
    1946:	ce 01       	movw	r24, r28
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
  // Update register value
  if (updateValue != NULL)
    updateValue(id);

  // Send SWAP status message about the new value
  sendSwapStatus();
    194c:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <_ZN8REGISTER14sendSwapStatusEv>

00001950 <_ZN8REGISTER7setDataEPh>:
 * Set register value
 * 
 * @param data New register value
 */
void REGISTER::setData(unsigned char *data) 
{
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	1f 92       	push	r1
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	7c 01       	movw	r14, r24
  // Update register value
  if (setValue != NULL)
    1962:	dc 01       	movw	r26, r24
    1964:	12 96       	adiw	r26, 0x02	; 2
    1966:	ed 91       	ld	r30, X+
    1968:	fc 91       	ld	r31, X
    196a:	13 97       	sbiw	r26, 0x03	; 3
    196c:	30 97       	sbiw	r30, 0x00	; 0
    196e:	19 f0       	breq	.+6      	; 0x1976 <_ZN8REGISTER7setDataEPh+0x26>
    setValue(id, data);
    1970:	14 96       	adiw	r26, 0x04	; 4
    1972:	8c 91       	ld	r24, X
    1974:	09 95       	icall

  // Send SWAP status message
  sendSwapStatus();
    1976:	c7 01       	movw	r24, r14
    1978:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZN8REGISTER14sendSwapStatusEv>

  // Does the value need to be saved in info memory (flash)?
  if (eepromAddress >= 0)
    197c:	f7 01       	movw	r30, r14
    197e:	21 85       	ldd	r18, Z+9	; 0x09
    1980:	32 85       	ldd	r19, Z+10	; 0x0a
    1982:	37 fd       	sbrc	r19, 7
    1984:	08 c0       	rjmp	.+16     	; 0x1996 <_ZN8REGISTER7setDataEPh+0x46>
  {
    STORAGE nvMem;   
    // Write info memory
    nvMem.write(value, eepromBank, eepromAddress, length);
    1986:	65 81       	ldd	r22, Z+5	; 0x05
    1988:	76 81       	ldd	r23, Z+6	; 0x06
    198a:	07 81       	ldd	r16, Z+7	; 0x07
    198c:	43 85       	ldd	r20, Z+11	; 0x0b
    198e:	ce 01       	movw	r24, r28
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN7STORAGE5writeEPhhhh>
  }
}
    1996:	0f 90       	pop	r0
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	ef 90       	pop	r14
    19a2:	08 95       	ret

000019a4 <_ZN8REGISTER20setValueFromBeBufferEPh>:
 * Set curent value from a Big Endian buffer passed as argument
 *
 * @param beBuffer Big Endian buffer
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
    19a4:	dc 01       	movw	r26, r24
  unsigned char i;

  for(i=0 ; i<length ; i++)
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	17 96       	adiw	r26, 0x07	; 7
    19aa:	ec 91       	ld	r30, X
    19ac:	17 97       	sbiw	r26, 0x07	; 7
    19ae:	9e 17       	cp	r25, r30
    19b0:	98 f4       	brcc	.+38     	; 0x19d8 <_ZN8REGISTER20setValueFromBeBufferEPh+0x34>
    value[i] = beBuffer[length-1-i];
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	29 2f       	mov	r18, r25
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	31 97       	sbiw	r30, 0x01	; 1
    19ba:	e2 1b       	sub	r30, r18
    19bc:	f3 0b       	sbc	r31, r19
    19be:	e6 0f       	add	r30, r22
    19c0:	f7 1f       	adc	r31, r23
    19c2:	80 81       	ld	r24, Z
    19c4:	15 96       	adiw	r26, 0x05	; 5
    19c6:	4d 91       	ld	r20, X+
    19c8:	5c 91       	ld	r21, X
    19ca:	16 97       	sbiw	r26, 0x06	; 6
    19cc:	fa 01       	movw	r30, r20
    19ce:	e2 0f       	add	r30, r18
    19d0:	f3 1f       	adc	r31, r19
    19d2:	80 83       	st	Z, r24
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
  unsigned char i;

  for(i=0 ; i<length ; i++)
    19d4:	9f 5f       	subi	r25, 0xFF	; 255
    19d6:	e8 cf       	rjmp	.-48     	; 0x19a8 <_ZN8REGISTER20setValueFromBeBufferEPh+0x4>
    19d8:	08 95       	ret

000019da <_Z14pacKetReceivedP8CCPACKET>:
    repeater->init(maxHop);
  }

  if (maxHop == 0)
    repeater->stop();
}
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	c0 55       	subi	r28, 0x50	; 80
    19e4:	d1 09       	sbc	r29, r1
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	fc 01       	movw	r30, r24
    19f2:	20 81       	ld	r18, Z
    19f4:	27 30       	cpi	r18, 0x07	; 7
    19f6:	08 f4       	brcc	.+2      	; 0x19fa <_Z14pacKetReceivedP8CCPACKET+0x20>
    19f8:	a8 c0       	rjmp	.+336    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    19fa:	bc 01       	movw	r22, r24
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN8SWPACKETC1EP8CCPACKET>
    1a04:	2b 96       	adiw	r28, 0x0b	; 11
    1a06:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a08:	2b 97       	sbiw	r28, 0x0b	; 11
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	9e c0       	rjmp	.+316    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1a0e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <swap>
    1a12:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <swap+0x1>
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	29 f0       	breq	.+10     	; 0x1a24 <_Z14pacKetReceivedP8CCPACKET+0x4a>
    1a1a:	be 01       	movw	r22, r28
    1a1c:	6f 5f       	subi	r22, 0xFF	; 255
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	0e 94 82 12 	call	0x2504	; 0x2504 <_ZN8REPEATER13packetHandlerEP8SWPACKET>
    1a24:	20 91 0b 03 	lds	r18, 0x030B	; 0x80030b <swap+0x3>
    1a28:	21 ff       	sbrs	r18, 1
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <_Z14pacKetReceivedP8CCPACKET+0x5c>
    1a2c:	28 96       	adiw	r28, 0x08	; 8
    1a2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a30:	28 97       	sbiw	r28, 0x08	; 8
    1a32:	81 ff       	sbrs	r24, 1
    1a34:	8a c0       	rjmp	.+276    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1a36:	2a 96       	adiw	r28, 0x0a	; 10
    1a38:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a3a:	2a 97       	sbiw	r28, 0x0a	; 10
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	89 f5       	brne	.+98     	; 0x1aa2 <_Z14pacKetReceivedP8CCPACKET+0xc8>
    1a40:	24 96       	adiw	r28, 0x04	; 4
    1a42:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a44:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a46:	24 97       	sbiw	r28, 0x04	; 4
    1a48:	21 15       	cp	r18, r1
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	31 f4       	brne	.+12     	; 0x1a5a <_Z14pacKetReceivedP8CCPACKET+0x80>
    1a4e:	2d 96       	adiw	r28, 0x0d	; 13
    1a50:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a52:	2d 97       	sbiw	r28, 0x0d	; 13
    1a54:	88 23       	and	r24, r24
    1a56:	41 f0       	breq	.+16     	; 0x1a68 <_Z14pacKetReceivedP8CCPACKET+0x8e>
    1a58:	78 c0       	rjmp	.+240    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1a5a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <swap+0x2>
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	28 17       	cp	r18, r24
    1a62:	39 07       	cpc	r19, r25
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <_Z14pacKetReceivedP8CCPACKET+0x8e>
    1a66:	71 c0       	rjmp	.+226    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1a68:	2c 96       	adiw	r28, 0x0c	; 12
    1a6a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a6c:	2c 97       	sbiw	r28, 0x0c	; 12
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	28 17       	cp	r18, r24
    1a72:	39 07       	cpc	r19, r25
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <_Z14pacKetReceivedP8CCPACKET+0x9e>
    1a76:	69 c0       	rjmp	.+210    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1a78:	2d 96       	adiw	r28, 0x0d	; 13
    1a7a:	ef ad       	ldd	r30, Y+63	; 0x3f
    1a7c:	2d 97       	sbiw	r28, 0x0d	; 13
    1a7e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1a82:	e8 17       	cp	r30, r24
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <_Z14pacKetReceivedP8CCPACKET+0xae>
    1a86:	61 c0       	rjmp	.+194    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	ee 0f       	add	r30, r30
    1a8c:	ff 1f       	adc	r31, r31
    1a8e:	ef 5f       	subi	r30, 0xFF	; 255
    1a90:	fe 4f       	sbci	r31, 0xFE	; 254
    1a92:	80 81       	ld	r24, Z
    1a94:	91 81       	ldd	r25, Z+1	; 0x01
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <_Z14pacKetReceivedP8CCPACKET+0xc2>
    1a9a:	57 c0       	rjmp	.+174    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1a9c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN8REGISTER7getDataEv>
    1aa0:	54 c0       	rjmp	.+168    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	58 f4       	brcc	.+22     	; 0x1abc <_Z14pacKetReceivedP8CCPACKET+0xe2>
    1aa6:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <swap+0xa>
    1aaa:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <swap+0xb>
    1aae:	30 97       	sbiw	r30, 0x00	; 0
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <_Z14pacKetReceivedP8CCPACKET+0xda>
    1ab2:	4b c0       	rjmp	.+150    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	09 95       	icall
    1aba:	47 c0       	rjmp	.+142    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <_Z14pacKetReceivedP8CCPACKET+0xe8>
    1ac0:	44 c0       	rjmp	.+136    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1ac2:	24 96       	adiw	r28, 0x04	; 4
    1ac4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ac6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ac8:	24 97       	sbiw	r28, 0x04	; 4
    1aca:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <swap+0x2>
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	48 17       	cp	r20, r24
    1ad2:	59 07       	cpc	r21, r25
    1ad4:	d1 f5       	brne	.+116    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1ad6:	2c 96       	adiw	r28, 0x0c	; 12
    1ad8:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ada:	2c 97       	sbiw	r28, 0x0c	; 12
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	48 17       	cp	r20, r24
    1ae0:	59 07       	cpc	r21, r25
    1ae2:	99 f5       	brne	.+102    	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1ae4:	2d 96       	adiw	r28, 0x0d	; 13
    1ae6:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ae8:	2d 97       	sbiw	r28, 0x0d	; 13
    1aea:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1aee:	e3 17       	cp	r30, r19
    1af0:	60 f5       	brcc	.+88     	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	ef 5f       	subi	r30, 0xFF	; 255
    1afa:	fe 4f       	sbci	r31, 0xFE	; 254
    1afc:	80 81       	ld	r24, Z
    1afe:	91 81       	ldd	r25, Z+1	; 0x01
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	19 f1       	breq	.+70     	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1b04:	20 ff       	sbrs	r18, 0
    1b06:	11 c0       	rjmp	.+34     	; 0x1b2a <_Z14pacKetReceivedP8CCPACKET+0x150>
    1b08:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <swap+0x4>
    1b0c:	29 96       	adiw	r28, 0x09	; 9
    1b0e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b10:	29 97       	sbiw	r28, 0x09	; 9
    1b12:	42 17       	cp	r20, r18
    1b14:	51 f0       	breq	.+20     	; 0x1b2a <_Z14pacKetReceivedP8CCPACKET+0x150>
    1b16:	38 30       	cpi	r19, 0x08	; 8
    1b18:	28 f0       	brcs	.+10     	; 0x1b24 <_Z14pacKetReceivedP8CCPACKET+0x14a>
    1b1a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <regTable+0xe>
    1b1e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <regTable+0xf>
    1b22:	11 c0       	rjmp	.+34     	; 0x1b46 <_Z14pacKetReceivedP8CCPACKET+0x16c>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e c0       	rjmp	.+28     	; 0x1b46 <_Z14pacKetReceivedP8CCPACKET+0x16c>
    1b2a:	60 96       	adiw	r28, 0x10	; 16
    1b2c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b2e:	60 97       	sbiw	r28, 0x10	; 16
    1b30:	fc 01       	movw	r30, r24
    1b32:	27 81       	ldd	r18, Z+7	; 0x07
    1b34:	32 13       	cpse	r19, r18
    1b36:	07 c0       	rjmp	.+14     	; 0x1b46 <_Z14pacKetReceivedP8CCPACKET+0x16c>
    1b38:	2f 96       	adiw	r28, 0x0f	; 15
    1b3a:	6e ad       	ldd	r22, Y+62	; 0x3e
    1b3c:	7f ad       	ldd	r23, Y+63	; 0x3f
    1b3e:	2f 97       	sbiw	r28, 0x0f	; 15
    1b40:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN8REGISTER7setDataEPh>
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <_Z14pacKetReceivedP8CCPACKET+0x170>
    1b46:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZN8REGISTER14sendSwapStatusEv>
    1b4a:	c0 5b       	subi	r28, 0xB0	; 176
    1b4c:	df 4f       	sbci	r29, 0xFF	; 255
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <_ZN4SWAP9goToSleepEv>:
 * goToSleep
 *
 * put the MCU in sleep mode during txInterval seconds
 */
void SWAP::goToSleep(void)
{
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <_ZN4SWAP9goToSleepEv+0xe>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	7c 01       	movw	r14, r24
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	89 83       	std	Y+1, r24	; 0x01
     * @param state New system state
     */
    void __inline__ enterSystemState(SYSTATE state)
    {
      // System state register -> id = 3
      regTable[3]->setData((uint8_t *) &state);
    1b76:	01 e0       	ldi	r16, 0x01	; 1
    1b78:	11 e0       	ldi	r17, 0x01	; 1
    1b7a:	be 01       	movw	r22, r28
    1b7c:	6f 5f       	subi	r22, 0xFF	; 255
    1b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b80:	f8 01       	movw	r30, r16
    1b82:	86 81       	ldd	r24, Z+6	; 0x06
    1b84:	97 81       	ldd	r25, Z+7	; 0x07
    1b86:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN8REGISTER7setDataEPh>
  enterSystemState(SYSTATE_RXOFF);
  //systemState = SYSTATE_RXOFF;
  panstamp.sleepSec(txInterval);
    1b8a:	f7 01       	movw	r30, r14
    1b8c:	66 81       	ldd	r22, Z+6	; 0x06
    1b8e:	77 81       	ldd	r23, Z+7	; 0x07
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	8a ef       	ldi	r24, 0xFA	; 250
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN8PANSTAMP8sleepSecEj6RTCSRC>
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
    1b9e:	be 01       	movw	r22, r28
    1ba0:	6e 5f       	subi	r22, 0xFE	; 254
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	86 81       	ldd	r24, Z+6	; 0x06
    1ba8:	97 81       	ldd	r25, Z+7	; 0x07
    1baa:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN8REGISTER7setDataEPh>
  enterSystemState(SYSTATE_SYNC);
  //systemState = SYSTATE_RXON;
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	08 95       	ret

00001bc0 <_ZN4SWAP23nvolatToFactoryDefaultsEv>:
 * nvolatToFactoryDefaults
 * 
 * Write default config values in non-volatile memory
 */
void SWAP::nvolatToFactoryDefaults(void)
{
    1bc0:	0f 93       	push	r16
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	2a 97       	sbiw	r28, 0x0a	; 10
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
  STORAGE nvMem;

  // Signature
  uint8_t signature[] = {NVOLAT_SIGNATURE_HIGH, NVOLAT_SIGNATURE_LOW};
    1bd6:	8b ea       	ldi	r24, 0xAB	; 171
    1bd8:	8f 83       	std	Y+7, r24	; 0x07
    1bda:	8d ec       	ldi	r24, 0xCD	; 205
    1bdc:	88 87       	std	Y+8, r24	; 0x08
  nvMem.write(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    1bde:	02 e0       	ldi	r16, 0x02	; 2
    1be0:	28 e0       	ldi	r18, 0x08	; 8
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	be 01       	movw	r22, r28
    1be6:	69 5f       	subi	r22, 0xF9	; 249
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	ce 01       	movw	r24, r28
    1bec:	0a 96       	adiw	r24, 0x0a	; 10
    1bee:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN7STORAGE5writeEPhhhh>
  
  // Frequency channel
  uint8_t channel[] = {CCDEF_CHANNR};
    1bf2:	19 86       	std	Y+9, r1	; 0x09
  nvMem.write(channel, DEFAULT_NVOLAT_SECTION, NVOLAT_FREQ_CHANNEL, sizeof(channel));
    1bf4:	01 e0       	ldi	r16, 0x01	; 1
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	be 01       	movw	r22, r28
    1bfc:	67 5f       	subi	r22, 0xF7	; 247
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	ce 01       	movw	r24, r28
    1c02:	0a 96       	adiw	r24, 0x0a	; 10
    1c04:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN7STORAGE5writeEPhhhh>
  
  // Sync word
  uint8_t syncW[] = {CCDEF_SYNC1, CCDEF_SYNC0};
    1c08:	85 eb       	ldi	r24, 0xB5	; 181
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	87 e4       	ldi	r24, 0x47	; 71
    1c0e:	8e 83       	std	Y+6, r24	; 0x06
  nvMem.write(syncW, DEFAULT_NVOLAT_SECTION, NVOLAT_SYNC_WORD, sizeof(syncW));
    1c10:	02 e0       	ldi	r16, 0x02	; 2
    1c12:	22 e0       	ldi	r18, 0x02	; 2
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	be 01       	movw	r22, r28
    1c18:	6b 5f       	subi	r22, 0xFB	; 251
    1c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	0a 96       	adiw	r24, 0x0a	; 10
    1c20:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN7STORAGE5writeEPhhhh>
     * 
     * @return pseudo-random number
     */
     inline uint16_t GET_RANDOM(void)
     {
       return OSCCAL;
    1c24:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

  // SWAP address (pseudo-random number)
  uint16_t random = panstamp.GET_RANDOM();
  uint8_t addr[] = {static_cast<uint8_t>((random >> 8) & 0xFF), static_cast<uint8_t>(random & 0xFF)};
    1c28:	1b 82       	std	Y+3, r1	; 0x03
    1c2a:	8c 83       	std	Y+4, r24	; 0x04
  nvMem.write(addr, DEFAULT_NVOLAT_SECTION, NVOLAT_DEVICE_ADDR, sizeof(addr));
    1c2c:	24 e0       	ldi	r18, 0x04	; 4
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	be 01       	movw	r22, r28
    1c32:	6d 5f       	subi	r22, 0xFD	; 253
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	ce 01       	movw	r24, r28
    1c38:	0a 96       	adiw	r24, 0x0a	; 10
    1c3a:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN7STORAGE5writeEPhhhh>
  
  // TX interval
  uint8_t txInt[] = {0x0F, 0};
    1c3e:	8f e0       	ldi	r24, 0x0F	; 15
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	1a 82       	std	Y+2, r1	; 0x02
  nvMem.write(txInt, DEFAULT_NVOLAT_SECTION, NVOLAT_TX_INTERVAL, sizeof(txInt));
    1c44:	26 e0       	ldi	r18, 0x06	; 6
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	be 01       	movw	r22, r28
    1c4a:	6f 5f       	subi	r22, 0xFF	; 255
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0a 96       	adiw	r24, 0x0a	; 10
    1c52:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN7STORAGE5writeEPhhhh>
}
    1c56:	2a 96       	adiw	r28, 0x0a	; 10
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	0f 91       	pop	r16
    1c68:	08 95       	ret

00001c6a <_ZN4SWAP4initEv>:
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <_ZN4SWAP4initEv+0xe>
    1c78:	1f 92       	push	r1
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	7c 01       	movw	r14, r24
  uint8_t i;
  STORAGE nvMem;

  // Read signature from info/eeprom memory
  uint8_t signature[2];
  nvMem.read(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    1c80:	02 e0       	ldi	r16, 0x02	; 2
    1c82:	28 e0       	ldi	r18, 0x08	; 8
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	be 01       	movw	r22, r28
    1c88:	6f 5f       	subi	r22, 0xFF	; 255
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	03 96       	adiw	r24, 0x03	; 3
    1c90:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN7STORAGE4readEPhhhh>

  // Correct signature in non-volatile memory?
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	8b 3a       	cpi	r24, 0xAB	; 171
    1c98:	19 f4       	brne	.+6      	; 0x1ca0 <_ZN4SWAP4initEv+0x36>
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	8d 3c       	cpi	r24, 0xCD	; 205
    1c9e:	19 f0       	breq	.+6      	; 0x1ca6 <_ZN4SWAP4initEv+0x3c>
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
    1ca0:	c7 01       	movw	r24, r14
    1ca2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_ZN4SWAP23nvolatToFactoryDefaultsEv>
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    1ca6:	10 e0       	ldi	r17, 0x00	; 0
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
  //rcOscCalibrate();
  
  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    1ca8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cac:	18 17       	cp	r17, r24
    1cae:	60 f4       	brcc	.+24     	; 0x1cc8 <_ZN4SWAP4initEv+0x5e>
    regTable[i]->init();
    1cb0:	e1 2f       	mov	r30, r17
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	ff 1f       	adc	r31, r31
    1cb8:	ef 5f       	subi	r30, 0xFF	; 255
    1cba:	fe 4f       	sbci	r31, 0xFE	; 254
    1cbc:	80 81       	ld	r24, Z
    1cbe:	91 81       	ldd	r25, Z+1	; 0x01
    1cc0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <_ZN8REGISTER4initEv>
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
  //rcOscCalibrate();
  
  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    1cc4:	1f 5f       	subi	r17, 0xFF	; 255
    1cc6:	f0 cf       	rjmp	.-32     	; 0x1ca8 <_ZN4SWAP4initEv+0x3e>
    regTable[i]->init();
 
  // Config radio settings
  panstamp.radio.devAddress = devAddress & 0xFF; 
    1cc8:	f7 01       	movw	r30, r14
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <panstamp+0x9>
  panstamp.init();
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	8a ef       	ldi	r24, 0xFA	; 250
    1cd6:	92 e0       	ldi	r25, 0x02	; 2
    1cd8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN8PANSTAMP4initEhh>
    1cdc:	40 ec       	ldi	r20, 0xC0	; 192
    1cde:	6e e3       	ldi	r22, 0x3E	; 62
    1ce0:	8b ef       	ldi	r24, 0xFB	; 251
    1ce2:	92 e0       	ldi	r25, 0x02	; 2
    1ce4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN6CC11018writeRegEhh>
  panstamp.setHighTxPower();
   Serial.println("hier\n");
    1ce8:	62 e5       	ldi	r22, 0x52	; 82
    1cea:	71 e0       	ldi	r23, 0x01	; 1
    1cec:	83 e1       	ldi	r24, 0x13	; 19
    1cee:	92 e0       	ldi	r25, 0x02	; 2
    1cf0:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN5Print7printlnEPKc>
     * 
     * @param funct pointer to the custom function
     */
     inline void attachInterrupt(void (*funct)(CCPACKET*))
     {
       ccPacketReceived = funct;
    1cf4:	8d ee       	ldi	r24, 0xED	; 237
    1cf6:	9c e0       	ldi	r25, 0x0C	; 12
    1cf8:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <panstamp+0xc>
    1cfc:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <panstamp+0xb>
  // Attach RF ISR
  panstamp.attachInterrupt(pacKetReceived);
}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	08 95       	ret

00001d14 <_GLOBAL__sub_I__Z14pacKetReceivedP8CCPACKET>:
 *
 * Class constructor
 */
SWAP::SWAP(void)
{  
  statusReceived = NULL;
    1d14:	e8 e0       	ldi	r30, 0x08	; 8
    1d16:	f3 e0       	ldi	r31, 0x03	; 3
    1d18:	13 86       	std	Z+11, r1	; 0x0b
    1d1a:	12 86       	std	Z+10, r1	; 0x0a
  repeater = NULL;
    1d1c:	11 82       	std	Z+1, r1	; 0x01
    1d1e:	10 82       	st	Z, r1
  encryptPwd = NULL;
    1d20:	11 86       	std	Z+9, r1	; 0x09
    1d22:	10 86       	std	Z+8, r1	; 0x08
  security = 0;
    1d24:	13 82       	std	Z+3, r1	; 0x03
    1d26:	08 95       	ret

00001d28 <_ZN8SWPACKETC1Ev>:
/**
 * SWPACKET
 * 
 * Class constructor
 */
SWPACKET::SWPACKET(void) 
    1d28:	08 95       	ret

00001d2a <_ZN8SWPACKET12smartEncryptEb>:
 *
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
    1d2a:	af 92       	push	r10
    1d2c:	bf 92       	push	r11
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	dc 01       	movw	r26, r24
    1d40:	a9 5b       	subi	r26, 0xB9	; 185
    1d42:	bf 4f       	sbci	r27, 0xFF	; 255
    1d44:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <swap+0x8>
    1d48:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <swap+0x9>
  byte i, j = 0;
  static uint8_t newData[CCPACKET_DATA_LEN];

  if (decrypt)
    1d4c:	66 23       	and	r22, r22
    1d4e:	21 f0       	breq	.+8      	; 0x1d58 <_ZN8SWPACKET12smartEncryptEb+0x2e>
    nonce ^= swap.encryptPwd[9];
    1d50:	31 85       	ldd	r19, Z+9	; 0x09
    1d52:	2c 91       	ld	r18, X
    1d54:	23 27       	eor	r18, r19
    1d56:	2c 93       	st	X, r18

  function ^= swap.encryptPwd[11] ^ nonce;
    1d58:	2c 91       	ld	r18, X
    1d5a:	ec 01       	movw	r28, r24
    1d5c:	c8 5b       	subi	r28, 0xB8	; 184
    1d5e:	df 4f       	sbci	r29, 0xFF	; 255
    1d60:	38 81       	ld	r19, Y
    1d62:	32 27       	eor	r19, r18
    1d64:	43 85       	ldd	r20, Z+11	; 0x0b
    1d66:	34 27       	eor	r19, r20
    1d68:	38 83       	st	Y, r19
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
    1d6a:	25 97       	sbiw	r28, 0x05	; 5
    1d6c:	32 85       	ldd	r19, Z+10	; 0x0a
    1d6e:	32 27       	eor	r19, r18
    1d70:	48 81       	ld	r20, Y
    1d72:	59 81       	ldd	r21, Y+1	; 0x01
    1d74:	43 27       	eor	r20, r19
    1d76:	59 83       	std	Y+1, r21	; 0x01
    1d78:	48 83       	st	Y, r20
  regAddr ^= swap.encryptPwd[8] ^ nonce;
    1d7a:	27 96       	adiw	r28, 0x07	; 7
    1d7c:	38 81       	ld	r19, Y
    1d7e:	32 27       	eor	r19, r18
    1d80:	40 85       	ldd	r20, Z+8	; 0x08
    1d82:	34 27       	eor	r19, r20
    1d84:	38 83       	st	Y, r19
  regId ^= swap.encryptPwd[7] ^ nonce;
    1d86:	21 96       	adiw	r28, 0x01	; 1
    1d88:	38 81       	ld	r19, Y
    1d8a:	32 27       	eor	r19, r18
    1d8c:	47 81       	ldd	r20, Z+7	; 0x07
    1d8e:	34 27       	eor	r19, r20
    1d90:	38 83       	st	Y, r19

  for(i=0 ; i<value.length ; i++)
    1d92:	23 96       	adiw	r28, 0x03	; 3
    1d94:	78 81       	ld	r23, Y
    1d96:	04 e1       	ldi	r16, 0x14	; 20
    1d98:	13 e0       	ldi	r17, 0x03	; 3
    1d9a:	a1 2c       	mov	r10, r1
    1d9c:	b1 2c       	mov	r11, r1
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
  byte i, j = 0;
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    1da0:	7c 01       	movw	r14, r24
    1da2:	4c e4       	ldi	r20, 0x4C	; 76
    1da4:	e4 0e       	add	r14, r20
    1da6:	f1 1c       	adc	r15, r1
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    1da8:	a7 16       	cp	r10, r23
    1daa:	c8 f4       	brcc	.+50     	; 0x1dde <_ZN8SWPACKET12smartEncryptEb+0xb4>
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    1dac:	e7 01       	movw	r28, r14
    1dae:	48 81       	ld	r20, Y
    1db0:	59 81       	ldd	r21, Y+1	; 0x01
    1db2:	4a 0d       	add	r20, r10
    1db4:	5b 1d       	adc	r21, r11
    1db6:	6f 01       	movw	r12, r30
    1db8:	c3 0e       	add	r12, r19
    1dba:	d1 1c       	adc	r13, r1
    1dbc:	ea 01       	movw	r28, r20
    1dbe:	58 81       	ld	r21, Y
    1dc0:	e6 01       	movw	r28, r12
    1dc2:	48 81       	ld	r20, Y
    1dc4:	45 27       	eor	r20, r21
    1dc6:	42 27       	eor	r20, r18
    1dc8:	e8 01       	movw	r28, r16
    1dca:	49 93       	st	Y+, r20
    1dcc:	8e 01       	movw	r16, r28
    j++;
    1dce:	3f 5f       	subi	r19, 0xFF	; 255
    if (j == 11)  // Don't re-use last byte from password
    1dd0:	3b 30       	cpi	r19, 0x0B	; 11
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <_ZN8SWPACKET12smartEncryptEb+0xac>
      j = 0;
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	df ef       	ldi	r29, 0xFF	; 255
    1dd8:	ad 1a       	sub	r10, r29
    1dda:	bd 0a       	sbc	r11, r29
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    1ddc:	e5 cf       	rjmp	.-54     	; 0x1da8 <_ZN8SWPACKET12smartEncryptEb+0x7e>
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    j++;
    if (j == 11)  // Don't re-use last byte from password
      j = 0;
  }
  if (value.length > 0)
    1dde:	77 23       	and	r23, r23
    1de0:	39 f0       	breq	.+14     	; 0x1df0 <_ZN8SWPACKET12smartEncryptEb+0xc6>
    value.data = newData;
    1de2:	ec 01       	movw	r28, r24
    1de4:	c4 5b       	subi	r28, 0xB4	; 180
    1de6:	df 4f       	sbci	r29, 0xFF	; 255
    1de8:	44 e1       	ldi	r20, 0x14	; 20
    1dea:	53 e0       	ldi	r21, 0x03	; 3
    1dec:	59 83       	std	Y+1, r21	; 0x01
    1dee:	48 83       	st	Y, r20

  if (!decrypt)
    1df0:	61 11       	cpse	r22, r1
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <_ZN8SWPACKET12smartEncryptEb+0xd0>
    nonce ^= swap.encryptPwd[9];
    1df4:	81 85       	ldd	r24, Z+9	; 0x09
    1df6:	28 27       	eor	r18, r24
    1df8:	2c 93       	st	X, r18
}
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	df 90       	pop	r13
    1e08:	cf 90       	pop	r12
    1e0a:	bf 90       	pop	r11
    1e0c:	af 90       	pop	r10
    1e0e:	08 95       	ret

00001e10 <_ZN8SWPACKETC1EP8CCPACKET>:
 * 
 * Class constructor
 * 
 * @param packet Pointer to the raw CC1101 packet
 */
SWPACKET::SWPACKET(CCPACKET *packet) 
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	fc 01       	movw	r30, r24
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
    1e22:	db 01       	movw	r26, r22
    1e24:	8d 91       	ld	r24, X+
    1e26:	ef 01       	movw	r28, r30
    1e28:	89 93       	st	Y+, r24
  for(i=0 ; i<ccPacket.length ; i++)
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	98 17       	cp	r25, r24
    1e2e:	21 f0       	breq	.+8      	; 0x1e38 <_ZN8SWPACKETC1EP8CCPACKET+0x28>
    ccPacket.data[i] = packet->data[i];
    1e30:	2d 91       	ld	r18, X+
    1e32:	29 93       	st	Y+, r18
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
  for(i=0 ; i<ccPacket.length ; i++)
    1e34:	9f 5f       	subi	r25, 0xFF	; 255
    1e36:	fa cf       	rjmp	.-12     	; 0x1e2c <_ZN8SWPACKETC1EP8CCPACKET+0x1c>
    ccPacket.data[i] = packet->data[i];
  
  hop = (ccPacket.data[2] >> 4) & 0x0F;
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	df 01       	movw	r26, r30
    1e3c:	ab 5b       	subi	r26, 0xBB	; 187
    1e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e40:	29 2f       	mov	r18, r25
    1e42:	22 95       	swap	r18
    1e44:	2f 70       	andi	r18, 0x0F	; 15
    1e46:	2c 93       	st	X, r18
  security = ccPacket.data[2] & 0x0F;
    1e48:	6f 01       	movw	r12, r30
    1e4a:	26 e4       	ldi	r18, 0x46	; 70
    1e4c:	c2 0e       	add	r12, r18
    1e4e:	d1 1c       	adc	r13, r1
    1e50:	9f 70       	andi	r25, 0x0F	; 15
    1e52:	d6 01       	movw	r26, r12
    1e54:	9c 93       	st	X, r25
  // AES-128 encrypted?
  if (security & 0x04)
    aesCrypto();  // Decrypt
  #endif
  
  nonce = ccPacket.data[3];
    1e56:	94 81       	ldd	r25, Z+4	; 0x04
    1e58:	11 96       	adiw	r26, 0x01	; 1
    1e5a:	9c 93       	st	X, r25
  function = ccPacket.data[4] & ~SWAP_EXTENDED_ADDRESS_BIT;
    1e5c:	95 81       	ldd	r25, Z+5	; 0x05
    1e5e:	11 96       	adiw	r26, 0x01	; 1
    1e60:	29 2f       	mov	r18, r25
    1e62:	2f 77       	andi	r18, 0x7F	; 127
    1e64:	2c 93       	st	X, r18
    1e66:	11 96       	adiw	r26, 0x01	; 1
    1e68:	ef 01       	movw	r28, r30
    1e6a:	cf 5b       	subi	r28, 0xBF	; 191
    1e6c:	df 4f       	sbci	r29, 0xFF	; 255
    1e6e:	8f 01       	movw	r16, r30
    1e70:	0d 5b       	subi	r16, 0xBD	; 189
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	bf 01       	movw	r22, r30
    1e76:	66 5b       	subi	r22, 0xB6	; 182
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	af 01       	movw	r20, r30
    1e7c:	45 5b       	subi	r20, 0xB5	; 181
    1e7e:	5f 4f       	sbci	r21, 0xFF	; 255

  if (ccPacket.data[4] & SWAP_EXTENDED_ADDRESS_BIT)
    1e80:	97 ff       	sbrs	r25, 7
    1e82:	16 c0       	rjmp	.+44     	; 0x1eb0 <_ZN8SWPACKETC1EP8CCPACKET+0xa0>
  {
    addrType = SWAPADDR_EXTENDED;
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	9c 93       	st	X, r25
    destAddr = ccPacket.data[0];
    destAddr <<= 8;
    destAddr |= ccPacket.data[1];
    1e88:	21 81       	ldd	r18, Z+1	; 0x01
    1e8a:	32 81       	ldd	r19, Z+2	; 0x02
    1e8c:	32 27       	eor	r19, r18
    1e8e:	23 27       	eor	r18, r19
    1e90:	32 27       	eor	r19, r18
    1e92:	39 83       	std	Y+1, r19	; 0x01
    1e94:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[5];
    srcAddr <<= 8;
    srcAddr |= ccPacket.data[6];
    1e96:	26 81       	ldd	r18, Z+6	; 0x06
    1e98:	37 81       	ldd	r19, Z+7	; 0x07
    1e9a:	32 27       	eor	r19, r18
    1e9c:	23 27       	eor	r18, r19
    1e9e:	32 27       	eor	r19, r18
    1ea0:	e8 01       	movw	r28, r16
    1ea2:	39 83       	std	Y+1, r19	; 0x01
    1ea4:	28 83       	st	Y, r18
    regAddr = ccPacket.data[7];
    regAddr <<= 8;
    regAddr |= ccPacket.data[8];
    1ea6:	91 85       	ldd	r25, Z+9	; 0x09
    1ea8:	eb 01       	movw	r28, r22
    1eaa:	98 83       	st	Y, r25
    regId = ccPacket.data[9];
    1eac:	92 85       	ldd	r25, Z+10	; 0x0a
    1eae:	0e c0       	rjmp	.+28     	; 0x1ecc <_ZN8SWPACKETC1EP8CCPACKET+0xbc>
  }
  else
  {
    addrType = SWAPADDR_SIMPLE;
    1eb0:	1c 92       	st	X, r1
    destAddr = ccPacket.data[0];
    1eb2:	21 81       	ldd	r18, Z+1	; 0x01
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	39 83       	std	Y+1, r19	; 0x01
    1eb8:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[1];
    1eba:	22 81       	ldd	r18, Z+2	; 0x02
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	e8 01       	movw	r28, r16
    1ec0:	39 83       	std	Y+1, r19	; 0x01
    1ec2:	28 83       	st	Y, r18
    regAddr = ccPacket.data[5];
    1ec4:	96 81       	ldd	r25, Z+6	; 0x06
    1ec6:	eb 01       	movw	r28, r22
    1ec8:	98 83       	st	Y, r25
    regId = ccPacket.data[6];
    1eca:	97 81       	ldd	r25, Z+7	; 0x07
    1ecc:	ea 01       	movw	r28, r20
    1ece:	98 83       	st	Y, r25
  }

  value.data = ccPacket.data + SWAP_DATA_HEAD_LEN + 1;
    1ed0:	9f 01       	movw	r18, r30
    1ed2:	24 5b       	subi	r18, 0xB4	; 180
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	af 01       	movw	r20, r30
    1ed8:	48 5f       	subi	r20, 0xF8	; 248
    1eda:	5f 4f       	sbci	r21, 0xFF	; 255
    1edc:	e9 01       	movw	r28, r18
    1ede:	59 83       	std	Y+1, r21	; 0x01
    1ee0:	48 83       	st	Y, r20
  value.length = ccPacket.length - SWAP_DATA_HEAD_LEN - 1;
    1ee2:	2e 5f       	subi	r18, 0xFE	; 254
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	87 50       	subi	r24, 0x07	; 7
    1ee8:	e9 01       	movw	r28, r18
    1eea:	88 83       	st	Y, r24

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
    1eec:	8c 91       	ld	r24, X
    1eee:	81 11       	cpse	r24, r1
    1ef0:	10 c0       	rjmp	.+32     	; 0x1f12 <_ZN8SWPACKETC1EP8CCPACKET+0x102>
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
    1ef2:	d6 01       	movw	r26, r12
    1ef4:	8c 91       	ld	r24, X
    1ef6:	81 ff       	sbrs	r24, 1
    1ef8:	0c c0       	rjmp	.+24     	; 0x1f12 <_ZN8SWPACKETC1EP8CCPACKET+0x102>
      smartDecrypt();
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	cf 01       	movw	r24, r30
  }
  #endif
}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
      smartDecrypt();
    1f0e:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <_ZN8SWPACKET12smartEncryptEb>
  }
  #endif
}
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	08 95       	ret

00001f24 <_ZN8SWPACKET4sendEv>:
 * @return
 *  True if the transmission succeeds
 *  False otherwise
 */
bool SWPACKET::send(void)
{
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	c1 54       	subi	r28, 0x41	; 65
    1f3a:	d1 09       	sbc	r29, r1
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	8c 01       	movw	r16, r24
  byte i;
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e1 5b       	subi	r30, 0xB1	; 177
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 81       	ld	r24, Z
    1f50:	98 01       	movw	r18, r16
    1f52:	22 5b       	subi	r18, 0xB2	; 178
    1f54:	3f 4f       	sbci	r19, 0xFF	; 255
    1f56:	79 01       	movw	r14, r18
    1f58:	e7 54       	subi	r30, 0x47	; 71
    1f5a:	f1 09       	sbc	r31, r1
    1f5c:	d9 01       	movw	r26, r18
    1f5e:	81 11       	cpse	r24, r1
    1f60:	10 c0       	rjmp	.+32     	; 0x1f82 <_ZN8SWPACKET4sendEv+0x5e>
    1f62:	8c 91       	ld	r24, X
    1f64:	90 e0       	ldi	r25, 0x00	; 0
  {
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
    1f66:	a8 01       	movw	r20, r16
    1f68:	44 5b       	subi	r20, 0xB4	; 180
    1f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	d8 f0       	brcs	.+54     	; 0x1fa6 <_ZN8SWPACKET4sendEv+0x82>
    1f70:	da 01       	movw	r26, r20
    1f72:	2d 91       	ld	r18, X+
    1f74:	3c 91       	ld	r19, X
    1f76:	d9 01       	movw	r26, r18
    1f78:	a8 0f       	add	r26, r24
    1f7a:	b9 1f       	adc	r27, r25
    1f7c:	2c 91       	ld	r18, X
    1f7e:	21 93       	st	Z+, r18
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
  {
    for(i=0 ; i<value.length ; i++)
    1f80:	f5 cf       	rjmp	.-22     	; 0x1f6c <_ZN8SWPACKET4sendEv+0x48>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    1f82:	3c 91       	ld	r19, X
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    1f88:	a8 01       	movw	r20, r16
    1f8a:	44 5b       	subi	r20, 0xB4	; 180
    1f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    1f8e:	83 17       	cp	r24, r19
    1f90:	50 f4       	brcc	.+20     	; 0x1fa6 <_ZN8SWPACKET4sendEv+0x82>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    1f92:	da 01       	movw	r26, r20
    1f94:	6d 91       	ld	r22, X+
    1f96:	7c 91       	ld	r23, X
    1f98:	db 01       	movw	r26, r22
    1f9a:	a8 0f       	add	r26, r24
    1f9c:	b9 1f       	adc	r27, r25
    1f9e:	2c 91       	ld	r18, X
    1fa0:	21 93       	st	Z+, r18
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    1fa4:	f4 cf       	rjmp	.-24     	; 0x1f8e <_ZN8SWPACKET4sendEv+0x6a>
  }

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
    // Need to encrypt packet?
    if (security & 0x02)
    1fa6:	68 01       	movw	r12, r16
    1fa8:	b6 e4       	ldi	r27, 0x46	; 70
    1faa:	cb 0e       	add	r12, r27
    1fac:	d1 1c       	adc	r13, r1
    1fae:	f6 01       	movw	r30, r12
    1fb0:	80 81       	ld	r24, Z
    1fb2:	81 ff       	sbrs	r24, 1
    1fb4:	04 c0       	rjmp	.+8      	; 0x1fbe <_ZN8SWPACKET4sendEv+0x9a>
      smartEncrypt();
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	c8 01       	movw	r24, r16
    1fba:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN8SWPACKET12smartEncryptEb>
  #endif

  ccPacket.length = value.length + SWAP_DATA_HEAD_LEN + 1;
    1fbe:	d7 01       	movw	r26, r14
    1fc0:	8c 91       	ld	r24, X
    1fc2:	89 5f       	subi	r24, 0xF9	; 249
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	80 83       	st	Z, r24

  ccPacket.data[2] = (hop << 4) & 0xF0;
    1fc8:	eb 5b       	subi	r30, 0xBB	; 187
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
  ccPacket.data[2] |= security & 0x0F;
    1fcc:	80 81       	ld	r24, Z
    1fce:	f0 e1       	ldi	r31, 0x10	; 16
    1fd0:	8f 9f       	mul	r24, r31
    1fd2:	c0 01       	movw	r24, r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	d6 01       	movw	r26, r12
    1fd8:	9c 91       	ld	r25, X
    1fda:	9f 70       	andi	r25, 0x0F	; 15
    1fdc:	89 2b       	or	r24, r25
    1fde:	f8 01       	movw	r30, r16
    1fe0:	83 83       	std	Z+3, r24	; 0x03
  ccPacket.data[3] = nonce;
    1fe2:	e9 5b       	subi	r30, 0xB9	; 185
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	d8 01       	movw	r26, r16
    1fea:	14 96       	adiw	r26, 0x04	; 4
    1fec:	8c 93       	st	X, r24
    1fee:	14 97       	sbiw	r26, 0x04	; 4
    ccPacket.data[6] = srcAddr & 0xFF;
    ccPacket.data[7] = (regAddr >> 8) & 0xFF;
    ccPacket.data[8] = regAddr & 0xFF;
    ccPacket.data[9] = regId;
  #else
    addrType = SWAPADDR_SIMPLE;
    1ff0:	32 96       	adiw	r30, 0x02	; 2
    1ff2:	10 82       	st	Z, r1
    ccPacket.data[0] = destAddr;
    1ff4:	38 97       	sbiw	r30, 0x08	; 8
    1ff6:	80 81       	ld	r24, Z
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	81 83       	std	Z+1, r24	; 0x01
    ccPacket.data[1] = srcAddr;
    1ffc:	ed 5b       	subi	r30, 0xBD	; 189
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	12 96       	adiw	r26, 0x02	; 2
    2004:	8c 93       	st	X, r24
    2006:	12 97       	sbiw	r26, 0x02	; 2
    ccPacket.data[4] = function;
    2008:	35 96       	adiw	r30, 0x05	; 5
    200a:	80 81       	ld	r24, Z
    200c:	f8 01       	movw	r30, r16
    200e:	85 83       	std	Z+5, r24	; 0x05
    ccPacket.data[5] = regAddr;
    2010:	e6 5b       	subi	r30, 0xB6	; 182
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	16 96       	adiw	r26, 0x06	; 6
    2018:	8c 93       	st	X, r24
    ccPacket.data[6] = regId;
    201a:	31 96       	adiw	r30, 0x01	; 1
    201c:	80 81       	ld	r24, Z
    201e:	f8 01       	movw	r30, r16
    2020:	87 83       	std	Z+7, r24	; 0x07
    2022:	93 e0       	ldi	r25, 0x03	; 3
    2024:	e9 2e       	mov	r14, r25
    2026:	81 e4       	ldi	r24, 0x41	; 65
    2028:	f8 01       	movw	r30, r16
    202a:	de 01       	movw	r26, r28
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	01 90       	ld	r0, Z+
    2030:	0d 92       	st	X+, r0
    2032:	8a 95       	dec	r24
    2034:	e1 f7       	brne	.-8      	; 0x202e <_ZN8SWPACKET4sendEv+0x10a>
     *  True if the transmission succeeds
     *  False otherwise
     */
    inline bool sendData(CCPACKET packet)
    {
      return radio.sendData(packet);
    2036:	2d b7       	in	r18, 0x3d	; 61
    2038:	3e b7       	in	r19, 0x3e	; 62
    203a:	21 54       	subi	r18, 0x41	; 65
    203c:	31 09       	sbc	r19, r1
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	3e bf       	out	0x3e, r19	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	2d bf       	out	0x3d, r18	; 61
    2048:	ad b7       	in	r26, 0x3d	; 61
    204a:	be b7       	in	r27, 0x3e	; 62
    204c:	11 96       	adiw	r26, 0x01	; 1
    204e:	81 e4       	ldi	r24, 0x41	; 65
    2050:	fe 01       	movw	r30, r28
    2052:	31 96       	adiw	r30, 0x01	; 1
    2054:	01 90       	ld	r0, Z+
    2056:	0d 92       	st	X+, r0
    2058:	8a 95       	dec	r24
    205a:	e1 f7       	brne	.-8      	; 0x2054 <_ZN8SWPACKET4sendEv+0x130>
    205c:	8b ef       	ldi	r24, 0xFB	; 251
    205e:	92 e0       	ldi	r25, 0x02	; 2
    2060:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN6CC11018sendDataE8CCPACKET>
    2064:	f8 2e       	mov	r15, r24
  if (security & 0x04)
    aesCrypto();  // Encrypt
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	81 11       	cpse	r24, r1
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <_ZN8SWPACKET4sendEv+0x16e>
    2074:	ea 94       	dec	r14
    2076:	ee 20       	and	r14, r14
    2078:	61 f0       	breq	.+24     	; 0x2092 <_ZN8SWPACKET4sendEv+0x16e>
  {
    i--;
    delay(SWAP_TX_DELAY);
    207a:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <panstamp+0x9>
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	66 0f       	add	r22, r22
    2082:	77 1f       	adc	r23, r23
    2084:	07 2e       	mov	r0, r23
    2086:	00 0c       	add	r0, r0
    2088:	88 0b       	sbc	r24, r24
    208a:	99 0b       	sbc	r25, r25
    208c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <delay>
  if (security & 0x04)
    aesCrypto();  // Encrypt
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    2090:	ca cf       	rjmp	.-108    	; 0x2026 <_ZN8SWPACKET4sendEv+0x102>
  {
    i--;
    delay(SWAP_TX_DELAY);
  }
 Serial.print(res);
    2092:	6f 2d       	mov	r22, r15
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	4a e0       	ldi	r20, 0x0A	; 10
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	83 e1       	ldi	r24, 0x13	; 19
    209c:	92 e0       	ldi	r25, 0x02	; 2
    209e:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN5Print5printEii>
 Serial.println("\n");
    20a2:	64 e4       	ldi	r22, 0x44	; 68
    20a4:	71 e0       	ldi	r23, 0x01	; 1
    20a6:	83 e1       	ldi	r24, 0x13	; 19
    20a8:	92 e0       	ldi	r25, 0x02	; 2
    20aa:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN5Print7printlnEPKc>
  return res;
  
}
    20ae:	8f 2d       	mov	r24, r15
    20b0:	cf 5b       	subi	r28, 0xBF	; 191
    20b2:	df 4f       	sbci	r29, 0xFF	; 255
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	1f 91       	pop	r17
    20c4:	0f 91       	pop	r16
    20c6:	ff 90       	pop	r15
    20c8:	ef 90       	pop	r14
    20ca:	df 90       	pop	r13
    20cc:	cf 90       	pop	r12
    20ce:	08 95       	ret

000020d0 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>:
 * @param rId Register id
 * @param val	Pointer to new value
 * @param len Buffer length
 * @param type type of data contained
 */
SWSTATUS::SWSTATUS(unsigned char rId, unsigned char *val, unsigned char len, SWDTYPE type) 
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	ec 01       	movw	r28, r24
    20e0:	d6 2e       	mov	r13, r22
    20e2:	7a 01       	movw	r14, r20
    20e4:	12 2f       	mov	r17, r18
    20e6:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_ZN8SWPACKETC1Ev>
{
  destAddr = SWAP_BCAST_ADDR;
    20ea:	fe 01       	movw	r30, r28
    20ec:	ef 5b       	subi	r30, 0xBF	; 191
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	11 82       	std	Z+1, r1	; 0x01
    20f2:	10 82       	st	Z, r1
  srcAddr = swap.devAddress;
    20f4:	e8 e0       	ldi	r30, 0x08	; 8
    20f6:	f3 e0       	ldi	r31, 0x03	; 3
    20f8:	92 81       	ldd	r25, Z+2	; 0x02
    20fa:	de 01       	movw	r26, r28
    20fc:	ad 5b       	subi	r26, 0xBD	; 189
    20fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2100:	29 2f       	mov	r18, r25
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	11 96       	adiw	r26, 0x01	; 1
    2106:	3c 93       	st	X, r19
    2108:	2e 93       	st	-X, r18
  hop = 0;
    210a:	12 96       	adiw	r26, 0x02	; 2
    210c:	1c 92       	st	X, r1
  security = swap.security & 0x0F;
    210e:	11 96       	adiw	r26, 0x01	; 1
    2110:	83 81       	ldd	r24, Z+3	; 0x03
    2112:	8f 70       	andi	r24, 0x0F	; 15
    2114:	8c 93       	st	X, r24
  nonce = ++swap.nonce;
    2116:	84 81       	ldd	r24, Z+4	; 0x04
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	84 83       	std	Z+4, r24	; 0x04
    211c:	fe 01       	movw	r30, r28
    211e:	e9 5b       	subi	r30, 0xB9	; 185
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 83       	st	Z, r24
  function = SWAPFUNCT_STA;
    2124:	31 96       	adiw	r30, 0x01	; 1
    2126:	10 82       	st	Z, r1
  regAddr = swap.devAddress;
    2128:	32 96       	adiw	r30, 0x02	; 2
    212a:	90 83       	st	Z, r25
  regId = rId;
    212c:	31 96       	adiw	r30, 0x01	; 1
    212e:	d0 82       	st	Z, r13
  value.length = len;
    2130:	33 96       	adiw	r30, 0x03	; 3
    2132:	10 83       	st	Z, r17
  value.data = val;
    2134:	32 97       	sbiw	r30, 0x02	; 2
    2136:	f1 82       	std	Z+1, r15	; 0x01
    2138:	e0 82       	st	Z, r14
  value.type = type;
    213a:	c1 5b       	subi	r28, 0xB1	; 177
    213c:	df 4f       	sbci	r29, 0xFF	; 255
    213e:	08 83       	st	Y, r16
}
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	df 90       	pop	r13
    214e:	08 95       	ret

00002150 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2150:	08 95       	ret

00002152 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    2152:	08 95       	ret

00002154 <attachInterrupt>:
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	e8 f4       	brcc	.+58     	; 0x2192 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    2158:	e8 2f       	mov	r30, r24
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	ee 0f       	add	r30, r30
    215e:	ff 1f       	adc	r31, r31
    2160:	e3 5d       	subi	r30, 0xD3	; 211
    2162:	fe 4f       	sbci	r31, 0xFE	; 254
    2164:	71 83       	std	Z+1, r23	; 0x01
    2166:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	41 f0       	breq	.+16     	; 0x217c <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    216c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2170:	8c 7f       	andi	r24, 0xFC	; 252
    2172:	48 2b       	or	r20, r24
    2174:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT0);
    2178:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    217a:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    217c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2180:	83 7f       	andi	r24, 0xF3	; 243
    2182:	44 0f       	add	r20, r20
    2184:	55 1f       	adc	r21, r21
    2186:	44 0f       	add	r20, r20
    2188:	55 1f       	adc	r21, r21
    218a:	48 2b       	or	r20, r24
    218c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
      EIMSK |= (1 << INT1);
    2190:	e9 9a       	sbi	0x1d, 1	; 29
    2192:	08 95       	ret

00002194 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	78 f4       	brcc	.+30     	; 0x21b6 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	11 f0       	breq	.+4      	; 0x21a0 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    219c:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    21a0:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    21a2:	e8 2f       	mov	r30, r24
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	e3 5d       	subi	r30, 0xD3	; 211
    21ac:	fe 4f       	sbci	r31, 0xFE	; 254
    21ae:	89 ea       	ldi	r24, 0xA9	; 169
    21b0:	90 e1       	ldi	r25, 0x10	; 16
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	08 95       	ret

000021b8 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    21b8:	1f 92       	push	r1
    21ba:	0f 92       	push	r0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	0f 92       	push	r0
    21c0:	11 24       	eor	r1, r1
    21c2:	2f 93       	push	r18
    21c4:	3f 93       	push	r19
    21c6:	4f 93       	push	r20
    21c8:	5f 93       	push	r21
    21ca:	6f 93       	push	r22
    21cc:	7f 93       	push	r23
    21ce:	8f 93       	push	r24
    21d0:	9f 93       	push	r25
    21d2:	af 93       	push	r26
    21d4:	bf 93       	push	r27
    21d6:	ef 93       	push	r30
    21d8:	ff 93       	push	r31
    21da:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <intFunc>
    21de:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <intFunc+0x1>
    21e2:	09 95       	icall
    21e4:	ff 91       	pop	r31
    21e6:	ef 91       	pop	r30
    21e8:	bf 91       	pop	r27
    21ea:	af 91       	pop	r26
    21ec:	9f 91       	pop	r25
    21ee:	8f 91       	pop	r24
    21f0:	7f 91       	pop	r23
    21f2:	6f 91       	pop	r22
    21f4:	5f 91       	pop	r21
    21f6:	4f 91       	pop	r20
    21f8:	3f 91       	pop	r19
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2206:	1f 92       	push	r1
    2208:	0f 92       	push	r0
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	0f 92       	push	r0
    220e:	11 24       	eor	r1, r1
    2210:	2f 93       	push	r18
    2212:	3f 93       	push	r19
    2214:	4f 93       	push	r20
    2216:	5f 93       	push	r21
    2218:	6f 93       	push	r22
    221a:	7f 93       	push	r23
    221c:	8f 93       	push	r24
    221e:	9f 93       	push	r25
    2220:	af 93       	push	r26
    2222:	bf 93       	push	r27
    2224:	ef 93       	push	r30
    2226:	ff 93       	push	r31
    2228:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <intFunc+0x2>
    222c:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <intFunc+0x3>
    2230:	09 95       	icall
    2232:	ff 91       	pop	r31
    2234:	ef 91       	pop	r30
    2236:	bf 91       	pop	r27
    2238:	af 91       	pop	r26
    223a:	9f 91       	pop	r25
    223c:	8f 91       	pop	r24
    223e:	7f 91       	pop	r23
    2240:	6f 91       	pop	r22
    2242:	5f 91       	pop	r21
    2244:	4f 91       	pop	r20
    2246:	3f 91       	pop	r19
    2248:	2f 91       	pop	r18
    224a:	0f 90       	pop	r0
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	0f 90       	pop	r0
    2250:	1f 90       	pop	r1
    2252:	18 95       	reti

00002254 <_ZN6AVRRTC6wakeUpEv>:
 * 'rxOn' Enter RX_ON state after waking up
 */
void AVRRTC::wakeUp(void) 
{
  // Exit from sleep
  sleep_disable();
    2254:	83 b7       	in	r24, 0x33	; 51
    2256:	8e 7f       	andi	r24, 0xFE	; 254
    2258:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
    225a:	e4 e6       	ldi	r30, 0x64	; 100
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	80 71       	andi	r24, 0x10	; 16
    2262:	80 83       	st	Z, r24
  //wdt_disable();
  // Re-enable functions
  //clock_prescale_set(clock_div_1);
  power_all_enable();
  // Enable ADC
  ADCSRA |= (1 << ADEN);
    2264:	ea e7       	ldi	r30, 0x7A	; 122
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	80 68       	ori	r24, 0x80	; 128
    226c:	80 83       	st	Z, r24
  
  TIMSK2 = 0x00;
    226e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    2272:	08 95       	ret

00002274 <__vector_6>:
 * ISR(WDT_vect)
 *
 * Watchdog ISR. Called whenever a watchdog interrupt occurs
 */
ISR(WDT_vect)
{
    2274:	1f 92       	push	r1
    2276:	0f 92       	push	r0
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	0f 92       	push	r0
    227c:	11 24       	eor	r1, r1
}
    227e:	0f 90       	pop	r0
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	0f 90       	pop	r0
    2284:	1f 90       	pop	r1
    2286:	18 95       	reti

00002288 <_ZN6AVRRTC14setup_watchdogEh>:
 */
void AVRRTC::setup_watchdog(uint8_t time) 
{
  uint8_t bb;

  bb = time & 7;
    2288:	86 2f       	mov	r24, r22
    228a:	87 70       	andi	r24, 0x07	; 7
  if (time > 7)
    228c:	68 30       	cpi	r22, 0x08	; 8
    228e:	08 f0       	brcs	.+2      	; 0x2292 <_ZN6AVRRTC14setup_watchdogEh+0xa>
    bb|= (1<<5);
    2290:	80 62       	ori	r24, 0x20	; 32

  bb|= (1<<WDCE);
    2292:	80 61       	ori	r24, 0x10	; 16

  MCUSR &= ~(1<<WDRF);
    2294:	94 b7       	in	r25, 0x34	; 52
    2296:	97 7f       	andi	r25, 0xF7	; 247
    2298:	94 bf       	out	0x34, r25	; 52
  // start timed sequence
  WDTCSR |= (1<<WDCE) | (1<<WDE);
    229a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    229e:	98 61       	ori	r25, 0x18	; 24
    22a0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  // set new watchdog timeout value
  WDTCSR = bb;
    22a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  WDTCSR |= _BV(WDIE);    // Enable Watchdog interrupt
    22a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    22ac:	80 64       	ori	r24, 0x40	; 64
    22ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    22b2:	08 95       	ret

000022b4 <__vector_9>:

/**
 * Timer 2 (RTC) ISR routine
 */
ISR(TIMER2_OVF_vect)
{
    22b4:	1f 92       	push	r1
    22b6:	0f 92       	push	r0
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	0f 92       	push	r0
    22bc:	11 24       	eor	r1, r1
    22be:	8f 93       	push	r24
    22c0:	9f 93       	push	r25
    22c2:	af 93       	push	r26
    22c4:	bf 93       	push	r27
  AVRRTC::count++;    // Increment counter
    22c6:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <_ZN6AVRRTC5countE>
    22ca:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <_ZN6AVRRTC5countE+0x1>
    22ce:	a0 91 53 03 	lds	r26, 0x0353	; 0x800353 <_ZN6AVRRTC5countE+0x2>
    22d2:	b0 91 54 03 	lds	r27, 0x0354	; 0x800354 <_ZN6AVRRTC5countE+0x3>
    22d6:	01 96       	adiw	r24, 0x01	; 1
    22d8:	a1 1d       	adc	r26, r1
    22da:	b1 1d       	adc	r27, r1
    22dc:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <_ZN6AVRRTC5countE>
    22e0:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <_ZN6AVRRTC5countE+0x1>
    22e4:	a0 93 53 03 	sts	0x0353, r26	; 0x800353 <_ZN6AVRRTC5countE+0x2>
    22e8:	b0 93 54 03 	sts	0x0354, r27	; 0x800354 <_ZN6AVRRTC5countE+0x3>
}
    22ec:	bf 91       	pop	r27
    22ee:	af 91       	pop	r26
    22f0:	9f 91       	pop	r25
    22f2:	8f 91       	pop	r24
    22f4:	0f 90       	pop	r0
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	0f 90       	pop	r0
    22fa:	1f 90       	pop	r1
    22fc:	18 95       	reti

000022fe <_ZN6AVRRTC9setup_rtcEh>:
 *          RTC_8S = 1024 for 8 sec
 */
void AVRRTC::setup_rtc(uint8_t time)
{
  // Set timer 2 to asyncronous mode (32.768KHz crystal)
  ASSR = (1 << AS2);
    22fe:	80 e2       	ldi	r24, 0x20	; 32
    2300:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>

  TCNT2 = 0;      // Reset count
    2304:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
  TCCR2A = 0x00;  // Normal port operation
    2308:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  // (256 cycles) * (prescaler) / (32.768KHz clock speed) = N sec
  TCCR2B = time;  // Timer 2 prescaler
    230c:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

  while (ASSR & (_BV(TCN2UB) | _BV(TCR2AUB) | _BV(TCR2BUB))) {}    // Wait for the registers to be updated    
    2310:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
    2314:	83 71       	andi	r24, 0x13	; 19
    2316:	e1 f7       	brne	.-8      	; 0x2310 <_ZN6AVRRTC9setup_rtcEh+0x12>
  TIFR2 = _BV(OCF2B) | _BV(OCF2A) | _BV(TOV2);                     // Clear the interrupt flags
    2318:	87 e0       	ldi	r24, 0x07	; 7
    231a:	87 bb       	out	0x17, r24	; 23

  TIMSK2 = 0x01;  // Enable timer2A overflow interrupt
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    2322:	08 95       	ret

00002324 <_ZN6AVRRTC7sleepWdEh>:
 *  WDTO_2S = 2 s
 *  WDTO_4S = 4 s
 *  WDTO_8S = 8 s
 */
void AVRRTC::sleepWd(uint8_t time) 
{
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	ec 01       	movw	r28, r24
  // Power-down panStamp
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    232a:	83 b7       	in	r24, 0x33	; 51
    232c:	81 7f       	andi	r24, 0xF1	; 241
    232e:	84 60       	ori	r24, 0x04	; 4
    2330:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
    2332:	83 b7       	in	r24, 0x33	; 51
    2334:	81 60       	ori	r24, 0x01	; 1
    2336:	83 bf       	out	0x33, r24	; 51
  setup_watchdog(time);
    2338:	ce 01       	movw	r24, r28
    233a:	0e 94 44 11 	call	0x2288	; 0x2288 <_ZN6AVRRTC14setup_watchdogEh>
  delayMicroseconds(10);
    233e:	8a e0       	ldi	r24, 0x0A	; 10
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
  // Disable ADC
  ADCSRA &= ~(1 << ADEN);
    2346:	ea e7       	ldi	r30, 0x7A	; 122
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	8f 77       	andi	r24, 0x7F	; 127
    234e:	80 83       	st	Z, r24
  // Unpower functions
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1280__)
  PRR0 = 0xFF;
#else
  PRR = 0xFF;
    2350:	8f ef       	ldi	r24, 0xFF	; 255
    2352:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
#endif
  //power_all_disable();
  //clock_prescale_set(clock_div_8);
  // Enter sleep mode
  sleep_mode();
    2356:	83 b7       	in	r24, 0x33	; 51
    2358:	81 60       	ori	r24, 0x01	; 1
    235a:	83 bf       	out	0x33, r24	; 51
    235c:	88 95       	sleep
    235e:	83 b7       	in	r24, 0x33	; 51
    2360:	8e 7f       	andi	r24, 0xFE	; 254
    2362:	83 bf       	out	0x33, r24	; 51

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    2364:	ce 01       	movw	r24, r28
}
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
  sleep_mode();

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    236a:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <_ZN6AVRRTC6wakeUpEv>

0000236e <_ZN6AVRRTC8sleepRtcEh>:
 *  RTC_1S = 1 s
 *  RTC_2S = 2 s
 *  RTC_8S = 8 s
 */
void AVRRTC::sleepRtc(uint8_t time) 
{
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	ec 01       	movw	r28, r24
  // Power-down panStamp
  set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    2374:	83 b7       	in	r24, 0x33	; 51
    2376:	81 7f       	andi	r24, 0xF1	; 241
    2378:	86 60       	ori	r24, 0x06	; 6
    237a:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
    237c:	83 b7       	in	r24, 0x33	; 51
    237e:	81 60       	ori	r24, 0x01	; 1
    2380:	83 bf       	out	0x33, r24	; 51
  setup_rtc(time);
    2382:	ce 01       	movw	r24, r28
    2384:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_ZN6AVRRTC9setup_rtcEh>
  delayMicroseconds(10);
    2388:	8a e0       	ldi	r24, 0x0A	; 10
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
  // Disable ADC
  ADCSRA &= ~(1 << ADEN);
    2390:	ea e7       	ldi	r30, 0x7A	; 122
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	8f 77       	andi	r24, 0x7F	; 127
    2398:	80 83       	st	Z, r24
  // Unpower functions
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1280__)
  PRR0 = 0xFF;
#else
  PRR = 0xFF;
    239a:	8f ef       	ldi	r24, 0xFF	; 255
    239c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
#endif
  // Enter sleep mode
  sleep_mode();
    23a0:	83 b7       	in	r24, 0x33	; 51
    23a2:	81 60       	ori	r24, 0x01	; 1
    23a4:	83 bf       	out	0x33, r24	; 51
    23a6:	88 95       	sleep
    23a8:	83 b7       	in	r24, 0x33	; 51
    23aa:	8e 7f       	andi	r24, 0xFE	; 254
    23ac:	83 bf       	out	0x33, r24	; 51

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    23ae:	ce 01       	movw	r24, r28
}
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
  sleep_mode();

  // ZZZZZZZZ...

  // Wake-up!!
  wakeUp();
    23b4:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <_ZN6AVRRTC6wakeUpEv>

000023b8 <_ZN7STORAGE4readEPhhhh>:
 * @pararm length Length to be read
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    23b8:	cf 92       	push	r12
    23ba:	df 92       	push	r13
    23bc:	ef 92       	push	r14
    23be:	ff 92       	push	r15
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    23c8:	41 11       	cpse	r20, r1
    23ca:	1a c0       	rjmp	.+52     	; 0x2400 <_ZN7STORAGE4readEPhhhh+0x48>
    23cc:	7b 01       	movw	r14, r22
  {
    cli();
    23ce:	f8 94       	cli
    23d0:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    23d2:	10 e0       	ldi	r17, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    23d4:	c2 2f       	mov	r28, r18
    23d6:	d0 e0       	ldi	r29, 0x00	; 0
    23d8:	c6 1b       	sub	r28, r22
    23da:	d7 0b       	sbc	r29, r23
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    23dc:	80 2f       	mov	r24, r16
    23de:	96 01       	movw	r18, r12
    23e0:	2e 19       	sub	r18, r14
    23e2:	3f 09       	sbc	r19, r15
    23e4:	20 17       	cp	r18, r16
    23e6:	31 07       	cpc	r19, r17
    23e8:	48 f4       	brcc	.+18     	; 0x23fc <_ZN7STORAGE4readEPhhhh+0x44>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    23ea:	ce 01       	movw	r24, r28
    23ec:	8c 0d       	add	r24, r12
    23ee:	9d 1d       	adc	r25, r13
    23f0:	0e 94 9f 13 	call	0x273e	; 0x273e <eeprom_read_byte>
    23f4:	f6 01       	movw	r30, r12
    23f6:	81 93       	st	Z+, r24
    23f8:	6f 01       	movw	r12, r30
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    23fa:	f0 cf       	rjmp	.-32     	; 0x23dc <_ZN7STORAGE4readEPhhhh+0x24>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
    23fc:	78 94       	sei
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <_ZN7STORAGE4readEPhhhh+0x4a>
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    2400:	80 e0       	ldi	r24, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
  }
  
  return i;
}
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	ff 90       	pop	r15
    240c:	ef 90       	pop	r14
    240e:	df 90       	pop	r13
    2410:	cf 90       	pop	r12
    2412:	08 95       	ret

00002414 <_ZN7STORAGE5writeEPhhhh>:
 * @pararm length Length to be written
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    2414:	cf 92       	push	r12
    2416:	df 92       	push	r13
    2418:	ef 92       	push	r14
    241a:	ff 92       	push	r15
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    2424:	41 11       	cpse	r20, r1
    2426:	19 c0       	rjmp	.+50     	; 0x245a <_ZN7STORAGE5writeEPhhhh+0x46>
  {
    cli();
    2428:	f8 94       	cli
    242a:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    242c:	e1 2c       	mov	r14, r1
    242e:	f1 2c       	mov	r15, r1
    2430:	10 e0       	ldi	r17, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    2432:	c2 2f       	mov	r28, r18
    2434:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    2436:	80 2f       	mov	r24, r16
    2438:	e0 16       	cp	r14, r16
    243a:	f1 06       	cpc	r15, r17
    243c:	60 f4       	brcc	.+24     	; 0x2456 <_ZN7STORAGE5writeEPhhhh+0x42>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    243e:	f6 01       	movw	r30, r12
    2440:	61 91       	ld	r22, Z+
    2442:	6f 01       	movw	r12, r30
    2444:	ce 01       	movw	r24, r28
    2446:	8e 0d       	add	r24, r14
    2448:	9f 1d       	adc	r25, r15
    244a:	0e 94 a7 13 	call	0x274e	; 0x274e <eeprom_write_byte>
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    244e:	ff ef       	ldi	r31, 0xFF	; 255
    2450:	ef 1a       	sub	r14, r31
    2452:	ff 0a       	sbc	r15, r31
    2454:	f0 cf       	rjmp	.-32     	; 0x2436 <_ZN7STORAGE5writeEPhhhh+0x22>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
    2456:	78 94       	sei
    2458:	01 c0       	rjmp	.+2      	; 0x245c <_ZN7STORAGE5writeEPhhhh+0x48>
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    245a:	80 e0       	ldi	r24, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
  }
  
  return i;
}
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	cf 90       	pop	r12
    246c:	08 95       	ret

0000246e <_ZN8REPEATER15saveTransactionEP8SWPACKET>:
 * Save transaction in array
 *
 * @param packet SWAP packet being repeated
 */
void REPEATER::saveTransaction(SWPACKET *packet)
{
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	7c 01       	movw	r14, r24
    247c:	8b 01       	movw	r16, r22
  static uint8_t transactionIndex = 0;

  // Save current transaction in first position
  transactions[transactionIndex].timeStamp = millis();         // Current time stamp
    247e:	c0 91 55 03 	lds	r28, 0x0355	; 0x800355 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    2482:	d0 e0       	ldi	r29, 0x00	; 0
    2484:	0e 94 96 06 	call	0xd2c	; 0xd2c <millis>
    2488:	23 e0       	ldi	r18, 0x03	; 3
    248a:	cc 0f       	add	r28, r28
    248c:	dd 1f       	adc	r29, r29
    248e:	2a 95       	dec	r18
    2490:	e1 f7       	brne	.-8      	; 0x248a <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x1c>
    2492:	ce 0d       	add	r28, r14
    2494:	df 1d       	adc	r29, r15
    2496:	69 83       	std	Y+1, r22	; 0x01
    2498:	7a 83       	std	Y+2, r23	; 0x02
    249a:	8b 83       	std	Y+3, r24	; 0x03
    249c:	9c 83       	std	Y+4, r25	; 0x04
  transactions[transactionIndex].function = packet->function;  // SWAP function
    249e:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    24a2:	f8 01       	movw	r30, r16
    24a4:	e8 5b       	subi	r30, 0xB8	; 184
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	30 81       	ld	r19, Z
    24aa:	82 2f       	mov	r24, r18
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	f7 01       	movw	r30, r14
    24b0:	48 e0       	ldi	r20, 0x08	; 8
    24b2:	24 9f       	mul	r18, r20
    24b4:	e0 0d       	add	r30, r0
    24b6:	f1 1d       	adc	r31, r1
    24b8:	11 24       	eor	r1, r1
    24ba:	35 83       	std	Z+5, r19	; 0x05
  transactions[transactionIndex].srcAddr = packet->srcAddr;    // Source address
    24bc:	d8 01       	movw	r26, r16
    24be:	ad 5b       	subi	r26, 0xBD	; 189
    24c0:	bf 4f       	sbci	r27, 0xFF	; 255
    24c2:	2c 91       	ld	r18, X
    24c4:	26 83       	std	Z+6, r18	; 0x06
  transactions[transactionIndex].nonce = packet->nonce;        // Cyclic nonce
    24c6:	14 96       	adiw	r26, 0x04	; 4
    24c8:	2c 91       	ld	r18, X
    24ca:	27 83       	std	Z+7, r18	; 0x07
  transactions[transactionIndex].regAddr = packet->regAddr;    // Register address
    24cc:	f8 01       	movw	r30, r16
    24ce:	e6 5b       	subi	r30, 0xB6	; 182
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	40 81       	ld	r20, Z
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	9c 01       	movw	r18, r24
    24d8:	53 e0       	ldi	r21, 0x03	; 3
    24da:	22 0f       	add	r18, r18
    24dc:	33 1f       	adc	r19, r19
    24de:	5a 95       	dec	r21
    24e0:	e1 f7       	brne	.-8      	; 0x24da <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x6c>
    24e2:	f7 01       	movw	r30, r14
    24e4:	e2 0f       	add	r30, r18
    24e6:	f3 1f       	adc	r31, r19
    24e8:	40 83       	st	Z, r20
   
  transactionIndex = (transactionIndex + 1) % REPEATER_TABLE_DEPTH;
    24ea:	64 e1       	ldi	r22, 0x14	; 20
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	0e 94 30 13 	call	0x2660	; 0x2660 <__divmodhi4>
    24f2:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
}
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	08 95       	ret

00002504 <_ZN8REPEATER13packetHandlerEP8SWPACKET>:
 * Handle incoming packet. Repeat if necessary
 *
 * @param packet Pointer to the SWAP packet received
 */
void REPEATER::packetHandler(SWPACKET *packet)
{
    2504:	4f 92       	push	r4
    2506:	5f 92       	push	r5
    2508:	6f 92       	push	r6
    250a:	7f 92       	push	r7
    250c:	8f 92       	push	r8
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
  bool repeatPacket = true;
  uint32_t currentTime;

  if (enabled)
    2524:	fc 01       	movw	r30, r24
    2526:	ef 55       	subi	r30, 0x5F	; 95
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	20 81       	ld	r18, Z
    252c:	22 23       	and	r18, r18
    252e:	09 f4       	brne	.+2      	; 0x2532 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x2e>
    2530:	86 c0       	rjmp	.+268    	; 0x263e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
  {
    // Don't repeat packets addressed to our device
    if (packet->destAddr != swap.devAddress)
    2532:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <swap+0x2>
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	fb 01       	movw	r30, r22
    253a:	ef 5b       	subi	r30, 0xBF	; 191
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	40 81       	ld	r20, Z
    2540:	51 81       	ldd	r21, Z+1	; 0x01
    2542:	42 17       	cp	r20, r18
    2544:	53 07       	cpc	r21, r19
    2546:	09 f4       	brne	.+2      	; 0x254a <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x46>
    2548:	7a c0       	rjmp	.+244    	; 0x263e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    {
      // Don't repeat beyond the maximum hop count
      if (packet->hop < maxHopCount)
    254a:	4b 01       	movw	r8, r22
    254c:	25 e4       	ldi	r18, 0x45	; 69
    254e:	82 0e       	add	r8, r18
    2550:	91 1c       	adc	r9, r1
    2552:	f4 01       	movw	r30, r8
    2554:	30 81       	ld	r19, Z
    2556:	fc 01       	movw	r30, r24
    2558:	20 81       	ld	r18, Z
    255a:	32 17       	cp	r19, r18
    255c:	08 f0       	brcs	.+2      	; 0x2560 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x5c>
    255e:	6f c0       	rjmp	.+222    	; 0x263e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    2560:	eb 01       	movw	r28, r22
    2562:	8c 01       	movw	r16, r24
    2564:	7c 01       	movw	r14, r24
    2566:	2c 01       	movw	r4, r24
    2568:	f0 ea       	ldi	r31, 0xA0	; 160
    256a:	4f 0e       	add	r4, r31
    256c:	51 1c       	adc	r5, r1

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
    256e:	3b 01       	movw	r6, r22
    2570:	2a e4       	ldi	r18, 0x4A	; 74
    2572:	62 0e       	add	r6, r18
    2574:	71 1c       	adc	r7, r1
          {
            // Same SWAP function?
            if (transactions[i].function == packet->function)
    2576:	6b 01       	movw	r12, r22
    2578:	88 e4       	ldi	r24, 0x48	; 72
    257a:	c8 0e       	add	r12, r24
    257c:	d1 1c       	adc	r13, r1
            {
              // Same cyclic nonce?
              if (transactions[i].nonce == packet->nonce)
    257e:	5b 01       	movw	r10, r22
    2580:	e7 e4       	ldi	r30, 0x47	; 71
    2582:	ae 0e       	add	r10, r30
    2584:	b1 1c       	adc	r11, r1

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
    2586:	f7 01       	movw	r30, r14
    2588:	90 85       	ldd	r25, Z+8	; 0x08
    258a:	f3 01       	movw	r30, r6
    258c:	80 81       	ld	r24, Z
    258e:	98 17       	cp	r25, r24
    2590:	39 f0       	breq	.+14     	; 0x25a0 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x9c>
    2592:	f8 e0       	ldi	r31, 0x08	; 8
    2594:	ef 0e       	add	r14, r31
    2596:	f1 1c       	adc	r15, r1
      if (packet->hop < maxHopCount)
      {
        uint8_t i;        

        // Check received packet against the latest transactions
        for(i=0 ; i<REPEATER_TABLE_DEPTH ; i++)
    2598:	4e 14       	cp	r4, r14
    259a:	5f 04       	cpc	r5, r15
    259c:	a1 f7       	brne	.-24     	; 0x2586 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x82>
    259e:	1f c0       	rjmp	.+62     	; 0x25de <_ZN8REPEATER13packetHandlerEP8SWPACKET+0xda>
        {
          // Same source/destination node?
          if (transactions[i].regAddr == packet->regAddr)
          {
            // Same SWAP function?
            if (transactions[i].function == packet->function)
    25a0:	f7 01       	movw	r30, r14
    25a2:	95 81       	ldd	r25, Z+5	; 0x05
    25a4:	f6 01       	movw	r30, r12
    25a6:	80 81       	ld	r24, Z
    25a8:	98 13       	cpse	r25, r24
    25aa:	f3 cf       	rjmp	.-26     	; 0x2592 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
            {
              // Same cyclic nonce?
              if (transactions[i].nonce == packet->nonce)
    25ac:	f7 01       	movw	r30, r14
    25ae:	97 81       	ldd	r25, Z+7	; 0x07
    25b0:	f5 01       	movw	r30, r10
    25b2:	80 81       	ld	r24, Z
    25b4:	98 13       	cpse	r25, r24
    25b6:	ed cf       	rjmp	.-38     	; 0x2592 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
              {
                currentTime = millis();
    25b8:	0e 94 96 06 	call	0xd2c	; 0xd2c <millis>
                // Time stamp not expired?
                if ((currentTime - transactions[i].timeStamp) < REPEATER_EXPIRATION_TIME)
    25bc:	f7 01       	movw	r30, r14
    25be:	21 81       	ldd	r18, Z+1	; 0x01
    25c0:	32 81       	ldd	r19, Z+2	; 0x02
    25c2:	43 81       	ldd	r20, Z+3	; 0x03
    25c4:	54 81       	ldd	r21, Z+4	; 0x04
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	82 1b       	sub	r24, r18
    25cc:	93 0b       	sbc	r25, r19
    25ce:	a4 0b       	sbc	r26, r20
    25d0:	b5 0b       	sbc	r27, r21
    25d2:	80 3d       	cpi	r24, 0xD0	; 208
    25d4:	97 40       	sbci	r25, 0x07	; 7
    25d6:	a1 05       	cpc	r26, r1
    25d8:	b1 05       	cpc	r27, r1
    25da:	d8 f6       	brcc	.-74     	; 0x2592 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
    25dc:	30 c0       	rjmp	.+96     	; 0x263e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
        }

        // Repeat packet?
        if (repeatPacket)
        {
          packet->srcAddr = swap.devAddress;              // Modify source address
    25de:	fe 01       	movw	r30, r28
    25e0:	ed 5b       	subi	r30, 0xBD	; 189
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <swap+0x2>
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
          packet->hop++;                                  // Increment hop counter
    25ee:	f4 01       	movw	r30, r8
    25f0:	80 81       	ld	r24, Z
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	80 83       	st	Z, r24
          delay(SWAP_TX_DELAY);                           // Delay before sending
    25f6:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <panstamp+0x9>
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	66 0f       	add	r22, r22
    25fe:	77 1f       	adc	r23, r23
    2600:	07 2e       	mov	r0, r23
    2602:	00 0c       	add	r0, r0
    2604:	88 0b       	sbc	r24, r24
    2606:	99 0b       	sbc	r25, r25
    2608:	0e 94 c7 06 	call	0xd8e	; 0xd8e <delay>
          if (packet->send())                             // Repeat packet
    260c:	ce 01       	movw	r24, r28
    260e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN8SWPACKET4sendEv>
    2612:	88 23       	and	r24, r24
    2614:	a1 f0       	breq	.+40     	; 0x263e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
            saveTransaction(packet);                      // Save transaction
    2616:	be 01       	movw	r22, r28
    2618:	c8 01       	movw	r24, r16
        }
      }
    }
  }
}
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	ff 90       	pop	r15
    2624:	ef 90       	pop	r14
    2626:	df 90       	pop	r13
    2628:	cf 90       	pop	r12
    262a:	bf 90       	pop	r11
    262c:	af 90       	pop	r10
    262e:	9f 90       	pop	r9
    2630:	8f 90       	pop	r8
    2632:	7f 90       	pop	r7
    2634:	6f 90       	pop	r6
    2636:	5f 90       	pop	r5
    2638:	4f 90       	pop	r4
        {
          packet->srcAddr = swap.devAddress;              // Modify source address
          packet->hop++;                                  // Increment hop counter
          delay(SWAP_TX_DELAY);                           // Delay before sending
          if (packet->send())                             // Repeat packet
            saveTransaction(packet);                      // Save transaction
    263a:	0c 94 37 12 	jmp	0x246e	; 0x246e <_ZN8REPEATER15saveTransactionEP8SWPACKET>
        }
      }
    }
  }
}
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	ef 90       	pop	r14
    264a:	df 90       	pop	r13
    264c:	cf 90       	pop	r12
    264e:	bf 90       	pop	r11
    2650:	af 90       	pop	r10
    2652:	9f 90       	pop	r9
    2654:	8f 90       	pop	r8
    2656:	7f 90       	pop	r7
    2658:	6f 90       	pop	r6
    265a:	5f 90       	pop	r5
    265c:	4f 90       	pop	r4
    265e:	08 95       	ret

00002660 <__divmodhi4>:
    2660:	97 fb       	bst	r25, 7
    2662:	07 2e       	mov	r0, r23
    2664:	16 f4       	brtc	.+4      	; 0x266a <__divmodhi4+0xa>
    2666:	00 94       	com	r0
    2668:	07 d0       	rcall	.+14     	; 0x2678 <__divmodhi4_neg1>
    266a:	77 fd       	sbrc	r23, 7
    266c:	09 d0       	rcall	.+18     	; 0x2680 <__divmodhi4_neg2>
    266e:	0e 94 85 13 	call	0x270a	; 0x270a <__udivmodhi4>
    2672:	07 fc       	sbrc	r0, 7
    2674:	05 d0       	rcall	.+10     	; 0x2680 <__divmodhi4_neg2>
    2676:	3e f4       	brtc	.+14     	; 0x2686 <__divmodhi4_exit>

00002678 <__divmodhi4_neg1>:
    2678:	90 95       	com	r25
    267a:	81 95       	neg	r24
    267c:	9f 4f       	sbci	r25, 0xFF	; 255
    267e:	08 95       	ret

00002680 <__divmodhi4_neg2>:
    2680:	70 95       	com	r23
    2682:	61 95       	neg	r22
    2684:	7f 4f       	sbci	r23, 0xFF	; 255

00002686 <__divmodhi4_exit>:
    2686:	08 95       	ret

00002688 <__udivmodsi4>:
    2688:	a1 e2       	ldi	r26, 0x21	; 33
    268a:	1a 2e       	mov	r1, r26
    268c:	aa 1b       	sub	r26, r26
    268e:	bb 1b       	sub	r27, r27
    2690:	fd 01       	movw	r30, r26
    2692:	0d c0       	rjmp	.+26     	; 0x26ae <__udivmodsi4_ep>

00002694 <__udivmodsi4_loop>:
    2694:	aa 1f       	adc	r26, r26
    2696:	bb 1f       	adc	r27, r27
    2698:	ee 1f       	adc	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	a2 17       	cp	r26, r18
    269e:	b3 07       	cpc	r27, r19
    26a0:	e4 07       	cpc	r30, r20
    26a2:	f5 07       	cpc	r31, r21
    26a4:	20 f0       	brcs	.+8      	; 0x26ae <__udivmodsi4_ep>
    26a6:	a2 1b       	sub	r26, r18
    26a8:	b3 0b       	sbc	r27, r19
    26aa:	e4 0b       	sbc	r30, r20
    26ac:	f5 0b       	sbc	r31, r21

000026ae <__udivmodsi4_ep>:
    26ae:	66 1f       	adc	r22, r22
    26b0:	77 1f       	adc	r23, r23
    26b2:	88 1f       	adc	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	1a 94       	dec	r1
    26b8:	69 f7       	brne	.-38     	; 0x2694 <__udivmodsi4_loop>
    26ba:	60 95       	com	r22
    26bc:	70 95       	com	r23
    26be:	80 95       	com	r24
    26c0:	90 95       	com	r25
    26c2:	9b 01       	movw	r18, r22
    26c4:	ac 01       	movw	r20, r24
    26c6:	bd 01       	movw	r22, r26
    26c8:	cf 01       	movw	r24, r30
    26ca:	08 95       	ret

000026cc <__divmodsi4>:
    26cc:	05 2e       	mov	r0, r21
    26ce:	97 fb       	bst	r25, 7
    26d0:	1e f4       	brtc	.+6      	; 0x26d8 <__divmodsi4+0xc>
    26d2:	00 94       	com	r0
    26d4:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__negsi2>
    26d8:	57 fd       	sbrc	r21, 7
    26da:	07 d0       	rcall	.+14     	; 0x26ea <__divmodsi4_neg2>
    26dc:	0e 94 44 13 	call	0x2688	; 0x2688 <__udivmodsi4>
    26e0:	07 fc       	sbrc	r0, 7
    26e2:	03 d0       	rcall	.+6      	; 0x26ea <__divmodsi4_neg2>
    26e4:	4e f4       	brtc	.+18     	; 0x26f8 <__divmodsi4_exit>
    26e6:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__negsi2>

000026ea <__divmodsi4_neg2>:
    26ea:	50 95       	com	r21
    26ec:	40 95       	com	r20
    26ee:	30 95       	com	r19
    26f0:	21 95       	neg	r18
    26f2:	3f 4f       	sbci	r19, 0xFF	; 255
    26f4:	4f 4f       	sbci	r20, 0xFF	; 255
    26f6:	5f 4f       	sbci	r21, 0xFF	; 255

000026f8 <__divmodsi4_exit>:
    26f8:	08 95       	ret

000026fa <__negsi2>:
    26fa:	90 95       	com	r25
    26fc:	80 95       	com	r24
    26fe:	70 95       	com	r23
    2700:	61 95       	neg	r22
    2702:	7f 4f       	sbci	r23, 0xFF	; 255
    2704:	8f 4f       	sbci	r24, 0xFF	; 255
    2706:	9f 4f       	sbci	r25, 0xFF	; 255
    2708:	08 95       	ret

0000270a <__udivmodhi4>:
    270a:	aa 1b       	sub	r26, r26
    270c:	bb 1b       	sub	r27, r27
    270e:	51 e1       	ldi	r21, 0x11	; 17
    2710:	07 c0       	rjmp	.+14     	; 0x2720 <__udivmodhi4_ep>

00002712 <__udivmodhi4_loop>:
    2712:	aa 1f       	adc	r26, r26
    2714:	bb 1f       	adc	r27, r27
    2716:	a6 17       	cp	r26, r22
    2718:	b7 07       	cpc	r27, r23
    271a:	10 f0       	brcs	.+4      	; 0x2720 <__udivmodhi4_ep>
    271c:	a6 1b       	sub	r26, r22
    271e:	b7 0b       	sbc	r27, r23

00002720 <__udivmodhi4_ep>:
    2720:	88 1f       	adc	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	5a 95       	dec	r21
    2726:	a9 f7       	brne	.-22     	; 0x2712 <__udivmodhi4_loop>
    2728:	80 95       	com	r24
    272a:	90 95       	com	r25
    272c:	bc 01       	movw	r22, r24
    272e:	cd 01       	movw	r24, r26
    2730:	08 95       	ret

00002732 <__tablejump2__>:
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	05 90       	lpm	r0, Z+
    2738:	f4 91       	lpm	r31, Z
    273a:	e0 2d       	mov	r30, r0
    273c:	09 94       	ijmp

0000273e <eeprom_read_byte>:
    273e:	f9 99       	sbic	0x1f, 1	; 31
    2740:	fe cf       	rjmp	.-4      	; 0x273e <eeprom_read_byte>
    2742:	92 bd       	out	0x22, r25	; 34
    2744:	81 bd       	out	0x21, r24	; 33
    2746:	f8 9a       	sbi	0x1f, 0	; 31
    2748:	99 27       	eor	r25, r25
    274a:	80 b5       	in	r24, 0x20	; 32
    274c:	08 95       	ret

0000274e <eeprom_write_byte>:
    274e:	26 2f       	mov	r18, r22

00002750 <eeprom_write_r18>:
    2750:	f9 99       	sbic	0x1f, 1	; 31
    2752:	fe cf       	rjmp	.-4      	; 0x2750 <eeprom_write_r18>
    2754:	1f ba       	out	0x1f, r1	; 31
    2756:	92 bd       	out	0x22, r25	; 34
    2758:	81 bd       	out	0x21, r24	; 33
    275a:	20 bd       	out	0x20, r18	; 32
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	fa 9a       	sbi	0x1f, 2	; 31
    2762:	f9 9a       	sbi	0x1f, 1	; 31
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	01 96       	adiw	r24, 0x01	; 1
    2768:	08 95       	ret

0000276a <_exit>:
    276a:	f8 94       	cli

0000276c <__stop_program>:
    276c:	ff cf       	rjmp	.-2      	; 0x276c <__stop_program>
