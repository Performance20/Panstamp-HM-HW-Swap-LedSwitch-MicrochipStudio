
binouts2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001e26  00001eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000255  00800152  00800152  00001f0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00001f80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c661  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e2b  00000000  00000000  0000eb01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000347e  00000000  00000000  0001192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db4  00000000  00000000  00014dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e9a  00000000  00000000  00015b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004178  00000000  00000000  000179fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  0001bb72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__vector_1>
       8:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__vector_2>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__vector_6>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_9>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	23 02       	muls	r18, r19
      ba:	cf 06       	cpc	r12, r31
      bc:	2e 0b       	sbc	r18, r30

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e6 e2       	ldi	r30, 0x26	; 38
      d2:	fe e1       	ldi	r31, 0x1E	; 30
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a2 35       	cpi	r26, 0x52	; 82
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	23 e0       	ldi	r18, 0x03	; 3
      e2:	a2 e5       	ldi	r26, 0x52	; 82
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a7 3a       	cpi	r26, 0xA7	; 167
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__tablejump2__>
     100:	cc 35       	cpi	r28, 0x5C	; 92
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 9f 06 	call	0xd3e	; 0xd3e <main>
     10a:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <setup>:
 * setup
 *
 * Arduino setup function
 */
void setup()
{
     112:	cf 92       	push	r12
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	1f 92       	push	r1
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
  int i;
  
  pinMode(LED, OUTPUT);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	84 e0       	ldi	r24, 0x04	; 4
     12c:	0e 94 ad 08 	call	0x115a	; 0x115a <pinMode>
  digitalWrite(LED, LOW);
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	84 e0       	ldi	r24, 0x04	; 4
     134:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <digitalWrite>
     138:	04 e0       	ldi	r16, 0x04	; 4
     13a:	11 e0       	ldi	r17, 0x01	; 1

  // Configure output pins
  for(i=0 ; i<sizeof(binaryPin) ; i++)
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	0c 30       	cpi	r16, 0x0C	; 12
     140:	18 07       	cpc	r17, r24
     142:	39 f0       	breq	.+14     	; 0x152 <setup+0x40>
    pinMode(binaryPin[i], OUTPUT);
     144:	61 e0       	ldi	r22, 0x01	; 1
     146:	f8 01       	movw	r30, r16
     148:	81 91       	ld	r24, Z+
     14a:	8f 01       	movw	r16, r30
     14c:	0e 94 ad 08 	call	0x115a	; 0x115a <pinMode>
  
  pinMode(LED, OUTPUT);
  digitalWrite(LED, LOW);

  // Configure output pins
  for(i=0 ; i<sizeof(binaryPin) ; i++)
     150:	f5 cf       	rjmp	.-22     	; 0x13c <setup+0x2a>
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	11 e0       	ldi	r17, 0x01	; 1
    pinMode(binaryPin[i], OUTPUT);
  for(i=0 ; i<sizeof(pwmPin) ; i++)
     156:	f1 e0       	ldi	r31, 0x01	; 1
     158:	04 30       	cpi	r16, 0x04	; 4
     15a:	1f 07       	cpc	r17, r31
     15c:	39 f0       	breq	.+14     	; 0x16c <setup+0x5a>
    pinMode(pwmPin[i], OUTPUT);
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	f8 01       	movw	r30, r16
     162:	81 91       	ld	r24, Z+
     164:	8f 01       	movw	r16, r30
     166:	0e 94 ad 08 	call	0x115a	; 0x115a <pinMode>
  digitalWrite(LED, LOW);

  // Configure output pins
  for(i=0 ; i<sizeof(binaryPin) ; i++)
    pinMode(binaryPin[i], OUTPUT);
  for(i=0 ; i<sizeof(pwmPin) ; i++)
     16a:	f5 cf       	rjmp	.-22     	; 0x156 <setup+0x44>
    pinMode(pwmPin[i], OUTPUT);

  // Init SWAP stack
  swap.init();
     16c:	81 e5       	ldi	r24, 0x51	; 81
     16e:	93 e0       	ldi	r25, 0x03	; 3
     170:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <_ZN4SWAP4initEv>
  
  // Optionally set transmission amplifier to its maximum level (10dB)
  //panstamp.setHighTxPower();

  // Enable repeater mode
  swap.enableRepeater(maxRepeaterHop);
     174:	65 e0       	ldi	r22, 0x05	; 5
     176:	81 e5       	ldi	r24, 0x51	; 81
     178:	93 e0       	ldi	r25, 0x03	; 3
     17a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN4SWAP14enableRepeaterEh>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     17e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <regTableSize>
     182:	88 23       	and	r24, r24
     184:	29 f0       	breq	.+10     	; 0x190 <setup+0x7e>
        return regTable[regId];
     186:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <regTable>
     18a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <regTable+0x1>
     18e:	02 c0       	rjmp	.+4      	; 0x194 <setup+0x82>

      return NULL;
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0

  // Transmit product code
  swap.getRegister(REGI_PRODUCTCODE)->getData();
     194:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN8REGISTER7getDataEv>
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	89 83       	std	Y+1, r24	; 0x01
     * @param state New system state
     */
    void __inline__ enterSystemState(SYSTATE state)
    {
      // System state register -> id = 3
      regTable[3]->setData((uint8_t *) &state);
     19c:	be 01       	movw	r22, r28
     19e:	6f 5f       	subi	r22, 0xFF	; 255
     1a0:	7f 4f       	sbci	r23, 0xFF	; 255
     1a2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <regTable+0x6>
     1a6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <regTable+0x7>
     1aa:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN8REGISTER7setDataEPh>
     1ae:	8d e0       	ldi	r24, 0x0D	; 13
     1b0:	e8 2e       	mov	r14, r24
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	f8 2e       	mov	r15, r24
     1b6:	67 01       	movw	r12, r14
     1b8:	1c e0       	ldi	r17, 0x0C	; 12
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     1ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <regTableSize>
     1be:	18 17       	cp	r17, r24
     1c0:	20 f4       	brcc	.+8      	; 0x1ca <setup+0xb8>
        return regTable[regId];
     1c2:	f6 01       	movw	r30, r12
     1c4:	80 8d       	ldd	r24, Z+24	; 0x18
     1c6:	91 8d       	ldd	r25, Z+25	; 0x19
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <setup+0xbc>

      return NULL;
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0

  // Enter SYNC state
  swap.enterSystemState(SYSTATE_RXON);
  // Transmit initial binary states
  for(i=0 ; i<sizeof(binaryPin) ; i++)
    swap.getRegister(REGI_BINOUTPUT0 + i)->getData();
     1ce:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN8REGISTER7getDataEv>
     1d2:	1f 5f       	subi	r17, 0xFF	; 255
     1d4:	f2 e0       	ldi	r31, 0x02	; 2
     1d6:	cf 0e       	add	r12, r31
     1d8:	d1 1c       	adc	r13, r1
  swap.getRegister(REGI_PRODUCTCODE)->getData();

  // Enter SYNC state
  swap.enterSystemState(SYSTATE_RXON);
  // Transmit initial binary states
  for(i=0 ; i<sizeof(binaryPin) ; i++)
     1da:	14 31       	cpi	r17, 0x14	; 20
     1dc:	71 f7       	brne	.-36     	; 0x1ba <setup+0xa8>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <regTableSize>
     1e2:	18 17       	cp	r17, r24
     1e4:	20 f4       	brcc	.+8      	; 0x1ee <setup+0xdc>
        return regTable[regId];
     1e6:	f7 01       	movw	r30, r14
     1e8:	80 a5       	ldd	r24, Z+40	; 0x28
     1ea:	91 a5       	ldd	r25, Z+41	; 0x29
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <setup+0xe0>

      return NULL;
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
    swap.getRegister(REGI_BINOUTPUT0 + i)->getData();
  // Transmit initial PWM values
  for(i=0 ; i<sizeof(pwmPin) ; i++)
    swap.getRegister(REGI_PWMOUTPUT0 + i)->getData();
     1f2:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN8REGISTER7getDataEv>
     1f6:	1f 5f       	subi	r17, 0xFF	; 255
     1f8:	f2 e0       	ldi	r31, 0x02	; 2
     1fa:	ef 0e       	add	r14, r31
     1fc:	f1 1c       	adc	r15, r1
  swap.enterSystemState(SYSTATE_RXON);
  // Transmit initial binary states
  for(i=0 ; i<sizeof(binaryPin) ; i++)
    swap.getRegister(REGI_BINOUTPUT0 + i)->getData();
  // Transmit initial PWM values
  for(i=0 ; i<sizeof(pwmPin) ; i++)
     1fe:	18 31       	cpi	r17, 0x18	; 24
     200:	71 f7       	brne	.-36     	; 0x1de <setup+0xcc>
    swap.getRegister(REGI_PWMOUTPUT0 + i)->getData();
}
     202:	0f 90       	pop	r0
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	1f 91       	pop	r17
     20a:	0f 91       	pop	r16
     20c:	ff 90       	pop	r15
     20e:	ef 90       	pop	r14
     210:	df 90       	pop	r13
     212:	cf 90       	pop	r12
     214:	08 95       	ret

00000216 <loop>:
 *
 * Arduino main loop
 */
void loop()
{
  digitalWrite(LED, HIGH);
     216:	61 e0       	ldi	r22, 0x01	; 1
     218:	84 e0       	ldi	r24, 0x04	; 4
     21a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <digitalWrite>
  delay(100);
     21e:	64 e6       	ldi	r22, 0x64	; 100
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 a3 07 	call	0xf46	; 0xf46 <delay>
  digitalWrite(LED, LOW);
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	84 e0       	ldi	r24, 0x04	; 4
     22e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <digitalWrite>
  delay(4900);
     232:	64 e2       	ldi	r22, 0x24	; 36
     234:	73 e1       	ldi	r23, 0x13	; 19
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <delay>

0000023e <_Z13setTxIntervalhPh>:
DECLARE_REGISTERS_END()

/**
 * Definition of common getter/setter callback functions
 */
DEFINE_COMMON_CALLBACKS()
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	92 e0       	ldi	r25, 0x02	; 2
     242:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_ZN8REGISTER20setValueFromBeBufferEPh>

00000246 <_Z13setDevAddresshPh>:
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	c0 55       	subi	r28, 0x50	; 80
     25a:	d1 09       	sbc	r29, r1
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
     266:	7b 01       	movw	r14, r22
     268:	85 e1       	ldi	r24, 0x15	; 21
     26a:	c8 2e       	mov	r12, r24
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	d8 2e       	mov	r13, r24
     270:	01 e0       	ldi	r16, 0x01	; 1
     272:	f6 01       	movw	r30, r12
     274:	27 81       	ldd	r18, Z+7	; 0x07
     276:	ab 01       	movw	r20, r22
     278:	64 81       	ldd	r22, Z+4	; 0x04
     27a:	ce 01       	movw	r24, r28
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     282:	ce 01       	movw	r24, r28
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN8SWPACKET4sendEv>
     28a:	b7 01       	movw	r22, r14
     28c:	c6 01       	movw	r24, r12
     28e:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN8REGISTER20setValueFromBeBufferEPh>
     292:	f6 01       	movw	r30, r12
     294:	87 81       	ldd	r24, Z+7	; 0x07
     296:	e8 0e       	add	r14, r24
     298:	f1 1c       	adc	r15, r1
     29a:	f7 01       	movw	r30, r14
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	60 81       	ld	r22, Z
     2a0:	89 e9       	ldi	r24, 0x99	; 153
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN6CC110113setDevAddressEh>
     2a8:	c0 5b       	subi	r28, 0xB0	; 176
     2aa:	df 4f       	sbci	r29, 0xFF	; 255
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	0f 91       	pop	r16
     2bc:	ff 90       	pop	r15
     2be:	ef 90       	pop	r14
     2c0:	df 90       	pop	r13
     2c2:	cf 90       	pop	r12
     2c4:	08 95       	ret

000002c6 <_Z12setNetworkIdhPh>:
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	c0 55       	subi	r28, 0x50	; 80
     2d6:	d1 09       	sbc	r29, r1
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <regNetworkId+0x5>
     2e6:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <regNetworkId+0x6>
     2ea:	db 01       	movw	r26, r22
     2ec:	9c 91       	ld	r25, X
     2ee:	80 81       	ld	r24, Z
     2f0:	98 13       	cpse	r25, r24
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <_Z12setNetworkIdhPh+0x38>
     2f4:	11 96       	adiw	r26, 0x01	; 1
     2f6:	9c 91       	ld	r25, X
     2f8:	81 81       	ldd	r24, Z+1	; 0x01
     2fa:	98 17       	cp	r25, r24
     2fc:	a1 f0       	breq	.+40     	; 0x326 <_Z12setNetworkIdhPh+0x60>
     2fe:	7b 01       	movw	r14, r22
     300:	01 e0       	ldi	r16, 0x01	; 1
     302:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <regNetworkId+0x7>
     306:	ab 01       	movw	r20, r22
     308:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <regNetworkId+0x4>
     30c:	ce 01       	movw	r24, r28
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN8SWPACKET4sendEv>
     31c:	b7 01       	movw	r22, r14
     31e:	89 e9       	ldi	r24, 0x99	; 153
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	0e 94 81 04 	call	0x902	; 0x902 <_ZN6CC110111setSyncWordEPh>
     326:	c0 5b       	subi	r28, 0xB0	; 176
     328:	df 4f       	sbci	r29, 0xFF	; 255
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	08 95       	ret

00000340 <_Z12setBinOutputhPh>:
const void setBinOutput(byte rId, byte *state)
{
  byte output = rId - REGI_BINOUTPUT0;

  // Update register
  regTable[rId]->value[0] = state[0];
     340:	e8 2f       	mov	r30, r24
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	e3 5f       	subi	r30, 0xF3	; 243
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	01 90       	ld	r0, Z+
     34e:	f0 81       	ld	r31, Z
     350:	e0 2d       	mov	r30, r0
     352:	05 80       	ldd	r0, Z+5	; 0x05
     354:	f6 81       	ldd	r31, Z+6	; 0x06
     356:	e0 2d       	mov	r30, r0
     358:	db 01       	movw	r26, r22
     35a:	9c 91       	ld	r25, X
     35c:	90 83       	st	Z, r25

  // Control pin
  digitalWrite(binaryPin[output], state[0]);
     35e:	8c 50       	subi	r24, 0x0C	; 12
     360:	e8 2f       	mov	r30, r24
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	ec 5f       	subi	r30, 0xFC	; 252
     366:	fe 4f       	sbci	r31, 0xFE	; 254
     368:	6c 91       	ld	r22, X
     36a:	80 81       	ld	r24, Z
     36c:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <digitalWrite>

00000370 <_Z12setPwmOutputhPh>:
const void setPwmOutput(byte rId, byte *level)
{
  byte output = rId - REGI_PWMOUTPUT0;
  
  // Update register
  regTable[rId]->value[0] = level[0];
     370:	e8 2f       	mov	r30, r24
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	e3 5f       	subi	r30, 0xF3	; 243
     37a:	fe 4f       	sbci	r31, 0xFE	; 254
     37c:	01 90       	ld	r0, Z+
     37e:	f0 81       	ld	r31, Z
     380:	e0 2d       	mov	r30, r0
     382:	05 80       	ldd	r0, Z+5	; 0x05
     384:	f6 81       	ldd	r31, Z+6	; 0x06
     386:	e0 2d       	mov	r30, r0
     388:	db 01       	movw	r26, r22
     38a:	9c 91       	ld	r25, X
     38c:	90 83       	st	Z, r25

  // Control PWM output
  analogWrite(pwmPin[output], level[0]);
     38e:	6c 91       	ld	r22, X
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	84 51       	subi	r24, 0x14	; 20
     394:	e8 2f       	mov	r30, r24
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	e0 50       	subi	r30, 0x00	; 0
     39a:	ff 4f       	sbci	r31, 0xFF	; 255
     39c:	80 81       	ld	r24, Z
     39e:	0c 94 25 08 	jmp	0x104a	; 0x104a <analogWrite>

000003a2 <_Z14setFreqChannelhPh>:
DECLARE_REGISTERS_END()

/**
 * Definition of common getter/setter callback functions
 */
DEFINE_COMMON_CALLBACKS()
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	c0 55       	subi	r28, 0x50	; 80
     3b2:	d1 09       	sbc	r29, r1
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <regFreqChannel+0x5>
     3c2:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <regFreqChannel+0x6>
     3c6:	db 01       	movw	r26, r22
     3c8:	9c 91       	ld	r25, X
     3ca:	80 81       	ld	r24, Z
     3cc:	98 17       	cp	r25, r24
     3ce:	a9 f0       	breq	.+42     	; 0x3fa <_Z14setFreqChannelhPh+0x58>
     3d0:	7b 01       	movw	r14, r22
     3d2:	01 e0       	ldi	r16, 0x01	; 1
     3d4:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <regFreqChannel+0x7>
     3d8:	ab 01       	movw	r20, r22
     3da:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <regFreqChannel+0x4>
     3de:	ce 01       	movw	r24, r28
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
     3e6:	ce 01       	movw	r24, r28
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN8SWPACKET4sendEv>
     3ee:	f7 01       	movw	r30, r14
     3f0:	60 81       	ld	r22, Z
     3f2:	89 e9       	ldi	r24, 0x99	; 153
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 94 04 	call	0x928	; 0x928 <_ZN6CC110110setChannelEh>
     3fa:	c0 5b       	subi	r28, 0xB0	; 176
     3fc:	df 4f       	sbci	r29, 0xFF	; 255
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	08 95       	ret

00000414 <_Z11setSysStatehPh>:
     414:	fb 01       	movw	r30, r22
     416:	80 81       	ld	r24, Z
     418:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <swap+0x5>
     41c:	80 81       	ld	r24, Z
     41e:	81 11       	cpse	r24, r1
     420:	11 c0       	rjmp	.+34     	; 0x444 <_Z11setSysStatehPh+0x30>
     *
     * @param regId Register ID
     */
    inline REGISTER * getRegister(unsigned char regId)
    {
      if (regId < regTableSize)
     422:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <regTableSize>
     426:	84 30       	cpi	r24, 0x04	; 4
     428:	28 f0       	brcs	.+10     	; 0x434 <_Z11setSysStatehPh+0x20>
        return regTable[regId];
     42a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <regTable+0x6>
     42e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <regTable+0x7>
     432:	02 c0       	rjmp	.+4      	; 0x438 <_Z11setSysStatehPh+0x24>

      return NULL;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN8REGISTER14sendSwapStatusEv>
     43c:	88 e9       	ldi	r24, 0x98	; 152
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <_ZN8PANSTAMP5resetEv>
     444:	08 95       	ret

00000446 <_GLOBAL__sub_I_regProductCode>:
     * @param typ      Type of SWAP data (SWDTYPE)
     * @param eepromAddr address in EEPROM. Set to -1 if the register value has not to
     * be saved in EEPROM
     * @param bank sector in eeprom or flash
     */
    REGISTER(uint8_t *val, const uint8_t len, const void (*updateValH)(uint8_t rId), const void (*setValH)(uint8_t rId, uint8_t *v), const SWDTYPE typ=SWDTYPE_OTHER, const int eepromAddr=-1, const uint16_t bank=DEFAULT_NVOLAT_SECTION): id(regIndex++), value(val), length(len), updateValue(updateValH), setValue(setValH), type(typ), eepromAddress(eepromAddr), eepromBank(bank) {};
     446:	eb e8       	ldi	r30, 0x8B	; 139
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	11 82       	std	Z+1, r1	; 0x01
     44c:	10 82       	st	Z, r1
     44e:	13 82       	std	Z+3, r1	; 0x03
     450:	12 82       	std	Z+2, r1	; 0x02
     452:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <regIndex>
     456:	94 83       	std	Z+4, r25	; 0x04
     458:	25 e4       	ldi	r18, 0x45	; 69
     45a:	31 e0       	ldi	r19, 0x01	; 1
     45c:	36 83       	std	Z+6, r19	; 0x06
     45e:	25 83       	std	Z+5, r18	; 0x05
     460:	88 e0       	ldi	r24, 0x08	; 8
     462:	87 83       	std	Z+7, r24	; 0x07
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 87       	std	Z+8, r24	; 0x08
     468:	2f ef       	ldi	r18, 0xFF	; 255
     46a:	3f ef       	ldi	r19, 0xFF	; 255
     46c:	32 87       	std	Z+10, r19	; 0x0a
     46e:	21 87       	std	Z+9, r18	; 0x09
     470:	14 86       	std	Z+12, r1	; 0x0c
     472:	13 86       	std	Z+11, r1	; 0x0b
     474:	ee e7       	ldi	r30, 0x7E	; 126
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	11 82       	std	Z+1, r1	; 0x01
     47a:	10 82       	st	Z, r1
     47c:	13 82       	std	Z+3, r1	; 0x03
     47e:	12 82       	std	Z+2, r1	; 0x02
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	49 0f       	add	r20, r25
     484:	44 83       	std	Z+4, r20	; 0x04
     486:	41 e4       	ldi	r20, 0x41	; 65
     488:	51 e0       	ldi	r21, 0x01	; 1
     48a:	56 83       	std	Z+6, r21	; 0x06
     48c:	45 83       	std	Z+5, r20	; 0x05
     48e:	44 e0       	ldi	r20, 0x04	; 4
     490:	47 83       	std	Z+7, r20	; 0x07
     492:	80 87       	std	Z+8, r24	; 0x08
     494:	32 87       	std	Z+10, r19	; 0x0a
     496:	21 87       	std	Z+9, r18	; 0x09
     498:	14 86       	std	Z+12, r1	; 0x0c
     49a:	13 86       	std	Z+11, r1	; 0x0b
     49c:	e1 e7       	ldi	r30, 0x71	; 113
     49e:	f2 e0       	ldi	r31, 0x02	; 2
     4a0:	11 82       	std	Z+1, r1	; 0x01
     4a2:	10 82       	st	Z, r1
     4a4:	13 82       	std	Z+3, r1	; 0x03
     4a6:	12 82       	std	Z+2, r1	; 0x02
     4a8:	52 e0       	ldi	r21, 0x02	; 2
     4aa:	59 0f       	add	r21, r25
     4ac:	54 83       	std	Z+4, r21	; 0x04
     4ae:	6d e3       	ldi	r22, 0x3D	; 61
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	76 83       	std	Z+6, r23	; 0x06
     4b4:	65 83       	std	Z+5, r22	; 0x05
     4b6:	47 83       	std	Z+7, r20	; 0x07
     4b8:	80 87       	std	Z+8, r24	; 0x08
     4ba:	32 87       	std	Z+10, r19	; 0x0a
     4bc:	21 87       	std	Z+9, r18	; 0x09
     4be:	14 86       	std	Z+12, r1	; 0x0c
     4c0:	13 86       	std	Z+11, r1	; 0x0b
     4c2:	e4 e6       	ldi	r30, 0x64	; 100
     4c4:	f2 e0       	ldi	r31, 0x02	; 2
     4c6:	11 82       	std	Z+1, r1	; 0x01
     4c8:	10 82       	st	Z, r1
     4ca:	4a e0       	ldi	r20, 0x0A	; 10
     4cc:	52 e0       	ldi	r21, 0x02	; 2
     4ce:	53 83       	std	Z+3, r21	; 0x03
     4d0:	42 83       	std	Z+2, r20	; 0x02
     4d2:	43 e0       	ldi	r20, 0x03	; 3
     4d4:	49 0f       	add	r20, r25
     4d6:	44 83       	std	Z+4, r20	; 0x04
     4d8:	46 e5       	ldi	r20, 0x56	; 86
     4da:	53 e0       	ldi	r21, 0x03	; 3
     4dc:	56 83       	std	Z+6, r21	; 0x06
     4de:	45 83       	std	Z+5, r20	; 0x05
     4e0:	87 83       	std	Z+7, r24	; 0x07
     4e2:	80 87       	std	Z+8, r24	; 0x08
     4e4:	32 87       	std	Z+10, r19	; 0x0a
     4e6:	21 87       	std	Z+9, r18	; 0x09
     4e8:	14 86       	std	Z+12, r1	; 0x0c
     4ea:	13 86       	std	Z+11, r1	; 0x0b
     4ec:	e7 e5       	ldi	r30, 0x57	; 87
     4ee:	f2 e0       	ldi	r31, 0x02	; 2
     4f0:	11 82       	std	Z+1, r1	; 0x01
     4f2:	10 82       	st	Z, r1
     4f4:	41 ed       	ldi	r20, 0xD1	; 209
     4f6:	51 e0       	ldi	r21, 0x01	; 1
     4f8:	53 83       	std	Z+3, r21	; 0x03
     4fa:	42 83       	std	Z+2, r20	; 0x02
     4fc:	44 e0       	ldi	r20, 0x04	; 4
     4fe:	49 0f       	add	r20, r25
     500:	44 83       	std	Z+4, r20	; 0x04
     502:	4e e9       	ldi	r20, 0x9E	; 158
     504:	52 e0       	ldi	r21, 0x02	; 2
     506:	56 83       	std	Z+6, r21	; 0x06
     508:	45 83       	std	Z+5, r20	; 0x05
     50a:	87 83       	std	Z+7, r24	; 0x07
     50c:	10 86       	std	Z+8, r1	; 0x08
     50e:	12 86       	std	Z+10, r1	; 0x0a
     510:	11 86       	std	Z+9, r1	; 0x09
     512:	14 86       	std	Z+12, r1	; 0x0c
     514:	13 86       	std	Z+11, r1	; 0x0b
     516:	ea e4       	ldi	r30, 0x4A	; 74
     518:	f2 e0       	ldi	r31, 0x02	; 2
     51a:	11 82       	std	Z+1, r1	; 0x01
     51c:	10 82       	st	Z, r1
     51e:	13 82       	std	Z+3, r1	; 0x03
     520:	12 82       	std	Z+2, r1	; 0x02
     522:	45 e0       	ldi	r20, 0x05	; 5
     524:	49 0f       	add	r20, r25
     526:	44 83       	std	Z+4, r20	; 0x04
     528:	44 e5       	ldi	r20, 0x54	; 84
     52a:	53 e0       	ldi	r21, 0x03	; 3
     52c:	56 83       	std	Z+6, r21	; 0x06
     52e:	45 83       	std	Z+5, r20	; 0x05
     530:	87 83       	std	Z+7, r24	; 0x07
     532:	80 87       	std	Z+8, r24	; 0x08
     534:	32 87       	std	Z+10, r19	; 0x0a
     536:	21 87       	std	Z+9, r18	; 0x09
     538:	14 86       	std	Z+12, r1	; 0x0c
     53a:	13 86       	std	Z+11, r1	; 0x0b
     53c:	ec e3       	ldi	r30, 0x3C	; 60
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	11 82       	std	Z+1, r1	; 0x01
     542:	10 82       	st	Z, r1
     544:	13 82       	std	Z+3, r1	; 0x03
     546:	12 82       	std	Z+2, r1	; 0x02
     548:	46 e0       	ldi	r20, 0x06	; 6
     54a:	49 0f       	add	r20, r25
     54c:	44 83       	std	Z+4, r20	; 0x04
     54e:	49 e4       	ldi	r20, 0x49	; 73
     550:	52 e0       	ldi	r21, 0x02	; 2
     552:	56 83       	std	Z+6, r21	; 0x06
     554:	45 83       	std	Z+5, r20	; 0x05
     556:	87 83       	std	Z+7, r24	; 0x07
     558:	80 87       	std	Z+8, r24	; 0x08
     55a:	32 87       	std	Z+10, r19	; 0x0a
     55c:	21 87       	std	Z+9, r18	; 0x09
     55e:	14 86       	std	Z+12, r1	; 0x0c
     560:	13 86       	std	Z+11, r1	; 0x0b
     562:	ef e2       	ldi	r30, 0x2F	; 47
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	11 82       	std	Z+1, r1	; 0x01
     568:	10 82       	st	Z, r1
     56a:	13 82       	std	Z+3, r1	; 0x03
     56c:	12 82       	std	Z+2, r1	; 0x02
     56e:	48 e0       	ldi	r20, 0x08	; 8
     570:	49 0f       	add	r20, r25
     572:	57 e0       	ldi	r21, 0x07	; 7
     574:	59 0f       	add	r21, r25
     576:	54 83       	std	Z+4, r21	; 0x04
     578:	65 e5       	ldi	r22, 0x55	; 85
     57a:	73 e0       	ldi	r23, 0x03	; 3
     57c:	76 83       	std	Z+6, r23	; 0x06
     57e:	65 83       	std	Z+5, r22	; 0x05
     580:	87 83       	std	Z+7, r24	; 0x07
     582:	80 87       	std	Z+8, r24	; 0x08
     584:	32 87       	std	Z+10, r19	; 0x0a
     586:	21 87       	std	Z+9, r18	; 0x09
     588:	14 86       	std	Z+12, r1	; 0x0c
     58a:	13 86       	std	Z+11, r1	; 0x0b
     58c:	e2 e2       	ldi	r30, 0x22	; 34
     58e:	f2 e0       	ldi	r31, 0x02	; 2
     590:	11 82       	std	Z+1, r1	; 0x01
     592:	10 82       	st	Z, r1
     594:	63 e6       	ldi	r22, 0x63	; 99
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	73 83       	std	Z+3, r23	; 0x03
     59a:	62 83       	std	Z+2, r22	; 0x02
     59c:	44 83       	std	Z+4, r20	; 0x04
     59e:	4f e9       	ldi	r20, 0x9F	; 159
     5a0:	52 e0       	ldi	r21, 0x02	; 2
     5a2:	56 83       	std	Z+6, r21	; 0x06
     5a4:	45 83       	std	Z+5, r20	; 0x05
     5a6:	42 e0       	ldi	r20, 0x02	; 2
     5a8:	47 83       	std	Z+7, r20	; 0x07
     5aa:	80 87       	std	Z+8, r24	; 0x08
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	72 87       	std	Z+10, r23	; 0x0a
     5b2:	61 87       	std	Z+9, r22	; 0x09
     5b4:	14 86       	std	Z+12, r1	; 0x0c
     5b6:	13 86       	std	Z+11, r1	; 0x0b
     5b8:	e5 e1       	ldi	r30, 0x15	; 21
     5ba:	f2 e0       	ldi	r31, 0x02	; 2
     5bc:	11 82       	std	Z+1, r1	; 0x01
     5be:	10 82       	st	Z, r1
     5c0:	63 e2       	ldi	r22, 0x23	; 35
     5c2:	71 e0       	ldi	r23, 0x01	; 1
     5c4:	73 83       	std	Z+3, r23	; 0x03
     5c6:	62 83       	std	Z+2, r22	; 0x02
     5c8:	59 e0       	ldi	r21, 0x09	; 9
     5ca:	59 0f       	add	r21, r25
     5cc:	54 83       	std	Z+4, r21	; 0x04
     5ce:	63 e5       	ldi	r22, 0x53	; 83
     5d0:	73 e0       	ldi	r23, 0x03	; 3
     5d2:	76 83       	std	Z+6, r23	; 0x06
     5d4:	65 83       	std	Z+5, r22	; 0x05
     5d6:	87 83       	std	Z+7, r24	; 0x07
     5d8:	10 86       	std	Z+8, r1	; 0x08
     5da:	65 e0       	ldi	r22, 0x05	; 5
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	72 87       	std	Z+10, r23	; 0x0a
     5e0:	61 87       	std	Z+9, r22	; 0x09
     5e2:	14 86       	std	Z+12, r1	; 0x0c
     5e4:	13 86       	std	Z+11, r1	; 0x0b
     5e6:	e8 e0       	ldi	r30, 0x08	; 8
     5e8:	f2 e0       	ldi	r31, 0x02	; 2
     5ea:	11 82       	std	Z+1, r1	; 0x01
     5ec:	10 82       	st	Z, r1
     5ee:	6f e1       	ldi	r22, 0x1F	; 31
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	73 83       	std	Z+3, r23	; 0x03
     5f4:	62 83       	std	Z+2, r22	; 0x02
     5f6:	5a e0       	ldi	r21, 0x0A	; 10
     5f8:	59 0f       	add	r21, r25
     5fa:	54 83       	std	Z+4, r21	; 0x04
     5fc:	67 e5       	ldi	r22, 0x57	; 87
     5fe:	73 e0       	ldi	r23, 0x03	; 3
     600:	76 83       	std	Z+6, r23	; 0x06
     602:	65 83       	std	Z+5, r22	; 0x05
     604:	47 83       	std	Z+7, r20	; 0x07
     606:	10 86       	std	Z+8, r1	; 0x08
     608:	46 e0       	ldi	r20, 0x06	; 6
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	52 87       	std	Z+10, r21	; 0x0a
     60e:	41 87       	std	Z+9, r20	; 0x09
     610:	14 86       	std	Z+12, r1	; 0x0c
     612:	13 86       	std	Z+11, r1	; 0x0b
     614:	ea ef       	ldi	r30, 0xFA	; 250
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	11 82       	std	Z+1, r1	; 0x01
     61a:	10 82       	st	Z, r1
     61c:	13 82       	std	Z+3, r1	; 0x03
     61e:	12 82       	std	Z+2, r1	; 0x02
     620:	4b e0       	ldi	r20, 0x0B	; 11
     622:	49 0f       	add	r20, r25
     624:	44 83       	std	Z+4, r20	; 0x04
     626:	47 e0       	ldi	r20, 0x07	; 7
     628:	52 e0       	ldi	r21, 0x02	; 2
     62a:	56 83       	std	Z+6, r21	; 0x06
     62c:	45 83       	std	Z+5, r20	; 0x05
     62e:	87 83       	std	Z+7, r24	; 0x07
     630:	80 87       	std	Z+8, r24	; 0x08
     632:	32 87       	std	Z+10, r19	; 0x0a
     634:	21 87       	std	Z+9, r18	; 0x09
     636:	14 86       	std	Z+12, r1	; 0x0c
     638:	13 86       	std	Z+11, r1	; 0x0b
     63a:	ec ee       	ldi	r30, 0xEC	; 236
     63c:	f1 e0       	ldi	r31, 0x01	; 1
     63e:	11 82       	std	Z+1, r1	; 0x01
     640:	10 82       	st	Z, r1
     642:	40 ea       	ldi	r20, 0xA0	; 160
     644:	51 e0       	ldi	r21, 0x01	; 1
     646:	53 83       	std	Z+3, r21	; 0x03
     648:	42 83       	std	Z+2, r20	; 0x02
     64a:	6c e0       	ldi	r22, 0x0C	; 12
     64c:	69 0f       	add	r22, r25
     64e:	64 83       	std	Z+4, r22	; 0x04
     650:	69 ef       	ldi	r22, 0xF9	; 249
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	76 83       	std	Z+6, r23	; 0x06
     656:	65 83       	std	Z+5, r22	; 0x05
     658:	87 83       	std	Z+7, r24	; 0x07
     65a:	80 87       	std	Z+8, r24	; 0x08
     65c:	32 87       	std	Z+10, r19	; 0x0a
     65e:	21 87       	std	Z+9, r18	; 0x09
     660:	14 86       	std	Z+12, r1	; 0x0c
     662:	13 86       	std	Z+11, r1	; 0x0b
     664:	ee ed       	ldi	r30, 0xDE	; 222
     666:	f1 e0       	ldi	r31, 0x01	; 1
     668:	11 82       	std	Z+1, r1	; 0x01
     66a:	10 82       	st	Z, r1
     66c:	53 83       	std	Z+3, r21	; 0x03
     66e:	42 83       	std	Z+2, r20	; 0x02
     670:	6d e0       	ldi	r22, 0x0D	; 13
     672:	69 0f       	add	r22, r25
     674:	64 83       	std	Z+4, r22	; 0x04
     676:	6b ee       	ldi	r22, 0xEB	; 235
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	76 83       	std	Z+6, r23	; 0x06
     67c:	65 83       	std	Z+5, r22	; 0x05
     67e:	87 83       	std	Z+7, r24	; 0x07
     680:	80 87       	std	Z+8, r24	; 0x08
     682:	32 87       	std	Z+10, r19	; 0x0a
     684:	21 87       	std	Z+9, r18	; 0x09
     686:	14 86       	std	Z+12, r1	; 0x0c
     688:	13 86       	std	Z+11, r1	; 0x0b
     68a:	e0 ed       	ldi	r30, 0xD0	; 208
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	11 82       	std	Z+1, r1	; 0x01
     690:	10 82       	st	Z, r1
     692:	53 83       	std	Z+3, r21	; 0x03
     694:	42 83       	std	Z+2, r20	; 0x02
     696:	6e e0       	ldi	r22, 0x0E	; 14
     698:	69 0f       	add	r22, r25
     69a:	64 83       	std	Z+4, r22	; 0x04
     69c:	6d ed       	ldi	r22, 0xDD	; 221
     69e:	71 e0       	ldi	r23, 0x01	; 1
     6a0:	76 83       	std	Z+6, r23	; 0x06
     6a2:	65 83       	std	Z+5, r22	; 0x05
     6a4:	87 83       	std	Z+7, r24	; 0x07
     6a6:	80 87       	std	Z+8, r24	; 0x08
     6a8:	32 87       	std	Z+10, r19	; 0x0a
     6aa:	21 87       	std	Z+9, r18	; 0x09
     6ac:	14 86       	std	Z+12, r1	; 0x0c
     6ae:	13 86       	std	Z+11, r1	; 0x0b
     6b0:	e2 ec       	ldi	r30, 0xC2	; 194
     6b2:	f1 e0       	ldi	r31, 0x01	; 1
     6b4:	11 82       	std	Z+1, r1	; 0x01
     6b6:	10 82       	st	Z, r1
     6b8:	53 83       	std	Z+3, r21	; 0x03
     6ba:	42 83       	std	Z+2, r20	; 0x02
     6bc:	6f e0       	ldi	r22, 0x0F	; 15
     6be:	69 0f       	add	r22, r25
     6c0:	64 83       	std	Z+4, r22	; 0x04
     6c2:	6f ec       	ldi	r22, 0xCF	; 207
     6c4:	71 e0       	ldi	r23, 0x01	; 1
     6c6:	76 83       	std	Z+6, r23	; 0x06
     6c8:	65 83       	std	Z+5, r22	; 0x05
     6ca:	87 83       	std	Z+7, r24	; 0x07
     6cc:	80 87       	std	Z+8, r24	; 0x08
     6ce:	32 87       	std	Z+10, r19	; 0x0a
     6d0:	21 87       	std	Z+9, r18	; 0x09
     6d2:	14 86       	std	Z+12, r1	; 0x0c
     6d4:	13 86       	std	Z+11, r1	; 0x0b
     6d6:	e4 eb       	ldi	r30, 0xB4	; 180
     6d8:	f1 e0       	ldi	r31, 0x01	; 1
     6da:	11 82       	std	Z+1, r1	; 0x01
     6dc:	10 82       	st	Z, r1
     6de:	53 83       	std	Z+3, r21	; 0x03
     6e0:	42 83       	std	Z+2, r20	; 0x02
     6e2:	60 e1       	ldi	r22, 0x10	; 16
     6e4:	69 0f       	add	r22, r25
     6e6:	64 83       	std	Z+4, r22	; 0x04
     6e8:	61 ec       	ldi	r22, 0xC1	; 193
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	76 83       	std	Z+6, r23	; 0x06
     6ee:	65 83       	std	Z+5, r22	; 0x05
     6f0:	87 83       	std	Z+7, r24	; 0x07
     6f2:	80 87       	std	Z+8, r24	; 0x08
     6f4:	32 87       	std	Z+10, r19	; 0x0a
     6f6:	21 87       	std	Z+9, r18	; 0x09
     6f8:	14 86       	std	Z+12, r1	; 0x0c
     6fa:	13 86       	std	Z+11, r1	; 0x0b
     6fc:	e6 ea       	ldi	r30, 0xA6	; 166
     6fe:	f1 e0       	ldi	r31, 0x01	; 1
     700:	11 82       	std	Z+1, r1	; 0x01
     702:	10 82       	st	Z, r1
     704:	53 83       	std	Z+3, r21	; 0x03
     706:	42 83       	std	Z+2, r20	; 0x02
     708:	61 e1       	ldi	r22, 0x11	; 17
     70a:	69 0f       	add	r22, r25
     70c:	64 83       	std	Z+4, r22	; 0x04
     70e:	63 eb       	ldi	r22, 0xB3	; 179
     710:	71 e0       	ldi	r23, 0x01	; 1
     712:	76 83       	std	Z+6, r23	; 0x06
     714:	65 83       	std	Z+5, r22	; 0x05
     716:	87 83       	std	Z+7, r24	; 0x07
     718:	80 87       	std	Z+8, r24	; 0x08
     71a:	32 87       	std	Z+10, r19	; 0x0a
     71c:	21 87       	std	Z+9, r18	; 0x09
     71e:	14 86       	std	Z+12, r1	; 0x0c
     720:	13 86       	std	Z+11, r1	; 0x0b
     722:	e8 e9       	ldi	r30, 0x98	; 152
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	11 82       	std	Z+1, r1	; 0x01
     728:	10 82       	st	Z, r1
     72a:	53 83       	std	Z+3, r21	; 0x03
     72c:	42 83       	std	Z+2, r20	; 0x02
     72e:	62 e1       	ldi	r22, 0x12	; 18
     730:	69 0f       	add	r22, r25
     732:	64 83       	std	Z+4, r22	; 0x04
     734:	65 ea       	ldi	r22, 0xA5	; 165
     736:	71 e0       	ldi	r23, 0x01	; 1
     738:	76 83       	std	Z+6, r23	; 0x06
     73a:	65 83       	std	Z+5, r22	; 0x05
     73c:	87 83       	std	Z+7, r24	; 0x07
     73e:	80 87       	std	Z+8, r24	; 0x08
     740:	32 87       	std	Z+10, r19	; 0x0a
     742:	21 87       	std	Z+9, r18	; 0x09
     744:	14 86       	std	Z+12, r1	; 0x0c
     746:	13 86       	std	Z+11, r1	; 0x0b
     748:	ea e8       	ldi	r30, 0x8A	; 138
     74a:	f1 e0       	ldi	r31, 0x01	; 1
     74c:	11 82       	std	Z+1, r1	; 0x01
     74e:	10 82       	st	Z, r1
     750:	53 83       	std	Z+3, r21	; 0x03
     752:	42 83       	std	Z+2, r20	; 0x02
     754:	43 e1       	ldi	r20, 0x13	; 19
     756:	49 0f       	add	r20, r25
     758:	44 83       	std	Z+4, r20	; 0x04
     75a:	47 e9       	ldi	r20, 0x97	; 151
     75c:	51 e0       	ldi	r21, 0x01	; 1
     75e:	56 83       	std	Z+6, r21	; 0x06
     760:	45 83       	std	Z+5, r20	; 0x05
     762:	87 83       	std	Z+7, r24	; 0x07
     764:	80 87       	std	Z+8, r24	; 0x08
     766:	32 87       	std	Z+10, r19	; 0x0a
     768:	21 87       	std	Z+9, r18	; 0x09
     76a:	14 86       	std	Z+12, r1	; 0x0c
     76c:	13 86       	std	Z+11, r1	; 0x0b
     76e:	ec e7       	ldi	r30, 0x7C	; 124
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	11 82       	std	Z+1, r1	; 0x01
     774:	10 82       	st	Z, r1
     776:	48 eb       	ldi	r20, 0xB8	; 184
     778:	51 e0       	ldi	r21, 0x01	; 1
     77a:	53 83       	std	Z+3, r21	; 0x03
     77c:	42 83       	std	Z+2, r20	; 0x02
     77e:	64 e1       	ldi	r22, 0x14	; 20
     780:	69 0f       	add	r22, r25
     782:	64 83       	std	Z+4, r22	; 0x04
     784:	69 e8       	ldi	r22, 0x89	; 137
     786:	71 e0       	ldi	r23, 0x01	; 1
     788:	76 83       	std	Z+6, r23	; 0x06
     78a:	65 83       	std	Z+5, r22	; 0x05
     78c:	87 83       	std	Z+7, r24	; 0x07
     78e:	80 87       	std	Z+8, r24	; 0x08
     790:	32 87       	std	Z+10, r19	; 0x0a
     792:	21 87       	std	Z+9, r18	; 0x09
     794:	14 86       	std	Z+12, r1	; 0x0c
     796:	13 86       	std	Z+11, r1	; 0x0b
     798:	ee e6       	ldi	r30, 0x6E	; 110
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	11 82       	std	Z+1, r1	; 0x01
     79e:	10 82       	st	Z, r1
     7a0:	53 83       	std	Z+3, r21	; 0x03
     7a2:	42 83       	std	Z+2, r20	; 0x02
     7a4:	65 e1       	ldi	r22, 0x15	; 21
     7a6:	69 0f       	add	r22, r25
     7a8:	64 83       	std	Z+4, r22	; 0x04
     7aa:	6b e7       	ldi	r22, 0x7B	; 123
     7ac:	71 e0       	ldi	r23, 0x01	; 1
     7ae:	76 83       	std	Z+6, r23	; 0x06
     7b0:	65 83       	std	Z+5, r22	; 0x05
     7b2:	87 83       	std	Z+7, r24	; 0x07
     7b4:	80 87       	std	Z+8, r24	; 0x08
     7b6:	32 87       	std	Z+10, r19	; 0x0a
     7b8:	21 87       	std	Z+9, r18	; 0x09
     7ba:	14 86       	std	Z+12, r1	; 0x0c
     7bc:	13 86       	std	Z+11, r1	; 0x0b
     7be:	e0 e6       	ldi	r30, 0x60	; 96
     7c0:	f1 e0       	ldi	r31, 0x01	; 1
     7c2:	11 82       	std	Z+1, r1	; 0x01
     7c4:	10 82       	st	Z, r1
     7c6:	53 83       	std	Z+3, r21	; 0x03
     7c8:	42 83       	std	Z+2, r20	; 0x02
     7ca:	66 e1       	ldi	r22, 0x16	; 22
     7cc:	69 0f       	add	r22, r25
     7ce:	64 83       	std	Z+4, r22	; 0x04
     7d0:	6d e6       	ldi	r22, 0x6D	; 109
     7d2:	71 e0       	ldi	r23, 0x01	; 1
     7d4:	76 83       	std	Z+6, r23	; 0x06
     7d6:	65 83       	std	Z+5, r22	; 0x05
     7d8:	87 83       	std	Z+7, r24	; 0x07
     7da:	80 87       	std	Z+8, r24	; 0x08
     7dc:	32 87       	std	Z+10, r19	; 0x0a
     7de:	21 87       	std	Z+9, r18	; 0x09
     7e0:	14 86       	std	Z+12, r1	; 0x0c
     7e2:	13 86       	std	Z+11, r1	; 0x0b
     7e4:	e2 e5       	ldi	r30, 0x52	; 82
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	11 82       	std	Z+1, r1	; 0x01
     7ea:	10 82       	st	Z, r1
     7ec:	53 83       	std	Z+3, r21	; 0x03
     7ee:	42 83       	std	Z+2, r20	; 0x02
     7f0:	48 e1       	ldi	r20, 0x18	; 24
     7f2:	49 0f       	add	r20, r25
     7f4:	40 93 ae 02 	sts	0x02AE, r20	; 0x8002ae <regIndex>
     7f8:	99 5e       	subi	r25, 0xE9	; 233
     7fa:	94 83       	std	Z+4, r25	; 0x04
     7fc:	4f e5       	ldi	r20, 0x5F	; 95
     7fe:	51 e0       	ldi	r21, 0x01	; 1
     800:	56 83       	std	Z+6, r21	; 0x06
     802:	45 83       	std	Z+5, r20	; 0x05
     804:	87 83       	std	Z+7, r24	; 0x07
     806:	80 87       	std	Z+8, r24	; 0x08
     808:	32 87       	std	Z+10, r19	; 0x0a
     80a:	21 87       	std	Z+9, r18	; 0x09
     80c:	14 86       	std	Z+12, r1	; 0x0c
     80e:	13 86       	std	Z+11, r1	; 0x0b
     810:	08 95       	ret

00000812 <_ZN6CC1101C1Ev>:
  wait_Miso();                          // Wait until MISO goes low
  spi.send(addr);                       // Send register address
  for(i=0 ; i<len ; i++)
    buffer[i] = spi.send(0x00);         // Read result byte by byte
  cc1101_Deselect();                    // Deselect CC1101
}
     812:	fc 01       	movw	r30, r24
     814:	13 82       	std	Z+3, r1	; 0x03
     816:	15 82       	std	Z+5, r1	; 0x05
     818:	85 eb       	ldi	r24, 0xB5	; 181
     81a:	86 83       	std	Z+6, r24	; 0x06
     81c:	87 e4       	ldi	r24, 0x47	; 71
     81e:	87 83       	std	Z+7, r24	; 0x07
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	80 87       	std	Z+8, r24	; 0x08
     824:	11 82       	std	Z+1, r1	; 0x01
     826:	08 95       	ret

00000828 <_ZN6CC11018writeRegEhh>:
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	ec 01       	movw	r28, r24
     830:	14 2f       	mov	r17, r20
     832:	2a 98       	cbi	0x05, 2	; 5
     834:	1c 99       	sbic	0x03, 4	; 3
     836:	fe cf       	rjmp	.-4      	; 0x834 <_ZN6CC11018writeRegEhh+0xc>
     838:	ce 01       	movw	r24, r28
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <_ZN9SIMPLESPI4sendEh>
     83e:	61 2f       	mov	r22, r17
     840:	ce 01       	movw	r24, r28
     842:	0e 94 d3 06 	call	0xda6	; 0xda6 <_ZN9SIMPLESPI4sendEh>
     846:	2a 9a       	sbi	0x05, 2	; 5
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	08 95       	ret

00000850 <_ZN6CC110113writeBurstRegEhPhh>:
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	8c 01       	movw	r16, r24
     860:	d4 2e       	mov	r13, r20
     862:	e5 2e       	mov	r14, r21
     864:	f2 2e       	mov	r15, r18
     866:	60 64       	ori	r22, 0x40	; 64
     868:	2a 98       	cbi	0x05, 2	; 5
     86a:	1c 99       	sbic	0x03, 4	; 3
     86c:	fe cf       	rjmp	.-4      	; 0x86a <_ZN6CC110113writeBurstRegEhPhh+0x1a>
     86e:	c8 01       	movw	r24, r16
     870:	0e 94 d3 06 	call	0xda6	; 0xda6 <_ZN9SIMPLESPI4sendEh>
     874:	cd 2d       	mov	r28, r13
     876:	de 2d       	mov	r29, r14
     878:	ce 01       	movw	r24, r28
     87a:	8f 0d       	add	r24, r15
     87c:	91 1d       	adc	r25, r1
     87e:	7c 01       	movw	r14, r24
     880:	ce 15       	cp	r28, r14
     882:	df 05       	cpc	r29, r15
     884:	29 f0       	breq	.+10     	; 0x890 <_ZN6CC110113writeBurstRegEhPhh+0x40>
     886:	69 91       	ld	r22, Y+
     888:	c8 01       	movw	r24, r16
     88a:	0e 94 d3 06 	call	0xda6	; 0xda6 <_ZN9SIMPLESPI4sendEh>
     88e:	f8 cf       	rjmp	.-16     	; 0x880 <_ZN6CC110113writeBurstRegEhPhh+0x30>
     890:	2a 9a       	sbi	0x05, 2	; 5
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	08 95       	ret

000008a2 <_ZN6CC11019cmdStrobeEh>:
     8a2:	2a 98       	cbi	0x05, 2	; 5
     8a4:	1c 99       	sbic	0x03, 4	; 3
     8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <_ZN6CC11019cmdStrobeEh+0x2>
     8a8:	0e 94 d3 06 	call	0xda6	; 0xda6 <_ZN9SIMPLESPI4sendEh>
     8ac:	2a 9a       	sbi	0x05, 2	; 5
     8ae:	08 95       	ret

000008b0 <_ZN6CC11017readRegEhh>:
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
     8b6:	64 2b       	or	r22, r20
     8b8:	2a 98       	cbi	0x05, 2	; 5
     8ba:	1c 99       	sbic	0x03, 4	; 3
     8bc:	fe cf       	rjmp	.-4      	; 0x8ba <_ZN6CC11017readRegEhh+0xa>
     8be:	ce 01       	movw	r24, r28
     8c0:	0e 94 d3 06 	call	0xda6	; 0xda6 <_ZN9SIMPLESPI4sendEh>
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	ce 01       	movw	r24, r28
     8c8:	0e 94 d3 06 	call	0xda6	; 0xda6 <_ZN9SIMPLESPI4sendEh>
     8cc:	2a 9a       	sbi	0x05, 2	; 5
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <_ZN6CC110111setSyncWordEhh>:
 * 
 * 'syncH'	Synchronization word - High byte
 * 'syncL'	Synchronization word - Low byte
 */
void CC1101::setSyncWord(uint8_t syncH, uint8_t syncL) 
{
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	ec 01       	movw	r28, r24
     8de:	06 2f       	mov	r16, r22
     8e0:	14 2f       	mov	r17, r20
  writeReg(CC1101_SYNC1, syncH);
     8e2:	46 2f       	mov	r20, r22
     8e4:	64 e0       	ldi	r22, 0x04	; 4
     8e6:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_SYNC0, syncL);
     8ea:	41 2f       	mov	r20, r17
     8ec:	65 e0       	ldi	r22, 0x05	; 5
     8ee:	ce 01       	movw	r24, r28
     8f0:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  syncWord[0] = syncH;
     8f4:	0e 83       	std	Y+6, r16	; 0x06
  syncWord[1] = syncL;
     8f6:	1f 83       	std	Y+7, r17	; 0x07
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	08 95       	ret

00000902 <_ZN6CC110111setSyncWordEPh>:
 * 
 * 'syncH'	Synchronization word - pointer to 2-byte array
 */
void CC1101::setSyncWord(byte *sync) 
{
  CC1101::setSyncWord(sync[0], sync[1]);
     902:	fb 01       	movw	r30, r22
     904:	41 81       	ldd	r20, Z+1	; 0x01
     906:	60 81       	ld	r22, Z
     908:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <_ZN6CC110111setSyncWordEhh>

0000090c <_ZN6CC110113setDevAddressEh>:
 * Set device address
 * 
 * @param addr	Device address
 */
void CC1101::setDevAddress(byte addr) 
{
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
     914:	16 2f       	mov	r17, r22
  writeReg(CC1101_ADDR, addr);
     916:	46 2f       	mov	r20, r22
     918:	69 e0       	ldi	r22, 0x09	; 9
     91a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  devAddress = addr;
     91e:	18 87       	std	Y+8, r17	; 0x08
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	08 95       	ret

00000928 <_ZN6CC110110setChannelEh>:
 * Set frequency channel
 * 
 * 'chnl'	Frequency channel
 */
void CC1101::setChannel(byte chnl) 
{
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
     930:	16 2f       	mov	r17, r22
  writeReg(CC1101_CHANNR,  chnl);
     932:	46 2f       	mov	r20, r22
     934:	6a e0       	ldi	r22, 0x0A	; 10
     936:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  channel = chnl;
     93a:	1d 83       	std	Y+5, r17	; 0x05
}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	08 95       	ret

00000944 <_ZN6CC110114setCarrierFreqEh>:
 * Set carrier frequency
 * 
 * 'freq'	New carrier frequency
 */
void CC1101::setCarrierFreq(byte freq)
{
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	16 2f       	mov	r17, r22
  switch(freq)
     94e:	62 30       	cpi	r22, 0x02	; 2
     950:	79 f0       	breq	.+30     	; 0x970 <_ZN6CC110114setCarrierFreqEh+0x2c>
     952:	63 30       	cpi	r22, 0x03	; 3
     954:	c1 f0       	breq	.+48     	; 0x986 <_ZN6CC110114setCarrierFreqEh+0x42>
     956:	61 30       	cpi	r22, 0x01	; 1
     958:	09 f5       	brne	.+66     	; 0x99c <_ZN6CC110114setCarrierFreqEh+0x58>
  {
    case CFREQ_915:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_915);
     95a:	42 e2       	ldi	r20, 0x22	; 34
     95c:	6d e0       	ldi	r22, 0x0D	; 13
     95e:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_915);
     962:	41 eb       	ldi	r20, 0xB1	; 177
     964:	6e e0       	ldi	r22, 0x0E	; 14
     966:	ce 01       	movw	r24, r28
     968:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_915);
     96c:	4b e3       	ldi	r20, 0x3B	; 59
     96e:	20 c0       	rjmp	.+64     	; 0x9b0 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_433:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_433);
     970:	40 e1       	ldi	r20, 0x10	; 16
     972:	6d e0       	ldi	r22, 0x0D	; 13
     974:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_433);
     978:	47 ea       	ldi	r20, 0xA7	; 167
     97a:	6e e0       	ldi	r22, 0x0E	; 14
     97c:	ce 01       	movw	r24, r28
     97e:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_433);
     982:	42 e6       	ldi	r20, 0x62	; 98
     984:	15 c0       	rjmp	.+42     	; 0x9b0 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    case CFREQ_918:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_918);
     986:	43 e2       	ldi	r20, 0x23	; 35
     988:	6d e0       	ldi	r22, 0x0D	; 13
     98a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_918);
     98e:	4e e4       	ldi	r20, 0x4E	; 78
     990:	6e e0       	ldi	r22, 0x0E	; 14
     992:	ce 01       	movw	r24, r28
     994:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_918);
     998:	44 ec       	ldi	r20, 0xC4	; 196
     99a:	0a c0       	rjmp	.+20     	; 0x9b0 <_ZN6CC110114setCarrierFreqEh+0x6c>
      break;
    default:
      writeReg(CC1101_FREQ2,  CC1101_DEFVAL_FREQ2_868);
     99c:	41 e2       	ldi	r20, 0x21	; 33
     99e:	6d e0       	ldi	r22, 0x0D	; 13
     9a0:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ1,  CC1101_DEFVAL_FREQ1_868);
     9a4:	42 e6       	ldi	r20, 0x62	; 98
     9a6:	6e e0       	ldi	r22, 0x0E	; 14
     9a8:	ce 01       	movw	r24, r28
     9aa:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
      writeReg(CC1101_FREQ0,  CC1101_DEFVAL_FREQ0_868);
     9ae:	46 e7       	ldi	r20, 0x76	; 118
     9b0:	6f e0       	ldi	r22, 0x0F	; 15
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
      break;
  }
   
  carrierFreq = freq;  
     9b8:	1b 83       	std	Y+3, r17	; 0x03
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	08 95       	ret

000009c2 <_ZN6CC11018enablePAEv>:
 *
 * Enable PA and disable LNA on the LD-Board
 */
void CC1101::enablePA(void)
{
 digitalWrite(PA_EN, HIGH);
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	82 e1       	ldi	r24, 0x12	; 18
     9c6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <digitalWrite>
 digitalWrite(LNA_EN, LOW);
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	83 e1       	ldi	r24, 0x13	; 19
     9ce:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <digitalWrite>

000009d2 <_ZN6CC110110setTxStateEv>:
 * setTxState
 * 
 * Enter Tx state
 */
void CC1101::setTxState(void)
{
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	ec 01       	movw	r28, r24
  // Enable PA on LD-board if any
  if (hgmEnabled)
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	88 23       	and	r24, r24
     9dc:	19 f0       	breq	.+6      	; 0x9e4 <_ZN6CC110110setTxStateEv+0x12>
    enablePA();
     9de:	ce 01       	movw	r24, r28
     9e0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_ZN6CC11018enablePAEv>

  cmdStrobe(CC1101_STX);
     9e4:	65 e3       	ldi	r22, 0x35	; 53
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_TX;
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	8a 83       	std	Y+2, r24	; 0x02
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <_ZN6CC11019enableLNAEv>:
 *
 * Enable LNA and disable PA on the LD-Board
 */
void CC1101::enableLNA(void)
{
 digitalWrite(LNA_EN, HIGH);
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	83 e1       	ldi	r24, 0x13	; 19
     9fa:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <digitalWrite>
 digitalWrite(PA_EN, LOW);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	82 e1       	ldi	r24, 0x12	; 18
     a02:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <digitalWrite>

00000a06 <_ZN6CC110110setRxStateEv>:
 * setRxState
 * 
 * Enter Rx state
 */
void CC1101::setRxState(void)
{
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ec 01       	movw	r28, r24
  cmdStrobe(CC1101_SRX);
     a0c:	64 e3       	ldi	r22, 0x34	; 52
     a0e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN6CC11019cmdStrobeEh>
  rfState = RFSTATE_RX;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	8a 83       	std	Y+2, r24	; 0x02

  // Enable LNA on LD-board if any
  if (hgmEnabled)
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	88 23       	and	r24, r24
     a1a:	29 f0       	breq	.+10     	; 0xa26 <_ZN6CC110110setRxStateEv+0x20>
    enableLNA();
     a1c:	ce 01       	movw	r24, r28
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
  cmdStrobe(CC1101_SRX);
  rfState = RFSTATE_RX;

  // Enable LNA on LD-board if any
  if (hgmEnabled)
    enableLNA();
     a22:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <_ZN6CC11019enableLNAEv>
}
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <_ZN6CC11018sendDataE8CCPACKET>:
 *  Return:
 *    True if the transmission succeeds
 *    False otherwise
 */
bool CC1101::sendData(CCPACKET packet)
{
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	8c 01       	movw	r16, r24
  byte marcState;
  bool res = false;
 
  // Declare to be in Tx state. This will avoid receiving packets whilst
  // transmitting
  rfState = RFSTATE_TX;
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	f8 01       	movw	r30, r16
     a40:	82 83       	std	Z+2, r24	; 0x02

  // Enter RX state
  setRxState();
     a42:	c8 01       	movw	r24, r16
     a44:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN6CC110110setRxStateEv>

  // Check that the RX state has been entered
  while (((marcState = readStatusReg(CC1101_MARCSTATE)) & 0x1F) != 0x0D)
     a48:	40 ec       	ldi	r20, 0xC0	; 192
     a4a:	65 e3       	ldi	r22, 0x35	; 53
     a4c:	c8 01       	movw	r24, r16
     a4e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN6CC11017readRegEhh>
     a52:	98 2f       	mov	r25, r24
     a54:	9f 71       	andi	r25, 0x1F	; 31
     a56:	9d 30       	cpi	r25, 0x0D	; 13
     a58:	39 f0       	breq	.+14     	; 0xa68 <_ZN6CC11018sendDataE8CCPACKET+0x3c>
  {
    if (marcState == 0x11)        // RX_OVERFLOW
     a5a:	81 31       	cpi	r24, 0x11	; 17
     a5c:	a9 f7       	brne	.-22     	; 0xa48 <_ZN6CC11018sendDataE8CCPACKET+0x1c>
      flushRxFifo();              // flush receive queue
     a5e:	6a e3       	ldi	r22, 0x3A	; 58
     a60:	c8 01       	movw	r24, r16
     a62:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN6CC11019cmdStrobeEh>
     a66:	f0 cf       	rjmp	.-32     	; 0xa48 <_ZN6CC11018sendDataE8CCPACKET+0x1c>
  }

  delayMicroseconds(500);
     a68:	84 ef       	ldi	r24, 0xF4	; 244
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	0e 94 df 07 	call	0xfbe	; 0xfbe <delayMicroseconds>

  if (packet.length > 0)
     a70:	48 85       	ldd	r20, Y+8	; 0x08
     a72:	44 23       	and	r20, r20
     a74:	79 f0       	breq	.+30     	; 0xa94 <_ZN6CC11018sendDataE8CCPACKET+0x68>
  {
    // Set data length at the first position of the TX FIFO
    writeReg(CC1101_TXFIFO,  packet.length);
     a76:	6f e3       	ldi	r22, 0x3F	; 63
     a78:	c8 01       	movw	r24, r16
     a7a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
    // Write data into the TX FIFO
    writeBurstReg(CC1101_TXFIFO, packet.data, packet.length);
     a7e:	28 85       	ldd	r18, Y+8	; 0x08
     a80:	ae 01       	movw	r20, r28
     a82:	47 5f       	subi	r20, 0xF7	; 247
     a84:	5f 4f       	sbci	r21, 0xFF	; 255
     a86:	6f e3       	ldi	r22, 0x3F	; 63
     a88:	c8 01       	movw	r24, r16
     a8a:	0e 94 28 04 	call	0x850	; 0x850 <_ZN6CC110113writeBurstRegEhPhh>

    // CCA enabled: will enter TX state only if the channel is clear
    setTxState();
     a8e:	c8 01       	movw	r24, r16
     a90:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN6CC110110setTxStateEv>
  }

  // Check that TX state is being entered (state = RXTX_SETTLING)
  marcState = readStatusReg(CC1101_MARCSTATE) & 0x1F;
     a94:	40 ec       	ldi	r20, 0xC0	; 192
     a96:	65 e3       	ldi	r22, 0x35	; 53
     a98:	c8 01       	movw	r24, r16
     a9a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN6CC11017readRegEhh>
  if((marcState != 0x13) && (marcState != 0x14) && (marcState != 0x15))
     a9e:	8f 71       	andi	r24, 0x1F	; 31
     aa0:	83 51       	subi	r24, 0x13	; 19
     aa2:	83 30       	cpi	r24, 0x03	; 3
     aa4:	80 f0       	brcs	.+32     	; 0xac6 <_ZN6CC11018sendDataE8CCPACKET+0x9a>
  {
    setIdleState();       // Enter IDLE state
     aa6:	66 e3       	ldi	r22, 0x36	; 54
     aa8:	c8 01       	movw	r24, r16
     aaa:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN6CC11019cmdStrobeEh>
    flushTxFifo();        // Flush Tx FIFO
     aae:	6b e3       	ldi	r22, 0x3B	; 59
     ab0:	c8 01       	movw	r24, r16
     ab2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN6CC11019cmdStrobeEh>
    setRxState();         // Back to RX state
     ab6:	c8 01       	movw	r24, r16
     ab8:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN6CC110110setRxStateEv>

    // Declare to be in Rx state
    rfState = RFSTATE_RX;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	f8 01       	movw	r30, r16
     ac0:	82 83       	std	Z+2, r24	; 0x02
    return false;
     ac2:	f1 2c       	mov	r15, r1
     ac4:	1c c0       	rjmp	.+56     	; 0xafe <_ZN6CC11018sendDataE8CCPACKET+0xd2>
  }

  // Wait for the sync word to be transmitted
  wait_GDO0_high();
     ac6:	4a 9b       	sbis	0x09, 2	; 9
     ac8:	fe cf       	rjmp	.-4      	; 0xac6 <_ZN6CC11018sendDataE8CCPACKET+0x9a>

  // Wait until the end of the packet transmission
  wait_GDO0_low();
     aca:	4a 99       	sbic	0x09, 2	; 9
     acc:	fe cf       	rjmp	.-4      	; 0xaca <_ZN6CC11018sendDataE8CCPACKET+0x9e>

  // Check that the TX FIFO is empty
  if((readStatusReg(CC1101_TXBYTES) & 0x7F) == 0)
     ace:	40 ec       	ldi	r20, 0xC0	; 192
     ad0:	6a e3       	ldi	r22, 0x3A	; 58
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN6CC11017readRegEhh>
     ad8:	8f 77       	andi	r24, 0x7F	; 127
     ada:	ff 24       	eor	r15, r15
     adc:	f3 94       	inc	r15
     ade:	81 11       	cpse	r24, r1
     ae0:	f1 2c       	mov	r15, r1
    res = true;

  setIdleState();       // Enter IDLE state
     ae2:	66 e3       	ldi	r22, 0x36	; 54
     ae4:	c8 01       	movw	r24, r16
     ae6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN6CC11019cmdStrobeEh>
  flushTxFifo();        // Flush Tx FIFO
     aea:	6b e3       	ldi	r22, 0x3B	; 59
     aec:	c8 01       	movw	r24, r16
     aee:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN6CC11019cmdStrobeEh>

  // Enter back into RX state
  setRxState();
     af2:	c8 01       	movw	r24, r16
     af4:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN6CC110110setRxStateEv>

  // Declare to be in Rx state
  rfState = RFSTATE_RX;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	f8 01       	movw	r30, r16
     afc:	82 83       	std	Z+2, r24	; 0x02

  return res;
}
     afe:	8f 2d       	mov	r24, r15
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	08 95       	ret

00000b0c <_ZN6CC11019setCCregsEv>:
 * setCCregs
 * 
 * Configure CC1101 registers
 */
void CC1101::setCCregs(void) 
{
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	c1 54       	subi	r28, 0x41	; 65
     b1a:	d1 09       	sbc	r29, r1
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	8c 01       	movw	r16, r24
  writeReg(CC1101_IOCFG2,  CC1101_DEFVAL_IOCFG2);
     b28:	4e e2       	ldi	r20, 0x2E	; 46
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG1,  CC1101_DEFVAL_IOCFG1);
     b30:	4e e2       	ldi	r20, 0x2E	; 46
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	c8 01       	movw	r24, r16
     b36:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_IOCFG0,  CC1101_DEFVAL_IOCFG0);
     b3a:	46 e0       	ldi	r20, 0x06	; 6
     b3c:	62 e0       	ldi	r22, 0x02	; 2
     b3e:	c8 01       	movw	r24, r16
     b40:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FIFOTHR,  CC1101_DEFVAL_FIFOTHR);
     b44:	47 e0       	ldi	r20, 0x07	; 7
     b46:	63 e0       	ldi	r22, 0x03	; 3
     b48:	c8 01       	movw	r24, r16
     b4a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTLEN,  CC1101_DEFVAL_PKTLEN);
     b4e:	4d e3       	ldi	r20, 0x3D	; 61
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	c8 01       	movw	r24, r16
     b54:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL1,  CC1101_DEFVAL_PKTCTRL1);
     b58:	46 e0       	ldi	r20, 0x06	; 6
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	c8 01       	movw	r24, r16
     b5e:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PKTCTRL0,  CC1101_DEFVAL_PKTCTRL0);
     b62:	45 e0       	ldi	r20, 0x05	; 5
     b64:	68 e0       	ldi	r22, 0x08	; 8
     b66:	c8 01       	movw	r24, r16
     b68:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>

  // Set default synchronization word
  setSyncWord(syncWord);
     b6c:	b8 01       	movw	r22, r16
     b6e:	6a 5f       	subi	r22, 0xFA	; 250
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	c8 01       	movw	r24, r16
     b74:	0e 94 81 04 	call	0x902	; 0x902 <_ZN6CC110111setSyncWordEPh>

  // Set default device address
  setDevAddress(devAddress);
     b78:	f8 01       	movw	r30, r16
     b7a:	60 85       	ldd	r22, Z+8	; 0x08
     b7c:	c8 01       	movw	r24, r16
     b7e:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN6CC110113setDevAddressEh>

  // Set default frequency channel
  setChannel(channel);
     b82:	f8 01       	movw	r30, r16
     b84:	65 81       	ldd	r22, Z+5	; 0x05
     b86:	c8 01       	movw	r24, r16
     b88:	0e 94 94 04 	call	0x928	; 0x928 <_ZN6CC110110setChannelEh>
  
  writeReg(CC1101_FSCTRL1,  CC1101_DEFVAL_FSCTRL1);
     b8c:	48 e0       	ldi	r20, 0x08	; 8
     b8e:	6b e0       	ldi	r22, 0x0B	; 11
     b90:	c8 01       	movw	r24, r16
     b92:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCTRL0,  CC1101_DEFVAL_FSCTRL0);
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	6c e0       	ldi	r22, 0x0C	; 12
     b9a:	c8 01       	movw	r24, r16
     b9c:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>

  // Set default carrier frequency = 868 MHz
  setCarrierFreq(carrierFreq);
     ba0:	f8 01       	movw	r30, r16
     ba2:	63 81       	ldd	r22, Z+3	; 0x03
     ba4:	c8 01       	movw	r24, r16
     ba6:	0e 94 a2 04 	call	0x944	; 0x944 <_ZN6CC110114setCarrierFreqEh>

  // RF speed
  if (workMode == MODE_LOW_SPEED)
     baa:	f8 01       	movw	r30, r16
     bac:	84 81       	ldd	r24, Z+4	; 0x04
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	11 f4       	brne	.+4      	; 0xbb6 <_ZN6CC11019setCCregsEv+0xaa>
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_4800);
     bb2:	47 ec       	ldi	r20, 0xC7	; 199
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <_ZN6CC11019setCCregsEv+0xac>
  else
    writeReg(CC1101_MDMCFG4,  CC1101_DEFVAL_MDMCFG4_38400);
     bb6:	4a ec       	ldi	r20, 0xCA	; 202
     bb8:	60 e1       	ldi	r22, 0x10	; 16
     bba:	c8 01       	movw	r24, r16
     bbc:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
    
  writeReg(CC1101_MDMCFG3,  CC1101_DEFVAL_MDMCFG3);
     bc0:	43 e8       	ldi	r20, 0x83	; 131
     bc2:	61 e1       	ldi	r22, 0x11	; 17
     bc4:	c8 01       	movw	r24, r16
     bc6:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG2,  CC1101_DEFVAL_MDMCFG2);
     bca:	43 e9       	ldi	r20, 0x93	; 147
     bcc:	62 e1       	ldi	r22, 0x12	; 18
     bce:	c8 01       	movw	r24, r16
     bd0:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG1,  CC1101_DEFVAL_MDMCFG1);
     bd4:	42 e2       	ldi	r20, 0x22	; 34
     bd6:	63 e1       	ldi	r22, 0x13	; 19
     bd8:	c8 01       	movw	r24, r16
     bda:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MDMCFG0,  CC1101_DEFVAL_MDMCFG0);
     bde:	48 ef       	ldi	r20, 0xF8	; 248
     be0:	64 e1       	ldi	r22, 0x14	; 20
     be2:	c8 01       	movw	r24, r16
     be4:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_DEVIATN,  CC1101_DEFVAL_DEVIATN);
     be8:	45 e3       	ldi	r20, 0x35	; 53
     bea:	65 e1       	ldi	r22, 0x15	; 21
     bec:	c8 01       	movw	r24, r16
     bee:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM2,  CC1101_DEFVAL_MCSM2);
     bf2:	47 e0       	ldi	r20, 0x07	; 7
     bf4:	66 e1       	ldi	r22, 0x16	; 22
     bf6:	c8 01       	movw	r24, r16
     bf8:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM1,  CC1101_DEFVAL_MCSM1);
     bfc:	40 e2       	ldi	r20, 0x20	; 32
     bfe:	67 e1       	ldi	r22, 0x17	; 23
     c00:	c8 01       	movw	r24, r16
     c02:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_MCSM0,  CC1101_DEFVAL_MCSM0);
     c06:	48 e1       	ldi	r20, 0x18	; 24
     c08:	68 e1       	ldi	r22, 0x18	; 24
     c0a:	c8 01       	movw	r24, r16
     c0c:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FOCCFG,  CC1101_DEFVAL_FOCCFG);
     c10:	46 e1       	ldi	r20, 0x16	; 22
     c12:	69 e1       	ldi	r22, 0x19	; 25
     c14:	c8 01       	movw	r24, r16
     c16:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_BSCFG,  CC1101_DEFVAL_BSCFG);
     c1a:	4c e6       	ldi	r20, 0x6C	; 108
     c1c:	6a e1       	ldi	r22, 0x1A	; 26
     c1e:	c8 01       	movw	r24, r16
     c20:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL2,  CC1101_DEFVAL_AGCCTRL2);
     c24:	43 e4       	ldi	r20, 0x43	; 67
     c26:	6b e1       	ldi	r22, 0x1B	; 27
     c28:	c8 01       	movw	r24, r16
     c2a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL1,  CC1101_DEFVAL_AGCCTRL1);
     c2e:	40 e4       	ldi	r20, 0x40	; 64
     c30:	6c e1       	ldi	r22, 0x1C	; 28
     c32:	c8 01       	movw	r24, r16
     c34:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCCTRL0,  CC1101_DEFVAL_AGCCTRL0);
     c38:	41 e9       	ldi	r20, 0x91	; 145
     c3a:	6d e1       	ldi	r22, 0x1D	; 29
     c3c:	c8 01       	movw	r24, r16
     c3e:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT1,  CC1101_DEFVAL_WOREVT1);
     c42:	47 e8       	ldi	r20, 0x87	; 135
     c44:	6e e1       	ldi	r22, 0x1E	; 30
     c46:	c8 01       	movw	r24, r16
     c48:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WOREVT0,  CC1101_DEFVAL_WOREVT0);
     c4c:	4b e6       	ldi	r20, 0x6B	; 107
     c4e:	6f e1       	ldi	r22, 0x1F	; 31
     c50:	c8 01       	movw	r24, r16
     c52:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_WORCTRL,  CC1101_DEFVAL_WORCTRL);
     c56:	4b ef       	ldi	r20, 0xFB	; 251
     c58:	60 e2       	ldi	r22, 0x20	; 32
     c5a:	c8 01       	movw	r24, r16
     c5c:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND1,  CC1101_DEFVAL_FREND1);
     c60:	46 e5       	ldi	r20, 0x56	; 86
     c62:	61 e2       	ldi	r22, 0x21	; 33
     c64:	c8 01       	movw	r24, r16
     c66:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FREND0,  CC1101_DEFVAL_FREND0);
     c6a:	40 e1       	ldi	r20, 0x10	; 16
     c6c:	62 e2       	ldi	r22, 0x22	; 34
     c6e:	c8 01       	movw	r24, r16
     c70:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL3,  CC1101_DEFVAL_FSCAL3);
     c74:	49 ee       	ldi	r20, 0xE9	; 233
     c76:	63 e2       	ldi	r22, 0x23	; 35
     c78:	c8 01       	movw	r24, r16
     c7a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL2,  CC1101_DEFVAL_FSCAL2);
     c7e:	4a e2       	ldi	r20, 0x2A	; 42
     c80:	64 e2       	ldi	r22, 0x24	; 36
     c82:	c8 01       	movw	r24, r16
     c84:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL1,  CC1101_DEFVAL_FSCAL1);
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	65 e2       	ldi	r22, 0x25	; 37
     c8c:	c8 01       	movw	r24, r16
     c8e:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSCAL0,  CC1101_DEFVAL_FSCAL0);
     c92:	4f e1       	ldi	r20, 0x1F	; 31
     c94:	66 e2       	ldi	r22, 0x26	; 38
     c96:	c8 01       	movw	r24, r16
     c98:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL1,  CC1101_DEFVAL_RCCTRL1);
     c9c:	41 e4       	ldi	r20, 0x41	; 65
     c9e:	67 e2       	ldi	r22, 0x27	; 39
     ca0:	c8 01       	movw	r24, r16
     ca2:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_RCCTRL0,  CC1101_DEFVAL_RCCTRL0);
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	68 e2       	ldi	r22, 0x28	; 40
     caa:	c8 01       	movw	r24, r16
     cac:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_FSTEST,  CC1101_DEFVAL_FSTEST);
     cb0:	49 e5       	ldi	r20, 0x59	; 89
     cb2:	69 e2       	ldi	r22, 0x29	; 41
     cb4:	c8 01       	movw	r24, r16
     cb6:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_PTEST,  CC1101_DEFVAL_PTEST);
     cba:	4f e7       	ldi	r20, 0x7F	; 127
     cbc:	6a e2       	ldi	r22, 0x2A	; 42
     cbe:	c8 01       	movw	r24, r16
     cc0:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_AGCTEST,  CC1101_DEFVAL_AGCTEST);
     cc4:	4f e3       	ldi	r20, 0x3F	; 63
     cc6:	6b e2       	ldi	r22, 0x2B	; 43
     cc8:	c8 01       	movw	r24, r16
     cca:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST2,  CC1101_DEFVAL_TEST2);
     cce:	41 e8       	ldi	r20, 0x81	; 129
     cd0:	6c e2       	ldi	r22, 0x2C	; 44
     cd2:	c8 01       	movw	r24, r16
     cd4:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST1,  CC1101_DEFVAL_TEST1);
     cd8:	45 e3       	ldi	r20, 0x35	; 53
     cda:	6d e2       	ldi	r22, 0x2D	; 45
     cdc:	c8 01       	movw	r24, r16
     cde:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  writeReg(CC1101_TEST0,  CC1101_DEFVAL_TEST0);
     ce2:	49 e0       	ldi	r20, 0x09	; 9
     ce4:	6e e2       	ldi	r22, 0x2E	; 46
     ce6:	c8 01       	movw	r24, r16
     ce8:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6CC11018writeRegEhh>
  
  // Send empty packet
  CCPACKET packet;
  packet.length = 0;
     cec:	19 82       	std	Y+1, r1	; 0x01
  sendData(packet);
     cee:	8d b7       	in	r24, 0x3d	; 61
     cf0:	9e b7       	in	r25, 0x3e	; 62
     cf2:	81 54       	subi	r24, 0x41	; 65
     cf4:	91 09       	sbc	r25, r1
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	9e bf       	out	0x3e, r25	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	8d bf       	out	0x3d, r24	; 61
     d00:	ad b7       	in	r26, 0x3d	; 61
     d02:	be b7       	in	r27, 0x3e	; 62
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	81 e4       	ldi	r24, 0x41	; 65
     d08:	fe 01       	movw	r30, r28
     d0a:	31 96       	adiw	r30, 0x01	; 1
     d0c:	01 90       	ld	r0, Z+
     d0e:	0d 92       	st	X+, r0
     d10:	8a 95       	dec	r24
     d12:	e1 f7       	brne	.-8      	; 0xd0c <_ZN6CC11019setCCregsEv+0x200>
     d14:	c8 01       	movw	r24, r16
     d16:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN6CC11018sendDataE8CCPACKET>
}
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	cf 5b       	subi	r28, 0xBF	; 191
     d26:	df 4f       	sbci	r29, 0xFF	; 255
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <initVariant>:
     d3c:	08 95       	ret

00000d3e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     d3e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <init>

	initVariant();
     d42:	0e 94 9e 06 	call	0xd3c	; 0xd3c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     d46:	0e 94 89 00 	call	0x112	; 0x112 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     d4a:	c0 e0       	ldi	r28, 0x00	; 0
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     d4e:	0e 94 0b 01 	call	0x216	; 0x216 <loop>
		if (serialEventRun) serialEventRun();
     d52:	20 97       	sbiw	r28, 0x00	; 0
     d54:	e1 f3       	breq	.-8      	; 0xd4e <main+0x10>
     d56:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d5a:	f9 cf       	rjmp	.-14     	; 0xd4e <main+0x10>

00000d5c <_ZN8PANSTAMPC1Ev>:
  result = ADCL;
  result |= ADCH << 8;
  result = 1126400L / result; // Back-calculate AVcc in mV
  
  return result;
}
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ec 01       	movw	r28, r24
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	0e 94 09 04 	call	0x812	; 0x812 <_ZN6CC1101C1Ev>
     d68:	1c 86       	std	Y+12, r1	; 0x0c
     d6a:	1b 86       	std	Y+11, r1	; 0x0b
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <_ZN8PANSTAMP5resetEv>:
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	a8 95       	wdr
     d78:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     d7c:	88 61       	ori	r24, 0x18	; 24
     d7e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     d82:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	98 e0       	ldi	r25, 0x08	; 8
     d8a:	88 e1       	ldi	r24, 0x18	; 24
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	a8 95       	wdr
     d92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     d9c:	ff cf       	rjmp	.-2      	; 0xd9c <_ZN8PANSTAMP5resetEv+0x2a>

00000d9e <_GLOBAL__sub_I__Z8radioISRv>:

/**
 * Pre-instantiate PANSTAMP object
 */
PANSTAMP panstamp;
     d9e:	88 e9       	ldi	r24, 0x98	; 152
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <_ZN8PANSTAMPC1Ev>

00000da6 <_ZN9SIMPLESPI4sendEh>:
 * Return:
 * 	Response received from SPI slave
 */
byte SIMPLESPI::send(byte value) 
{
  SPDR = value;                          // Transfer byte via SPI
     da6:	6e bd       	out	0x2e, r22	; 46
  wait_Spi();                            // Wait until SPI operation is terminated
     da8:	0d b4       	in	r0, 0x2d	; 45
     daa:	07 fe       	sbrs	r0, 7
     dac:	fd cf       	rjmp	.-6      	; 0xda8 <_ZN9SIMPLESPI4sendEh+0x2>

  return SPDR;
     dae:	8e b5       	in	r24, 0x2e	; 46
}
     db0:	08 95       	ret

00000db2 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     db2:	08 95       	ret

00000db4 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     db4:	1f 92       	push	r1
     db6:	0f 92       	push	r0
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
     dd6:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <intFunc>
     dda:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <intFunc+0x1>
     dde:	09 95       	icall
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
     e24:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <intFunc+0x2>
     e28:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <intFunc+0x3>
     e2c:	09 95       	icall
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	bf 91       	pop	r27
     e34:	af 91       	pop	r26
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	7f 91       	pop	r23
     e3c:	6f 91       	pop	r22
     e3e:	5f 91       	pop	r21
     e40:	4f 91       	pop	r20
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     e66:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <timer0_millis>
     e6a:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <timer0_millis+0x1>
     e6e:	a0 91 a8 02 	lds	r26, 0x02A8	; 0x8002a8 <timer0_millis+0x2>
     e72:	b0 91 a9 02 	lds	r27, 0x02A9	; 0x8002a9 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     e76:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     e7a:	23 e0       	ldi	r18, 0x03	; 3
     e7c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     e7e:	2d 37       	cpi	r18, 0x7D	; 125
     e80:	20 f4       	brcc	.+8      	; 0xe8a <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	a1 1d       	adc	r26, r1
     e86:	b1 1d       	adc	r27, r1
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     e8a:	26 e8       	ldi	r18, 0x86	; 134
     e8c:	23 0f       	add	r18, r19
		m += 1;
     e8e:	02 96       	adiw	r24, 0x02	; 2
     e90:	a1 1d       	adc	r26, r1
     e92:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     e94:	20 93 a5 02 	sts	0x02A5, r18	; 0x8002a5 <timer0_fract>
	timer0_millis = m;
     e98:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <timer0_millis>
     e9c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <timer0_millis+0x1>
     ea0:	a0 93 a8 02 	sts	0x02A8, r26	; 0x8002a8 <timer0_millis+0x2>
     ea4:	b0 93 a9 02 	sts	0x02A9, r27	; 0x8002a9 <timer0_millis+0x3>
	timer0_overflow_count++;
     ea8:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <timer0_overflow_count>
     eac:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <timer0_overflow_count+0x1>
     eb0:	a0 91 ac 02 	lds	r26, 0x02AC	; 0x8002ac <timer0_overflow_count+0x2>
     eb4:	b0 91 ad 02 	lds	r27, 0x02AD	; 0x8002ad <timer0_overflow_count+0x3>
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	a1 1d       	adc	r26, r1
     ebc:	b1 1d       	adc	r27, r1
     ebe:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <timer0_overflow_count>
     ec2:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <timer0_overflow_count+0x1>
     ec6:	a0 93 ac 02 	sts	0x02AC, r26	; 0x8002ac <timer0_overflow_count+0x2>
     eca:	b0 93 ad 02 	sts	0x02AD, r27	; 0x8002ad <timer0_overflow_count+0x3>
}
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	3f 91       	pop	r19
     ed8:	2f 91       	pop	r18
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     ee4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     ee6:	f8 94       	cli
	m = timer0_millis;
     ee8:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <timer0_millis>
     eec:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <timer0_millis+0x1>
     ef0:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <timer0_millis+0x2>
     ef4:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <timer0_millis+0x3>
	SREG = oldSREG;
     ef8:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     efa:	08 95       	ret

00000efc <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     efc:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     efe:	f8 94       	cli
	m = timer0_overflow_count;
     f00:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <timer0_overflow_count>
     f04:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <timer0_overflow_count+0x1>
     f08:	a0 91 ac 02 	lds	r26, 0x02AC	; 0x8002ac <timer0_overflow_count+0x2>
     f0c:	b0 91 ad 02 	lds	r27, 0x02AD	; 0x8002ad <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     f10:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     f12:	a8 9b       	sbis	0x15, 0	; 21
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <micros+0x24>
     f16:	2f 3f       	cpi	r18, 0xFF	; 255
     f18:	19 f0       	breq	.+6      	; 0xf20 <micros+0x24>
		m++;
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	a1 1d       	adc	r26, r1
     f1e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     f20:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     f22:	ba 2f       	mov	r27, r26
     f24:	a9 2f       	mov	r26, r25
     f26:	98 2f       	mov	r25, r24
     f28:	88 27       	eor	r24, r24
     f2a:	82 0f       	add	r24, r18
     f2c:	91 1d       	adc	r25, r1
     f2e:	a1 1d       	adc	r26, r1
     f30:	b1 1d       	adc	r27, r1
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	42 e0       	ldi	r20, 0x02	; 2
     f38:	66 0f       	add	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	88 1f       	adc	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	4a 95       	dec	r20
     f42:	d1 f7       	brne	.-12     	; 0xf38 <micros+0x3c>
}
     f44:	08 95       	ret

00000f46 <delay>:

void delay(unsigned long ms)
{
     f46:	8f 92       	push	r8
     f48:	9f 92       	push	r9
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	6b 01       	movw	r12, r22
     f58:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     f5a:	0e 94 7e 07 	call	0xefc	; 0xefc <micros>
     f5e:	4b 01       	movw	r8, r22
     f60:	5c 01       	movw	r10, r24

	while (ms > 0) {
     f62:	c1 14       	cp	r12, r1
     f64:	d1 04       	cpc	r13, r1
     f66:	e1 04       	cpc	r14, r1
     f68:	f1 04       	cpc	r15, r1
     f6a:	01 f1       	breq	.+64     	; 0xfac <delay+0x66>
		yield();
     f6c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     f70:	0e 94 7e 07 	call	0xefc	; 0xefc <micros>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	88 19       	sub	r24, r8
     f7a:	99 09       	sbc	r25, r9
     f7c:	aa 09       	sbc	r26, r10
     f7e:	bb 09       	sbc	r27, r11
     f80:	88 3e       	cpi	r24, 0xE8	; 232
     f82:	93 40       	sbci	r25, 0x03	; 3
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	60 f3       	brcs	.-40     	; 0xf62 <delay+0x1c>
			ms--;
     f8a:	21 e0       	ldi	r18, 0x01	; 1
     f8c:	c2 1a       	sub	r12, r18
     f8e:	d1 08       	sbc	r13, r1
     f90:	e1 08       	sbc	r14, r1
     f92:	f1 08       	sbc	r15, r1
			start += 1000;
     f94:	88 ee       	ldi	r24, 0xE8	; 232
     f96:	88 0e       	add	r8, r24
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	98 1e       	adc	r9, r24
     f9c:	a1 1c       	adc	r10, r1
     f9e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     fa0:	c1 14       	cp	r12, r1
     fa2:	d1 04       	cpc	r13, r1
     fa4:	e1 04       	cpc	r14, r1
     fa6:	f1 04       	cpc	r15, r1
     fa8:	19 f7       	brne	.-58     	; 0xf70 <delay+0x2a>
     faa:	db cf       	rjmp	.-74     	; 0xf62 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	df 90       	pop	r13
     fb2:	cf 90       	pop	r12
     fb4:	bf 90       	pop	r11
     fb6:	af 90       	pop	r10
     fb8:	9f 90       	pop	r9
     fba:	8f 90       	pop	r8
     fbc:	08 95       	ret

00000fbe <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     fbe:	82 30       	cpi	r24, 0x02	; 2
     fc0:	91 05       	cpc	r25, r1
     fc2:	38 f0       	brcs	.+14     	; 0xfd2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     fcc:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <delayMicroseconds+0x10>
     fd2:	08 95       	ret

00000fd4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     fd4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     fd6:	84 b5       	in	r24, 0x24	; 36
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     fdc:	84 b5       	in	r24, 0x24	; 36
     fde:	81 60       	ori	r24, 0x01	; 1
     fe0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     fe2:	85 b5       	in	r24, 0x25	; 37
     fe4:	82 60       	ori	r24, 0x02	; 2
     fe6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     fe8:	85 b5       	in	r24, 0x25	; 37
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     fee:	ee e6       	ldi	r30, 0x6E	; 110
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ff8:	e1 e8       	ldi	r30, 0x81	; 129
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ffe:	80 81       	ld	r24, Z
    1000:	82 60       	ori	r24, 0x02	; 2
    1002:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1004:	80 81       	ld	r24, Z
    1006:	81 60       	ori	r24, 0x01	; 1
    1008:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    100a:	e0 e8       	ldi	r30, 0x80	; 128
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1014:	e1 eb       	ldi	r30, 0xB1	; 177
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	84 60       	ori	r24, 0x04	; 4
    101c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    101e:	e0 eb       	ldi	r30, 0xB0	; 176
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1028:	ea e7       	ldi	r30, 0x7A	; 122
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	84 60       	ori	r24, 0x04	; 4
    1030:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1032:	80 81       	ld	r24, Z
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1038:	80 81       	ld	r24, Z
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    103e:	80 81       	ld	r24, Z
    1040:	80 68       	ori	r24, 0x80	; 128
    1042:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1044:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1048:	08 95       	ret

0000104a <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	18 2f       	mov	r17, r24
    1052:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	0e 94 ad 08 	call	0x115a	; 0x115a <pinMode>
	if (val == 0)
    105a:	20 97       	sbiw	r28, 0x00	; 0
    105c:	11 f4       	brne	.+4      	; 0x1062 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	04 c0       	rjmp	.+8      	; 0x106a <analogWrite+0x20>
	}
	else if (val == 255)
    1062:	cf 3f       	cpi	r28, 0xFF	; 255
    1064:	d1 05       	cpc	r29, r1
    1066:	39 f4       	brne	.+14     	; 0x1076 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1072:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1076:	e1 2f       	mov	r30, r17
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	e8 59       	subi	r30, 0x98	; 152
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	e4 91       	lpm	r30, Z
    1080:	e3 30       	cpi	r30, 0x03	; 3
    1082:	f9 f0       	breq	.+62     	; 0x10c2 <analogWrite+0x78>
    1084:	48 f4       	brcc	.+18     	; 0x1098 <analogWrite+0x4e>
    1086:	e1 30       	cpi	r30, 0x01	; 1
    1088:	b9 f0       	breq	.+46     	; 0x10b8 <analogWrite+0x6e>
    108a:	e2 30       	cpi	r30, 0x02	; 2
    108c:	a1 f5       	brne	.+104    	; 0x10f6 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    108e:	84 b5       	in	r24, 0x24	; 36
    1090:	80 62       	ori	r24, 0x20	; 32
    1092:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1094:	c8 bd       	out	0x28, r28	; 40
				break;
    1096:	34 c0       	rjmp	.+104    	; 0x1100 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1098:	e7 30       	cpi	r30, 0x07	; 7
    109a:	e9 f0       	breq	.+58     	; 0x10d6 <analogWrite+0x8c>
    109c:	e8 30       	cpi	r30, 0x08	; 8
    109e:	19 f1       	breq	.+70     	; 0x10e6 <analogWrite+0x9c>
    10a0:	e4 30       	cpi	r30, 0x04	; 4
    10a2:	49 f5       	brne	.+82     	; 0x10f6 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    10a4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    10a8:	80 62       	ori	r24, 0x20	; 32
    10aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1B = val; // set pwm duty
    10ae:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    10b2:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				break;
    10b6:	24 c0       	rjmp	.+72     	; 0x1100 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    10b8:	84 b5       	in	r24, 0x24	; 36
    10ba:	80 68       	ori	r24, 0x80	; 128
    10bc:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    10be:	c7 bd       	out	0x27, r28	; 39
				break;
    10c0:	1f c0       	rjmp	.+62     	; 0x1100 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    10c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    10c6:	80 68       	ori	r24, 0x80	; 128
    10c8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1A = val; // set pwm duty
    10cc:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    10d0:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				break;
    10d4:	15 c0       	rjmp	.+42     	; 0x1100 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    10d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    10da:	80 68       	ori	r24, 0x80	; 128
    10dc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2A = val; // set pwm duty
    10e0:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				break;
    10e4:	0d c0       	rjmp	.+26     	; 0x1100 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    10e6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    10ea:	80 62       	ori	r24, 0x20	; 32
    10ec:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2B = val; // set pwm duty
    10f0:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				break;
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    10f6:	c0 38       	cpi	r28, 0x80	; 128
    10f8:	d1 05       	cpc	r29, r1
    10fa:	0c f0       	brlt	.+2      	; 0x10fe <analogWrite+0xb4>
    10fc:	b5 cf       	rjmp	.-150    	; 0x1068 <analogWrite+0x1e>
    10fe:	af cf       	rjmp	.-162    	; 0x105e <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	08 95       	ret

00001108 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	81 f0       	breq	.+32     	; 0x112c <turnOffPWM+0x24>
    110c:	28 f4       	brcc	.+10     	; 0x1118 <turnOffPWM+0x10>
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	99 f0       	breq	.+38     	; 0x1138 <turnOffPWM+0x30>
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	a1 f0       	breq	.+40     	; 0x113e <turnOffPWM+0x36>
    1116:	08 95       	ret
    1118:	87 30       	cpi	r24, 0x07	; 7
    111a:	a9 f0       	breq	.+42     	; 0x1146 <turnOffPWM+0x3e>
    111c:	88 30       	cpi	r24, 0x08	; 8
    111e:	b9 f0       	breq	.+46     	; 0x114e <turnOffPWM+0x46>
    1120:	84 30       	cpi	r24, 0x04	; 4
    1122:	d1 f4       	brne	.+52     	; 0x1158 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1124:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1128:	8f 7d       	andi	r24, 0xDF	; 223
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    112c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1130:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1132:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1136:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1138:	84 b5       	in	r24, 0x24	; 36
    113a:	8f 77       	andi	r24, 0x7F	; 127
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    113e:	84 b5       	in	r24, 0x24	; 36
    1140:	8f 7d       	andi	r24, 0xDF	; 223
    1142:	84 bd       	out	0x24, r24	; 36
    1144:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1146:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    114a:	8f 77       	andi	r24, 0x7F	; 127
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    114e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1152:	8f 7d       	andi	r24, 0xDF	; 223
    1154:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1158:	08 95       	ret

0000115a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	fc 01       	movw	r30, r24
    1162:	e4 58       	subi	r30, 0x84	; 132
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1168:	fc 01       	movw	r30, r24
    116a:	e0 57       	subi	r30, 0x70	; 112
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1170:	88 23       	and	r24, r24
    1172:	61 f1       	breq	.+88     	; 0x11cc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	fc 01       	movw	r30, r24
    117c:	e2 55       	subi	r30, 0x52	; 82
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	c5 91       	lpm	r28, Z+
    1182:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1184:	fc 01       	movw	r30, r24
    1186:	ec 55       	subi	r30, 0x5C	; 92
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	a5 91       	lpm	r26, Z+
    118c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    118e:	61 11       	cpse	r22, r1
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1192:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1194:	f8 94       	cli
		*reg &= ~bit;
    1196:	88 81       	ld	r24, Y
    1198:	20 95       	com	r18
    119a:	82 23       	and	r24, r18
    119c:	88 83       	st	Y, r24
		*out &= ~bit;
    119e:	ec 91       	ld	r30, X
    11a0:	2e 23       	and	r18, r30
    11a2:	0b c0       	rjmp	.+22     	; 0x11ba <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    11a4:	62 30       	cpi	r22, 0x02	; 2
    11a6:	61 f4       	brne	.+24     	; 0x11c0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    11a8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    11aa:	f8 94       	cli
		*reg &= ~bit;
    11ac:	88 81       	ld	r24, Y
    11ae:	32 2f       	mov	r19, r18
    11b0:	30 95       	com	r19
    11b2:	83 23       	and	r24, r19
    11b4:	88 83       	st	Y, r24
		*out |= bit;
    11b6:	ec 91       	ld	r30, X
    11b8:	2e 2b       	or	r18, r30
    11ba:	2c 93       	st	X, r18
		SREG = oldSREG;
    11bc:	9f bf       	out	0x3f, r25	; 63
    11be:	06 c0       	rjmp	.+12     	; 0x11cc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    11c0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    11c2:	f8 94       	cli
		*reg |= bit;
    11c4:	e8 81       	ld	r30, Y
    11c6:	2e 2b       	or	r18, r30
    11c8:	28 83       	st	Y, r18
		SREG = oldSREG;
    11ca:	8f bf       	out	0x3f, r24	; 63
	}
}
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	f9 01       	movw	r30, r18
    11de:	e8 59       	subi	r30, 0x98	; 152
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11e4:	f9 01       	movw	r30, r18
    11e6:	e4 58       	subi	r30, 0x84	; 132
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11ec:	f9 01       	movw	r30, r18
    11ee:	e0 57       	subi	r30, 0x70	; 112
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11f4:	cc 23       	and	r28, r28
    11f6:	c1 f0       	breq	.+48     	; 0x1228 <digitalWrite+0x56>
    11f8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11fa:	81 11       	cpse	r24, r1
    11fc:	0e 94 84 08 	call	0x1108	; 0x1108 <turnOffPWM>

	out = portOutputRegister(port);
    1200:	ec 2f       	mov	r30, r28
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	ec 55       	subi	r30, 0x5C	; 92
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	a5 91       	lpm	r26, Z+
    120e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1210:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1212:	f8 94       	cli

	if (val == LOW) {
    1214:	11 11       	cpse	r17, r1
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <digitalWrite+0x4e>
		*out &= ~bit;
    1218:	8c 91       	ld	r24, X
    121a:	d0 95       	com	r29
    121c:	d8 23       	and	r29, r24
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1220:	ec 91       	ld	r30, X
    1222:	de 2b       	or	r29, r30
    1224:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1226:	9f bf       	out	0x3f, r25	; 63
}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	08 95       	ret

00001230 <_ZN8REGISTER4initEv>:
 * init
 *
 * Initialize register
 */
void REGISTER::init(void)
{
    1230:	0f 93       	push	r16
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	1f 92       	push	r1
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
  // Does the value need to be read from EEPROM?
  if (eepromAddress >= 0)
    123c:	fc 01       	movw	r30, r24
    123e:	21 85       	ldd	r18, Z+9	; 0x09
    1240:	32 85       	ldd	r19, Z+10	; 0x0a
    1242:	37 fd       	sbrc	r19, 7
    1244:	08 c0       	rjmp	.+16     	; 0x1256 <_ZN8REGISTER4initEv+0x26>
  {
    STORAGE nvMem;
    
    // Read from info memory
    nvMem.read(value, eepromBank, eepromAddress, length);
    1246:	65 81       	ldd	r22, Z+5	; 0x05
    1248:	76 81       	ldd	r23, Z+6	; 0x06
    124a:	07 81       	ldd	r16, Z+7	; 0x07
    124c:	43 85       	ldd	r20, Z+11	; 0x0b
    124e:	ce 01       	movw	r24, r28
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_ZN7STORAGE4readEPhhhh>
  }
}
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <_ZN8REGISTER14sendSwapStatusEv>:
 * sendSwapStatus
 * 
 * Send SWAP status message
 */
void REGISTER::sendSwapStatus(void) 
{
    1260:	0f 93       	push	r16
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	c0 55       	subi	r28, 0x50	; 80
    126c:	d1 09       	sbc	r29, r1
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	fc 01       	movw	r30, r24
  SWSTATUS packet = SWSTATUS(id, value, length, type);
    127a:	45 81       	ldd	r20, Z+5	; 0x05
    127c:	56 81       	ldd	r21, Z+6	; 0x06
    127e:	00 85       	ldd	r16, Z+8	; 0x08
    1280:	27 81       	ldd	r18, Z+7	; 0x07
    1282:	64 81       	ldd	r22, Z+4	; 0x04
    1284:	ce 01       	movw	r24, r28
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>
  packet.send();
    128c:	ce 01       	movw	r24, r28
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN8SWPACKET4sendEv>
}
    1294:	c0 5b       	subi	r28, 0xB0	; 176
    1296:	df 4f       	sbci	r29, 0xFF	; 255
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <_ZN8REGISTER7getDataEv>:
 * getData
 * 
 * Update and get register value
 */
void REGISTER::getData(void) 
{
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	ec 01       	movw	r28, r24
  // Update register value
  if (updateValue != NULL)
    12b0:	e8 81       	ld	r30, Y
    12b2:	f9 81       	ldd	r31, Y+1	; 0x01
    12b4:	30 97       	sbiw	r30, 0x00	; 0
    12b6:	11 f0       	breq	.+4      	; 0x12bc <_ZN8REGISTER7getDataEv+0x12>
    updateValue(id);
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	09 95       	icall

  // Send SWAP status message about the new value
  sendSwapStatus();
    12bc:	ce 01       	movw	r24, r28
}
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
  // Update register value
  if (updateValue != NULL)
    updateValue(id);

  // Send SWAP status message about the new value
  sendSwapStatus();
    12c2:	0c 94 30 09 	jmp	0x1260	; 0x1260 <_ZN8REGISTER14sendSwapStatusEv>

000012c6 <_ZN8REGISTER7setDataEPh>:
 * Set register value
 * 
 * @param data New register value
 */
void REGISTER::setData(unsigned char *data) 
{
    12c6:	ef 92       	push	r14
    12c8:	ff 92       	push	r15
    12ca:	0f 93       	push	r16
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	1f 92       	push	r1
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	7c 01       	movw	r14, r24
  // Update register value
  if (setValue != NULL)
    12d8:	dc 01       	movw	r26, r24
    12da:	12 96       	adiw	r26, 0x02	; 2
    12dc:	ed 91       	ld	r30, X+
    12de:	fc 91       	ld	r31, X
    12e0:	13 97       	sbiw	r26, 0x03	; 3
    12e2:	30 97       	sbiw	r30, 0x00	; 0
    12e4:	19 f0       	breq	.+6      	; 0x12ec <_ZN8REGISTER7setDataEPh+0x26>
    setValue(id, data);
    12e6:	14 96       	adiw	r26, 0x04	; 4
    12e8:	8c 91       	ld	r24, X
    12ea:	09 95       	icall

  // Send SWAP status message
  sendSwapStatus();
    12ec:	c7 01       	movw	r24, r14
    12ee:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN8REGISTER14sendSwapStatusEv>

  // Does the value need to be saved in info memory (flash)?
  if (eepromAddress >= 0)
    12f2:	f7 01       	movw	r30, r14
    12f4:	21 85       	ldd	r18, Z+9	; 0x09
    12f6:	32 85       	ldd	r19, Z+10	; 0x0a
    12f8:	37 fd       	sbrc	r19, 7
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <_ZN8REGISTER7setDataEPh+0x46>
  {
    STORAGE nvMem;   
    // Write info memory
    nvMem.write(value, eepromBank, eepromAddress, length);
    12fc:	65 81       	ldd	r22, Z+5	; 0x05
    12fe:	76 81       	ldd	r23, Z+6	; 0x06
    1300:	07 81       	ldd	r16, Z+7	; 0x07
    1302:	43 85       	ldd	r20, Z+11	; 0x0b
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN7STORAGE5writeEPhhhh>
  }
}
    130c:	0f 90       	pop	r0
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	08 95       	ret

0000131a <_ZN8REGISTER20setValueFromBeBufferEPh>:
 * Set curent value from a Big Endian buffer passed as argument
 *
 * @param beBuffer Big Endian buffer
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
    131a:	dc 01       	movw	r26, r24
  unsigned char i;

  for(i=0 ; i<length ; i++)
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	17 96       	adiw	r26, 0x07	; 7
    1320:	ec 91       	ld	r30, X
    1322:	17 97       	sbiw	r26, 0x07	; 7
    1324:	9e 17       	cp	r25, r30
    1326:	98 f4       	brcc	.+38     	; 0x134e <_ZN8REGISTER20setValueFromBeBufferEPh+0x34>
    value[i] = beBuffer[length-1-i];
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	29 2f       	mov	r18, r25
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	31 97       	sbiw	r30, 0x01	; 1
    1330:	e2 1b       	sub	r30, r18
    1332:	f3 0b       	sbc	r31, r19
    1334:	e6 0f       	add	r30, r22
    1336:	f7 1f       	adc	r31, r23
    1338:	80 81       	ld	r24, Z
    133a:	15 96       	adiw	r26, 0x05	; 5
    133c:	4d 91       	ld	r20, X+
    133e:	5c 91       	ld	r21, X
    1340:	16 97       	sbiw	r26, 0x06	; 6
    1342:	fa 01       	movw	r30, r20
    1344:	e2 0f       	add	r30, r18
    1346:	f3 1f       	adc	r31, r19
    1348:	80 83       	st	Z, r24
 */
void REGISTER::setValueFromBeBuffer(unsigned char* beBuffer)
{
  unsigned char i;

  for(i=0 ; i<length ; i++)
    134a:	9f 5f       	subi	r25, 0xFF	; 255
    134c:	e8 cf       	rjmp	.-48     	; 0x131e <_ZN8REGISTER20setValueFromBeBufferEPh+0x4>
    134e:	08 95       	ret

00001350 <_Z14pacKetReceivedP8CCPACKET>:
void SWAP::goToSleep(void)
{
  systemState = SYSTATE_RXOFF;
  panstamp.sleepSec(txInterval);
  systemState = SYSTATE_RXON;
}
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	c0 55       	subi	r28, 0x50	; 80
    135a:	d1 09       	sbc	r29, r1
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	fc 01       	movw	r30, r24
    1368:	20 81       	ld	r18, Z
    136a:	27 30       	cpi	r18, 0x07	; 7
    136c:	08 f4       	brcc	.+2      	; 0x1370 <_Z14pacKetReceivedP8CCPACKET+0x20>
    136e:	a8 c0       	rjmp	.+336    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    1370:	bc 01       	movw	r22, r24
    1372:	ce 01       	movw	r24, r28
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	0e 94 ac 0b 	call	0x1758	; 0x1758 <_ZN8SWPACKETC1EP8CCPACKET>
    137a:	2b 96       	adiw	r28, 0x0b	; 11
    137c:	8f ad       	ldd	r24, Y+63	; 0x3f
    137e:	2b 97       	sbiw	r28, 0x0b	; 11
    1380:	81 11       	cpse	r24, r1
    1382:	9e c0       	rjmp	.+316    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    1384:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <swap>
    1388:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <swap+0x1>
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	29 f0       	breq	.+10     	; 0x139a <_Z14pacKetReceivedP8CCPACKET+0x4a>
    1390:	be 01       	movw	r22, r28
    1392:	6f 5f       	subi	r22, 0xFF	; 255
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN8REPEATER13packetHandlerEP8SWPACKET>
    139a:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <swap+0x3>
    139e:	21 ff       	sbrs	r18, 1
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <_Z14pacKetReceivedP8CCPACKET+0x5c>
    13a2:	28 96       	adiw	r28, 0x08	; 8
    13a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    13a6:	28 97       	sbiw	r28, 0x08	; 8
    13a8:	81 ff       	sbrs	r24, 1
    13aa:	8a c0       	rjmp	.+276    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    13ac:	2a 96       	adiw	r28, 0x0a	; 10
    13ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    13b0:	2a 97       	sbiw	r28, 0x0a	; 10
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	89 f5       	brne	.+98     	; 0x1418 <_Z14pacKetReceivedP8CCPACKET+0xc8>
    13b6:	24 96       	adiw	r28, 0x04	; 4
    13b8:	2e ad       	ldd	r18, Y+62	; 0x3e
    13ba:	3f ad       	ldd	r19, Y+63	; 0x3f
    13bc:	24 97       	sbiw	r28, 0x04	; 4
    13be:	21 15       	cp	r18, r1
    13c0:	31 05       	cpc	r19, r1
    13c2:	31 f4       	brne	.+12     	; 0x13d0 <_Z14pacKetReceivedP8CCPACKET+0x80>
    13c4:	2d 96       	adiw	r28, 0x0d	; 13
    13c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    13c8:	2d 97       	sbiw	r28, 0x0d	; 13
    13ca:	88 23       	and	r24, r24
    13cc:	41 f0       	breq	.+16     	; 0x13de <_Z14pacKetReceivedP8CCPACKET+0x8e>
    13ce:	78 c0       	rjmp	.+240    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    13d0:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <swap+0x2>
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	28 17       	cp	r18, r24
    13d8:	39 07       	cpc	r19, r25
    13da:	09 f0       	breq	.+2      	; 0x13de <_Z14pacKetReceivedP8CCPACKET+0x8e>
    13dc:	71 c0       	rjmp	.+226    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    13de:	2c 96       	adiw	r28, 0x0c	; 12
    13e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    13e2:	2c 97       	sbiw	r28, 0x0c	; 12
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	28 17       	cp	r18, r24
    13e8:	39 07       	cpc	r19, r25
    13ea:	09 f0       	breq	.+2      	; 0x13ee <_Z14pacKetReceivedP8CCPACKET+0x9e>
    13ec:	69 c0       	rjmp	.+210    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    13ee:	2d 96       	adiw	r28, 0x0d	; 13
    13f0:	ef ad       	ldd	r30, Y+63	; 0x3f
    13f2:	2d 97       	sbiw	r28, 0x0d	; 13
    13f4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <regTableSize>
    13f8:	e8 17       	cp	r30, r24
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <_Z14pacKetReceivedP8CCPACKET+0xae>
    13fc:	61 c0       	rjmp	.+194    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	e3 5f       	subi	r30, 0xF3	; 243
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	09 f4       	brne	.+2      	; 0x1412 <_Z14pacKetReceivedP8CCPACKET+0xc2>
    1410:	57 c0       	rjmp	.+174    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    1412:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN8REGISTER7getDataEv>
    1416:	54 c0       	rjmp	.+168    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	58 f4       	brcc	.+22     	; 0x1432 <_Z14pacKetReceivedP8CCPACKET+0xe2>
    141c:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <swap+0xa>
    1420:	f0 91 5c 03 	lds	r31, 0x035C	; 0x80035c <swap+0xb>
    1424:	30 97       	sbiw	r30, 0x00	; 0
    1426:	09 f4       	brne	.+2      	; 0x142a <_Z14pacKetReceivedP8CCPACKET+0xda>
    1428:	4b c0       	rjmp	.+150    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    142a:	ce 01       	movw	r24, r28
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	09 95       	icall
    1430:	47 c0       	rjmp	.+142    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    1432:	82 30       	cpi	r24, 0x02	; 2
    1434:	09 f0       	breq	.+2      	; 0x1438 <_Z14pacKetReceivedP8CCPACKET+0xe8>
    1436:	44 c0       	rjmp	.+136    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    1438:	24 96       	adiw	r28, 0x04	; 4
    143a:	4e ad       	ldd	r20, Y+62	; 0x3e
    143c:	5f ad       	ldd	r21, Y+63	; 0x3f
    143e:	24 97       	sbiw	r28, 0x04	; 4
    1440:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <swap+0x2>
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	48 17       	cp	r20, r24
    1448:	59 07       	cpc	r21, r25
    144a:	d1 f5       	brne	.+116    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    144c:	2c 96       	adiw	r28, 0x0c	; 12
    144e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1450:	2c 97       	sbiw	r28, 0x0c	; 12
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	48 17       	cp	r20, r24
    1456:	59 07       	cpc	r21, r25
    1458:	99 f5       	brne	.+102    	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    145a:	2d 96       	adiw	r28, 0x0d	; 13
    145c:	ef ad       	ldd	r30, Y+63	; 0x3f
    145e:	2d 97       	sbiw	r28, 0x0d	; 13
    1460:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <regTableSize>
    1464:	e3 17       	cp	r30, r19
    1466:	60 f5       	brcc	.+88     	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	e3 5f       	subi	r30, 0xF3	; 243
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	80 81       	ld	r24, Z
    1474:	91 81       	ldd	r25, Z+1	; 0x01
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	19 f1       	breq	.+70     	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    147a:	20 ff       	sbrs	r18, 0
    147c:	11 c0       	rjmp	.+34     	; 0x14a0 <_Z14pacKetReceivedP8CCPACKET+0x150>
    147e:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <swap+0x4>
    1482:	29 96       	adiw	r28, 0x09	; 9
    1484:	2f ad       	ldd	r18, Y+63	; 0x3f
    1486:	29 97       	sbiw	r28, 0x09	; 9
    1488:	42 17       	cp	r20, r18
    148a:	51 f0       	breq	.+20     	; 0x14a0 <_Z14pacKetReceivedP8CCPACKET+0x150>
    148c:	38 30       	cpi	r19, 0x08	; 8
    148e:	28 f0       	brcs	.+10     	; 0x149a <_Z14pacKetReceivedP8CCPACKET+0x14a>
    1490:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <regTable+0xe>
    1494:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <regTable+0xf>
    1498:	11 c0       	rjmp	.+34     	; 0x14bc <_Z14pacKetReceivedP8CCPACKET+0x16c>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e c0       	rjmp	.+28     	; 0x14bc <_Z14pacKetReceivedP8CCPACKET+0x16c>
    14a0:	60 96       	adiw	r28, 0x10	; 16
    14a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    14a4:	60 97       	sbiw	r28, 0x10	; 16
    14a6:	fc 01       	movw	r30, r24
    14a8:	27 81       	ldd	r18, Z+7	; 0x07
    14aa:	32 13       	cpse	r19, r18
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <_Z14pacKetReceivedP8CCPACKET+0x16c>
    14ae:	2f 96       	adiw	r28, 0x0f	; 15
    14b0:	6e ad       	ldd	r22, Y+62	; 0x3e
    14b2:	7f ad       	ldd	r23, Y+63	; 0x3f
    14b4:	2f 97       	sbiw	r28, 0x0f	; 15
    14b6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN8REGISTER7setDataEPh>
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <_Z14pacKetReceivedP8CCPACKET+0x170>
    14bc:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN8REGISTER14sendSwapStatusEv>
    14c0:	c0 5b       	subi	r28, 0xB0	; 176
    14c2:	df 4f       	sbci	r29, 0xFF	; 255
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <_ZN4SWAP14enableRepeaterEh>:
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	ec 01       	movw	r28, r24
    14dc:	16 2f       	mov	r17, r22
    14de:	88 81       	ld	r24, Y
    14e0:	99 81       	ldd	r25, Y+1	; 0x01
    14e2:	89 2b       	or	r24, r25
    14e4:	91 f4       	brne	.+36     	; 0x150a <_ZN4SWAP14enableRepeaterEh+0x36>
    14e6:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZGVZN4SWAP14enableRepeaterEhE4repe>
    14ea:	81 11       	cpse	r24, r1
    14ec:	07 c0       	rjmp	.+14     	; 0x14fc <_ZN4SWAP14enableRepeaterEh+0x28>
    14ee:	8f ea       	ldi	r24, 0xAF	; 175
    14f0:	92 e0       	ldi	r25, 0x02	; 2
    14f2:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN8REPEATERC1Ev>
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <_ZGVZN4SWAP14enableRepeaterEhE4repe>
    14fc:	8f ea       	ldi	r24, 0xAF	; 175
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	99 83       	std	Y+1, r25	; 0x01
    1502:	88 83       	st	Y, r24
    1504:	61 2f       	mov	r22, r17
    1506:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <_ZN8REPEATER4initEh>
    150a:	11 11       	cpse	r17, r1
    150c:	07 c0       	rjmp	.+14     	; 0x151c <_ZN4SWAP14enableRepeaterEh+0x48>
    150e:	88 81       	ld	r24, Y
    1510:	99 81       	ldd	r25, Y+1	; 0x01
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <_ZN8REPEATER4stopEv>
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	08 95       	ret

00001524 <_ZN4SWAP23nvolatToFactoryDefaultsEv>:
 * nvolatToFactoryDefaults
 * 
 * Write default config values in non-volatile memory
 */
void SWAP::nvolatToFactoryDefaults(void)
{
    1524:	0f 93       	push	r16
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	2a 97       	sbiw	r28, 0x0a	; 10
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
  STORAGE nvMem;

  // Signature
  uint8_t signature[] = {NVOLAT_SIGNATURE_HIGH, NVOLAT_SIGNATURE_LOW};
    153a:	8b ea       	ldi	r24, 0xAB	; 171
    153c:	8f 83       	std	Y+7, r24	; 0x07
    153e:	8d ec       	ldi	r24, 0xCD	; 205
    1540:	88 87       	std	Y+8, r24	; 0x08
  nvMem.write(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    1542:	02 e0       	ldi	r16, 0x02	; 2
    1544:	28 e0       	ldi	r18, 0x08	; 8
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	be 01       	movw	r22, r28
    154a:	69 5f       	subi	r22, 0xF9	; 249
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
    154e:	ce 01       	movw	r24, r28
    1550:	0a 96       	adiw	r24, 0x0a	; 10
    1552:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN7STORAGE5writeEPhhhh>
  
  // Frequency channel
  uint8_t channel[] = {CCDEF_CHANNR};
    1556:	19 86       	std	Y+9, r1	; 0x09
  nvMem.write(channel, DEFAULT_NVOLAT_SECTION, NVOLAT_FREQ_CHANNEL, sizeof(channel));
    1558:	01 e0       	ldi	r16, 0x01	; 1
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	be 01       	movw	r22, r28
    1560:	67 5f       	subi	r22, 0xF7	; 247
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	ce 01       	movw	r24, r28
    1566:	0a 96       	adiw	r24, 0x0a	; 10
    1568:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN7STORAGE5writeEPhhhh>
  
  // Sync word
  uint8_t syncW[] = {CCDEF_SYNC1, CCDEF_SYNC0};
    156c:	85 eb       	ldi	r24, 0xB5	; 181
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	87 e4       	ldi	r24, 0x47	; 71
    1572:	8e 83       	std	Y+6, r24	; 0x06
  nvMem.write(syncW, DEFAULT_NVOLAT_SECTION, NVOLAT_SYNC_WORD, sizeof(syncW));
    1574:	02 e0       	ldi	r16, 0x02	; 2
    1576:	22 e0       	ldi	r18, 0x02	; 2
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	be 01       	movw	r22, r28
    157c:	6b 5f       	subi	r22, 0xFB	; 251
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	ce 01       	movw	r24, r28
    1582:	0a 96       	adiw	r24, 0x0a	; 10
    1584:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN7STORAGE5writeEPhhhh>
     * 
     * @return pseudo-random number
     */
     inline uint16_t GET_RANDOM(void)
     {
       return OSCCAL;
    1588:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

  // SWAP address (pseudo-random number)
  uint16_t random = panstamp.GET_RANDOM();
  uint8_t addr[] = {static_cast<uint8_t>((random >> 8) & 0xFF), static_cast<uint8_t>(random & 0xFF)};
    158c:	1b 82       	std	Y+3, r1	; 0x03
    158e:	8c 83       	std	Y+4, r24	; 0x04
  nvMem.write(addr, DEFAULT_NVOLAT_SECTION, NVOLAT_DEVICE_ADDR, sizeof(addr));
    1590:	24 e0       	ldi	r18, 0x04	; 4
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	be 01       	movw	r22, r28
    1596:	6d 5f       	subi	r22, 0xFD	; 253
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	ce 01       	movw	r24, r28
    159c:	0a 96       	adiw	r24, 0x0a	; 10
    159e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN7STORAGE5writeEPhhhh>
  
  // TX interval
  uint8_t txInt[] = {0xFF, 0};
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	1a 82       	std	Y+2, r1	; 0x02
  nvMem.write(txInt, DEFAULT_NVOLAT_SECTION, NVOLAT_TX_INTERVAL, sizeof(txInt));
    15a8:	26 e0       	ldi	r18, 0x06	; 6
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	be 01       	movw	r22, r28
    15ae:	6f 5f       	subi	r22, 0xFF	; 255
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	ce 01       	movw	r24, r28
    15b4:	0a 96       	adiw	r24, 0x0a	; 10
    15b6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN7STORAGE5writeEPhhhh>
}
    15ba:	2a 96       	adiw	r28, 0x0a	; 10
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	0f 91       	pop	r16
    15cc:	08 95       	ret

000015ce <_ZN4SWAP4initEv>:
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	00 d0       	rcall	.+0      	; 0x15dc <_ZN4SWAP4initEv+0xe>
    15dc:	1f 92       	push	r1
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	7c 01       	movw	r14, r24
  uint8_t i;
  STORAGE nvMem;

  // Read signature from info/eeprom memory
  uint8_t signature[2];
  nvMem.read(signature, DEFAULT_NVOLAT_SECTION, NVOLAT_SIGNATURE, sizeof(signature));
    15e4:	02 e0       	ldi	r16, 0x02	; 2
    15e6:	28 e0       	ldi	r18, 0x08	; 8
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	be 01       	movw	r22, r28
    15ec:	6f 5f       	subi	r22, 0xFF	; 255
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	ce 01       	movw	r24, r28
    15f2:	03 96       	adiw	r24, 0x03	; 3
    15f4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_ZN7STORAGE4readEPhhhh>

  // Correct signature in non-volatile memory?
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	8b 3a       	cpi	r24, 0xAB	; 171
    15fc:	19 f4       	brne	.+6      	; 0x1604 <_ZN4SWAP4initEv+0x36>
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	8d 3c       	cpi	r24, 0xCD	; 205
    1602:	19 f0       	breq	.+6      	; 0x160a <_ZN4SWAP4initEv+0x3c>
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  
    1604:	c7 01       	movw	r24, r14
    1606:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN4SWAP23nvolatToFactoryDefaultsEv>
 * init
 *
 * Initialize SWAP registers and stack
 */
void SWAP::init(void)
{
    160a:	10 e0       	ldi	r17, 0x00	; 0
  // Correct signature in non-volatile memory?
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  

  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    160c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <regTableSize>
    1610:	18 17       	cp	r17, r24
    1612:	60 f4       	brcc	.+24     	; 0x162c <_ZN4SWAP4initEv+0x5e>
    regTable[i]->init();
    1614:	e1 2f       	mov	r30, r17
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	e3 5f       	subi	r30, 0xF3	; 243
    161e:	fe 4f       	sbci	r31, 0xFE	; 254
    1620:	80 81       	ld	r24, Z
    1622:	91 81       	ldd	r25, Z+1	; 0x01
    1624:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZN8REGISTER4initEv>
  // Correct signature in non-volatile memory?
  if ((signature[0] != NVOLAT_SIGNATURE_HIGH) || (signature[1] != NVOLAT_SIGNATURE_LOW))
    nvolatToFactoryDefaults(); // Copy default settings in non-volatile memory  

  // Intialize registers
  for(i=0 ; i<regTableSize ; i++)
    1628:	1f 5f       	subi	r17, 0xFF	; 255
    162a:	f0 cf       	rjmp	.-32     	; 0x160c <_ZN4SWAP4initEv+0x3e>
    regTable[i]->init();

  // Config radio settings
  panstamp.radio.devAddress = devAddress & 0xFF; 
    162c:	f7 01       	movw	r30, r14
    162e:	82 81       	ldd	r24, Z+2	; 0x02
    1630:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <panstamp+0x9>
  panstamp.radio.setCCregs();
    1634:	89 e9       	ldi	r24, 0x99	; 153
    1636:	92 e0       	ldi	r25, 0x02	; 2
    1638:	0e 94 86 05 	call	0xb0c	; 0xb0c <_ZN6CC11019setCCregsEv>
     * 
     * @param funct pointer to the custom function
     */
     inline void attachInterrupt(void (*funct)(CCPACKET*))
     {
       ccPacketReceived = funct;
    163c:	88 ea       	ldi	r24, 0xA8	; 168
    163e:	99 e0       	ldi	r25, 0x09	; 9
    1640:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <panstamp+0xc>
    1644:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <panstamp+0xb>
  
  // Attach RF ISR
  panstamp.attachInterrupt(pacKetReceived);
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	08 95       	ret

0000165c <_GLOBAL__sub_I__Z14pacKetReceivedP8CCPACKET>:
 *
 * Class constructor
 */
SWAP::SWAP(void)
{  
  statusReceived = NULL;
    165c:	e1 e5       	ldi	r30, 0x51	; 81
    165e:	f3 e0       	ldi	r31, 0x03	; 3
    1660:	13 86       	std	Z+11, r1	; 0x0b
    1662:	12 86       	std	Z+10, r1	; 0x0a
  repeater = NULL;
    1664:	11 82       	std	Z+1, r1	; 0x01
    1666:	10 82       	st	Z, r1
  encryptPwd = NULL;
    1668:	11 86       	std	Z+9, r1	; 0x09
    166a:	10 86       	std	Z+8, r1	; 0x08
  security = 0;
    166c:	13 82       	std	Z+3, r1	; 0x03
    166e:	08 95       	ret

00001670 <_ZN8SWPACKETC1Ev>:
/**
 * SWPACKET
 * 
 * Class constructor
 */
SWPACKET::SWPACKET(void) 
    1670:	08 95       	ret

00001672 <_ZN8SWPACKET12smartEncryptEb>:
 *
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	dc 01       	movw	r26, r24
    1688:	a9 5b       	subi	r26, 0xB9	; 185
    168a:	bf 4f       	sbci	r27, 0xFF	; 255
    168c:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <swap+0x8>
    1690:	f0 91 5a 03 	lds	r31, 0x035A	; 0x80035a <swap+0x9>
  byte i, j = 0;
  static uint8_t newData[CCPACKET_DATA_LEN];

  if (decrypt)
    1694:	66 23       	and	r22, r22
    1696:	21 f0       	breq	.+8      	; 0x16a0 <_ZN8SWPACKET12smartEncryptEb+0x2e>
    nonce ^= swap.encryptPwd[9];
    1698:	31 85       	ldd	r19, Z+9	; 0x09
    169a:	2c 91       	ld	r18, X
    169c:	23 27       	eor	r18, r19
    169e:	2c 93       	st	X, r18

  function ^= swap.encryptPwd[11] ^ nonce;
    16a0:	2c 91       	ld	r18, X
    16a2:	ec 01       	movw	r28, r24
    16a4:	c8 5b       	subi	r28, 0xB8	; 184
    16a6:	df 4f       	sbci	r29, 0xFF	; 255
    16a8:	38 81       	ld	r19, Y
    16aa:	32 27       	eor	r19, r18
    16ac:	43 85       	ldd	r20, Z+11	; 0x0b
    16ae:	34 27       	eor	r19, r20
    16b0:	38 83       	st	Y, r19
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
    16b2:	25 97       	sbiw	r28, 0x05	; 5
    16b4:	32 85       	ldd	r19, Z+10	; 0x0a
    16b6:	32 27       	eor	r19, r18
    16b8:	48 81       	ld	r20, Y
    16ba:	59 81       	ldd	r21, Y+1	; 0x01
    16bc:	43 27       	eor	r20, r19
    16be:	59 83       	std	Y+1, r21	; 0x01
    16c0:	48 83       	st	Y, r20
  regAddr ^= swap.encryptPwd[8] ^ nonce;
    16c2:	27 96       	adiw	r28, 0x07	; 7
    16c4:	38 81       	ld	r19, Y
    16c6:	32 27       	eor	r19, r18
    16c8:	40 85       	ldd	r20, Z+8	; 0x08
    16ca:	34 27       	eor	r19, r20
    16cc:	38 83       	st	Y, r19
  regId ^= swap.encryptPwd[7] ^ nonce;
    16ce:	21 96       	adiw	r28, 0x01	; 1
    16d0:	38 81       	ld	r19, Y
    16d2:	32 27       	eor	r19, r18
    16d4:	47 81       	ldd	r20, Z+7	; 0x07
    16d6:	34 27       	eor	r19, r20
    16d8:	38 83       	st	Y, r19

  for(i=0 ; i<value.length ; i++)
    16da:	23 96       	adiw	r28, 0x03	; 3
    16dc:	78 81       	ld	r23, Y
    16de:	05 e6       	ldi	r16, 0x65	; 101
    16e0:	13 e0       	ldi	r17, 0x03	; 3
    16e2:	a1 2c       	mov	r10, r1
    16e4:	b1 2c       	mov	r11, r1
 * @param decrypt if true, Decrypt packet. Encrypt otherwise
 */
#ifndef SWAP_EXTENDED_ADDRESS
void SWPACKET::smartEncrypt(bool decrypt) 
{
  byte i, j = 0;
    16e6:	30 e0       	ldi	r19, 0x00	; 0
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    16e8:	7c 01       	movw	r14, r24
    16ea:	4c e4       	ldi	r20, 0x4C	; 76
    16ec:	e4 0e       	add	r14, r20
    16ee:	f1 1c       	adc	r15, r1
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    16f0:	a7 16       	cp	r10, r23
    16f2:	c8 f4       	brcc	.+50     	; 0x1726 <_ZN8SWPACKET12smartEncryptEb+0xb4>
  {
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    16f4:	e7 01       	movw	r28, r14
    16f6:	48 81       	ld	r20, Y
    16f8:	59 81       	ldd	r21, Y+1	; 0x01
    16fa:	4a 0d       	add	r20, r10
    16fc:	5b 1d       	adc	r21, r11
    16fe:	6f 01       	movw	r12, r30
    1700:	c3 0e       	add	r12, r19
    1702:	d1 1c       	adc	r13, r1
    1704:	ea 01       	movw	r28, r20
    1706:	58 81       	ld	r21, Y
    1708:	e6 01       	movw	r28, r12
    170a:	48 81       	ld	r20, Y
    170c:	45 27       	eor	r20, r21
    170e:	42 27       	eor	r20, r18
    1710:	e8 01       	movw	r28, r16
    1712:	49 93       	st	Y+, r20
    1714:	8e 01       	movw	r16, r28
    j++;
    1716:	3f 5f       	subi	r19, 0xFF	; 255
    if (j == 11)  // Don't re-use last byte from password
    1718:	3b 30       	cpi	r19, 0x0B	; 11
    171a:	09 f4       	brne	.+2      	; 0x171e <_ZN8SWPACKET12smartEncryptEb+0xac>
      j = 0;
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	df ef       	ldi	r29, 0xFF	; 255
    1720:	ad 1a       	sub	r10, r29
    1722:	bd 0a       	sbc	r11, r29
  function ^= swap.encryptPwd[11] ^ nonce;
  srcAddr ^= swap.encryptPwd[10] ^ nonce;
  regAddr ^= swap.encryptPwd[8] ^ nonce;
  regId ^= swap.encryptPwd[7] ^ nonce;

  for(i=0 ; i<value.length ; i++)
    1724:	e5 cf       	rjmp	.-54     	; 0x16f0 <_ZN8SWPACKET12smartEncryptEb+0x7e>
    newData[i] = value.data[i] ^ swap.encryptPwd[j] ^ nonce;
    j++;
    if (j == 11)  // Don't re-use last byte from password
      j = 0;
  }
  if (value.length > 0)
    1726:	77 23       	and	r23, r23
    1728:	39 f0       	breq	.+14     	; 0x1738 <_ZN8SWPACKET12smartEncryptEb+0xc6>
    value.data = newData;
    172a:	ec 01       	movw	r28, r24
    172c:	c4 5b       	subi	r28, 0xB4	; 180
    172e:	df 4f       	sbci	r29, 0xFF	; 255
    1730:	45 e6       	ldi	r20, 0x65	; 101
    1732:	53 e0       	ldi	r21, 0x03	; 3
    1734:	59 83       	std	Y+1, r21	; 0x01
    1736:	48 83       	st	Y, r20

  if (!decrypt)
    1738:	61 11       	cpse	r22, r1
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <_ZN8SWPACKET12smartEncryptEb+0xd0>
    nonce ^= swap.encryptPwd[9];
    173c:	81 85       	ldd	r24, Z+9	; 0x09
    173e:	28 27       	eor	r18, r24
    1740:	2c 93       	st	X, r18
}
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	cf 90       	pop	r12
    1752:	bf 90       	pop	r11
    1754:	af 90       	pop	r10
    1756:	08 95       	ret

00001758 <_ZN8SWPACKETC1EP8CCPACKET>:
 * 
 * Class constructor
 * 
 * @param packet Pointer to the raw CC1101 packet
 */
SWPACKET::SWPACKET(CCPACKET *packet) 
    1758:	cf 92       	push	r12
    175a:	df 92       	push	r13
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	fc 01       	movw	r30, r24
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
    176a:	db 01       	movw	r26, r22
    176c:	8d 91       	ld	r24, X+
    176e:	ef 01       	movw	r28, r30
    1770:	89 93       	st	Y+, r24
  for(i=0 ; i<ccPacket.length ; i++)
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	98 17       	cp	r25, r24
    1776:	21 f0       	breq	.+8      	; 0x1780 <_ZN8SWPACKETC1EP8CCPACKET+0x28>
    ccPacket.data[i] = packet->data[i];
    1778:	2d 91       	ld	r18, X+
    177a:	29 93       	st	Y+, r18
{
  uint8_t i;
   
  // Save raw data and length
  ccPacket.length = packet->length;
  for(i=0 ; i<ccPacket.length ; i++)
    177c:	9f 5f       	subi	r25, 0xFF	; 255
    177e:	fa cf       	rjmp	.-12     	; 0x1774 <_ZN8SWPACKETC1EP8CCPACKET+0x1c>
    ccPacket.data[i] = packet->data[i];
  
  hop = (ccPacket.data[2] >> 4) & 0x0F;
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	df 01       	movw	r26, r30
    1784:	ab 5b       	subi	r26, 0xBB	; 187
    1786:	bf 4f       	sbci	r27, 0xFF	; 255
    1788:	29 2f       	mov	r18, r25
    178a:	22 95       	swap	r18
    178c:	2f 70       	andi	r18, 0x0F	; 15
    178e:	2c 93       	st	X, r18
  security = ccPacket.data[2] & 0x0F;
    1790:	6f 01       	movw	r12, r30
    1792:	26 e4       	ldi	r18, 0x46	; 70
    1794:	c2 0e       	add	r12, r18
    1796:	d1 1c       	adc	r13, r1
    1798:	9f 70       	andi	r25, 0x0F	; 15
    179a:	d6 01       	movw	r26, r12
    179c:	9c 93       	st	X, r25
  // AES-128 encrypted?
  if (security & 0x04)
    aesCrypto();  // Decrypt
  #endif
  
  nonce = ccPacket.data[3];
    179e:	94 81       	ldd	r25, Z+4	; 0x04
    17a0:	11 96       	adiw	r26, 0x01	; 1
    17a2:	9c 93       	st	X, r25
  function = ccPacket.data[4] & ~SWAP_EXTENDED_ADDRESS_BIT;
    17a4:	95 81       	ldd	r25, Z+5	; 0x05
    17a6:	11 96       	adiw	r26, 0x01	; 1
    17a8:	29 2f       	mov	r18, r25
    17aa:	2f 77       	andi	r18, 0x7F	; 127
    17ac:	2c 93       	st	X, r18
    17ae:	11 96       	adiw	r26, 0x01	; 1
    17b0:	ef 01       	movw	r28, r30
    17b2:	cf 5b       	subi	r28, 0xBF	; 191
    17b4:	df 4f       	sbci	r29, 0xFF	; 255
    17b6:	8f 01       	movw	r16, r30
    17b8:	0d 5b       	subi	r16, 0xBD	; 189
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	bf 01       	movw	r22, r30
    17be:	66 5b       	subi	r22, 0xB6	; 182
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	af 01       	movw	r20, r30
    17c4:	45 5b       	subi	r20, 0xB5	; 181
    17c6:	5f 4f       	sbci	r21, 0xFF	; 255

  if (ccPacket.data[4] & SWAP_EXTENDED_ADDRESS_BIT)
    17c8:	97 ff       	sbrs	r25, 7
    17ca:	16 c0       	rjmp	.+44     	; 0x17f8 <_ZN8SWPACKETC1EP8CCPACKET+0xa0>
  {
    addrType = SWAPADDR_EXTENDED;
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	9c 93       	st	X, r25
    destAddr = ccPacket.data[0];
    destAddr <<= 8;
    destAddr |= ccPacket.data[1];
    17d0:	21 81       	ldd	r18, Z+1	; 0x01
    17d2:	32 81       	ldd	r19, Z+2	; 0x02
    17d4:	32 27       	eor	r19, r18
    17d6:	23 27       	eor	r18, r19
    17d8:	32 27       	eor	r19, r18
    17da:	39 83       	std	Y+1, r19	; 0x01
    17dc:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[5];
    srcAddr <<= 8;
    srcAddr |= ccPacket.data[6];
    17de:	26 81       	ldd	r18, Z+6	; 0x06
    17e0:	37 81       	ldd	r19, Z+7	; 0x07
    17e2:	32 27       	eor	r19, r18
    17e4:	23 27       	eor	r18, r19
    17e6:	32 27       	eor	r19, r18
    17e8:	e8 01       	movw	r28, r16
    17ea:	39 83       	std	Y+1, r19	; 0x01
    17ec:	28 83       	st	Y, r18
    regAddr = ccPacket.data[7];
    regAddr <<= 8;
    regAddr |= ccPacket.data[8];
    17ee:	91 85       	ldd	r25, Z+9	; 0x09
    17f0:	eb 01       	movw	r28, r22
    17f2:	98 83       	st	Y, r25
    regId = ccPacket.data[9];
    17f4:	92 85       	ldd	r25, Z+10	; 0x0a
    17f6:	0e c0       	rjmp	.+28     	; 0x1814 <_ZN8SWPACKETC1EP8CCPACKET+0xbc>
  }
  else
  {
    addrType = SWAPADDR_SIMPLE;
    17f8:	1c 92       	st	X, r1
    destAddr = ccPacket.data[0];
    17fa:	21 81       	ldd	r18, Z+1	; 0x01
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	39 83       	std	Y+1, r19	; 0x01
    1800:	28 83       	st	Y, r18
    srcAddr = ccPacket.data[1];
    1802:	22 81       	ldd	r18, Z+2	; 0x02
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	e8 01       	movw	r28, r16
    1808:	39 83       	std	Y+1, r19	; 0x01
    180a:	28 83       	st	Y, r18
    regAddr = ccPacket.data[5];
    180c:	96 81       	ldd	r25, Z+6	; 0x06
    180e:	eb 01       	movw	r28, r22
    1810:	98 83       	st	Y, r25
    regId = ccPacket.data[6];
    1812:	97 81       	ldd	r25, Z+7	; 0x07
    1814:	ea 01       	movw	r28, r20
    1816:	98 83       	st	Y, r25
  }

  value.data = ccPacket.data + SWAP_DATA_HEAD_LEN + 1;
    1818:	9f 01       	movw	r18, r30
    181a:	24 5b       	subi	r18, 0xB4	; 180
    181c:	3f 4f       	sbci	r19, 0xFF	; 255
    181e:	af 01       	movw	r20, r30
    1820:	48 5f       	subi	r20, 0xF8	; 248
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	e9 01       	movw	r28, r18
    1826:	59 83       	std	Y+1, r21	; 0x01
    1828:	48 83       	st	Y, r20
  value.length = ccPacket.length - SWAP_DATA_HEAD_LEN - 1;
    182a:	2e 5f       	subi	r18, 0xFE	; 254
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	87 50       	subi	r24, 0x07	; 7
    1830:	e9 01       	movw	r28, r18
    1832:	88 83       	st	Y, r24

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
    1834:	8c 91       	ld	r24, X
    1836:	81 11       	cpse	r24, r1
    1838:	10 c0       	rjmp	.+32     	; 0x185a <_ZN8SWPACKETC1EP8CCPACKET+0x102>
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
    183a:	d6 01       	movw	r26, r12
    183c:	8c 91       	ld	r24, X
    183e:	81 ff       	sbrs	r24, 1
    1840:	0c c0       	rjmp	.+24     	; 0x185a <_ZN8SWPACKETC1EP8CCPACKET+0x102>
      smartDecrypt();
    1842:	61 e0       	ldi	r22, 0x01	; 1
    1844:	cf 01       	movw	r24, r30
  }
  #endif
}
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
  #ifndef SWAP_EXTENDED_ADDRESS
  if (addrType == SWAPADDR_SIMPLE)
  {
    // Smart Encryption - Need to decrypt packet?
    if (security & 0x02)
      smartDecrypt();
    1856:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <_ZN8SWPACKET12smartEncryptEb>
  }
  #endif
}
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	df 90       	pop	r13
    1868:	cf 90       	pop	r12
    186a:	08 95       	ret

0000186c <_ZN8SWPACKET4sendEv>:
 * @return
 *  True if the transmission succeeds
 *  False otherwise
 */
bool SWPACKET::send(void)
{
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	c1 54       	subi	r28, 0x41	; 65
    1882:	d1 09       	sbc	r29, r1
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	8c 01       	movw	r16, r24
  byte i;
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
    1890:	fc 01       	movw	r30, r24
    1892:	e1 5b       	subi	r30, 0xB1	; 177
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 81       	ld	r24, Z
    1898:	98 01       	movw	r18, r16
    189a:	22 5b       	subi	r18, 0xB2	; 178
    189c:	3f 4f       	sbci	r19, 0xFF	; 255
    189e:	79 01       	movw	r14, r18
    18a0:	e7 54       	subi	r30, 0x47	; 71
    18a2:	f1 09       	sbc	r31, r1
    18a4:	d9 01       	movw	r26, r18
    18a6:	81 11       	cpse	r24, r1
    18a8:	10 c0       	rjmp	.+32     	; 0x18ca <_ZN8SWPACKET4sendEv+0x5e>
    18aa:	8c 91       	ld	r24, X
    18ac:	90 e0       	ldi	r25, 0x00	; 0
  {
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
    18ae:	a8 01       	movw	r20, r16
    18b0:	44 5b       	subi	r20, 0xB4	; 180
    18b2:	5f 4f       	sbci	r21, 0xFF	; 255
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	d8 f0       	brcs	.+54     	; 0x18ee <_ZN8SWPACKET4sendEv+0x82>
    18b8:	da 01       	movw	r26, r20
    18ba:	2d 91       	ld	r18, X+
    18bc:	3c 91       	ld	r19, X
    18be:	d9 01       	movw	r26, r18
    18c0:	a8 0f       	add	r26, r24
    18c2:	b9 1f       	adc	r27, r25
    18c4:	2c 91       	ld	r18, X
    18c6:	21 93       	st	Z+, r18
  boolean res;

  // LE -> BE conversion for numeric values
  if (value.type == SWDTYPE_INTEGER)
  {
    for(i=0 ; i<value.length ; i++)
    18c8:	f5 cf       	rjmp	.-22     	; 0x18b4 <_ZN8SWPACKET4sendEv+0x48>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    18ca:	3c 91       	ld	r19, X
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    18d0:	a8 01       	movw	r20, r16
    18d2:	44 5b       	subi	r20, 0xB4	; 180
    18d4:	5f 4f       	sbci	r21, 0xFF	; 255
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    18d6:	83 17       	cp	r24, r19
    18d8:	50 f4       	brcc	.+20     	; 0x18ee <_ZN8SWPACKET4sendEv+0x82>
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[i];
    18da:	da 01       	movw	r26, r20
    18dc:	6d 91       	ld	r22, X+
    18de:	7c 91       	ld	r23, X
    18e0:	db 01       	movw	r26, r22
    18e2:	a8 0f       	add	r26, r24
    18e4:	b9 1f       	adc	r27, r25
    18e6:	2c 91       	ld	r18, X
    18e8:	21 93       	st	Z+, r18
    18ea:	01 96       	adiw	r24, 0x01	; 1
    for(i=0 ; i<value.length ; i++)
      ccPacket.data[i+SWAP_DATA_HEAD_LEN + 1] = value.data[value.length-1-i];
  }
  else
  {
    for(i=0 ; i<value.length ; i++)
    18ec:	f4 cf       	rjmp	.-24     	; 0x18d6 <_ZN8SWPACKET4sendEv+0x6a>
  }

  // Smart encryption only available for simple (1-byte) addressing schema
  #ifndef SWAP_EXTENDED_ADDRESS
    // Need to encrypt packet?
    if (security & 0x02)
    18ee:	68 01       	movw	r12, r16
    18f0:	b6 e4       	ldi	r27, 0x46	; 70
    18f2:	cb 0e       	add	r12, r27
    18f4:	d1 1c       	adc	r13, r1
    18f6:	f6 01       	movw	r30, r12
    18f8:	80 81       	ld	r24, Z
    18fa:	81 ff       	sbrs	r24, 1
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <_ZN8SWPACKET4sendEv+0x9a>
      smartEncrypt();
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	c8 01       	movw	r24, r16
    1902:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZN8SWPACKET12smartEncryptEb>
  #endif

  ccPacket.length = value.length + SWAP_DATA_HEAD_LEN + 1;
    1906:	d7 01       	movw	r26, r14
    1908:	8c 91       	ld	r24, X
    190a:	89 5f       	subi	r24, 0xF9	; 249
    190c:	f8 01       	movw	r30, r16
    190e:	80 83       	st	Z, r24

  ccPacket.data[2] = (hop << 4) & 0xF0;
    1910:	eb 5b       	subi	r30, 0xBB	; 187
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
  ccPacket.data[2] |= security & 0x0F;
    1914:	80 81       	ld	r24, Z
    1916:	f0 e1       	ldi	r31, 0x10	; 16
    1918:	8f 9f       	mul	r24, r31
    191a:	c0 01       	movw	r24, r0
    191c:	11 24       	eor	r1, r1
    191e:	d6 01       	movw	r26, r12
    1920:	9c 91       	ld	r25, X
    1922:	9f 70       	andi	r25, 0x0F	; 15
    1924:	89 2b       	or	r24, r25
    1926:	f8 01       	movw	r30, r16
    1928:	83 83       	std	Z+3, r24	; 0x03
  ccPacket.data[3] = nonce;
    192a:	e9 5b       	subi	r30, 0xB9	; 185
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	80 81       	ld	r24, Z
    1930:	d8 01       	movw	r26, r16
    1932:	14 96       	adiw	r26, 0x04	; 4
    1934:	8c 93       	st	X, r24
    1936:	14 97       	sbiw	r26, 0x04	; 4
    ccPacket.data[6] = srcAddr & 0xFF;
    ccPacket.data[7] = (regAddr >> 8) & 0xFF;
    ccPacket.data[8] = regAddr & 0xFF;
    ccPacket.data[9] = regId;
  #else
    addrType = SWAPADDR_SIMPLE;
    1938:	32 96       	adiw	r30, 0x02	; 2
    193a:	10 82       	st	Z, r1
    ccPacket.data[0] = destAddr;
    193c:	38 97       	sbiw	r30, 0x08	; 8
    193e:	80 81       	ld	r24, Z
    1940:	f8 01       	movw	r30, r16
    1942:	81 83       	std	Z+1, r24	; 0x01
    ccPacket.data[1] = srcAddr;
    1944:	ed 5b       	subi	r30, 0xBD	; 189
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	80 81       	ld	r24, Z
    194a:	12 96       	adiw	r26, 0x02	; 2
    194c:	8c 93       	st	X, r24
    194e:	12 97       	sbiw	r26, 0x02	; 2
    ccPacket.data[4] = function;
    1950:	35 96       	adiw	r30, 0x05	; 5
    1952:	80 81       	ld	r24, Z
    1954:	f8 01       	movw	r30, r16
    1956:	85 83       	std	Z+5, r24	; 0x05
    ccPacket.data[5] = regAddr;
    1958:	e6 5b       	subi	r30, 0xB6	; 182
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 81       	ld	r24, Z
    195e:	16 96       	adiw	r26, 0x06	; 6
    1960:	8c 93       	st	X, r24
    ccPacket.data[6] = regId;
    1962:	31 96       	adiw	r30, 0x01	; 1
    1964:	80 81       	ld	r24, Z
    1966:	f8 01       	movw	r30, r16
    1968:	87 83       	std	Z+7, r24	; 0x07
    196a:	93 e0       	ldi	r25, 0x03	; 3
    196c:	f9 2e       	mov	r15, r25
    196e:	81 e4       	ldi	r24, 0x41	; 65
    1970:	f8 01       	movw	r30, r16
    1972:	de 01       	movw	r26, r28
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	01 90       	ld	r0, Z+
    1978:	0d 92       	st	X+, r0
    197a:	8a 95       	dec	r24
    197c:	e1 f7       	brne	.-8      	; 0x1976 <_ZN8SWPACKET4sendEv+0x10a>
     *  True if the transmission succeeds
     *  False otherwise
     */
    inline bool sendData(CCPACKET packet)
    {
      return radio.sendData(packet);
    197e:	2d b7       	in	r18, 0x3d	; 61
    1980:	3e b7       	in	r19, 0x3e	; 62
    1982:	21 54       	subi	r18, 0x41	; 65
    1984:	31 09       	sbc	r19, r1
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	3e bf       	out	0x3e, r19	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	2d bf       	out	0x3d, r18	; 61
    1990:	ad b7       	in	r26, 0x3d	; 61
    1992:	be b7       	in	r27, 0x3e	; 62
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	81 e4       	ldi	r24, 0x41	; 65
    1998:	fe 01       	movw	r30, r28
    199a:	31 96       	adiw	r30, 0x01	; 1
    199c:	01 90       	ld	r0, Z+
    199e:	0d 92       	st	X+, r0
    19a0:	8a 95       	dec	r24
    19a2:	e1 f7       	brne	.-8      	; 0x199c <_ZN8SWPACKET4sendEv+0x130>
    19a4:	89 e9       	ldi	r24, 0x99	; 153
    19a6:	92 e0       	ldi	r25, 0x02	; 2
    19a8:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN6CC11018sendDataE8CCPACKET>
  if (security & 0x04)
    aesCrypto();  // Encrypt
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	81 11       	cpse	r24, r1
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <_ZN8SWPACKET4sendEv+0x16c>
    19ba:	fa 94       	dec	r15
    19bc:	ff 20       	and	r15, r15
    19be:	61 f0       	breq	.+24     	; 0x19d8 <_ZN8SWPACKET4sendEv+0x16c>
  {
    i--;
    delay(SWAP_TX_DELAY);
    19c0:	60 91 a1 02 	lds	r22, 0x02A1	; 0x8002a1 <panstamp+0x9>
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	66 0f       	add	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	07 2e       	mov	r0, r23
    19cc:	00 0c       	add	r0, r0
    19ce:	88 0b       	sbc	r24, r24
    19d0:	99 0b       	sbc	r25, r25
    19d2:	0e 94 a3 07 	call	0xf46	; 0xf46 <delay>
  if (security & 0x04)
    aesCrypto();  // Encrypt
  #endif

  i = SWAP_NB_TX_TRIES;
  while(!(res = panstamp.sendData(ccPacket)) && i>1)
    19d6:	cb cf       	rjmp	.-106    	; 0x196e <_ZN8SWPACKET4sendEv+0x102>
    i--;
    delay(SWAP_TX_DELAY);
  }

  return res;
}
    19d8:	cf 5b       	subi	r28, 0xBF	; 191
    19da:	df 4f       	sbci	r29, 0xFF	; 255
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	08 95       	ret

000019f8 <_ZN8SWSTATUSC1EhPhh7SWDTYPE>:
 * @param rId Register id
 * @param val	Pointer to new value
 * @param len Buffer length
 * @param type type of data contained
 */
SWSTATUS::SWSTATUS(unsigned char rId, unsigned char *val, unsigned char len, SWDTYPE type) 
    19f8:	df 92       	push	r13
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	ec 01       	movw	r28, r24
    1a08:	d6 2e       	mov	r13, r22
    1a0a:	7a 01       	movw	r14, r20
    1a0c:	12 2f       	mov	r17, r18
    1a0e:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8SWPACKETC1Ev>
{
  destAddr = SWAP_BCAST_ADDR;
    1a12:	fe 01       	movw	r30, r28
    1a14:	ef 5b       	subi	r30, 0xBF	; 191
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	11 82       	std	Z+1, r1	; 0x01
    1a1a:	10 82       	st	Z, r1
  srcAddr = swap.devAddress;
    1a1c:	e1 e5       	ldi	r30, 0x51	; 81
    1a1e:	f3 e0       	ldi	r31, 0x03	; 3
    1a20:	92 81       	ldd	r25, Z+2	; 0x02
    1a22:	de 01       	movw	r26, r28
    1a24:	ad 5b       	subi	r26, 0xBD	; 189
    1a26:	bf 4f       	sbci	r27, 0xFF	; 255
    1a28:	29 2f       	mov	r18, r25
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	11 96       	adiw	r26, 0x01	; 1
    1a2e:	3c 93       	st	X, r19
    1a30:	2e 93       	st	-X, r18
  hop = 0;
    1a32:	12 96       	adiw	r26, 0x02	; 2
    1a34:	1c 92       	st	X, r1
  security = swap.security & 0x0F;
    1a36:	11 96       	adiw	r26, 0x01	; 1
    1a38:	83 81       	ldd	r24, Z+3	; 0x03
    1a3a:	8f 70       	andi	r24, 0x0F	; 15
    1a3c:	8c 93       	st	X, r24
  nonce = ++swap.nonce;
    1a3e:	84 81       	ldd	r24, Z+4	; 0x04
    1a40:	8f 5f       	subi	r24, 0xFF	; 255
    1a42:	84 83       	std	Z+4, r24	; 0x04
    1a44:	fe 01       	movw	r30, r28
    1a46:	e9 5b       	subi	r30, 0xB9	; 185
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 83       	st	Z, r24
  function = SWAPFUNCT_STA;
    1a4c:	31 96       	adiw	r30, 0x01	; 1
    1a4e:	10 82       	st	Z, r1
  regAddr = swap.devAddress;
    1a50:	32 96       	adiw	r30, 0x02	; 2
    1a52:	90 83       	st	Z, r25
  regId = rId;
    1a54:	31 96       	adiw	r30, 0x01	; 1
    1a56:	d0 82       	st	Z, r13
  value.length = len;
    1a58:	33 96       	adiw	r30, 0x03	; 3
    1a5a:	10 83       	st	Z, r17
  value.data = val;
    1a5c:	32 97       	sbiw	r30, 0x02	; 2
    1a5e:	f1 82       	std	Z+1, r15	; 0x01
    1a60:	e0 82       	st	Z, r14
  value.type = type;
    1a62:	c1 5b       	subi	r28, 0xB1	; 177
    1a64:	df 4f       	sbci	r29, 0xFF	; 255
    1a66:	08 83       	st	Y, r16
}
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	df 90       	pop	r13
    1a76:	08 95       	ret

00001a78 <__vector_6>:
  MCUSR &= ~(1<<WDRF);
  // start timed sequence
  WDTCSR |= (1<<WDCE) | (1<<WDE);
  // set new watchdog timeout value
  WDTCSR = bb;
  WDTCSR |= _BV(WDIE);    // Enable Watchdog interrupt
    1a78:	1f 92       	push	r1
    1a7a:	0f 92       	push	r0
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	0f 92       	push	r0
    1a80:	11 24       	eor	r1, r1
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_9>:

/**
 * Timer 2 (RTC) ISR routine
 */
ISR(TIMER2_OVF_vect)
{
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	8f 93       	push	r24
    1a98:	9f 93       	push	r25
    1a9a:	af 93       	push	r26
    1a9c:	bf 93       	push	r27
  AVRRTC::count++;    // Increment counter
    1a9e:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_ZN6AVRRTC5countE>
    1aa2:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <_ZN6AVRRTC5countE+0x1>
    1aa6:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <_ZN6AVRRTC5countE+0x2>
    1aaa:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <_ZN6AVRRTC5countE+0x3>
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	a1 1d       	adc	r26, r1
    1ab2:	b1 1d       	adc	r27, r1
    1ab4:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <_ZN6AVRRTC5countE>
    1ab8:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <_ZN6AVRRTC5countE+0x1>
    1abc:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <_ZN6AVRRTC5countE+0x2>
    1ac0:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <_ZN6AVRRTC5countE+0x3>
}
    1ac4:	bf 91       	pop	r27
    1ac6:	af 91       	pop	r26
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	0f 90       	pop	r0
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	0f 90       	pop	r0
    1ad2:	1f 90       	pop	r1
    1ad4:	18 95       	reti

00001ad6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1ad6:	08 95       	ret

00001ad8 <_ZN7STORAGE4readEPhhhh>:
 * @pararm length Length to be read
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    1ae8:	41 11       	cpse	r20, r1
    1aea:	1a c0       	rjmp	.+52     	; 0x1b20 <_ZN7STORAGE4readEPhhhh+0x48>
    1aec:	7b 01       	movw	r14, r22
  {
    cli();
    1aee:	f8 94       	cli
    1af0:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    1af2:	10 e0       	ldi	r17, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    1af4:	c2 2f       	mov	r28, r18
    1af6:	d0 e0       	ldi	r29, 0x00	; 0
    1af8:	c6 1b       	sub	r28, r22
    1afa:	d7 0b       	sbc	r29, r23
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    1afc:	80 2f       	mov	r24, r16
    1afe:	96 01       	movw	r18, r12
    1b00:	2e 19       	sub	r18, r14
    1b02:	3f 09       	sbc	r19, r15
    1b04:	20 17       	cp	r18, r16
    1b06:	31 07       	cpc	r19, r17
    1b08:	48 f4       	brcc	.+18     	; 0x1b1c <_ZN7STORAGE4readEPhhhh+0x44>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	8c 0d       	add	r24, r12
    1b0e:	9d 1d       	adc	r25, r13
    1b10:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <eeprom_read_byte>
    1b14:	f6 01       	movw	r30, r12
    1b16:	81 93       	st	Z+, r24
    1b18:	6f 01       	movw	r12, r30
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    1b1a:	f0 cf       	rjmp	.-32     	; 0x1afc <_ZN7STORAGE4readEPhhhh+0x24>
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
    1b1c:	78 94       	sei
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <_ZN7STORAGE4readEPhhhh+0x4a>
 *
 * @return amount of bytes read
 */
uint8_t STORAGE::read(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    1b20:	80 e0       	ldi	r24, 0x00	; 0
      buffer[i] = eeprom_read_byte((uint8_t *) position+i);
    sei();
  }
  
  return i;
}
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	08 95       	ret

00001b34 <_ZN7STORAGE5writeEPhhhh>:
 * @pararm length Length to be written
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
  uint16_t i = 0;
  
  if (section == 0)
    1b44:	41 11       	cpse	r20, r1
    1b46:	19 c0       	rjmp	.+50     	; 0x1b7a <_ZN7STORAGE5writeEPhhhh+0x46>
  {
    cli();
    1b48:	f8 94       	cli
    1b4a:	6b 01       	movw	r12, r22
    for (i=0 ; i<length ; i++)
    1b4c:	e1 2c       	mov	r14, r1
    1b4e:	f1 2c       	mov	r15, r1
    1b50:	10 e0       	ldi	r17, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    1b52:	c2 2f       	mov	r28, r18
    1b54:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    1b56:	80 2f       	mov	r24, r16
    1b58:	e0 16       	cp	r14, r16
    1b5a:	f1 06       	cpc	r15, r17
    1b5c:	60 f4       	brcc	.+24     	; 0x1b76 <_ZN7STORAGE5writeEPhhhh+0x42>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    1b5e:	f6 01       	movw	r30, r12
    1b60:	61 91       	ld	r22, Z+
    1b62:	6f 01       	movw	r12, r30
    1b64:	ce 01       	movw	r24, r28
    1b66:	8e 0d       	add	r24, r14
    1b68:	9f 1d       	adc	r25, r15
    1b6a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <eeprom_write_byte>
  uint16_t i = 0;
  
  if (section == 0)
  {
    cli();
    for (i=0 ; i<length ; i++)
    1b6e:	ff ef       	ldi	r31, 0xFF	; 255
    1b70:	ef 1a       	sub	r14, r31
    1b72:	ff 0a       	sbc	r15, r31
    1b74:	f0 cf       	rjmp	.-32     	; 0x1b56 <_ZN7STORAGE5writeEPhhhh+0x22>
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
    1b76:	78 94       	sei
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <_ZN7STORAGE5writeEPhhhh+0x48>
 *
 * @return amount of bytes copied
 */
uint8_t STORAGE::write(uint8_t *buffer, uint8_t section, uint8_t position, uint8_t length)
{
  uint16_t i = 0;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
      eeprom_write_byte((uint8_t *) position+i, buffer[i]);
    sei();
  }
  
  return i;
}
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	08 95       	ret

00001b8e <_ZN8REPEATER4initEh>:
 *
 * Start repeater
 */
void REPEATER::start(void)
{
  enabled = true;
    1b8e:	fc 01       	movw	r30, r24
    1b90:	60 83       	st	Z, r22
    1b92:	ef 55       	subi	r30, 0x5F	; 95
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	21 e0       	ldi	r18, 0x01	; 1
    1b98:	20 83       	st	Z, r18
    1b9a:	08 95       	ret

00001b9c <_ZN8REPEATERC1Ev>:
    1b9c:	08 95       	ret

00001b9e <_ZN8REPEATER15saveTransactionEP8SWPACKET>:
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	7c 01       	movw	r14, r24
    1bac:	8b 01       	movw	r16, r22
    1bae:	c0 91 a6 03 	lds	r28, 0x03A6	; 0x8003a6 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    1bb2:	d0 e0       	ldi	r29, 0x00	; 0
    1bb4:	0e 94 72 07 	call	0xee4	; 0xee4 <millis>
    1bb8:	23 e0       	ldi	r18, 0x03	; 3
    1bba:	cc 0f       	add	r28, r28
    1bbc:	dd 1f       	adc	r29, r29
    1bbe:	2a 95       	dec	r18
    1bc0:	e1 f7       	brne	.-8      	; 0x1bba <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x1c>
    1bc2:	ce 0d       	add	r28, r14
    1bc4:	df 1d       	adc	r29, r15
    1bc6:	69 83       	std	Y+1, r22	; 0x01
    1bc8:	7a 83       	std	Y+2, r23	; 0x02
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	20 91 a6 03 	lds	r18, 0x03A6	; 0x8003a6 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	e8 5b       	subi	r30, 0xB8	; 184
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	30 81       	ld	r19, Z
    1bda:	82 2f       	mov	r24, r18
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	f7 01       	movw	r30, r14
    1be0:	48 e0       	ldi	r20, 0x08	; 8
    1be2:	24 9f       	mul	r18, r20
    1be4:	e0 0d       	add	r30, r0
    1be6:	f1 1d       	adc	r31, r1
    1be8:	11 24       	eor	r1, r1
    1bea:	35 83       	std	Z+5, r19	; 0x05
    1bec:	d8 01       	movw	r26, r16
    1bee:	ad 5b       	subi	r26, 0xBD	; 189
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	2c 91       	ld	r18, X
    1bf4:	26 83       	std	Z+6, r18	; 0x06
    1bf6:	14 96       	adiw	r26, 0x04	; 4
    1bf8:	2c 91       	ld	r18, X
    1bfa:	27 83       	std	Z+7, r18	; 0x07
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	e6 5b       	subi	r30, 0xB6	; 182
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	40 81       	ld	r20, Z
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	9c 01       	movw	r18, r24
    1c08:	53 e0       	ldi	r21, 0x03	; 3
    1c0a:	22 0f       	add	r18, r18
    1c0c:	33 1f       	adc	r19, r19
    1c0e:	5a 95       	dec	r21
    1c10:	e1 f7       	brne	.-8      	; 0x1c0a <_ZN8REPEATER15saveTransactionEP8SWPACKET+0x6c>
    1c12:	f7 01       	movw	r30, r14
    1c14:	e2 0f       	add	r30, r18
    1c16:	f3 1f       	adc	r31, r19
    1c18:	40 83       	st	Z, r20
    1c1a:	64 e1       	ldi	r22, 0x14	; 20
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__divmodhi4>
    1c22:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <_ZZN8REPEATER15saveTransactionEP8SWPACKETE16transactionIndex>
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	08 95       	ret

00001c34 <_ZN8REPEATER13packetHandlerEP8SWPACKET>:
    1c34:	4f 92       	push	r4
    1c36:	5f 92       	push	r5
    1c38:	6f 92       	push	r6
    1c3a:	7f 92       	push	r7
    1c3c:	8f 92       	push	r8
    1c3e:	9f 92       	push	r9
    1c40:	af 92       	push	r10
    1c42:	bf 92       	push	r11
    1c44:	cf 92       	push	r12
    1c46:	df 92       	push	r13
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	fc 01       	movw	r30, r24
    1c56:	ef 55       	subi	r30, 0x5F	; 95
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	20 81       	ld	r18, Z
    1c5c:	22 23       	and	r18, r18
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x2e>
    1c60:	86 c0       	rjmp	.+268    	; 0x1d6e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    1c62:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <swap+0x2>
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	fb 01       	movw	r30, r22
    1c6a:	ef 5b       	subi	r30, 0xBF	; 191
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	40 81       	ld	r20, Z
    1c70:	51 81       	ldd	r21, Z+1	; 0x01
    1c72:	42 17       	cp	r20, r18
    1c74:	53 07       	cpc	r21, r19
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x46>
    1c78:	7a c0       	rjmp	.+244    	; 0x1d6e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    1c7a:	4b 01       	movw	r8, r22
    1c7c:	25 e4       	ldi	r18, 0x45	; 69
    1c7e:	82 0e       	add	r8, r18
    1c80:	91 1c       	adc	r9, r1
    1c82:	f4 01       	movw	r30, r8
    1c84:	30 81       	ld	r19, Z
    1c86:	fc 01       	movw	r30, r24
    1c88:	20 81       	ld	r18, Z
    1c8a:	32 17       	cp	r19, r18
    1c8c:	08 f0       	brcs	.+2      	; 0x1c90 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x5c>
    1c8e:	6f c0       	rjmp	.+222    	; 0x1d6e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    1c90:	eb 01       	movw	r28, r22
    1c92:	8c 01       	movw	r16, r24
    1c94:	7c 01       	movw	r14, r24
    1c96:	2c 01       	movw	r4, r24
    1c98:	f0 ea       	ldi	r31, 0xA0	; 160
    1c9a:	4f 0e       	add	r4, r31
    1c9c:	51 1c       	adc	r5, r1
    1c9e:	3b 01       	movw	r6, r22
    1ca0:	2a e4       	ldi	r18, 0x4A	; 74
    1ca2:	62 0e       	add	r6, r18
    1ca4:	71 1c       	adc	r7, r1
    1ca6:	6b 01       	movw	r12, r22
    1ca8:	88 e4       	ldi	r24, 0x48	; 72
    1caa:	c8 0e       	add	r12, r24
    1cac:	d1 1c       	adc	r13, r1
    1cae:	5b 01       	movw	r10, r22
    1cb0:	e7 e4       	ldi	r30, 0x47	; 71
    1cb2:	ae 0e       	add	r10, r30
    1cb4:	b1 1c       	adc	r11, r1
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	90 85       	ldd	r25, Z+8	; 0x08
    1cba:	f3 01       	movw	r30, r6
    1cbc:	80 81       	ld	r24, Z
    1cbe:	98 17       	cp	r25, r24
    1cc0:	39 f0       	breq	.+14     	; 0x1cd0 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x9c>
    1cc2:	f8 e0       	ldi	r31, 0x08	; 8
    1cc4:	ef 0e       	add	r14, r31
    1cc6:	f1 1c       	adc	r15, r1
    1cc8:	4e 14       	cp	r4, r14
    1cca:	5f 04       	cpc	r5, r15
    1ccc:	a1 f7       	brne	.-24     	; 0x1cb6 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x82>
    1cce:	1f c0       	rjmp	.+62     	; 0x1d0e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0xda>
    1cd0:	f7 01       	movw	r30, r14
    1cd2:	95 81       	ldd	r25, Z+5	; 0x05
    1cd4:	f6 01       	movw	r30, r12
    1cd6:	80 81       	ld	r24, Z
    1cd8:	98 13       	cpse	r25, r24
    1cda:	f3 cf       	rjmp	.-26     	; 0x1cc2 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
    1cdc:	f7 01       	movw	r30, r14
    1cde:	97 81       	ldd	r25, Z+7	; 0x07
    1ce0:	f5 01       	movw	r30, r10
    1ce2:	80 81       	ld	r24, Z
    1ce4:	98 13       	cpse	r25, r24
    1ce6:	ed cf       	rjmp	.-38     	; 0x1cc2 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
    1ce8:	0e 94 72 07 	call	0xee4	; 0xee4 <millis>
    1cec:	f7 01       	movw	r30, r14
    1cee:	21 81       	ldd	r18, Z+1	; 0x01
    1cf0:	32 81       	ldd	r19, Z+2	; 0x02
    1cf2:	43 81       	ldd	r20, Z+3	; 0x03
    1cf4:	54 81       	ldd	r21, Z+4	; 0x04
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	82 1b       	sub	r24, r18
    1cfc:	93 0b       	sbc	r25, r19
    1cfe:	a4 0b       	sbc	r26, r20
    1d00:	b5 0b       	sbc	r27, r21
    1d02:	80 3d       	cpi	r24, 0xD0	; 208
    1d04:	97 40       	sbci	r25, 0x07	; 7
    1d06:	a1 05       	cpc	r26, r1
    1d08:	b1 05       	cpc	r27, r1
    1d0a:	d8 f6       	brcc	.-74     	; 0x1cc2 <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x8e>
    1d0c:	30 c0       	rjmp	.+96     	; 0x1d6e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ed 5b       	subi	r30, 0xBD	; 189
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <swap+0x2>
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	80 83       	st	Z, r24
    1d1e:	f4 01       	movw	r30, r8
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 5f       	subi	r24, 0xFF	; 255
    1d24:	80 83       	st	Z, r24
    1d26:	60 91 a1 02 	lds	r22, 0x02A1	; 0x8002a1 <panstamp+0x9>
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	66 0f       	add	r22, r22
    1d2e:	77 1f       	adc	r23, r23
    1d30:	07 2e       	mov	r0, r23
    1d32:	00 0c       	add	r0, r0
    1d34:	88 0b       	sbc	r24, r24
    1d36:	99 0b       	sbc	r25, r25
    1d38:	0e 94 a3 07 	call	0xf46	; 0xf46 <delay>
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN8SWPACKET4sendEv>
    1d42:	88 23       	and	r24, r24
    1d44:	a1 f0       	breq	.+40     	; 0x1d6e <_ZN8REPEATER13packetHandlerEP8SWPACKET+0x13a>
    1d46:	be 01       	movw	r22, r28
    1d48:	c8 01       	movw	r24, r16
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	df 90       	pop	r13
    1d58:	cf 90       	pop	r12
    1d5a:	bf 90       	pop	r11
    1d5c:	af 90       	pop	r10
    1d5e:	9f 90       	pop	r9
    1d60:	8f 90       	pop	r8
    1d62:	7f 90       	pop	r7
    1d64:	6f 90       	pop	r6
    1d66:	5f 90       	pop	r5
    1d68:	4f 90       	pop	r4
    1d6a:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <_ZN8REPEATER15saveTransactionEP8SWPACKET>
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	ff 90       	pop	r15
    1d78:	ef 90       	pop	r14
    1d7a:	df 90       	pop	r13
    1d7c:	cf 90       	pop	r12
    1d7e:	bf 90       	pop	r11
    1d80:	af 90       	pop	r10
    1d82:	9f 90       	pop	r9
    1d84:	8f 90       	pop	r8
    1d86:	7f 90       	pop	r7
    1d88:	6f 90       	pop	r6
    1d8a:	5f 90       	pop	r5
    1d8c:	4f 90       	pop	r4
    1d8e:	08 95       	ret

00001d90 <_ZN8REPEATER4stopEv>:
 *
 * Stop repeater
 */
void REPEATER::stop(void)
{
  enabled = false;
    1d90:	8f 55       	subi	r24, 0x5F	; 95
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	fc 01       	movw	r30, r24
    1d96:	10 82       	st	Z, r1
    1d98:	08 95       	ret

00001d9a <__divmodhi4>:
    1d9a:	97 fb       	bst	r25, 7
    1d9c:	07 2e       	mov	r0, r23
    1d9e:	16 f4       	brtc	.+4      	; 0x1da4 <__divmodhi4+0xa>
    1da0:	00 94       	com	r0
    1da2:	07 d0       	rcall	.+14     	; 0x1db2 <__divmodhi4_neg1>
    1da4:	77 fd       	sbrc	r23, 7
    1da6:	09 d0       	rcall	.+18     	; 0x1dba <__divmodhi4_neg2>
    1da8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodhi4>
    1dac:	07 fc       	sbrc	r0, 7
    1dae:	05 d0       	rcall	.+10     	; 0x1dba <__divmodhi4_neg2>
    1db0:	3e f4       	brtc	.+14     	; 0x1dc0 <__divmodhi4_exit>

00001db2 <__divmodhi4_neg1>:
    1db2:	90 95       	com	r25
    1db4:	81 95       	neg	r24
    1db6:	9f 4f       	sbci	r25, 0xFF	; 255
    1db8:	08 95       	ret

00001dba <__divmodhi4_neg2>:
    1dba:	70 95       	com	r23
    1dbc:	61 95       	neg	r22
    1dbe:	7f 4f       	sbci	r23, 0xFF	; 255

00001dc0 <__divmodhi4_exit>:
    1dc0:	08 95       	ret

00001dc2 <__udivmodhi4>:
    1dc2:	aa 1b       	sub	r26, r26
    1dc4:	bb 1b       	sub	r27, r27
    1dc6:	51 e1       	ldi	r21, 0x11	; 17
    1dc8:	07 c0       	rjmp	.+14     	; 0x1dd8 <__udivmodhi4_ep>

00001dca <__udivmodhi4_loop>:
    1dca:	aa 1f       	adc	r26, r26
    1dcc:	bb 1f       	adc	r27, r27
    1dce:	a6 17       	cp	r26, r22
    1dd0:	b7 07       	cpc	r27, r23
    1dd2:	10 f0       	brcs	.+4      	; 0x1dd8 <__udivmodhi4_ep>
    1dd4:	a6 1b       	sub	r26, r22
    1dd6:	b7 0b       	sbc	r27, r23

00001dd8 <__udivmodhi4_ep>:
    1dd8:	88 1f       	adc	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	5a 95       	dec	r21
    1dde:	a9 f7       	brne	.-22     	; 0x1dca <__udivmodhi4_loop>
    1de0:	80 95       	com	r24
    1de2:	90 95       	com	r25
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	08 95       	ret

00001dea <__tablejump2__>:
    1dea:	ee 0f       	add	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	05 90       	lpm	r0, Z+
    1df0:	f4 91       	lpm	r31, Z
    1df2:	e0 2d       	mov	r30, r0
    1df4:	09 94       	ijmp

00001df6 <eeprom_read_byte>:
    1df6:	f9 99       	sbic	0x1f, 1	; 31
    1df8:	fe cf       	rjmp	.-4      	; 0x1df6 <eeprom_read_byte>
    1dfa:	92 bd       	out	0x22, r25	; 34
    1dfc:	81 bd       	out	0x21, r24	; 33
    1dfe:	f8 9a       	sbi	0x1f, 0	; 31
    1e00:	99 27       	eor	r25, r25
    1e02:	80 b5       	in	r24, 0x20	; 32
    1e04:	08 95       	ret

00001e06 <eeprom_write_byte>:
    1e06:	26 2f       	mov	r18, r22

00001e08 <eeprom_write_r18>:
    1e08:	f9 99       	sbic	0x1f, 1	; 31
    1e0a:	fe cf       	rjmp	.-4      	; 0x1e08 <eeprom_write_r18>
    1e0c:	1f ba       	out	0x1f, r1	; 31
    1e0e:	92 bd       	out	0x22, r25	; 34
    1e10:	81 bd       	out	0x21, r24	; 33
    1e12:	20 bd       	out	0x20, r18	; 32
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	fa 9a       	sbi	0x1f, 2	; 31
    1e1a:	f9 9a       	sbi	0x1f, 1	; 31
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	08 95       	ret

00001e22 <_exit>:
    1e22:	f8 94       	cli

00001e24 <__stop_program>:
    1e24:	ff cf       	rjmp	.-2      	; 0x1e24 <__stop_program>
